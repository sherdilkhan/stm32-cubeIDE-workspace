
stm32f411_rtos1_bme280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800ab90  0800ab90  0001ab90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b064  0800b064  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b06c  0800b06c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b78  200001e0  0800b254  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d58  0800b254  00024d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3f9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af0  00000000  00000000  0003d609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  00041100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00042900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019427  00000000  00000000  00043fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad06  00000000  00000000  0005d3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009caec  00000000  00000000  000780ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114bd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007844  00000000  00000000  00114c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab74 	.word	0x0800ab74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800ab74 	.word	0x0800ab74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9bf 	b.w	8000ff8 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b974 	b.w	8000ff8 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468e      	mov	lr, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14d      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4694      	mov	ip, r2
 8000d3a:	d969      	bls.n	8000e10 <__udivmoddi4+0xe8>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b152      	cbz	r2, 8000d58 <__udivmoddi4+0x30>
 8000d42:	fa01 f302 	lsl.w	r3, r1, r2
 8000d46:	f1c2 0120 	rsb	r1, r2, #32
 8000d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d52:	ea41 0e03 	orr.w	lr, r1, r3
 8000d56:	4094      	lsls	r4, r2
 8000d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d5c:	0c21      	lsrs	r1, r4, #16
 8000d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d62:	fa1f f78c 	uxth.w	r7, ip
 8000d66:	fb08 e316 	mls	r3, r8, r6, lr
 8000d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6e:	fb06 f107 	mul.w	r1, r6, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7e:	f080 811f 	bcs.w	8000fc0 <__udivmoddi4+0x298>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 811c 	bls.w	8000fc0 <__udivmoddi4+0x298>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a5b      	subs	r3, r3, r1
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d9c:	fb00 f707 	mul.w	r7, r0, r7
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x92>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	f080 810a 	bcs.w	8000fc4 <__udivmoddi4+0x29c>
 8000db0:	42a7      	cmp	r7, r4
 8000db2:	f240 8107 	bls.w	8000fc4 <__udivmoddi4+0x29c>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dbe:	1be4      	subs	r4, r4, r7
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	b11d      	cbz	r5, 8000dcc <__udivmoddi4+0xa4>
 8000dc4:	40d4      	lsrs	r4, r2
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d909      	bls.n	8000dea <__udivmoddi4+0xc2>
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	f000 80ef 	beq.w	8000fba <__udivmoddi4+0x292>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	e9c5 0100 	strd	r0, r1, [r5]
 8000de2:	4630      	mov	r0, r6
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	fab3 f683 	clz	r6, r3
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d14a      	bne.n	8000e88 <__udivmoddi4+0x160>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xd4>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 80f9 	bhi.w	8000fee <__udivmoddi4+0x2c6>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	469e      	mov	lr, r3
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e0      	beq.n	8000dcc <__udivmoddi4+0xa4>
 8000e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0e:	e7dd      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000e10:	b902      	cbnz	r2, 8000e14 <__udivmoddi4+0xec>
 8000e12:	deff      	udf	#255	; 0xff
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	f040 8092 	bne.w	8000f42 <__udivmoddi4+0x21a>
 8000e1e:	eba1 010c 	sub.w	r1, r1, ip
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	2601      	movs	r6, #1
 8000e2c:	0c20      	lsrs	r0, r4, #16
 8000e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e32:	fb07 1113 	mls	r1, r7, r3, r1
 8000e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3a:	fb0e f003 	mul.w	r0, lr, r3
 8000e3e:	4288      	cmp	r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x12c>
 8000e42:	eb1c 0101 	adds.w	r1, ip, r1
 8000e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x12a>
 8000e4c:	4288      	cmp	r0, r1
 8000e4e:	f200 80cb 	bhi.w	8000fe8 <__udivmoddi4+0x2c0>
 8000e52:	4643      	mov	r3, r8
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e64:	fb0e fe00 	mul.w	lr, lr, r0
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x156>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x154>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2ca>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	eba4 040e 	sub.w	r4, r4, lr
 8000e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e86:	e79c      	b.n	8000dc2 <__udivmoddi4+0x9a>
 8000e88:	f1c6 0720 	rsb	r7, r6, #32
 8000e8c:	40b3      	lsls	r3, r6
 8000e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e96:	fa20 f407 	lsr.w	r4, r0, r7
 8000e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	40f9      	lsrs	r1, r7
 8000ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eae:	0c20      	lsrs	r0, r4, #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec6:	d90b      	bls.n	8000ee0 <__udivmoddi4+0x1b8>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed0:	f080 8088 	bcs.w	8000fe4 <__udivmoddi4+0x2bc>
 8000ed4:	4288      	cmp	r0, r1
 8000ed6:	f240 8085 	bls.w	8000fe4 <__udivmoddi4+0x2bc>
 8000eda:	f1a8 0802 	sub.w	r8, r8, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1a09      	subs	r1, r1, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef4:	458e      	cmp	lr, r1
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x1e2>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f00:	d26c      	bcs.n	8000fdc <__udivmoddi4+0x2b4>
 8000f02:	458e      	cmp	lr, r1
 8000f04:	d96a      	bls.n	8000fdc <__udivmoddi4+0x2b4>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4461      	add	r1, ip
 8000f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f12:	eba1 010e 	sub.w	r1, r1, lr
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	46c8      	mov	r8, r9
 8000f1a:	46a6      	mov	lr, r4
 8000f1c:	d356      	bcc.n	8000fcc <__udivmoddi4+0x2a4>
 8000f1e:	d053      	beq.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f20:	b15d      	cbz	r5, 8000f3a <__udivmoddi4+0x212>
 8000f22:	ebb3 0208 	subs.w	r2, r3, r8
 8000f26:	eb61 010e 	sbc.w	r1, r1, lr
 8000f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f32:	40f1      	lsrs	r1, r6
 8000f34:	431f      	orrs	r7, r3
 8000f36:	e9c5 7100 	strd	r7, r1, [r5]
 8000f3a:	2600      	movs	r6, #0
 8000f3c:	4631      	mov	r1, r6
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	f1c2 0320 	rsb	r3, r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f50:	4091      	lsls	r1, r2
 8000f52:	4301      	orrs	r1, r0
 8000f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f58:	fa1f fe8c 	uxth.w	lr, ip
 8000f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f60:	fb07 3610 	mls	r6, r7, r0, r3
 8000f64:	0c0b      	lsrs	r3, r1, #16
 8000f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6e:	429e      	cmp	r6, r3
 8000f70:	fa04 f402 	lsl.w	r4, r4, r2
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x260>
 8000f76:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7e:	d22f      	bcs.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d92d      	bls.n	8000fe0 <__udivmoddi4+0x2b8>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1b9b      	subs	r3, r3, r6
 8000f8a:	b289      	uxth	r1, r1
 8000f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f90:	fb07 3316 	mls	r3, r7, r6, r3
 8000f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f98:	fb06 f30e 	mul.w	r3, r6, lr
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x28a>
 8000fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa8:	d216      	bcs.n	8000fd8 <__udivmoddi4+0x2b0>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d914      	bls.n	8000fd8 <__udivmoddi4+0x2b0>
 8000fae:	3e02      	subs	r6, #2
 8000fb0:	4461      	add	r1, ip
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb8:	e738      	b.n	8000e2c <__udivmoddi4+0x104>
 8000fba:	462e      	mov	r6, r5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	e705      	b.n	8000dcc <__udivmoddi4+0xa4>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	e6e3      	b.n	8000d8c <__udivmoddi4+0x64>
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	e6f8      	b.n	8000dba <__udivmoddi4+0x92>
 8000fc8:	454b      	cmp	r3, r9
 8000fca:	d2a9      	bcs.n	8000f20 <__udivmoddi4+0x1f8>
 8000fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	e7a3      	b.n	8000f20 <__udivmoddi4+0x1f8>
 8000fd8:	4646      	mov	r6, r8
 8000fda:	e7ea      	b.n	8000fb2 <__udivmoddi4+0x28a>
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e794      	b.n	8000f0a <__udivmoddi4+0x1e2>
 8000fe0:	4640      	mov	r0, r8
 8000fe2:	e7d1      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fe4:	46d0      	mov	r8, sl
 8000fe6:	e77b      	b.n	8000ee0 <__udivmoddi4+0x1b8>
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	4461      	add	r1, ip
 8000fec:	e732      	b.n	8000e54 <__udivmoddi4+0x12c>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e709      	b.n	8000e06 <__udivmoddi4+0xde>
 8000ff2:	4464      	add	r4, ip
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x156>

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2319      	movs	r3, #25
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	463b      	mov	r3, r7
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2288      	movs	r2, #136	; 0x88
 8001014:	21ec      	movs	r1, #236	; 0xec
 8001016:	4857      	ldr	r0, [pc, #348]	; (8001174 <TrimRead+0x178>)
 8001018:	f001 ff78 	bl	8002f0c <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 800101c:	463b      	mov	r3, r7
 800101e:	3319      	adds	r3, #25
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	9202      	str	r2, [sp, #8]
 8001026:	2207      	movs	r2, #7
 8001028:	9201      	str	r2, [sp, #4]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	22e1      	movs	r2, #225	; 0xe1
 8001030:	21ec      	movs	r1, #236	; 0xec
 8001032:	4850      	ldr	r0, [pc, #320]	; (8001174 <TrimRead+0x178>)
 8001034:	f001 ff6a 	bl	8002f0c <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001038:	787b      	ldrb	r3, [r7, #1]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	783b      	ldrb	r3, [r7, #0]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <TrimRead+0x17c>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b48      	ldr	r3, [pc, #288]	; (800117c <TrimRead+0x180>)
 800105c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	793b      	ldrb	r3, [r7, #4]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b44      	ldr	r3, [pc, #272]	; (8001180 <TrimRead+0x184>)
 800106e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b40      	ldr	r3, [pc, #256]	; (8001184 <TrimRead+0x188>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001084:	7a7b      	ldrb	r3, [r7, #9]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <TrimRead+0x18c>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001096:	7afb      	ldrb	r3, [r7, #11]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <TrimRead+0x190>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <TrimRead+0x194>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <TrimRead+0x198>)
 80010ca:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010cc:	7c7b      	ldrb	r3, [r7, #17]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7c3b      	ldrb	r3, [r7, #16]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <TrimRead+0x19c>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010de:	7cfb      	ldrb	r3, [r7, #19]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7cbb      	ldrb	r3, [r7, #18]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <TrimRead+0x1a0>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010f0:	7d7b      	ldrb	r3, [r7, #21]
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	7d3b      	ldrb	r3, [r7, #20]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <TrimRead+0x1a4>)
 8001100:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <TrimRead+0x1a8>)
 8001112:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001114:	7e3b      	ldrb	r3, [r7, #24]
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <TrimRead+0x1ac>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 800111c:	7ebb      	ldrb	r3, [r7, #26]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7e7b      	ldrb	r3, [r7, #25]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <TrimRead+0x1b0>)
 800112c:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800112e:	7efb      	ldrb	r3, [r7, #27]
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <TrimRead+0x1b4>)
 8001134:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001136:	7f3b      	ldrb	r3, [r7, #28]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b21a      	sxth	r2, r3
 800113c:	7f7b      	ldrb	r3, [r7, #29]
 800113e:	b21b      	sxth	r3, r3
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <TrimRead+0x1b8>)
 800114c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800114e:	7fbb      	ldrb	r3, [r7, #30]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	b21a      	sxth	r2, r3
 8001154:	7f7b      	ldrb	r3, [r7, #29]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	b2db      	uxtb	r3, r3
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <TrimRead+0x1bc>)
 8001162:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <TrimRead+0x1c0>)
 800116a:	801a      	strh	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000234 	.word	0x20000234
 8001178:	2000020c 	.word	0x2000020c
 800117c:	20000214 	.word	0x20000214
 8001180:	20000216 	.word	0x20000216
 8001184:	2000020e 	.word	0x2000020e
 8001188:	20000218 	.word	0x20000218
 800118c:	2000021a 	.word	0x2000021a
 8001190:	2000021c 	.word	0x2000021c
 8001194:	2000021e 	.word	0x2000021e
 8001198:	20000220 	.word	0x20000220
 800119c:	20000222 	.word	0x20000222
 80011a0:	20000224 	.word	0x20000224
 80011a4:	20000226 	.word	0x20000226
 80011a8:	20000210 	.word	0x20000210
 80011ac:	20000228 	.word	0x20000228
 80011b0:	20000212 	.word	0x20000212
 80011b4:	2000022a 	.word	0x2000022a
 80011b8:	2000022c 	.word	0x2000022c
 80011bc:	2000022e 	.word	0x2000022e

080011c0 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	4603      	mov	r3, r0
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	460b      	mov	r3, r1
 80011d8:	717b      	strb	r3, [r7, #5]
 80011da:	4613      	mov	r3, r2
 80011dc:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011de:	f7ff ff0d 	bl	8000ffc <TrimRead>


	uint8_t datatowrite = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011ea:	23b6      	movs	r3, #182	; 0xb6
 80011ec:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	22e0      	movs	r2, #224	; 0xe0
 8001202:	21ec      	movs	r1, #236	; 0xec
 8001204:	4858      	ldr	r0, [pc, #352]	; (8001368 <BME280_Config+0x1a8>)
 8001206:	f001 fd87 	bl	8002d18 <HAL_I2C_Mem_Write>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <BME280_Config+0x56>
	{
		return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	e0a3      	b.n	800135e <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8001216:	2064      	movs	r0, #100	; 0x64
 8001218:	f001 f996 	bl	8002548 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 800121c:	797b      	ldrb	r3, [r7, #5]
 800121e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	f107 030f 	add.w	r3, r7, #15
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	22f2      	movs	r2, #242	; 0xf2
 8001234:	21ec      	movs	r1, #236	; 0xec
 8001236:	484c      	ldr	r0, [pc, #304]	; (8001368 <BME280_Config+0x1a8>)
 8001238:	f001 fd6e 	bl	8002d18 <HAL_I2C_Mem_Write>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <BME280_Config+0x88>
	{
		return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e08a      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001248:	2064      	movs	r0, #100	; 0x64
 800124a:	f001 f97d 	bl	8002548 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 030e 	add.w	r3, r7, #14
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	22f2      	movs	r2, #242	; 0xf2
 8001262:	21ec      	movs	r1, #236	; 0xec
 8001264:	4840      	ldr	r0, [pc, #256]	; (8001368 <BME280_Config+0x1a8>)
 8001266:	f001 fe51 	bl	8002f0c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800126a:	7bba      	ldrb	r2, [r7, #14]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	429a      	cmp	r2, r3
 8001270:	d002      	beq.n	8001278 <BME280_Config+0xb8>
	{
		return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e072      	b.n	800135e <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001278:	f897 3020 	ldrb.w	r3, [r7, #32]
 800127c:	015b      	lsls	r3, r3, #5
 800127e:	b25a      	sxtb	r2, r3
 8001280:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 030f 	add.w	r3, r7, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	22f5      	movs	r2, #245	; 0xf5
 80012a4:	21ec      	movs	r1, #236	; 0xec
 80012a6:	4830      	ldr	r0, [pc, #192]	; (8001368 <BME280_Config+0x1a8>)
 80012a8:	f001 fd36 	bl	8002d18 <HAL_I2C_Mem_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <BME280_Config+0xf8>
	{
		return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e052      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f001 f945 	bl	8002548 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f107 030e 	add.w	r3, r7, #14
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	22f5      	movs	r2, #245	; 0xf5
 80012d2:	21ec      	movs	r1, #236	; 0xec
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <BME280_Config+0x1a8>)
 80012d6:	f001 fe19 	bl	8002f0c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012da:	7bba      	ldrb	r2, [r7, #14]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d002      	beq.n	80012e8 <BME280_Config+0x128>
	{
		return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	e03a      	b.n	800135e <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2301      	movs	r3, #1
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030f 	add.w	r3, r7, #15
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	22f4      	movs	r2, #244	; 0xf4
 8001318:	21ec      	movs	r1, #236	; 0xec
 800131a:	4813      	ldr	r0, [pc, #76]	; (8001368 <BME280_Config+0x1a8>)
 800131c:	f001 fcfc 	bl	8002d18 <HAL_I2C_Mem_Write>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <BME280_Config+0x16c>
	{
		return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e018      	b.n	800135e <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800132c:	2064      	movs	r0, #100	; 0x64
 800132e:	f001 f90b 	bl	8002548 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f107 030e 	add.w	r3, r7, #14
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2301      	movs	r3, #1
 8001344:	22f4      	movs	r2, #244	; 0xf4
 8001346:	21ec      	movs	r1, #236	; 0xec
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <BME280_Config+0x1a8>)
 800134a:	f001 fddf 	bl	8002f0c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800134e:	7bba      	ldrb	r2, [r7, #14]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	429a      	cmp	r2, r3
 8001354:	d002      	beq.n	800135c <BME280_Config+0x19c>
	{
		return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e000      	b.n	800135e <BME280_Config+0x19e>
	}

	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000234 	.word	0x20000234

0800136c <BMEReadRaw>:


int BMEReadRaw(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2301      	movs	r3, #1
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <BMEReadRaw+0x8c>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	22d0      	movs	r2, #208	; 0xd0
 8001384:	21ec      	movs	r1, #236	; 0xec
 8001386:	481d      	ldr	r0, [pc, #116]	; (80013fc <BMEReadRaw+0x90>)
 8001388:	f001 fdc0 	bl	8002f0c <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <BMEReadRaw+0x8c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b60      	cmp	r3, #96	; 0x60
 8001392:	d12a      	bne.n	80013ea <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2308      	movs	r3, #8
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	463b      	mov	r3, r7
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	22f7      	movs	r2, #247	; 0xf7
 80013a6:	21ec      	movs	r1, #236	; 0xec
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <BMEReadRaw+0x90>)
 80013aa:	f001 fdaf 	bl	8002f0c <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013ae:	783b      	ldrb	r3, [r7, #0]
 80013b0:	031a      	lsls	r2, r3, #12
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4313      	orrs	r3, r2
 80013b8:	78ba      	ldrb	r2, [r7, #2]
 80013ba:	0912      	lsrs	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	4313      	orrs	r3, r2
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <BMEReadRaw+0x94>)
 80013c2:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	031a      	lsls	r2, r3, #12
 80013c8:	793b      	ldrb	r3, [r7, #4]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4313      	orrs	r3, r2
 80013ce:	797a      	ldrb	r2, [r7, #5]
 80013d0:	0912      	lsrs	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	4313      	orrs	r3, r2
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <BMEReadRaw+0x98>)
 80013d8:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <BMEReadRaw+0x9c>)
 80013e4:	6013      	str	r3, [r2, #0]

		return 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e001      	b.n	80013ee <BMEReadRaw+0x82>
	}

	else return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001fc 	.word	0x200001fc
 80013fc:	20000234 	.word	0x20000234
 8001400:	20000204 	.word	0x20000204
 8001404:	20000200 	.word	0x20000200
 8001408:	20000208 	.word	0x20000208

0800140c <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	10da      	asrs	r2, r3, #3
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <BME280_compensate_T_int32+0x74>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	4a18      	ldr	r2, [pc, #96]	; (8001484 <BME280_compensate_T_int32+0x78>)
 8001422:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	12db      	asrs	r3, r3, #11
 800142c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	111b      	asrs	r3, r3, #4
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <BME280_compensate_T_int32+0x74>)
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	1112      	asrs	r2, r2, #4
 800143c:	4910      	ldr	r1, [pc, #64]	; (8001480 <BME280_compensate_T_int32+0x74>)
 800143e:	8809      	ldrh	r1, [r1, #0]
 8001440:	1a52      	subs	r2, r2, r1
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	131b      	asrs	r3, r3, #12
 8001448:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <BME280_compensate_T_int32+0x7c>)
 800144a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	139b      	asrs	r3, r3, #14
 8001454:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4413      	add	r3, r2
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <BME280_compensate_T_int32+0x80>)
 800145e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <BME280_compensate_T_int32+0x80>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3380      	adds	r3, #128	; 0x80
 800146c:	121b      	asrs	r3, r3, #8
 800146e:	60fb      	str	r3, [r7, #12]
	return T;
 8001470:	68fb      	ldr	r3, [r7, #12]
}
 8001472:	4618      	mov	r0, r3
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000020c 	.word	0x2000020c
 8001484:	20000214 	.word	0x20000214
 8001488:	20000216 	.word	0x20000216
 800148c:	20000230 	.word	0x20000230

08001490 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001494:	b0ca      	sub	sp, #296	; 0x128
 8001496:	af00      	add	r7, sp, #0
 8001498:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800149c:	4baf      	ldr	r3, [pc, #700]	; (800175c <BME280_compensate_P_int64+0x2cc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	17da      	asrs	r2, r3, #31
 80014a2:	461c      	mov	r4, r3
 80014a4:	4615      	mov	r5, r2
 80014a6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014aa:	f145 3bff 	adc.w	fp, r5, #4294967295
 80014ae:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ba:	fb03 f102 	mul.w	r1, r3, r2
 80014be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	18ca      	adds	r2, r1, r3
 80014cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d0:	fba3 8903 	umull	r8, r9, r3, r3
 80014d4:	eb02 0309 	add.w	r3, r2, r9
 80014d8:	4699      	mov	r9, r3
 80014da:	4ba1      	ldr	r3, [pc, #644]	; (8001760 <BME280_compensate_P_int64+0x2d0>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80014f0:	4603      	mov	r3, r0
 80014f2:	fb03 f209 	mul.w	r2, r3, r9
 80014f6:	460b      	mov	r3, r1
 80014f8:	fb08 f303 	mul.w	r3, r8, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	4602      	mov	r2, r0
 8001500:	fba8 1202 	umull	r1, r2, r8, r2
 8001504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001508:	460a      	mov	r2, r1
 800150a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800150e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001512:	4413      	add	r3, r2
 8001514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001518:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800151c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001520:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001524:	4b8f      	ldr	r3, [pc, #572]	; (8001764 <BME280_compensate_P_int64+0x2d4>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	b21b      	sxth	r3, r3
 800152c:	17da      	asrs	r2, r3, #31
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001532:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001536:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800153e:	462a      	mov	r2, r5
 8001540:	fb02 f203 	mul.w	r2, r2, r3
 8001544:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001548:	4621      	mov	r1, r4
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	441a      	add	r2, r3
 8001550:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001554:	4621      	mov	r1, r4
 8001556:	fba3 1301 	umull	r1, r3, r3, r1
 800155a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800155e:	460b      	mov	r3, r1
 8001560:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800157a:	462b      	mov	r3, r5
 800157c:	0459      	lsls	r1, r3, #17
 800157e:	4623      	mov	r3, r4
 8001580:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001584:	4623      	mov	r3, r4
 8001586:	0458      	lsls	r0, r3, #17
 8001588:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800158c:	1814      	adds	r4, r2, r0
 800158e:	643c      	str	r4, [r7, #64]	; 0x40
 8001590:	414b      	adcs	r3, r1
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
 8001594:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001598:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800159c:	4b72      	ldr	r3, [pc, #456]	; (8001768 <BME280_compensate_P_int64+0x2d8>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	17da      	asrs	r2, r3, #31
 80015a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015aa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015ae:	f04f 0000 	mov.w	r0, #0
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ba:	00d9      	lsls	r1, r3, #3
 80015bc:	2000      	movs	r0, #0
 80015be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015c2:	1814      	adds	r4, r2, r0
 80015c4:	63bc      	str	r4, [r7, #56]	; 0x38
 80015c6:	414b      	adcs	r3, r1
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ca:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015da:	fb03 f102 	mul.w	r1, r3, r2
 80015de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	18ca      	adds	r2, r1, r3
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015f0:	fba3 1303 	umull	r1, r3, r3, r3
 80015f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015f8:	460b      	mov	r3, r1
 80015fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001602:	18d3      	adds	r3, r2, r3
 8001604:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001608:	4b58      	ldr	r3, [pc, #352]	; (800176c <BME280_compensate_P_int64+0x2dc>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	b21b      	sxth	r3, r3
 8001610:	17da      	asrs	r2, r3, #31
 8001612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001616:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800161a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800161e:	462b      	mov	r3, r5
 8001620:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001624:	4642      	mov	r2, r8
 8001626:	fb02 f203 	mul.w	r2, r2, r3
 800162a:	464b      	mov	r3, r9
 800162c:	4621      	mov	r1, r4
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	4622      	mov	r2, r4
 8001636:	4641      	mov	r1, r8
 8001638:	fba2 1201 	umull	r1, r2, r2, r1
 800163c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001640:	460a      	mov	r2, r1
 8001642:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001646:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800164a:	4413      	add	r3, r2
 800164c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	f04f 0100 	mov.w	r1, #0
 8001658:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800165c:	4623      	mov	r3, r4
 800165e:	0a18      	lsrs	r0, r3, #8
 8001660:	462b      	mov	r3, r5
 8001662:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001666:	462b      	mov	r3, r5
 8001668:	1219      	asrs	r1, r3, #8
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <BME280_compensate_P_int64+0x2e0>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001678:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800167c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001680:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001684:	464a      	mov	r2, r9
 8001686:	fb02 f203 	mul.w	r2, r2, r3
 800168a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800168e:	4644      	mov	r4, r8
 8001690:	fb04 f303 	mul.w	r3, r4, r3
 8001694:	441a      	add	r2, r3
 8001696:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169a:	4644      	mov	r4, r8
 800169c:	fba3 4304 	umull	r4, r3, r3, r4
 80016a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016a4:	4623      	mov	r3, r4
 80016a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016c0:	464c      	mov	r4, r9
 80016c2:	0323      	lsls	r3, r4, #12
 80016c4:	4644      	mov	r4, r8
 80016c6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016ca:	4644      	mov	r4, r8
 80016cc:	0322      	lsls	r2, r4, #12
 80016ce:	1884      	adds	r4, r0, r2
 80016d0:	633c      	str	r4, [r7, #48]	; 0x30
 80016d2:	eb41 0303 	adc.w	r3, r1, r3
 80016d6:	637b      	str	r3, [r7, #52]	; 0x34
 80016d8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80016dc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016e4:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80016e8:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80016ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <BME280_compensate_P_int64+0x2e4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2200      	movs	r2, #0
 80016f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001700:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001704:	462b      	mov	r3, r5
 8001706:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800170a:	4642      	mov	r2, r8
 800170c:	fb02 f203 	mul.w	r2, r2, r3
 8001710:	464b      	mov	r3, r9
 8001712:	4621      	mov	r1, r4
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	4622      	mov	r2, r4
 800171c:	4641      	mov	r1, r8
 800171e:	fba2 1201 	umull	r1, r2, r2, r1
 8001722:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001726:	460a      	mov	r2, r1
 8001728:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800172c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001730:	4413      	add	r3, r2
 8001732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001742:	4629      	mov	r1, r5
 8001744:	104a      	asrs	r2, r1, #1
 8001746:	4629      	mov	r1, r5
 8001748:	17cb      	asrs	r3, r1, #31
 800174a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800174e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001752:	4313      	orrs	r3, r2
 8001754:	d110      	bne.n	8001778 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001756:	2300      	movs	r3, #0
 8001758:	e154      	b.n	8001a04 <BME280_compensate_P_int64+0x574>
 800175a:	bf00      	nop
 800175c:	20000230 	.word	0x20000230
 8001760:	20000220 	.word	0x20000220
 8001764:	2000021e 	.word	0x2000021e
 8001768:	2000021c 	.word	0x2000021c
 800176c:	2000021a 	.word	0x2000021a
 8001770:	20000218 	.word	0x20000218
 8001774:	2000020e 	.word	0x2000020e
	}
	p = 1048576-adc_P;
 8001778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800177c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
 8001784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001786:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800178a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800178e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001792:	105b      	asrs	r3, r3, #1
 8001794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001798:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800179c:	07db      	lsls	r3, r3, #31
 800179e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017a6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017aa:	4621      	mov	r1, r4
 80017ac:	1a89      	subs	r1, r1, r2
 80017ae:	67b9      	str	r1, [r7, #120]	; 0x78
 80017b0:	4629      	mov	r1, r5
 80017b2:	eb61 0303 	sbc.w	r3, r1, r3
 80017b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017b8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017bc:	4622      	mov	r2, r4
 80017be:	462b      	mov	r3, r5
 80017c0:	1891      	adds	r1, r2, r2
 80017c2:	6239      	str	r1, [r7, #32]
 80017c4:	415b      	adcs	r3, r3
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017cc:	4621      	mov	r1, r4
 80017ce:	1851      	adds	r1, r2, r1
 80017d0:	61b9      	str	r1, [r7, #24]
 80017d2:	4629      	mov	r1, r5
 80017d4:	414b      	adcs	r3, r1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017e4:	4649      	mov	r1, r9
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4641      	mov	r1, r8
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4641      	mov	r1, r8
 80017f4:	1889      	adds	r1, r1, r2
 80017f6:	6139      	str	r1, [r7, #16]
 80017f8:	4649      	mov	r1, r9
 80017fa:	eb43 0101 	adc.w	r1, r3, r1
 80017fe:	6179      	str	r1, [r7, #20]
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800180c:	4649      	mov	r1, r9
 800180e:	008b      	lsls	r3, r1, #2
 8001810:	4641      	mov	r1, r8
 8001812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001816:	4641      	mov	r1, r8
 8001818:	008a      	lsls	r2, r1, #2
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	4603      	mov	r3, r0
 8001820:	4622      	mov	r2, r4
 8001822:	189b      	adds	r3, r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	460b      	mov	r3, r1
 8001828:	462a      	mov	r2, r5
 800182a:	eb42 0303 	adc.w	r3, r2, r3
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800183c:	4649      	mov	r1, r9
 800183e:	008b      	lsls	r3, r1, #2
 8001840:	4641      	mov	r1, r8
 8001842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001846:	4641      	mov	r1, r8
 8001848:	008a      	lsls	r2, r1, #2
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	4603      	mov	r3, r0
 8001850:	4622      	mov	r2, r4
 8001852:	189b      	adds	r3, r3, r2
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
 8001856:	462b      	mov	r3, r5
 8001858:	460a      	mov	r2, r1
 800185a:	eb42 0303 	adc.w	r3, r2, r3
 800185e:	677b      	str	r3, [r7, #116]	; 0x74
 8001860:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001864:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001868:	f7ff f9f6 	bl	8000c58 <__aeabi_ldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <BME280_compensate_P_int64+0x580>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	b21b      	sxth	r3, r3
 800187c:	17da      	asrs	r2, r3, #31
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001880:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001882:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	f04f 0100 	mov.w	r1, #0
 800188e:	0b50      	lsrs	r0, r2, #13
 8001890:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001894:	1359      	asrs	r1, r3, #13
 8001896:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800189a:	462b      	mov	r3, r5
 800189c:	fb00 f203 	mul.w	r2, r0, r3
 80018a0:	4623      	mov	r3, r4
 80018a2:	fb03 f301 	mul.w	r3, r3, r1
 80018a6:	4413      	add	r3, r2
 80018a8:	4622      	mov	r2, r4
 80018aa:	fba2 1200 	umull	r1, r2, r2, r0
 80018ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018b2:	460a      	mov	r2, r1
 80018b4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018bc:	4413      	add	r3, r2
 80018be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018c2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0b50      	lsrs	r0, r2, #13
 80018d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018d4:	1359      	asrs	r1, r3, #13
 80018d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018da:	462b      	mov	r3, r5
 80018dc:	fb00 f203 	mul.w	r2, r0, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	fb03 f301 	mul.w	r3, r3, r1
 80018e6:	4413      	add	r3, r2
 80018e8:	4622      	mov	r2, r4
 80018ea:	fba2 1200 	umull	r1, r2, r2, r0
 80018ee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018f2:	460a      	mov	r2, r1
 80018f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018fc:	4413      	add	r3, r2
 80018fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800190e:	4621      	mov	r1, r4
 8001910:	0e4a      	lsrs	r2, r1, #25
 8001912:	4629      	mov	r1, r5
 8001914:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001918:	4629      	mov	r1, r5
 800191a:	164b      	asrs	r3, r1, #25
 800191c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <BME280_compensate_P_int64+0x584>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	663b      	str	r3, [r7, #96]	; 0x60
 800192c:	667a      	str	r2, [r7, #100]	; 0x64
 800192e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001932:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001936:	462a      	mov	r2, r5
 8001938:	fb02 f203 	mul.w	r2, r2, r3
 800193c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001940:	4621      	mov	r1, r4
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800194c:	4621      	mov	r1, r4
 800194e:	fba2 1201 	umull	r1, r2, r2, r1
 8001952:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001956:	460a      	mov	r2, r1
 8001958:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800195c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001960:	4413      	add	r3, r2
 8001962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001972:	4621      	mov	r1, r4
 8001974:	0cca      	lsrs	r2, r1, #19
 8001976:	4629      	mov	r1, r5
 8001978:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800197c:	4629      	mov	r1, r5
 800197e:	14cb      	asrs	r3, r1, #19
 8001980:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001984:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001988:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800198c:	1884      	adds	r4, r0, r2
 800198e:	65bc      	str	r4, [r7, #88]	; 0x58
 8001990:	eb41 0303 	adc.w	r3, r1, r3
 8001994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001996:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800199a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800199e:	4621      	mov	r1, r4
 80019a0:	1889      	adds	r1, r1, r2
 80019a2:	6539      	str	r1, [r7, #80]	; 0x50
 80019a4:	4629      	mov	r1, r5
 80019a6:	eb43 0101 	adc.w	r1, r3, r1
 80019aa:	6579      	str	r1, [r7, #84]	; 0x54
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019b8:	4623      	mov	r3, r4
 80019ba:	0a18      	lsrs	r0, r3, #8
 80019bc:	462b      	mov	r3, r5
 80019be:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019c2:	462b      	mov	r3, r5
 80019c4:	1219      	asrs	r1, r3, #8
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <BME280_compensate_P_int64+0x588>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	17da      	asrs	r2, r3, #31
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80019e0:	464c      	mov	r4, r9
 80019e2:	0123      	lsls	r3, r4, #4
 80019e4:	4644      	mov	r4, r8
 80019e6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019ea:	4644      	mov	r4, r8
 80019ec:	0122      	lsls	r2, r4, #4
 80019ee:	1884      	adds	r4, r0, r2
 80019f0:	603c      	str	r4, [r7, #0]
 80019f2:	eb41 0303 	adc.w	r3, r1, r3
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019fc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a10:	20000226 	.word	0x20000226
 8001a14:	20000224 	.word	0x20000224
 8001a18:	20000222 	.word	0x20000222

08001a1c <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <bme280_compensate_H_int32+0xbc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a2c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	039a      	lsls	r2, r3, #14
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <bme280_compensate_H_int32+0xc0>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	1ad2      	subs	r2, r2, r3
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <bme280_compensate_H_int32+0xc4>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	4619      	mov	r1, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a50:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a52:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <bme280_compensate_H_int32+0xc8>)
 8001a54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a58:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a60:	1292      	asrs	r2, r2, #10
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <bme280_compensate_H_int32+0xcc>)
 8001a64:	8809      	ldrh	r1, [r1, #0]
 8001a66:	4608      	mov	r0, r1
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	fb00 f101 	mul.w	r1, r0, r1
 8001a6e:	12c9      	asrs	r1, r1, #11
 8001a70:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001a74:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a78:	1292      	asrs	r2, r2, #10
 8001a7a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001a7e:	491b      	ldr	r1, [pc, #108]	; (8001aec <bme280_compensate_H_int32+0xd0>)
 8001a80:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a84:	fb01 f202 	mul.w	r2, r1, r2
 8001a88:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001a8c:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	13db      	asrs	r3, r3, #15
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	13d2      	asrs	r2, r2, #15
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <bme280_compensate_H_int32+0xd4>)
 8001aa4:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001aaa:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ab8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ac0:	bfa8      	it	ge
 8001ac2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001ac6:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	131b      	asrs	r3, r3, #12
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	20000230 	.word	0x20000230
 8001adc:	2000022a 	.word	0x2000022a
 8001ae0:	2000022c 	.word	0x2000022c
 8001ae4:	2000022e 	.word	0x2000022e
 8001ae8:	20000212 	.word	0x20000212
 8001aec:	20000228 	.word	0x20000228
 8001af0:	20000210 	.word	0x20000210

08001af4 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001af8:	f7ff fc38 	bl	800136c <BMEReadRaw>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d163      	bne.n	8001bca <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <BME280_Measure+0xf4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b0a:	d104      	bne.n	8001b16 <BME280_Measure+0x22>
 8001b0c:	4b37      	ldr	r3, [pc, #220]	; (8001bec <BME280_Measure+0xf8>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e016      	b.n	8001b44 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <BME280_Measure+0xf4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc76 	bl	800140c <BME280_compensate_T_int32>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd06 	bl	8000534 <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <BME280_Measure+0xfc>)
 8001b2e:	f7fe fe95 	bl	800085c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f83d 	bl	8000bb8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <BME280_Measure+0xf8>)
 8001b42:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <BME280_Measure+0x100>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b4c:	d104      	bne.n	8001b58 <BME280_Measure+0x64>
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <BME280_Measure+0x104>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e016      	b.n	8001b86 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <BME280_Measure+0x100>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fc97 	bl	8001490 <BME280_compensate_P_int64>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fcd5 	bl	8000514 <__aeabi_ui2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <BME280_Measure+0x108>)
 8001b70:	f7fe fe74 	bl	800085c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f81c 	bl	8000bb8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <BME280_Measure+0x104>)
 8001b84:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <BME280_Measure+0x10c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b8e:	d104      	bne.n	8001b9a <BME280_Measure+0xa6>
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <BME280_Measure+0x110>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001b98:	e023      	b.n	8001be2 <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <BME280_Measure+0x10c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff3c 	bl	8001a1c <bme280_compensate_H_int32>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcb4 	bl	8000514 <__aeabi_ui2d>
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <BME280_Measure+0x114>)
 8001bb2:	f7fe fe53 	bl	800085c <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe fffb 	bl	8000bb8 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <BME280_Measure+0x110>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	e00b      	b.n	8001be2 <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <BME280_Measure+0x110>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <BME280_Measure+0x110>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <BME280_Measure+0x104>)
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <BME280_Measure+0x104>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <BME280_Measure+0xf8>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000200 	.word	0x20000200
 8001bec:	200002dc 	.word	0x200002dc
 8001bf0:	40590000 	.word	0x40590000
 8001bf4:	20000204 	.word	0x20000204
 8001bf8:	200002e0 	.word	0x200002e0
 8001bfc:	40700000 	.word	0x40700000
 8001c00:	20000208 	.word	0x20000208
 8001c04:	200002e4 	.word	0x200002e4
 8001c08:	40900000 	.word	0x40900000

08001c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c12:	f000 fc57 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c16:	f000 f849 	bl	8001cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1a:	f000 f907 	bl	8001e2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c1e:	f000 f8db 	bl	8001dd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c22:	f000 f8ab 	bl	8001d7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001c26:	2304      	movs	r3, #4
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2303      	movs	r3, #3
 8001c30:	2201      	movs	r2, #1
 8001c32:	2105      	movs	r1, #5
 8001c34:	2002      	movs	r0, #2
 8001c36:	f7ff fac3 	bl	80011c0 <BME280_Config>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c3a:	f003 f9f9 	bl	8005030 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <main+0x74>)
 8001c40:	2100      	movs	r1, #0
 8001c42:	4810      	ldr	r0, [pc, #64]	; (8001c84 <main+0x78>)
 8001c44:	f003 fa3e 	bl	80050c4 <osThreadNew>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <main+0x7c>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* creation of task1 */
  task1Handle = osThreadNew(task1_init, NULL, &task1_attributes);
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <main+0x80>)
 8001c50:	2100      	movs	r1, #0
 8001c52:	480f      	ldr	r0, [pc, #60]	; (8001c90 <main+0x84>)
 8001c54:	f003 fa36 	bl	80050c4 <osThreadNew>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <main+0x88>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(task2_init, NULL, &task2_attributes);
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <main+0x8c>)
 8001c60:	2100      	movs	r1, #0
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <main+0x90>)
 8001c64:	f003 fa2e 	bl	80050c4 <osThreadNew>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <main+0x94>)
 8001c6c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of myEvent01 */
  myEvent01Handle = osEventFlagsNew(&myEvent01_attributes);
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <main+0x98>)
 8001c70:	f003 fad5 	bl	800521e <osEventFlagsNew>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <main+0x9c>)
 8001c78:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c7a:	f003 f9fd 	bl	8005078 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <main+0x72>
 8001c80:	0800abf4 	.word	0x0800abf4
 8001c84:	08001f1d 	.word	0x08001f1d
 8001c88:	200002cc 	.word	0x200002cc
 8001c8c:	0800ac18 	.word	0x0800ac18
 8001c90:	08001f31 	.word	0x08001f31
 8001c94:	200002d0 	.word	0x200002d0
 8001c98:	0800ac3c 	.word	0x0800ac3c
 8001c9c:	08001f6d 	.word	0x08001f6d
 8001ca0:	200002d4 	.word	0x200002d4
 8001ca4:	0800ac60 	.word	0x0800ac60
 8001ca8:	200002d8 	.word	0x200002d8

08001cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b094      	sub	sp, #80	; 0x50
 8001cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	2230      	movs	r2, #48	; 0x30
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f006 f8f7 	bl	8007eae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <SystemClock_Config+0xc8>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a26      	ldr	r2, [pc, #152]	; (8001d74 <SystemClock_Config+0xc8>)
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <SystemClock_Config+0xc8>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <SystemClock_Config+0xcc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <SystemClock_Config+0xcc>)
 8001cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <SystemClock_Config+0xcc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d12:	2302      	movs	r3, #2
 8001d14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 207;
 8001d20:	23cf      	movs	r3, #207	; 0xcf
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001d24:	2306      	movs	r3, #6
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001d28:	2305      	movs	r3, #5
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fe6d 	bl	8003a10 <HAL_RCC_OscConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d3c:	f000 f96c 	bl	8002018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d40:	230f      	movs	r3, #15
 8001d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d44:	2302      	movs	r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 f8cf 	bl	8003f00 <HAL_RCC_ClockConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d68:	f000 f956 	bl	8002018 <Error_Handler>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3750      	adds	r7, #80	; 0x50
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000

08001d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001d82:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <MX_I2C1_Init+0x54>)
 8001d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <MX_I2C1_Init+0x58>)
 8001d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_I2C1_Init+0x50>)
 8001dba:	f000 fe69 	bl	8002a90 <HAL_I2C_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dc4:	f000 f928 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000234 	.word	0x20000234
 8001dd0:	40005400 	.word	0x40005400
 8001dd4:	000186a0 	.word	0x000186a0

08001dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_USART2_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001de4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e10:	f002 fd08 	bl	8004824 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f000 f8fd 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000288 	.word	0x20000288
 8001e28:	40004400 	.word	0x40004400

08001e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_GPIO_Init+0xe4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb8:	4816      	ldr	r0, [pc, #88]	; (8001f14 <MX_GPIO_Init+0xe8>)
 8001eba:	f000 fdcf 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f241 0104 	movw	r1, #4100	; 0x1004
 8001ec4:	4814      	ldr	r0, [pc, #80]	; (8001f18 <MX_GPIO_Init+0xec>)
 8001ec6:	f000 fdc9 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480c      	ldr	r0, [pc, #48]	; (8001f14 <MX_GPIO_Init+0xe8>)
 8001ee4:	f000 fc36 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8001ee8:	f241 0304 	movw	r3, #4100	; 0x1004
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_GPIO_Init+0xec>)
 8001f02:	f000 fc27 	bl	8002754 <HAL_GPIO_Init>

}
 8001f06:	bf00      	nop
 8001f08:	3728      	adds	r7, #40	; 0x28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020400 	.word	0x40020400

08001f1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(pdMS_TO_TICKS(500));
 8001f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f28:	f003 f95e 	bl	80051e8 <osDelay>
 8001f2c:	e7fa      	b.n	8001f24 <StartDefaultTask+0x8>
	...

08001f30 <task1_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_init */
void task1_init(void *argument)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task1_init */
  /* Infinite loop */
  for(;;)
  {
  osDelay(pdMS_TO_TICKS(500));
 8001f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f3c:	f003 f954 	bl	80051e8 <osDelay>
  // acquire
  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <task1_init+0x34>)
 8001f42:	f107 040c 	add.w	r4, r7, #12
 8001f46:	461d      	mov	r5, r3
 8001f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	8023      	strh	r3, [r4, #0]
  // release
  HAL_UART_Transmit(&huart2, Test, sizeof(Test), pdMS_TO_TICKS(1000));	// Sending in normal mode
 8001f50:	f107 010c 	add.w	r1, r7, #12
 8001f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f58:	2212      	movs	r2, #18
 8001f5a:	4803      	ldr	r0, [pc, #12]	; (8001f68 <task1_init+0x38>)
 8001f5c:	f002 fcaf 	bl	80048be <HAL_UART_Transmit>
  {
 8001f60:	e7ea      	b.n	8001f38 <task1_init+0x8>
 8001f62:	bf00      	nop
 8001f64:	0800abb8 	.word	0x0800abb8
 8001f68:	20000288 	.word	0x20000288

08001f6c <task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_init */
void task2_init(void *argument)
{
 8001f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f70:	b0a8      	sub	sp, #160	; 0xa0
 8001f72:	af06      	add	r7, sp, #24
 8001f74:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	// for I2C Read
	//osDelay(pdMS_TO_TICKS(100));
	  osDelay(pdMS_TO_TICKS(100));
 8001f76:	2064      	movs	r0, #100	; 0x64
 8001f78:	f003 f936 	bl	80051e8 <osDelay>
	//acquire
	BME280_Measure();
 8001f7c:	f7ff fdba 	bl	8001af4 <BME280_Measure>
	// release
	snprintf(buffer, 128, "%f, %f, %f\r\n", Temperature, Humidity, Pressure);
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <task2_init+0x74>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fae7 	bl	8000558 <__aeabi_f2d>
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	460d      	mov	r5, r1
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <task2_init+0x78>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fae0 	bl	8000558 <__aeabi_f2d>
 8001f98:	4680      	mov	r8, r0
 8001f9a:	4689      	mov	r9, r1
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <task2_init+0x7c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fad9 	bl	8000558 <__aeabi_f2d>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	f107 0008 	add.w	r0, r7, #8
 8001fae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001fb2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001fb6:	e9cd 4500 	strd	r4, r5, [sp]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <task2_init+0x80>)
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	f006 fcf7 	bl	80089b0 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), pdMS_TO_TICKS(1000));	// Sending in normal mode
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe f90a 	bl	80001e0 <strlen>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f107 0108 	add.w	r1, r7, #8
 8001fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <task2_init+0x84>)
 8001fda:	f002 fc70 	bl	80048be <HAL_UART_Transmit>
	  osDelay(pdMS_TO_TICKS(100));
 8001fde:	e7ca      	b.n	8001f76 <task2_init+0xa>
 8001fe0:	200002dc 	.word	0x200002dc
 8001fe4:	200002e4 	.word	0x200002e4
 8001fe8:	200002e0 	.word	0x200002e0
 8001fec:	0800abcc 	.word	0x0800abcc
 8001ff0:	20000288 	.word	0x20000288

08001ff4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002006:	f000 fa7f 	bl	8002508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40014000 	.word	0x40014000

08002018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002020:	e7fe      	b.n	8002020 <Error_Handler+0x8>
	...

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_MspInit+0x54>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_MspInit+0x54>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x54>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_MspInit+0x54>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_MspInit+0x54>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_MspInit+0x54>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	210f      	movs	r1, #15
 8002066:	f06f 0001 	mvn.w	r0, #1
 800206a:	f000 fb49 	bl	8002700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a19      	ldr	r2, [pc, #100]	; (8002100 <HAL_I2C_MspInit+0x84>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12b      	bne.n	80020f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ba:	23c0      	movs	r3, #192	; 0xc0
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020be:	2312      	movs	r3, #18
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ca:	2304      	movs	r3, #4
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <HAL_I2C_MspInit+0x8c>)
 80020d6:	f000 fb3d 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_I2C_MspInit+0x88>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3728      	adds	r7, #40	; 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40005400 	.word	0x40005400
 8002104:	40023800 	.word	0x40023800
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_UART_MspInit+0x84>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d12b      	bne.n	8002186 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_UART_MspInit+0x88>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a17      	ldr	r2, [pc, #92]	; (8002194 <HAL_UART_MspInit+0x88>)
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_UART_MspInit+0x88>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_UART_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_UART_MspInit+0x88>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_UART_MspInit+0x88>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002166:	230c      	movs	r3, #12
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002176:	2307      	movs	r3, #7
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <HAL_UART_MspInit+0x8c>)
 8002182:	f000 fae7 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40004400 	.word	0x40004400
 8002194:	40023800 	.word	0x40023800
 8002198:	40020000 	.word	0x40020000

0800219c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	; 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <HAL_InitTick+0xd0>)
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	4a2d      	ldr	r2, [pc, #180]	; (800226c <HAL_InitTick+0xd0>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6453      	str	r3, [r2, #68]	; 0x44
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <HAL_InitTick+0xd0>)
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021c8:	f107 020c 	add.w	r2, r7, #12
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 f874 	bl	80042c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021d8:	f002 f85e 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 80021dc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <HAL_InitTick+0xd4>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0c9b      	lsrs	r3, r3, #18
 80021e8:	3b01      	subs	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_InitTick+0xd8>)
 80021ee:	4a22      	ldr	r2, [pc, #136]	; (8002278 <HAL_InitTick+0xdc>)
 80021f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_InitTick+0xd8>)
 80021f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021f8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80021fa:	4a1e      	ldr	r2, [pc, #120]	; (8002274 <HAL_InitTick+0xd8>)
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_InitTick+0xd8>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_InitTick+0xd8>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_InitTick+0xd8>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8002212:	4818      	ldr	r0, [pc, #96]	; (8002274 <HAL_InitTick+0xd8>)
 8002214:	f002 f886 	bl	8004324 <HAL_TIM_Base_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800221e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11b      	bne.n	800225e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8002226:	4813      	ldr	r0, [pc, #76]	; (8002274 <HAL_InitTick+0xd8>)
 8002228:	f002 f8d6 	bl	80043d8 <HAL_TIM_Base_Start_IT>
 800222c:	4603      	mov	r3, r0
 800222e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002236:	2b00      	cmp	r3, #0
 8002238:	d111      	bne.n	800225e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800223a:	2018      	movs	r0, #24
 800223c:	f000 fa7c 	bl	8002738 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	d808      	bhi.n	8002258 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8002246:	2200      	movs	r2, #0
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	2018      	movs	r0, #24
 800224c:	f000 fa58 	bl	8002700 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_InitTick+0xe0>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e002      	b.n	800225e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800225e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002262:	4618      	mov	r0, r3
 8002264:	3730      	adds	r7, #48	; 0x30
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	431bde83 	.word	0x431bde83
 8002274:	200002e8 	.word	0x200002e8
 8002278:	40014000 	.word	0x40014000
 800227c:	20000004 	.word	0x20000004

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <NMI_Handler+0x4>

08002286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <HardFault_Handler+0x4>

0800228c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <MemManage_Handler+0x4>

08002292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <BusFault_Handler+0x4>

08002298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <UsageFault_Handler+0x4>

0800229e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80022b2:	f002 f8f3 	bl	800449c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200002e8 	.word	0x200002e8

080022c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
	return 1;
 80022c4:	2301      	movs	r3, #1
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_kill>:

int _kill(int pid, int sig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022da:	f005 fcb7 	bl	8007c4c <__errno>
 80022de:	4603      	mov	r3, r0
 80022e0:	2216      	movs	r2, #22
 80022e2:	601a      	str	r2, [r3, #0]
	return -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_exit>:

void _exit (int status)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ffe7 	bl	80022d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002302:	e7fe      	b.n	8002302 <_exit+0x12>

08002304 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e00a      	b.n	800232c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002316:	f3af 8000 	nop.w
 800231a:	4601      	mov	r1, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	b2ca      	uxtb	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf0      	blt.n	8002316 <_read+0x12>
	}

return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e009      	b.n	8002364 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60ba      	str	r2, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf1      	blt.n	8002350 <_write+0x12>
	}
	return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_close>:

int _close(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	return -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	605a      	str	r2, [r3, #4]
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_isatty>:

int _isatty(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
	return 1;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f005 fc1c 	bl	8007c4c <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20020000 	.word	0x20020000
 8002440:	00000400 	.word	0x00000400
 8002444:	20000330 	.word	0x20000330
 8002448:	20004d58 	.word	0x20004d58

0800244c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002476:	490e      	ldr	r1, [pc, #56]	; (80024b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800248c:	4c0b      	ldr	r4, [pc, #44]	; (80024bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800249a:	f7ff ffd7 	bl	800244c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249e:	f005 fcd1 	bl	8007e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7ff fbb3 	bl	8001c0c <main>
  bx  lr    
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024b4:	0800b074 	.word	0x0800b074
  ldr r2, =_sbss
 80024b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024bc:	20004d58 	.word	0x20004d58

080024c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0d      	ldr	r2, [pc, #52]	; (8002504 <HAL_Init+0x40>)
 80024ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_Init+0x40>)
 80024da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_Init+0x40>)
 80024e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 f8fc 	bl	80026ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f2:	200f      	movs	r0, #15
 80024f4:	f7ff fe52 	bl	800219c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f8:	f7ff fd94 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00

08002508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x24>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_IncTick+0x24>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000008 	.word	0x20000008
 800252c:	20000334 	.word	0x20000334

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000334 	.word	0x20000334

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff ffee 	bl	8002530 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800256e:	bf00      	nop
 8002570:	f7ff ffde 	bl	8002530 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000008 	.word	0x20000008

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <__NVIC_EnableIRQ+0x38>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff4c 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002712:	f7ff ff61 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002716:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f7ff ffb1 	bl	8002684 <NVIC_EncodePriority>
 8002722:	4602      	mov	r2, r0
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff80 	bl	8002630 <__NVIC_SetPriority>
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff54 	bl	80025f4 <__NVIC_EnableIRQ>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e159      	b.n	8002a24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8148 	bne.w	8002a1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d005      	beq.n	80027a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d130      	bne.n	8002808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 0201 	and.w	r2, r3, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b03      	cmp	r3, #3
 8002812:	d017      	beq.n	8002844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d123      	bne.n	8002898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	08da      	lsrs	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3208      	adds	r2, #8
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	69b9      	ldr	r1, [r7, #24]
 8002894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0203 	and.w	r2, r3, #3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a2 	beq.w	8002a1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b57      	ldr	r3, [pc, #348]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f6:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <HAL_GPIO_Init+0x2ec>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a49      	ldr	r2, [pc, #292]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d019      	beq.n	8002956 <HAL_GPIO_Init+0x202>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a48      	ldr	r2, [pc, #288]	; (8002a48 <HAL_GPIO_Init+0x2f4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x1fe>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a47      	ldr	r2, [pc, #284]	; (8002a4c <HAL_GPIO_Init+0x2f8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00d      	beq.n	800294e <HAL_GPIO_Init+0x1fa>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a46      	ldr	r2, [pc, #280]	; (8002a50 <HAL_GPIO_Init+0x2fc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <HAL_GPIO_Init+0x1f6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a45      	ldr	r2, [pc, #276]	; (8002a54 <HAL_GPIO_Init+0x300>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <HAL_GPIO_Init+0x1f2>
 8002942:	2304      	movs	r3, #4
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x204>
 8002946:	2307      	movs	r3, #7
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x204>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x204>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x204>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x204>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002968:	4935      	ldr	r1, [pc, #212]	; (8002a40 <HAL_GPIO_Init+0x2ec>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <HAL_GPIO_Init+0x304>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299a:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <HAL_GPIO_Init+0x304>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a0:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c4:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ee:	4a1a      	ldr	r2, [pc, #104]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_GPIO_Init+0x304>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a18:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <HAL_GPIO_Init+0x304>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f aea2 	bls.w	8002770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40013c00 	.word	0x40013c00

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e12b      	b.n	8002cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fae0 	bl	800207c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2224      	movs	r2, #36	; 0x24
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002af4:	f001 fbbc 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8002af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4a81      	ldr	r2, [pc, #516]	; (8002d04 <HAL_I2C_Init+0x274>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d807      	bhi.n	8002b14 <HAL_I2C_Init+0x84>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a80      	ldr	r2, [pc, #512]	; (8002d08 <HAL_I2C_Init+0x278>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e006      	b.n	8002b22 <HAL_I2C_Init+0x92>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a7d      	ldr	r2, [pc, #500]	; (8002d0c <HAL_I2C_Init+0x27c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bf94      	ite	ls
 8002b1c:	2301      	movls	r3, #1
 8002b1e:	2300      	movhi	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0e7      	b.n	8002cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a78      	ldr	r2, [pc, #480]	; (8002d10 <HAL_I2C_Init+0x280>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	0c9b      	lsrs	r3, r3, #18
 8002b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a6a      	ldr	r2, [pc, #424]	; (8002d04 <HAL_I2C_Init+0x274>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d802      	bhi.n	8002b64 <HAL_I2C_Init+0xd4>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3301      	adds	r3, #1
 8002b62:	e009      	b.n	8002b78 <HAL_I2C_Init+0xe8>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	4a69      	ldr	r2, [pc, #420]	; (8002d14 <HAL_I2C_Init+0x284>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	3301      	adds	r3, #1
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	495c      	ldr	r1, [pc, #368]	; (8002d04 <HAL_I2C_Init+0x274>)
 8002b94:	428b      	cmp	r3, r1
 8002b96:	d819      	bhi.n	8002bcc <HAL_I2C_Init+0x13c>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e59      	subs	r1, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba6:	1c59      	adds	r1, r3, #1
 8002ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bac:	400b      	ands	r3, r1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_I2C_Init+0x138>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e59      	subs	r1, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc6:	e051      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	e04f      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d111      	bne.n	8002bf8 <HAL_I2C_Init+0x168>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	440b      	add	r3, r1
 8002be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e012      	b.n	8002c1e <HAL_I2C_Init+0x18e>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	0099      	lsls	r1, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x196>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e022      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <HAL_I2C_Init+0x1bc>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1e58      	subs	r0, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	440b      	add	r3, r1
 8002c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4a:	e00f      	b.n	8002c6c <HAL_I2C_Init+0x1dc>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	6809      	ldr	r1, [r1, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6911      	ldr	r1, [r2, #16]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68d2      	ldr	r2, [r2, #12]
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	000186a0 	.word	0x000186a0
 8002d08:	001e847f 	.word	0x001e847f
 8002d0c:	003d08ff 	.word	0x003d08ff
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	10624dd3 	.word	0x10624dd3

08002d18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d32:	f7ff fbfd 	bl	8002530 <HAL_GetTick>
 8002d36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	f040 80d9 	bne.w	8002ef8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2319      	movs	r3, #25
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	496d      	ldr	r1, [pc, #436]	; (8002f04 <HAL_I2C_Mem_Write+0x1ec>)
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fc7f 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e0cc      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_Mem_Write+0x56>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0c5      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d007      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2221      	movs	r2, #33	; 0x21
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a3a      	ldr	r2, [r7, #32]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a4d      	ldr	r2, [pc, #308]	; (8002f08 <HAL_I2C_Mem_Write+0x1f0>)
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dd6:	88f8      	ldrh	r0, [r7, #6]
 8002dd8:	893a      	ldrh	r2, [r7, #8]
 8002dda:	8979      	ldrh	r1, [r7, #10]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4603      	mov	r3, r0
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fab6 	bl	8003358 <I2C_RequestMemoryWrite>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d052      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e081      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fd00 	bl	8003800 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d107      	bne.n	8002e1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06b      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d11b      	bne.n	8002e98 <HAL_I2C_Mem_Write+0x180>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d017      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1aa      	bne.n	8002df6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fcec 	bl	8003882 <I2C_WaitOnBTFFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d107      	bne.n	8002ec8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e016      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	00100002 	.word	0x00100002
 8002f08:	ffff0000 	.word	0xffff0000

08002f0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f26:	f7ff fb03 	bl	8002530 <HAL_GetTick>
 8002f2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	f040 8208 	bne.w	800334a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2319      	movs	r3, #25
 8002f40:	2201      	movs	r2, #1
 8002f42:	497b      	ldr	r1, [pc, #492]	; (8003130 <HAL_I2C_Mem_Read+0x224>)
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fb85 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
 8002f52:	e1fb      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_I2C_Mem_Read+0x56>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e1f4      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d007      	beq.n	8002f88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2222      	movs	r2, #34	; 0x22
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2240      	movs	r2, #64	; 0x40
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <HAL_I2C_Mem_Read+0x228>)
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fca:	88f8      	ldrh	r0, [r7, #6]
 8002fcc:	893a      	ldrh	r2, [r7, #8]
 8002fce:	8979      	ldrh	r1, [r7, #10]
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4603      	mov	r3, r0
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa52 	bl	8003484 <I2C_RequestMemoryRead>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1b0      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d113      	bne.n	800301a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	623b      	str	r3, [r7, #32]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e184      	b.n	8003324 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	2b01      	cmp	r3, #1
 8003020:	d11b      	bne.n	800305a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e164      	b.n	8003324 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	2b02      	cmp	r3, #2
 8003060:	d11b      	bne.n	800309a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	e144      	b.n	8003324 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030b0:	e138      	b.n	8003324 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	f200 80f1 	bhi.w	800329e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d123      	bne.n	800310c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fc1b 	bl	8003904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e139      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	; 0x2a
 800310a:	e10b      	b.n	8003324 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	2b02      	cmp	r3, #2
 8003112:	d14e      	bne.n	80031b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	2200      	movs	r2, #0
 800311c:	4906      	ldr	r1, [pc, #24]	; (8003138 <HAL_I2C_Mem_Read+0x22c>)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fa98 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e10e      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
 800312e:	bf00      	nop
 8003130:	00100002 	.word	0x00100002
 8003134:	ffff0000 	.word	0xffff0000
 8003138:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031b0:	e0b8      	b.n	8003324 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	2200      	movs	r2, #0
 80031ba:	4966      	ldr	r1, [pc, #408]	; (8003354 <HAL_I2C_Mem_Read+0x448>)
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fa49 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0bf      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	2200      	movs	r2, #0
 8003216:	494f      	ldr	r1, [pc, #316]	; (8003354 <HAL_I2C_Mem_Read+0x448>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fa1b 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e091      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800329c:	e042      	b.n	8003324 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fb2e 	bl	8003904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e04c      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d118      	bne.n	8003324 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	2b00      	cmp	r3, #0
 800332a:	f47f aec2 	bne.w	80030b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
  }
}
 800334c:	4618      	mov	r0, r3
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	00010004 	.word	0x00010004

08003358 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4603      	mov	r3, r0
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	460b      	mov	r3, r1
 800336c:	813b      	strh	r3, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	2200      	movs	r2, #0
 800338a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f960 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a8:	d103      	bne.n	80033b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e05f      	b.n	8003476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	492d      	ldr	r1, [pc, #180]	; (8003480 <I2C_RequestMemoryWrite+0x128>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f998 	bl	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e04c      	b.n	8003476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	6a39      	ldr	r1, [r7, #32]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa02 	bl	8003800 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b04      	cmp	r3, #4
 8003408:	d107      	bne.n	800341a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e02b      	b.n	8003476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003424:	893b      	ldrh	r3, [r7, #8]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	e021      	b.n	8003474 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	b29b      	uxth	r3, r3
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	6a39      	ldr	r1, [r7, #32]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f9dc 	bl	8003800 <I2C_WaitOnTXEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b04      	cmp	r3, #4
 8003454:	d107      	bne.n	8003466 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e005      	b.n	8003476 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800346a:	893b      	ldrh	r3, [r7, #8]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	4608      	mov	r0, r1
 800348e:	4611      	mov	r1, r2
 8003490:	461a      	mov	r2, r3
 8003492:	4603      	mov	r3, r0
 8003494:	817b      	strh	r3, [r7, #10]
 8003496:	460b      	mov	r3, r1
 8003498:	813b      	strh	r3, [r7, #8]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8c2 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e4:	d103      	bne.n	80034ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0aa      	b.n	8003648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	4952      	ldr	r1, [pc, #328]	; (8003650 <I2C_RequestMemoryRead+0x1cc>)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f8fa 	bl	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e097      	b.n	8003648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	6a39      	ldr	r1, [r7, #32]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f964 	bl	8003800 <I2C_WaitOnTXEFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	2b04      	cmp	r3, #4
 8003544:	d107      	bne.n	8003556 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e076      	b.n	8003648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d105      	bne.n	800356c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003560:	893b      	ldrh	r3, [r7, #8]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	611a      	str	r2, [r3, #16]
 800356a:	e021      	b.n	80035b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800356c:	893b      	ldrh	r3, [r7, #8]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	b29b      	uxth	r3, r3
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357c:	6a39      	ldr	r1, [r7, #32]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f93e 	bl	8003800 <I2C_WaitOnTXEFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b04      	cmp	r3, #4
 8003590:	d107      	bne.n	80035a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e050      	b.n	8003648 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a6:	893b      	ldrh	r3, [r7, #8]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	6a39      	ldr	r1, [r7, #32]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f923 	bl	8003800 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d107      	bne.n	80035d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e035      	b.n	8003648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f82b 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00d      	beq.n	8003620 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003612:	d103      	bne.n	800361c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e013      	b.n	8003648 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003620:	897b      	ldrh	r3, [r7, #10]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	6a3a      	ldr	r2, [r7, #32]
 8003634:	4906      	ldr	r1, [pc, #24]	; (8003650 <I2C_RequestMemoryRead+0x1cc>)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f863 	bl	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	00010002 	.word	0x00010002

08003654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003664:	e025      	b.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d021      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fe ff5f 	bl	8002530 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d116      	bne.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e023      	b.n	80036fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10d      	bne.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	e00c      	b.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d0b6      	beq.n	8003666 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003710:	e051      	b.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d123      	bne.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003730:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800373a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e046      	b.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d021      	beq.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fe fedd 	bl	8002530 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d116      	bne.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0220 	orr.w	r2, r3, #32
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e020      	b.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10c      	bne.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf14      	ite	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2300      	moveq	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	e00b      	b.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d18d      	bne.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380c:	e02d      	b.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f8ce 	bl	80039b0 <I2C_IsAcknowledgeFailed>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e02d      	b.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d021      	beq.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe fe83 	bl	8002530 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e007      	b.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d1ca      	bne.n	800380e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800388e:	e02d      	b.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f88d 	bl	80039b0 <I2C_IsAcknowledgeFailed>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e02d      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a6:	d021      	beq.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a8:	f7fe fe42 	bl	8002530 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d116      	bne.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d1ca      	bne.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003910:	e042      	b.n	8003998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b10      	cmp	r3, #16
 800391e:	d119      	bne.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0210 	mvn.w	r2, #16
 8003928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e029      	b.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003954:	f7fe fdec 	bl	8002530 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	d302      	bcc.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d116      	bne.n	8003998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e007      	b.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d1b5      	bne.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d11b      	bne.n	8003a00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e267      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d075      	beq.n	8003b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b7e      	ldr	r3, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e242      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x74>
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x98>
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6f      	ldr	r2, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6c      	ldr	r2, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	4b69      	ldr	r3, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a68      	ldr	r2, [pc, #416]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a65      	ldr	r2, [pc, #404]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fd32 	bl	8002530 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe fd2e 	bl	8002530 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e207      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xc0>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fe fd1e 	bl	8002530 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe fd1a 	bl	8002530 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1f3      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0xe8>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d063      	beq.n	8003bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1c7      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4937      	ldr	r1, [pc, #220]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e03a      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe fcd3 	bl	8002530 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fe fccf 	bl	8002530 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1a8      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4925      	ldr	r1, [pc, #148]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
 8003bc0:	e015      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fcb2 	bl	8002530 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fe fcae 	bl	8002530 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e187      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fe fc92 	bl	8002530 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fe fc8e 	bl	8002530 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e167      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x200>
 8003c2e:	e01b      	b.n	8003c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fe fc7b 	bl	8002530 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e00e      	b.n	8003c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fc77 	bl	8002530 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d907      	bls.n	8003c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e150      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	42470000 	.word	0x42470000
 8003c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ea      	bne.n	8003c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8097 	beq.w	8003da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a7c      	ldr	r2, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b77      	ldr	r3, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d118      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b74      	ldr	r3, [pc, #464]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a73      	ldr	r2, [pc, #460]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fc37 	bl	8002530 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fe fc33 	bl	8002530 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e10c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	4b6a      	ldr	r3, [pc, #424]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2ea>
 8003cec:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a63      	ldr	r2, [pc, #396]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x30c>
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a5b      	ldr	r2, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a54      	ldr	r2, [pc, #336]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fe fbf8 	bl	8002530 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fe fbf4 	bl	8002530 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0cb      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ee      	beq.n	8003d44 <HAL_RCC_OscConfig+0x334>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d68:	f7fe fbe2 	bl	8002530 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fe fbde 	bl	8002530 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0b5      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ee      	bne.n	8003d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	4a38      	ldr	r2, [pc, #224]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a1 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d05c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d141      	bne.n	8003e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fbb2 	bl	8002530 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fe fbae 	bl	8002530 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e087      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	491b      	ldr	r1, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fe fb87 	bl	8002530 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fe fb83 	bl	8002530 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e05c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x416>
 8003e44:	e054      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fb70 	bl	8002530 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fb6c 	bl	8002530 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e045      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x444>
 8003e72:	e03d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e038      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d028      	beq.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d121      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d11a      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cc      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b68      	ldr	r3, [pc, #416]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90c      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a52      	ldr	r2, [pc, #328]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e067      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4934      	ldr	r1, [pc, #208]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fe fa9e 	bl	8002530 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fe fa9a 	bl	8002530 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 020c 	and.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d1eb      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20c      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe f878 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	40023800 	.word	0x40023800
 80040c0:	0800ac70 	.word	0x0800ac70
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000004 	.word	0x20000004

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b090      	sub	sp, #64	; 0x40
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
 80040d8:	2300      	movs	r3, #0
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040dc:	2300      	movs	r3, #0
 80040de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d00d      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x40>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	f200 80a1 	bhi.w	8004238 <HAL_RCC_GetSysClockFreq+0x16c>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fe:	e09b      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b53      	ldr	r3, [pc, #332]	; (8004250 <HAL_RCC_GetSysClockFreq+0x184>)
 8004102:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004104:	e09b      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004106:	4b53      	ldr	r3, [pc, #332]	; (8004254 <HAL_RCC_GetSysClockFreq+0x188>)
 8004108:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800410a:	e098      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800410c:	4b4f      	ldr	r3, [pc, #316]	; (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004116:	4b4d      	ldr	r3, [pc, #308]	; (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d028      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b4a      	ldr	r3, [pc, #296]	; (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	2200      	movs	r2, #0
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	627a      	str	r2, [r7, #36]	; 0x24
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004134:	2100      	movs	r1, #0
 8004136:	4b47      	ldr	r3, [pc, #284]	; (8004254 <HAL_RCC_GetSysClockFreq+0x188>)
 8004138:	fb03 f201 	mul.w	r2, r3, r1
 800413c:	2300      	movs	r3, #0
 800413e:	fb00 f303 	mul.w	r3, r0, r3
 8004142:	4413      	add	r3, r2
 8004144:	4a43      	ldr	r2, [pc, #268]	; (8004254 <HAL_RCC_GetSysClockFreq+0x188>)
 8004146:	fba0 1202 	umull	r1, r2, r0, r2
 800414a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800414c:	460a      	mov	r2, r1
 800414e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004152:	4413      	add	r3, r2
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004158:	2200      	movs	r2, #0
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004166:	f7fc fdc7 	bl	8000cf8 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4613      	mov	r3, r2
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004172:	e053      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004174:	4b35      	ldr	r3, [pc, #212]	; (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	2200      	movs	r2, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	617a      	str	r2, [r7, #20]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004186:	f04f 0b00 	mov.w	fp, #0
 800418a:	4652      	mov	r2, sl
 800418c:	465b      	mov	r3, fp
 800418e:	f04f 0000 	mov.w	r0, #0
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	0159      	lsls	r1, r3, #5
 8004198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419c:	0150      	lsls	r0, r2, #5
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	ebb2 080a 	subs.w	r8, r2, sl
 80041a6:	eb63 090b 	sbc.w	r9, r3, fp
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041be:	ebb2 0408 	subs.w	r4, r2, r8
 80041c2:	eb63 0509 	sbc.w	r5, r3, r9
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	00eb      	lsls	r3, r5, #3
 80041d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d4:	00e2      	lsls	r2, r4, #3
 80041d6:	4614      	mov	r4, r2
 80041d8:	461d      	mov	r5, r3
 80041da:	eb14 030a 	adds.w	r3, r4, sl
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	eb45 030b 	adc.w	r3, r5, fp
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041f2:	4629      	mov	r1, r5
 80041f4:	028b      	lsls	r3, r1, #10
 80041f6:	4621      	mov	r1, r4
 80041f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041fc:	4621      	mov	r1, r4
 80041fe:	028a      	lsls	r2, r1, #10
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	2200      	movs	r2, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	60fa      	str	r2, [r7, #12]
 800420c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004210:	f7fc fd72 	bl	8000cf8 <__aeabi_uldivmod>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4613      	mov	r3, r2
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	3301      	adds	r3, #1
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800422c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004236:	e002      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_RCC_GetSysClockFreq+0x184>)
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800423c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004240:	4618      	mov	r0, r3
 8004242:	3740      	adds	r7, #64	; 0x40
 8004244:	46bd      	mov	sp, r7
 8004246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	00f42400 	.word	0x00f42400
 8004254:	017d7840 	.word	0x017d7840

08004258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <HAL_RCC_GetHCLKFreq+0x14>)
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000000 	.word	0x20000000

08004270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004274:	f7ff fff0 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4903      	ldr	r1, [pc, #12]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	0800ac80 	.word	0x0800ac80

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800429c:	f7ff ffdc 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0b5b      	lsrs	r3, r3, #13
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	0800ac80 	.word	0x0800ac80

080042c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	220f      	movs	r2, #15
 80042ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_RCC_GetClockConfig+0x5c>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0203 	and.w	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_RCC_GetClockConfig+0x5c>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_RCC_GetClockConfig+0x5c>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCC_GetClockConfig+0x5c>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	08db      	lsrs	r3, r3, #3
 80042fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <HAL_RCC_GetClockConfig+0x60>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0207 	and.w	r2, r3, #7
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	601a      	str	r2, [r3, #0]
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	40023c00 	.word	0x40023c00

08004324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e041      	b.n	80043ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f839 	bl	80043c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 f9ca 	bl	80046fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e044      	b.n	800447a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <HAL_TIM_Base_Start_IT+0xb0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d018      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d013      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1a      	ldr	r2, [pc, #104]	; (800448c <HAL_TIM_Base_Start_IT+0xb4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00e      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a19      	ldr	r2, [pc, #100]	; (8004490 <HAL_TIM_Base_Start_IT+0xb8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_TIM_Base_Start_IT+0xbc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x6c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <HAL_TIM_Base_Start_IT+0xc0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d111      	bne.n	8004468 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b06      	cmp	r3, #6
 8004454:	d010      	beq.n	8004478 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	e007      	b.n	8004478 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40014000 	.word	0x40014000

0800449c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0202 	mvn.w	r2, #2
 80044c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f8ee 	bl	80046c0 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f8e0 	bl	80046ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8f1 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0204 	mvn.w	r2, #4
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f8c4 	bl	80046c0 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8b6 	bl	80046ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8c7 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b08      	cmp	r3, #8
 8004558:	d122      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b08      	cmp	r3, #8
 8004566:	d11b      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0208 	mvn.w	r2, #8
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2204      	movs	r2, #4
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f89a 	bl	80046c0 <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f88c 	bl	80046ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f89d 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d122      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d11b      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0210 	mvn.w	r2, #16
 80045c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2208      	movs	r2, #8
 80045ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f870 	bl	80046c0 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f862 	bl	80046ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f873 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d10e      	bne.n	8004620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d107      	bne.n	8004620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0201 	mvn.w	r2, #1
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fd fcea 	bl	8001ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d10e      	bne.n	800464c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d107      	bne.n	800464c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8e2 	bl	8004810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d10e      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d107      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f838 	bl	80046e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b20      	cmp	r3, #32
 8004684:	d10e      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b20      	cmp	r3, #32
 8004692:	d107      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0220 	mvn.w	r2, #32
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8ac 	bl	80047fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a34      	ldr	r2, [pc, #208]	; (80047e0 <TIM_Base_SetConfig+0xe4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00f      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471a:	d00b      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a31      	ldr	r2, [pc, #196]	; (80047e4 <TIM_Base_SetConfig+0xe8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a30      	ldr	r2, [pc, #192]	; (80047e8 <TIM_Base_SetConfig+0xec>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2f      	ldr	r2, [pc, #188]	; (80047ec <TIM_Base_SetConfig+0xf0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <TIM_Base_SetConfig+0xe4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01b      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004754:	d017      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <TIM_Base_SetConfig+0xe8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <TIM_Base_SetConfig+0xec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00f      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a20      	ldr	r2, [pc, #128]	; (80047ec <TIM_Base_SetConfig+0xf0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <TIM_Base_SetConfig+0xf4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <TIM_Base_SetConfig+0xf8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <TIM_Base_SetConfig+0xfc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <TIM_Base_SetConfig+0xe4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d103      	bne.n	80047cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	615a      	str	r2, [r3, #20]
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800

080047fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e03f      	b.n	80048b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd fc5e 	bl	800210c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	; 0x24
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f929 	bl	8004ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800487c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800488c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800489c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b08a      	sub	sp, #40	; 0x28
 80048c2:	af02      	add	r7, sp, #8
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d17c      	bne.n	80049d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_UART_Transmit+0x2c>
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e075      	b.n	80049da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Transmit+0x3e>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e06e      	b.n	80049da <HAL_UART_Transmit+0x11c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004912:	f7fd fe0d 	bl	8002530 <HAL_GetTick>
 8004916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	d108      	bne.n	8004940 <HAL_UART_Transmit+0x82>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e003      	b.n	8004948 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004950:	e02a      	b.n	80049a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f840 	bl	80049e2 <UART_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e036      	b.n	80049da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004980:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	3302      	adds	r3, #2
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	e007      	b.n	800499a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	781a      	ldrb	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	3301      	adds	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1cf      	bne.n	8004952 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f810 	bl	80049e2 <UART_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e006      	b.n	80049da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b090      	sub	sp, #64	; 0x40
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f2:	e050      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d04c      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a02:	f7fd fd95 	bl	8002530 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d241      	bcs.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a32:	637a      	str	r2, [r7, #52]	; 0x34
 8004a34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e5      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	613b      	str	r3, [r7, #16]
   return(result);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a66:	623a      	str	r2, [r7, #32]
 8004a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	69f9      	ldr	r1, [r7, #28]
 8004a6c:	6a3a      	ldr	r2, [r7, #32]
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e00f      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d09f      	beq.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3740      	adds	r7, #64	; 0x40
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac4:	b0c0      	sub	sp, #256	; 0x100
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	68d9      	ldr	r1, [r3, #12]
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	ea40 0301 	orr.w	r3, r0, r1
 8004ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b18:	f021 010c 	bic.w	r1, r1, #12
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b26:	430b      	orrs	r3, r1
 8004b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	6999      	ldr	r1, [r3, #24]
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	ea40 0301 	orr.w	r3, r0, r1
 8004b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b8f      	ldr	r3, [pc, #572]	; (8004d8c <UART_SetConfig+0x2cc>)
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d005      	beq.n	8004b60 <UART_SetConfig+0xa0>
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b8d      	ldr	r3, [pc, #564]	; (8004d90 <UART_SetConfig+0x2d0>)
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d104      	bne.n	8004b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7ff fb9a 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8004b64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b68:	e003      	b.n	8004b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b6a:	f7ff fb81 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8004b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7c:	f040 810c 	bne.w	8004d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b92:	4622      	mov	r2, r4
 8004b94:	462b      	mov	r3, r5
 8004b96:	1891      	adds	r1, r2, r2
 8004b98:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b9a:	415b      	adcs	r3, r3
 8004b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	eb12 0801 	adds.w	r8, r2, r1
 8004ba8:	4629      	mov	r1, r5
 8004baa:	eb43 0901 	adc.w	r9, r3, r1
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bc2:	4690      	mov	r8, r2
 8004bc4:	4699      	mov	r9, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	eb18 0303 	adds.w	r3, r8, r3
 8004bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	eb49 0303 	adc.w	r3, r9, r3
 8004bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004be6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bee:	460b      	mov	r3, r1
 8004bf0:	18db      	adds	r3, r3, r3
 8004bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	eb42 0303 	adc.w	r3, r2, r3
 8004bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8004bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c04:	f7fc f878 	bl	8000cf8 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b61      	ldr	r3, [pc, #388]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	011c      	lsls	r4, r3, #4
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c30:	415b      	adcs	r3, r3
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c38:	4641      	mov	r1, r8
 8004c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c3e:	4649      	mov	r1, r9
 8004c40:	eb43 0b01 	adc.w	fp, r3, r1
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c58:	4692      	mov	sl, r2
 8004c5a:	469b      	mov	fp, r3
 8004c5c:	4643      	mov	r3, r8
 8004c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c66:	464b      	mov	r3, r9
 8004c68:	eb4b 0303 	adc.w	r3, fp, r3
 8004c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c84:	460b      	mov	r3, r1
 8004c86:	18db      	adds	r3, r3, r3
 8004c88:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	eb42 0303 	adc.w	r3, r2, r3
 8004c90:	647b      	str	r3, [r7, #68]	; 0x44
 8004c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c9a:	f7fc f82d 	bl	8000cf8 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	2264      	movs	r2, #100	; 0x64
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	1acb      	subs	r3, r1, r3
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cba:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cc8:	441c      	add	r4, r3
 8004cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6339      	str	r1, [r7, #48]	; 0x30
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d20:	464b      	mov	r3, r9
 8004d22:	460a      	mov	r2, r1
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d40:	460b      	mov	r3, r1
 8004d42:	18db      	adds	r3, r3, r3
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d46:	4613      	mov	r3, r2
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d56:	f7fb ffcf 	bl	8000cf8 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004d60:	fba3 1302 	umull	r1, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	2164      	movs	r1, #100	; 0x64
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	3332      	adds	r3, #50	; 0x32
 8004d72:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <UART_SetConfig+0x2d4>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	f003 0207 	and.w	r2, r3, #7
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4422      	add	r2, r4
 8004d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d88:	e105      	b.n	8004f96 <UART_SetConfig+0x4d6>
 8004d8a:	bf00      	nop
 8004d8c:	40011000 	.word	0x40011000
 8004d90:	40011400 	.word	0x40011400
 8004d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004da2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004daa:	4642      	mov	r2, r8
 8004dac:	464b      	mov	r3, r9
 8004dae:	1891      	adds	r1, r2, r2
 8004db0:	6239      	str	r1, [r7, #32]
 8004db2:	415b      	adcs	r3, r3
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dba:	4641      	mov	r1, r8
 8004dbc:	1854      	adds	r4, r2, r1
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	eb43 0501 	adc.w	r5, r3, r1
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	00eb      	lsls	r3, r5, #3
 8004dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd2:	00e2      	lsls	r2, r4, #3
 8004dd4:	4614      	mov	r4, r2
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	4643      	mov	r3, r8
 8004dda:	18e3      	adds	r3, r4, r3
 8004ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004de0:	464b      	mov	r3, r9
 8004de2:	eb45 0303 	adc.w	r3, r5, r3
 8004de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e06:	4629      	mov	r1, r5
 8004e08:	008b      	lsls	r3, r1, #2
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e10:	4621      	mov	r1, r4
 8004e12:	008a      	lsls	r2, r1, #2
 8004e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e18:	f7fb ff6e 	bl	8000cf8 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4b60      	ldr	r3, [pc, #384]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004e22:	fba3 2302 	umull	r2, r3, r3, r2
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	011c      	lsls	r4, r3, #4
 8004e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	1891      	adds	r1, r2, r2
 8004e42:	61b9      	str	r1, [r7, #24]
 8004e44:	415b      	adcs	r3, r3
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e4c:	4641      	mov	r1, r8
 8004e4e:	1851      	adds	r1, r2, r1
 8004e50:	6139      	str	r1, [r7, #16]
 8004e52:	4649      	mov	r1, r9
 8004e54:	414b      	adcs	r3, r1
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e64:	4659      	mov	r1, fp
 8004e66:	00cb      	lsls	r3, r1, #3
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e6e:	4651      	mov	r1, sl
 8004e70:	00ca      	lsls	r2, r1, #3
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	4603      	mov	r3, r0
 8004e78:	4642      	mov	r2, r8
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e80:	464b      	mov	r3, r9
 8004e82:	460a      	mov	r2, r1
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	008b      	lsls	r3, r1, #2
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eae:	4641      	mov	r1, r8
 8004eb0:	008a      	lsls	r2, r1, #2
 8004eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eb6:	f7fb ff1f 	bl	8000cf8 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a34      	ldr	r2, [pc, #208]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ede:	441c      	add	r4, r3
 8004ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ee8:	677a      	str	r2, [r7, #116]	; 0x74
 8004eea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004eee:	4642      	mov	r2, r8
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	1891      	adds	r1, r2, r2
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	415b      	adcs	r3, r3
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004efe:	4641      	mov	r1, r8
 8004f00:	1851      	adds	r1, r2, r1
 8004f02:	6039      	str	r1, [r7, #0]
 8004f04:	4649      	mov	r1, r9
 8004f06:	414b      	adcs	r3, r1
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f16:	4659      	mov	r1, fp
 8004f18:	00cb      	lsls	r3, r1, #3
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f20:	4651      	mov	r1, sl
 8004f22:	00ca      	lsls	r2, r1, #3
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4642      	mov	r2, r8
 8004f2c:	189b      	adds	r3, r3, r2
 8004f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f30:	464b      	mov	r3, r9
 8004f32:	460a      	mov	r2, r1
 8004f34:	eb42 0303 	adc.w	r3, r2, r3
 8004f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	663b      	str	r3, [r7, #96]	; 0x60
 8004f44:	667a      	str	r2, [r7, #100]	; 0x64
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f52:	4649      	mov	r1, r9
 8004f54:	008b      	lsls	r3, r1, #2
 8004f56:	4641      	mov	r1, r8
 8004f58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	008a      	lsls	r2, r1, #2
 8004f60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f64:	f7fb fec8 	bl	8000cf8 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2164      	movs	r1, #100	; 0x64
 8004f76:	fb01 f303 	mul.w	r3, r1, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	3332      	adds	r3, #50	; 0x32
 8004f80:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <UART_SetConfig+0x4e4>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4422      	add	r2, r4
 8004f94:	609a      	str	r2, [r3, #8]
}
 8004f96:	bf00      	nop
 8004f98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fa2:	bf00      	nop
 8004fa4:	51eb851f 	.word	0x51eb851f

08004fa8 <__NVIC_SetPriority>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	6039      	str	r1, [r7, #0]
 8004fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	db0a      	blt.n	8004fd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	490c      	ldr	r1, [pc, #48]	; (8004ff4 <__NVIC_SetPriority+0x4c>)
 8004fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc6:	0112      	lsls	r2, r2, #4
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	440b      	add	r3, r1
 8004fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004fd0:	e00a      	b.n	8004fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	4908      	ldr	r1, [pc, #32]	; (8004ff8 <__NVIC_SetPriority+0x50>)
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	3b04      	subs	r3, #4
 8004fe0:	0112      	lsls	r2, r2, #4
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	761a      	strb	r2, [r3, #24]
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	e000e100 	.word	0xe000e100
 8004ff8:	e000ed00 	.word	0xe000ed00

08004ffc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005000:	4b05      	ldr	r3, [pc, #20]	; (8005018 <SysTick_Handler+0x1c>)
 8005002:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005004:	f001 fdb8 	bl	8006b78 <xTaskGetSchedulerState>
 8005008:	4603      	mov	r3, r0
 800500a:	2b01      	cmp	r3, #1
 800500c:	d001      	beq.n	8005012 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800500e:	f002 fba3 	bl	8007758 <xPortSysTickHandler>
  }
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	e000e010 	.word	0xe000e010

0800501c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005020:	2100      	movs	r1, #0
 8005022:	f06f 0004 	mvn.w	r0, #4
 8005026:	f7ff ffbf 	bl	8004fa8 <__NVIC_SetPriority>
#endif
}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005036:	f3ef 8305 	mrs	r3, IPSR
 800503a:	603b      	str	r3, [r7, #0]
  return(result);
 800503c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005042:	f06f 0305 	mvn.w	r3, #5
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	e00c      	b.n	8005064 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800504a:	4b0a      	ldr	r3, [pc, #40]	; (8005074 <osKernelInitialize+0x44>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <osKernelInitialize+0x44>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005058:	2300      	movs	r3, #0
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	e002      	b.n	8005064 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800505e:	f04f 33ff 	mov.w	r3, #4294967295
 8005062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005064:	687b      	ldr	r3, [r7, #4]
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000338 	.word	0x20000338

08005078 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800507e:	f3ef 8305 	mrs	r3, IPSR
 8005082:	603b      	str	r3, [r7, #0]
  return(result);
 8005084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <osKernelStart+0x1a>
    stat = osErrorISR;
 800508a:	f06f 0305 	mvn.w	r3, #5
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	e010      	b.n	80050b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <osKernelStart+0x48>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d109      	bne.n	80050ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800509a:	f7ff ffbf 	bl	800501c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800509e:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <osKernelStart+0x48>)
 80050a0:	2202      	movs	r2, #2
 80050a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050a4:	f001 f90c 	bl	80062c0 <vTaskStartScheduler>
      stat = osOK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	e002      	b.n	80050b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050b4:	687b      	ldr	r3, [r7, #4]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000338 	.word	0x20000338

080050c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08e      	sub	sp, #56	; 0x38
 80050c8:	af04      	add	r7, sp, #16
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d4:	f3ef 8305 	mrs	r3, IPSR
 80050d8:	617b      	str	r3, [r7, #20]
  return(result);
 80050da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d17e      	bne.n	80051de <osThreadNew+0x11a>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d07b      	beq.n	80051de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050ea:	2318      	movs	r3, #24
 80050ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
 80050f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d045      	beq.n	800518a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <osThreadNew+0x48>
        name = attr->name;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <osThreadNew+0x6e>
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	2b38      	cmp	r3, #56	; 0x38
 8005124:	d805      	bhi.n	8005132 <osThreadNew+0x6e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <osThreadNew+0x72>
        return (NULL);
 8005132:	2300      	movs	r3, #0
 8005134:	e054      	b.n	80051e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	089b      	lsrs	r3, r3, #2
 8005144:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00e      	beq.n	800516c <osThreadNew+0xa8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2bbb      	cmp	r3, #187	; 0xbb
 8005154:	d90a      	bls.n	800516c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <osThreadNew+0xa8>
        mem = 1;
 8005166:	2301      	movs	r3, #1
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e010      	b.n	800518e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10c      	bne.n	800518e <osThreadNew+0xca>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d108      	bne.n	800518e <osThreadNew+0xca>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <osThreadNew+0xca>
          mem = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e001      	b.n	800518e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d110      	bne.n	80051b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800519c:	9202      	str	r2, [sp, #8]
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6a3a      	ldr	r2, [r7, #32]
 80051a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fe9c 	bl	8005ee8 <xTaskCreateStatic>
 80051b0:	4603      	mov	r3, r0
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	e013      	b.n	80051de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d110      	bne.n	80051de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	b29a      	uxth	r2, r3
 80051c0:	f107 0310 	add.w	r3, r7, #16
 80051c4:	9301      	str	r3, [sp, #4]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fee7 	bl	8005fa2 <xTaskCreate>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d001      	beq.n	80051de <osThreadNew+0x11a>
            hTask = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051de:	693b      	ldr	r3, [r7, #16]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3728      	adds	r7, #40	; 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051f0:	f3ef 8305 	mrs	r3, IPSR
 80051f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80051f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <osDelay+0x1c>
    stat = osErrorISR;
 80051fc:	f06f 0305 	mvn.w	r3, #5
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e007      	b.n	8005214 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <osDelay+0x2c>
      vTaskDelay(ticks);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 f822 	bl	8006258 <vTaskDelay>
    }
  }

  return (stat);
 8005214:	68fb      	ldr	r3, [r7, #12]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800522a:	f3ef 8305 	mrs	r3, IPSR
 800522e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005230:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8005232:	2b00      	cmp	r3, #0
 8005234:	d12d      	bne.n	8005292 <osEventFlagsNew+0x74>
    mem = -1;
 8005236:	f04f 33ff 	mov.w	r3, #4294967295
 800523a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d015      	beq.n	800526e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <osEventFlagsNew+0x3a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b1f      	cmp	r3, #31
 8005250:	d902      	bls.n	8005258 <osEventFlagsNew+0x3a>
        mem = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e00c      	b.n	8005272 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <osEventFlagsNew+0x54>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <osEventFlagsNew+0x54>
          mem = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	e001      	b.n	8005272 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d106      	bne.n	8005286 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f841 	bl	8005304 <xEventGroupCreateStatic>
 8005282:	6178      	str	r0, [r7, #20]
 8005284:	e005      	b.n	8005292 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800528c:	f000 f871 	bl	8005372 <xEventGroupCreate>
 8005290:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005292:	697b      	ldr	r3, [r7, #20]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80052ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4a06      	ldr	r2, [pc, #24]	; (80052cc <vApplicationGetIdleTaskMemory+0x30>)
 80052b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	601a      	str	r2, [r3, #0]
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	2000033c 	.word	0x2000033c
 80052cc:	200003f8 	.word	0x200003f8

080052d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a07      	ldr	r2, [pc, #28]	; (80052fc <vApplicationGetTimerTaskMemory+0x2c>)
 80052e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4a06      	ldr	r2, [pc, #24]	; (8005300 <vApplicationGetTimerTaskMemory+0x30>)
 80052e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052ee:	601a      	str	r2, [r3, #0]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	200005f8 	.word	0x200005f8
 8005300:	200006b4 	.word	0x200006b4

08005304 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005328:	2320      	movs	r3, #32
 800532a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b20      	cmp	r3, #32
 8005330:	d00a      	beq.n	8005348 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	60fb      	str	r3, [r7, #12]
}
 8005344:	bf00      	nop
 8005346:	e7fe      	b.n	8005346 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f822 	bl	80053a6 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005368:	697b      	ldr	r3, [r7, #20]
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005378:	2020      	movs	r0, #32
 800537a:	f002 fa7d 	bl	8007878 <pvPortMalloc>
 800537e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f000 f808 	bl	80053a6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800539c:	687b      	ldr	r3, [r7, #4]
	}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f103 0208 	add.w	r2, r3, #8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295
 80053be:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f103 0208 	add.w	r2, r3, #8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f103 0208 	add.w	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d103      	bne.n	8005468 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e00c      	b.n	8005482 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3308      	adds	r3, #8
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	e002      	b.n	8005476 <vListInsert+0x2e>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d2f6      	bcs.n	8005470 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6892      	ldr	r2, [r2, #8]
 80054d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6852      	ldr	r2, [r2, #4]
 80054da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d103      	bne.n	80054ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	1e5a      	subs	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <xQueueGenericReset+0x2a>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	60bb      	str	r3, [r7, #8]
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800553a:	f002 f87b 	bl	8007634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	441a      	add	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	3b01      	subs	r3, #1
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	441a      	add	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	22ff      	movs	r2, #255	; 0xff
 800557e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	22ff      	movs	r2, #255	; 0xff
 8005586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d114      	bne.n	80055ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01a      	beq.n	80055ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3310      	adds	r3, #16
 800559c:	4618      	mov	r0, r3
 800559e:	f001 f929 	bl	80067f4 <xTaskRemoveFromEventList>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d012      	beq.n	80055ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <xQueueGenericReset+0xcc>)
 80055aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	e009      	b.n	80055ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3310      	adds	r3, #16
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff fef1 	bl	80053a6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3324      	adds	r3, #36	; 0x24
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff feec 	bl	80053a6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055ce:	f002 f861 	bl	8007694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055d2:	2301      	movs	r3, #1
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08e      	sub	sp, #56	; 0x38
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <xQueueGenericCreateStatic+0x52>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <xQueueGenericCreateStatic+0x56>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <xQueueGenericCreateStatic+0x58>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	623b      	str	r3, [r7, #32]
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <xQueueGenericCreateStatic+0x7e>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <xQueueGenericCreateStatic+0x82>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <xQueueGenericCreateStatic+0x84>
 8005662:	2300      	movs	r3, #0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	61fb      	str	r3, [r7, #28]
}
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800567e:	2350      	movs	r3, #80	; 0x50
 8005680:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b50      	cmp	r3, #80	; 0x50
 8005686:	d00a      	beq.n	800569e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	61bb      	str	r3, [r7, #24]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800569e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	4613      	mov	r3, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f805 	bl	80056d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3730      	adds	r7, #48	; 0x30
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d103      	bne.n	80056ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e002      	b.n	80056f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056fe:	2101      	movs	r1, #1
 8005700:	69b8      	ldr	r0, [r7, #24]
 8005702:	f7ff ff05 	bl	8005510 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08e      	sub	sp, #56	; 0x38
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xQueueGenericSend+0x32>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <xQueueGenericSend+0x40>
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <xQueueGenericSend+0x44>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <xQueueGenericSend+0x46>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <xQueueGenericSend+0x60>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d103      	bne.n	8005786 <xQueueGenericSend+0x6e>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <xQueueGenericSend+0x72>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <xQueueGenericSend+0x74>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	623b      	str	r3, [r7, #32]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057a6:	f001 f9e7 	bl	8006b78 <xTaskGetSchedulerState>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <xQueueGenericSend+0x9e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <xQueueGenericSend+0xa2>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <xQueueGenericSend+0xa4>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	61fb      	str	r3, [r7, #28]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057d6:	f001 ff2d 	bl	8007634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d302      	bcc.n	80057ec <xQueueGenericSend+0xd4>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d129      	bne.n	8005840 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f2:	f000 fa0b 	bl	8005c0c <prvCopyDataToQueue>
 80057f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d010      	beq.n	8005822 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	3324      	adds	r3, #36	; 0x24
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fff5 	bl	80067f4 <xTaskRemoveFromEventList>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005810:	4b3f      	ldr	r3, [pc, #252]	; (8005910 <xQueueGenericSend+0x1f8>)
 8005812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	e00a      	b.n	8005838 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d007      	beq.n	8005838 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005828:	4b39      	ldr	r3, [pc, #228]	; (8005910 <xQueueGenericSend+0x1f8>)
 800582a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005838:	f001 ff2c 	bl	8007694 <vPortExitCritical>
				return pdPASS;
 800583c:	2301      	movs	r3, #1
 800583e:	e063      	b.n	8005908 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005846:	f001 ff25 	bl	8007694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800584a:	2300      	movs	r3, #0
 800584c:	e05c      	b.n	8005908 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005854:	f107 0314 	add.w	r3, r7, #20
 8005858:	4618      	mov	r0, r3
 800585a:	f001 f82f 	bl	80068bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800585e:	2301      	movs	r3, #1
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005862:	f001 ff17 	bl	8007694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005866:	f000 fd9b 	bl	80063a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800586a:	f001 fee3 	bl	8007634 <vPortEnterCritical>
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005874:	b25b      	sxtb	r3, r3
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d103      	bne.n	8005884 <xQueueGenericSend+0x16c>
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800588a:	b25b      	sxtb	r3, r3
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005890:	d103      	bne.n	800589a <xQueueGenericSend+0x182>
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800589a:	f001 fefb 	bl	8007694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800589e:	1d3a      	adds	r2, r7, #4
 80058a0:	f107 0314 	add.w	r3, r7, #20
 80058a4:	4611      	mov	r1, r2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 f81e 	bl	80068e8 <xTaskCheckForTimeOut>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d124      	bne.n	80058fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b4:	f000 faa2 	bl	8005dfc <prvIsQueueFull>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	3310      	adds	r3, #16
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4611      	mov	r1, r2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 ff44 	bl	8006754 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80058cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ce:	f000 fa2d 	bl	8005d2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80058d2:	f000 fd73 	bl	80063bc <xTaskResumeAll>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f47f af7c 	bne.w	80057d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <xQueueGenericSend+0x1f8>)
 80058e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	e772      	b.n	80057d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f2:	f000 fa1b 	bl	8005d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058f6:	f000 fd61 	bl	80063bc <xTaskResumeAll>
 80058fa:	e76c      	b.n	80057d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058fe:	f000 fa15 	bl	8005d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005902:	f000 fd5b 	bl	80063bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005906:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005908:	4618      	mov	r0, r3
 800590a:	3738      	adds	r7, #56	; 0x38
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	e000ed04 	.word	0xe000ed04

08005914 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b090      	sub	sp, #64	; 0x40
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <xQueueGenericSendFromISR+0x3c>
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <xQueueGenericSendFromISR+0x40>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueGenericSendFromISR+0x42>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d103      	bne.n	800597e <xQueueGenericSendFromISR+0x6a>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <xQueueGenericSendFromISR+0x6e>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <xQueueGenericSendFromISR+0x70>
 8005982:	2300      	movs	r3, #0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	623b      	str	r3, [r7, #32]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800599e:	f001 ff2b 	bl	80077f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059a2:	f3ef 8211 	mrs	r2, BASEPRI
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61fa      	str	r2, [r7, #28]
 80059b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d302      	bcc.n	80059d0 <xQueueGenericSendFromISR+0xbc>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d12f      	bne.n	8005a30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059e6:	f000 f911 	bl	8005c0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d112      	bne.n	8005a1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d016      	beq.n	8005a2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	3324      	adds	r3, #36	; 0x24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fef7 	bl	80067f4 <xTaskRemoveFromEventList>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	e007      	b.n	8005a2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a1e:	3301      	adds	r3, #1
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	b25a      	sxtb	r2, r3
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a2e:	e001      	b.n	8005a34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3740      	adds	r7, #64	; 0x40
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08c      	sub	sp, #48	; 0x30
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <xQueueReceive+0x30>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	623b      	str	r3, [r7, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <xQueueReceive+0x3e>
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <xQueueReceive+0x42>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueReceive+0x44>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <xQueueReceive+0x5e>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	61fb      	str	r3, [r7, #28]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aaa:	f001 f865 	bl	8006b78 <xTaskGetSchedulerState>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <xQueueReceive+0x6e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <xQueueReceive+0x72>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <xQueueReceive+0x74>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueReceive+0x8e>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	61bb      	str	r3, [r7, #24]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ada:	f001 fdab 	bl	8007634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01f      	beq.n	8005b2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aee:	f000 f8f7 	bl	8005ce0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	1e5a      	subs	r2, r3, #1
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00f      	beq.n	8005b22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	3310      	adds	r3, #16
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fe74 	bl	80067f4 <xTaskRemoveFromEventList>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b12:	4b3d      	ldr	r3, [pc, #244]	; (8005c08 <xQueueReceive+0x1bc>)
 8005b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b22:	f001 fdb7 	bl	8007694 <vPortExitCritical>
				return pdPASS;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e069      	b.n	8005bfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b30:	f001 fdb0 	bl	8007694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e062      	b.n	8005bfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b3e:	f107 0310 	add.w	r3, r7, #16
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 feba 	bl	80068bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b4c:	f001 fda2 	bl	8007694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b50:	f000 fc26 	bl	80063a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b54:	f001 fd6e 	bl	8007634 <vPortEnterCritical>
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b5e:	b25b      	sxtb	r3, r3
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d103      	bne.n	8005b6e <xQueueReceive+0x122>
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d103      	bne.n	8005b84 <xQueueReceive+0x138>
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b84:	f001 fd86 	bl	8007694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b88:	1d3a      	adds	r2, r7, #4
 8005b8a:	f107 0310 	add.w	r3, r7, #16
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fea9 	bl	80068e8 <xTaskCheckForTimeOut>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d123      	bne.n	8005be4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9e:	f000 f917 	bl	8005dd0 <prvIsQueueEmpty>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d017      	beq.n	8005bd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	3324      	adds	r3, #36	; 0x24
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fdcf 	bl	8006754 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb8:	f000 f8b8 	bl	8005d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bbc:	f000 fbfe 	bl	80063bc <xTaskResumeAll>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d189      	bne.n	8005ada <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <xQueueReceive+0x1bc>)
 8005bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	e780      	b.n	8005ada <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bda:	f000 f8a7 	bl	8005d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bde:	f000 fbed 	bl	80063bc <xTaskResumeAll>
 8005be2:	e77a      	b.n	8005ada <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be6:	f000 f8a1 	bl	8005d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bea:	f000 fbe7 	bl	80063bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf0:	f000 f8ee 	bl	8005dd0 <prvIsQueueEmpty>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f43f af6f 	beq.w	8005ada <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3730      	adds	r7, #48	; 0x30
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10d      	bne.n	8005c46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d14d      	bne.n	8005cce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 ffbc 	bl	8006bb4 <xTaskPriorityDisinherit>
 8005c3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	e043      	b.n	8005cce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d119      	bne.n	8005c80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6858      	ldr	r0, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	461a      	mov	r2, r3
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	f002 f91b 	bl	8007e92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d32b      	bcc.n	8005cce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	e026      	b.n	8005cce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68d8      	ldr	r0, [r3, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	f002 f901 	bl	8007e92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	425b      	negs	r3, r3
 8005c9a:	441a      	add	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d207      	bcs.n	8005cbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d105      	bne.n	8005cce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005cd6:	697b      	ldr	r3, [r7, #20]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	441a      	add	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d303      	bcc.n	8005d14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68d9      	ldr	r1, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6838      	ldr	r0, [r7, #0]
 8005d20:	f002 f8b7 	bl	8007e92 <memcpy>
	}
}
 8005d24:	bf00      	nop
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d34:	f001 fc7e 	bl	8007634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d40:	e011      	b.n	8005d66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d012      	beq.n	8005d70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3324      	adds	r3, #36	; 0x24
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fd50 	bl	80067f4 <xTaskRemoveFromEventList>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d5a:	f000 fe27 	bl	80069ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	dce9      	bgt.n	8005d42 <prvUnlockQueue+0x16>
 8005d6e:	e000      	b.n	8005d72 <prvUnlockQueue+0x46>
					break;
 8005d70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	22ff      	movs	r2, #255	; 0xff
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d7a:	f001 fc8b 	bl	8007694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d7e:	f001 fc59 	bl	8007634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d8a:	e011      	b.n	8005db0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d012      	beq.n	8005dba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3310      	adds	r3, #16
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fd2b 	bl	80067f4 <xTaskRemoveFromEventList>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005da4:	f000 fe02 	bl	80069ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005da8:	7bbb      	ldrb	r3, [r7, #14]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dce9      	bgt.n	8005d8c <prvUnlockQueue+0x60>
 8005db8:	e000      	b.n	8005dbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	22ff      	movs	r2, #255	; 0xff
 8005dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005dc4:	f001 fc66 	bl	8007694 <vPortExitCritical>
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dd8:	f001 fc2c 	bl	8007634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e001      	b.n	8005dee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dee:	f001 fc51 	bl	8007694 <vPortExitCritical>

	return xReturn;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e04:	f001 fc16 	bl	8007634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d102      	bne.n	8005e1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e001      	b.n	8005e1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e1e:	f001 fc39 	bl	8007694 <vPortExitCritical>

	return xReturn;
 8005e22:	68fb      	ldr	r3, [r7, #12]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e014      	b.n	8005e66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e3c:	4a0f      	ldr	r2, [pc, #60]	; (8005e7c <vQueueAddToRegistry+0x50>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10b      	bne.n	8005e60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e48:	490c      	ldr	r1, [pc, #48]	; (8005e7c <vQueueAddToRegistry+0x50>)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e52:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <vQueueAddToRegistry+0x50>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e5e:	e006      	b.n	8005e6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	d9e7      	bls.n	8005e3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20000ab4 	.word	0x20000ab4

08005e80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e90:	f001 fbd0 	bl	8007634 <vPortEnterCritical>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d103      	bne.n	8005eaa <vQueueWaitForMessageRestricted+0x2a>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d103      	bne.n	8005ec0 <vQueueWaitForMessageRestricted+0x40>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec0:	f001 fbe8 	bl	8007694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fc61 	bl	800679c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eda:	6978      	ldr	r0, [r7, #20]
 8005edc:	f7ff ff26 	bl	8005d2c <prvUnlockQueue>
	}
 8005ee0:	bf00      	nop
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	; 0x38
 8005eec:	af04      	add	r7, sp, #16
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	623b      	str	r3, [r7, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xTaskCreateStatic+0x46>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	61fb      	str	r3, [r7, #28]
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f2e:	23bc      	movs	r3, #188	; 0xbc
 8005f30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2bbc      	cmp	r3, #188	; 0xbc
 8005f36:	d00a      	beq.n	8005f4e <xTaskCreateStatic+0x66>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61bb      	str	r3, [r7, #24]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01e      	beq.n	8005f94 <xTaskCreateStatic+0xac>
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01b      	beq.n	8005f94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	2202      	movs	r2, #2
 8005f6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9303      	str	r3, [sp, #12]
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	9302      	str	r3, [sp, #8]
 8005f76:	f107 0314 	add.w	r3, r7, #20
 8005f7a:	9301      	str	r3, [sp, #4]
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f850 	bl	800602c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f8e:	f000 f8f3 	bl	8006178 <prvAddNewTaskToReadyList>
 8005f92:	e001      	b.n	8005f98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f98:	697b      	ldr	r3, [r7, #20]
	}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3728      	adds	r7, #40	; 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b08c      	sub	sp, #48	; 0x30
 8005fa6:	af04      	add	r7, sp, #16
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 fc5e 	bl	8007878 <pvPortMalloc>
 8005fbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00e      	beq.n	8005fe2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fc4:	20bc      	movs	r0, #188	; 0xbc
 8005fc6:	f001 fc57 	bl	8007878 <pvPortMalloc>
 8005fca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd8:	e005      	b.n	8005fe6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f001 fd18 	bl	8007a10 <vPortFree>
 8005fe0:	e001      	b.n	8005fe6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d017      	beq.n	800601c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9303      	str	r3, [sp, #12]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	9302      	str	r3, [sp, #8]
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f80e 	bl	800602c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006010:	69f8      	ldr	r0, [r7, #28]
 8006012:	f000 f8b1 	bl	8006178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006016:	2301      	movs	r3, #1
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e002      	b.n	8006022 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006022:	69bb      	ldr	r3, [r7, #24]
	}
 8006024:	4618      	mov	r0, r3
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	461a      	mov	r2, r3
 8006044:	21a5      	movs	r1, #165	; 0xa5
 8006046:	f001 ff32 	bl	8007eae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006054:	3b01      	subs	r3, #1
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f023 0307 	bic.w	r3, r3, #7
 8006062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <prvInitialiseNewTask+0x58>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	617b      	str	r3, [r7, #20]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01f      	beq.n	80060ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	e012      	b.n	80060b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	7819      	ldrb	r1, [r3, #0]
 8006098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	3334      	adds	r3, #52	; 0x34
 80060a0:	460a      	mov	r2, r1
 80060a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d006      	beq.n	80060be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2b0f      	cmp	r3, #15
 80060ba:	d9e9      	bls.n	8006090 <prvInitialiseNewTask+0x64>
 80060bc:	e000      	b.n	80060c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80060be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c8:	e003      	b.n	80060d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	2b37      	cmp	r3, #55	; 0x37
 80060d6:	d901      	bls.n	80060dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060d8:	2337      	movs	r3, #55	; 0x37
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	2200      	movs	r2, #0
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	3304      	adds	r3, #4
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff f977 	bl	80053e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	3318      	adds	r3, #24
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff f972 	bl	80053e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006116:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	2200      	movs	r2, #0
 800611c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	2200      	movs	r2, #0
 8006124:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	3354      	adds	r3, #84	; 0x54
 800612c:	2260      	movs	r2, #96	; 0x60
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f001 febc 	bl	8007eae <memset>
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	4a0c      	ldr	r2, [pc, #48]	; (800616c <prvInitialiseNewTask+0x140>)
 800613a:	659a      	str	r2, [r3, #88]	; 0x58
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <prvInitialiseNewTask+0x144>)
 8006140:	65da      	str	r2, [r3, #92]	; 0x5c
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	4a0b      	ldr	r2, [pc, #44]	; (8006174 <prvInitialiseNewTask+0x148>)
 8006146:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	69b8      	ldr	r0, [r7, #24]
 800614e:	f001 f941 	bl	80073d4 <pxPortInitialiseStack>
 8006152:	4602      	mov	r2, r0
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006162:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006164:	bf00      	nop
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	0800aca8 	.word	0x0800aca8
 8006170:	0800acc8 	.word	0x0800acc8
 8006174:	0800ac88 	.word	0x0800ac88

08006178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006180:	f001 fa58 	bl	8007634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006184:	4b2d      	ldr	r3, [pc, #180]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	4a2c      	ldr	r2, [pc, #176]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 800618c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800618e:	4b2c      	ldr	r3, [pc, #176]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006196:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d110      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061a4:	f000 fc26 	bl	80069f4 <prvInitialiseTaskLists>
 80061a8:	e00d      	b.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061aa:	4b26      	ldr	r3, [pc, #152]	; (8006244 <prvAddNewTaskToReadyList+0xcc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d802      	bhi.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061c0:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <prvAddNewTaskToReadyList+0x74>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a18      	ldr	r2, [pc, #96]	; (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4a15      	ldr	r2, [pc, #84]	; (8006250 <prvAddNewTaskToReadyList+0xd8>)
 80061fa:	441a      	add	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7ff f8fc 	bl	8005400 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006208:	f001 fa44 	bl	8007694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <prvAddNewTaskToReadyList+0xcc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00e      	beq.n	8006232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d207      	bcs.n	8006232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <prvAddNewTaskToReadyList+0xdc>)
 8006224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000fc8 	.word	0x20000fc8
 8006240:	20000af4 	.word	0x20000af4
 8006244:	20000fd4 	.word	0x20000fd4
 8006248:	20000fe4 	.word	0x20000fe4
 800624c:	20000fd0 	.word	0x20000fd0
 8006250:	20000af8 	.word	0x20000af8
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d017      	beq.n	800629a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800626a:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <vTaskDelay+0x60>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <vTaskDelay+0x30>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
 8006286:	e7fe      	b.n	8006286 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006288:	f000 f88a 	bl	80063a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800628c:	2100      	movs	r1, #0
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fcfe 	bl	8006c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006294:	f000 f892 	bl	80063bc <xTaskResumeAll>
 8006298:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d107      	bne.n	80062b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <vTaskDelay+0x64>)
 80062a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20000ff0 	.word	0x20000ff0
 80062bc:	e000ed04 	.word	0xe000ed04

080062c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062ce:	463a      	mov	r2, r7
 80062d0:	1d39      	adds	r1, r7, #4
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe ffe0 	bl	800529c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	9202      	str	r2, [sp, #8]
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	2300      	movs	r3, #0
 80062ec:	460a      	mov	r2, r1
 80062ee:	4924      	ldr	r1, [pc, #144]	; (8006380 <vTaskStartScheduler+0xc0>)
 80062f0:	4824      	ldr	r0, [pc, #144]	; (8006384 <vTaskStartScheduler+0xc4>)
 80062f2:	f7ff fdf9 	bl	8005ee8 <xTaskCreateStatic>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4a23      	ldr	r2, [pc, #140]	; (8006388 <vTaskStartScheduler+0xc8>)
 80062fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062fc:	4b22      	ldr	r3, [pc, #136]	; (8006388 <vTaskStartScheduler+0xc8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006304:	2301      	movs	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e001      	b.n	800630e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d102      	bne.n	800631a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006314:	f000 fd10 	bl	8006d38 <xTimerCreateTimerTask>
 8006318:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d11b      	bne.n	8006358 <vTaskStartScheduler+0x98>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006334:	4b15      	ldr	r3, [pc, #84]	; (800638c <vTaskStartScheduler+0xcc>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3354      	adds	r3, #84	; 0x54
 800633a:	4a15      	ldr	r2, [pc, #84]	; (8006390 <vTaskStartScheduler+0xd0>)
 800633c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800633e:	4b15      	ldr	r3, [pc, #84]	; (8006394 <vTaskStartScheduler+0xd4>)
 8006340:	f04f 32ff 	mov.w	r2, #4294967295
 8006344:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <vTaskStartScheduler+0xd8>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800634c:	4b13      	ldr	r3, [pc, #76]	; (800639c <vTaskStartScheduler+0xdc>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006352:	f001 f8cd 	bl	80074f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006356:	e00e      	b.n	8006376 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d10a      	bne.n	8006376 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	60fb      	str	r3, [r7, #12]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <vTaskStartScheduler+0xb4>
}
 8006376:	bf00      	nop
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	0800abdc 	.word	0x0800abdc
 8006384:	080069c5 	.word	0x080069c5
 8006388:	20000fec 	.word	0x20000fec
 800638c:	20000af4 	.word	0x20000af4
 8006390:	20000010 	.word	0x20000010
 8006394:	20000fe8 	.word	0x20000fe8
 8006398:	20000fd4 	.word	0x20000fd4
 800639c:	20000fcc 	.word	0x20000fcc

080063a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063a4:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <vTaskSuspendAll+0x18>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a03      	ldr	r2, [pc, #12]	; (80063b8 <vTaskSuspendAll+0x18>)
 80063ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063ae:	bf00      	nop
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	20000ff0 	.word	0x20000ff0

080063bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063ca:	4b42      	ldr	r3, [pc, #264]	; (80064d4 <xTaskResumeAll+0x118>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	603b      	str	r3, [r7, #0]
}
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063e8:	f001 f924 	bl	8007634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063ec:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <xTaskResumeAll+0x118>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	4a38      	ldr	r2, [pc, #224]	; (80064d4 <xTaskResumeAll+0x118>)
 80063f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f6:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <xTaskResumeAll+0x118>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d162      	bne.n	80064c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063fe:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <xTaskResumeAll+0x11c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d05e      	beq.n	80064c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006406:	e02f      	b.n	8006468 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006408:	4b34      	ldr	r3, [pc, #208]	; (80064dc <xTaskResumeAll+0x120>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3318      	adds	r3, #24
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff f850 	bl	80054ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3304      	adds	r3, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff f84b 	bl	80054ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4b2d      	ldr	r3, [pc, #180]	; (80064e0 <xTaskResumeAll+0x124>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d903      	bls.n	8006438 <xTaskResumeAll+0x7c>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4a2a      	ldr	r2, [pc, #168]	; (80064e0 <xTaskResumeAll+0x124>)
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4a27      	ldr	r2, [pc, #156]	; (80064e4 <xTaskResumeAll+0x128>)
 8006446:	441a      	add	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f7fe ffd6 	bl	8005400 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	4b23      	ldr	r3, [pc, #140]	; (80064e8 <xTaskResumeAll+0x12c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006462:	4b22      	ldr	r3, [pc, #136]	; (80064ec <xTaskResumeAll+0x130>)
 8006464:	2201      	movs	r2, #1
 8006466:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006468:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <xTaskResumeAll+0x120>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1cb      	bne.n	8006408 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006476:	f000 fb5f 	bl	8006b38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800647a:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <xTaskResumeAll+0x134>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d010      	beq.n	80064a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006486:	f000 f847 	bl	8006518 <xTaskIncrementTick>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006490:	4b16      	ldr	r3, [pc, #88]	; (80064ec <xTaskResumeAll+0x130>)
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3b01      	subs	r3, #1
 800649a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f1      	bne.n	8006486 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <xTaskResumeAll+0x134>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064a8:	4b10      	ldr	r3, [pc, #64]	; (80064ec <xTaskResumeAll+0x130>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d009      	beq.n	80064c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064b4:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <xTaskResumeAll+0x138>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064c4:	f001 f8e6 	bl	8007694 <vPortExitCritical>

	return xAlreadyYielded;
 80064c8:	68bb      	ldr	r3, [r7, #8]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000ff0 	.word	0x20000ff0
 80064d8:	20000fc8 	.word	0x20000fc8
 80064dc:	20000f88 	.word	0x20000f88
 80064e0:	20000fd0 	.word	0x20000fd0
 80064e4:	20000af8 	.word	0x20000af8
 80064e8:	20000af4 	.word	0x20000af4
 80064ec:	20000fdc 	.word	0x20000fdc
 80064f0:	20000fd8 	.word	0x20000fd8
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <xTaskGetTickCount+0x1c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006504:	687b      	ldr	r3, [r7, #4]
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000fcc 	.word	0x20000fcc

08006518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006522:	4b4f      	ldr	r3, [pc, #316]	; (8006660 <xTaskIncrementTick+0x148>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f040 808f 	bne.w	800664a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800652c:	4b4d      	ldr	r3, [pc, #308]	; (8006664 <xTaskIncrementTick+0x14c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006534:	4a4b      	ldr	r2, [pc, #300]	; (8006664 <xTaskIncrementTick+0x14c>)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d120      	bne.n	8006582 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006540:	4b49      	ldr	r3, [pc, #292]	; (8006668 <xTaskIncrementTick+0x150>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <xTaskIncrementTick+0x48>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	603b      	str	r3, [r7, #0]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <xTaskIncrementTick+0x46>
 8006560:	4b41      	ldr	r3, [pc, #260]	; (8006668 <xTaskIncrementTick+0x150>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	4b41      	ldr	r3, [pc, #260]	; (800666c <xTaskIncrementTick+0x154>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a3f      	ldr	r2, [pc, #252]	; (8006668 <xTaskIncrementTick+0x150>)
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	4a3f      	ldr	r2, [pc, #252]	; (800666c <xTaskIncrementTick+0x154>)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <xTaskIncrementTick+0x158>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	4a3d      	ldr	r2, [pc, #244]	; (8006670 <xTaskIncrementTick+0x158>)
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	f000 fadb 	bl	8006b38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006582:	4b3c      	ldr	r3, [pc, #240]	; (8006674 <xTaskIncrementTick+0x15c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	429a      	cmp	r2, r3
 800658a:	d349      	bcc.n	8006620 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800658c:	4b36      	ldr	r3, [pc, #216]	; (8006668 <xTaskIncrementTick+0x150>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006596:	4b37      	ldr	r3, [pc, #220]	; (8006674 <xTaskIncrementTick+0x15c>)
 8006598:	f04f 32ff 	mov.w	r2, #4294967295
 800659c:	601a      	str	r2, [r3, #0]
					break;
 800659e:	e03f      	b.n	8006620 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a0:	4b31      	ldr	r3, [pc, #196]	; (8006668 <xTaskIncrementTick+0x150>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d203      	bcs.n	80065c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065b8:	4a2e      	ldr	r2, [pc, #184]	; (8006674 <xTaskIncrementTick+0x15c>)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065be:	e02f      	b.n	8006620 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe ff78 	bl	80054ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	3318      	adds	r3, #24
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe ff6f 	bl	80054ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e0:	4b25      	ldr	r3, [pc, #148]	; (8006678 <xTaskIncrementTick+0x160>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d903      	bls.n	80065f0 <xTaskIncrementTick+0xd8>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4a22      	ldr	r2, [pc, #136]	; (8006678 <xTaskIncrementTick+0x160>)
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	4613      	mov	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4a1f      	ldr	r2, [pc, #124]	; (800667c <xTaskIncrementTick+0x164>)
 80065fe:	441a      	add	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	3304      	adds	r3, #4
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f7fe fefa 	bl	8005400 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	4b1b      	ldr	r3, [pc, #108]	; (8006680 <xTaskIncrementTick+0x168>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	429a      	cmp	r2, r3
 8006618:	d3b8      	bcc.n	800658c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800661e:	e7b5      	b.n	800658c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <xTaskIncrementTick+0x168>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006626:	4915      	ldr	r1, [pc, #84]	; (800667c <xTaskIncrementTick+0x164>)
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d901      	bls.n	800663c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <xTaskIncrementTick+0x16c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006644:	2301      	movs	r3, #1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	e004      	b.n	8006654 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800664a:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <xTaskIncrementTick+0x170>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3301      	adds	r3, #1
 8006650:	4a0d      	ldr	r2, [pc, #52]	; (8006688 <xTaskIncrementTick+0x170>)
 8006652:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006654:	697b      	ldr	r3, [r7, #20]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000ff0 	.word	0x20000ff0
 8006664:	20000fcc 	.word	0x20000fcc
 8006668:	20000f80 	.word	0x20000f80
 800666c:	20000f84 	.word	0x20000f84
 8006670:	20000fe0 	.word	0x20000fe0
 8006674:	20000fe8 	.word	0x20000fe8
 8006678:	20000fd0 	.word	0x20000fd0
 800667c:	20000af8 	.word	0x20000af8
 8006680:	20000af4 	.word	0x20000af4
 8006684:	20000fdc 	.word	0x20000fdc
 8006688:	20000fd8 	.word	0x20000fd8

0800668c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006692:	4b2a      	ldr	r3, [pc, #168]	; (800673c <vTaskSwitchContext+0xb0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800669a:	4b29      	ldr	r3, [pc, #164]	; (8006740 <vTaskSwitchContext+0xb4>)
 800669c:	2201      	movs	r2, #1
 800669e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066a0:	e046      	b.n	8006730 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80066a2:	4b27      	ldr	r3, [pc, #156]	; (8006740 <vTaskSwitchContext+0xb4>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a8:	4b26      	ldr	r3, [pc, #152]	; (8006744 <vTaskSwitchContext+0xb8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e010      	b.n	80066d2 <vTaskSwitchContext+0x46>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <vTaskSwitchContext+0x40>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	607b      	str	r3, [r7, #4]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <vTaskSwitchContext+0x3e>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	491d      	ldr	r1, [pc, #116]	; (8006748 <vTaskSwitchContext+0xbc>)
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0e4      	beq.n	80066b0 <vTaskSwitchContext+0x24>
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4a15      	ldr	r2, [pc, #84]	; (8006748 <vTaskSwitchContext+0xbc>)
 80066f2:	4413      	add	r3, r2
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	605a      	str	r2, [r3, #4]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3308      	adds	r3, #8
 8006708:	429a      	cmp	r2, r3
 800670a:	d104      	bne.n	8006716 <vTaskSwitchContext+0x8a>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a0b      	ldr	r2, [pc, #44]	; (800674c <vTaskSwitchContext+0xc0>)
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	4a08      	ldr	r2, [pc, #32]	; (8006744 <vTaskSwitchContext+0xb8>)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006726:	4b09      	ldr	r3, [pc, #36]	; (800674c <vTaskSwitchContext+0xc0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3354      	adds	r3, #84	; 0x54
 800672c:	4a08      	ldr	r2, [pc, #32]	; (8006750 <vTaskSwitchContext+0xc4>)
 800672e:	6013      	str	r3, [r2, #0]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	20000ff0 	.word	0x20000ff0
 8006740:	20000fdc 	.word	0x20000fdc
 8006744:	20000fd0 	.word	0x20000fd0
 8006748:	20000af8 	.word	0x20000af8
 800674c:	20000af4 	.word	0x20000af4
 8006750:	20000010 	.word	0x20000010

08006754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	60fb      	str	r3, [r7, #12]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800677a:	4b07      	ldr	r3, [pc, #28]	; (8006798 <vTaskPlaceOnEventList+0x44>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3318      	adds	r3, #24
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fe fe60 	bl	8005448 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006788:	2101      	movs	r1, #1
 800678a:	6838      	ldr	r0, [r7, #0]
 800678c:	f000 fa80 	bl	8006c90 <prvAddCurrentTaskToDelayedList>
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20000af4 	.word	0x20000af4

0800679c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10a      	bne.n	80067c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	617b      	str	r3, [r7, #20]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067c4:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3318      	adds	r3, #24
 80067ca:	4619      	mov	r1, r3
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7fe fe17 	bl	8005400 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067d8:	f04f 33ff 	mov.w	r3, #4294967295
 80067dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	68b8      	ldr	r0, [r7, #8]
 80067e2:	f000 fa55 	bl	8006c90 <prvAddCurrentTaskToDelayedList>
	}
 80067e6:	bf00      	nop
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000af4 	.word	0x20000af4

080067f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60fb      	str	r3, [r7, #12]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3318      	adds	r3, #24
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fe48 	bl	80054ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800682a:	4b1e      	ldr	r3, [pc, #120]	; (80068a4 <xTaskRemoveFromEventList+0xb0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11d      	bne.n	800686e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3304      	adds	r3, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fe3f 	bl	80054ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	4b19      	ldr	r3, [pc, #100]	; (80068a8 <xTaskRemoveFromEventList+0xb4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d903      	bls.n	8006850 <xTaskRemoveFromEventList+0x5c>
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <xTaskRemoveFromEventList+0xb4>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4a13      	ldr	r2, [pc, #76]	; (80068ac <xTaskRemoveFromEventList+0xb8>)
 800685e:	441a      	add	r2, r3
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7fe fdca 	bl	8005400 <vListInsertEnd>
 800686c:	e005      	b.n	800687a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3318      	adds	r3, #24
 8006872:	4619      	mov	r1, r3
 8006874:	480e      	ldr	r0, [pc, #56]	; (80068b0 <xTaskRemoveFromEventList+0xbc>)
 8006876:	f7fe fdc3 	bl	8005400 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <xTaskRemoveFromEventList+0xc0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d905      	bls.n	8006894 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <xTaskRemoveFromEventList+0xc4>)
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	e001      	b.n	8006898 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006898:	697b      	ldr	r3, [r7, #20]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000ff0 	.word	0x20000ff0
 80068a8:	20000fd0 	.word	0x20000fd0
 80068ac:	20000af8 	.word	0x20000af8
 80068b0:	20000f88 	.word	0x20000f88
 80068b4:	20000af4 	.word	0x20000af4
 80068b8:	20000fdc 	.word	0x20000fdc

080068bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <vTaskInternalSetTimeOutState+0x24>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <vTaskInternalSetTimeOutState+0x28>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	605a      	str	r2, [r3, #4]
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	20000fe0 	.word	0x20000fe0
 80068e4:	20000fcc 	.word	0x20000fcc

080068e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	613b      	str	r3, [r7, #16]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	60fb      	str	r3, [r7, #12]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800692a:	f000 fe83 	bl	8007634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800692e:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <xTaskCheckForTimeOut+0xbc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006946:	d102      	bne.n	800694e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006948:	2300      	movs	r3, #0
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	e023      	b.n	8006996 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <xTaskCheckForTimeOut+0xc0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d007      	beq.n	800696a <xTaskCheckForTimeOut+0x82>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	e015      	b.n	8006996 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	429a      	cmp	r2, r3
 8006972:	d20b      	bcs.n	800698c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1ad2      	subs	r2, r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff9b 	bl	80068bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	e004      	b.n	8006996 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006992:	2301      	movs	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006996:	f000 fe7d 	bl	8007694 <vPortExitCritical>

	return xReturn;
 800699a:	69fb      	ldr	r3, [r7, #28]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000fcc 	.word	0x20000fcc
 80069a8:	20000fe0 	.word	0x20000fe0

080069ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <vTaskMissedYield+0x14>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
}
 80069b6:	bf00      	nop
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20000fdc 	.word	0x20000fdc

080069c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069cc:	f000 f852 	bl	8006a74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069d0:	4b06      	ldr	r3, [pc, #24]	; (80069ec <prvIdleTask+0x28>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d9f9      	bls.n	80069cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <prvIdleTask+0x2c>)
 80069da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069e8:	e7f0      	b.n	80069cc <prvIdleTask+0x8>
 80069ea:	bf00      	nop
 80069ec:	20000af8 	.word	0x20000af8
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069fa:	2300      	movs	r3, #0
 80069fc:	607b      	str	r3, [r7, #4]
 80069fe:	e00c      	b.n	8006a1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4a12      	ldr	r2, [pc, #72]	; (8006a54 <prvInitialiseTaskLists+0x60>)
 8006a0c:	4413      	add	r3, r2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fcc9 	bl	80053a6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3301      	adds	r3, #1
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b37      	cmp	r3, #55	; 0x37
 8006a1e:	d9ef      	bls.n	8006a00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a20:	480d      	ldr	r0, [pc, #52]	; (8006a58 <prvInitialiseTaskLists+0x64>)
 8006a22:	f7fe fcc0 	bl	80053a6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a26:	480d      	ldr	r0, [pc, #52]	; (8006a5c <prvInitialiseTaskLists+0x68>)
 8006a28:	f7fe fcbd 	bl	80053a6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a2c:	480c      	ldr	r0, [pc, #48]	; (8006a60 <prvInitialiseTaskLists+0x6c>)
 8006a2e:	f7fe fcba 	bl	80053a6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a32:	480c      	ldr	r0, [pc, #48]	; (8006a64 <prvInitialiseTaskLists+0x70>)
 8006a34:	f7fe fcb7 	bl	80053a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a38:	480b      	ldr	r0, [pc, #44]	; (8006a68 <prvInitialiseTaskLists+0x74>)
 8006a3a:	f7fe fcb4 	bl	80053a6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <prvInitialiseTaskLists+0x78>)
 8006a40:	4a05      	ldr	r2, [pc, #20]	; (8006a58 <prvInitialiseTaskLists+0x64>)
 8006a42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a44:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <prvInitialiseTaskLists+0x7c>)
 8006a46:	4a05      	ldr	r2, [pc, #20]	; (8006a5c <prvInitialiseTaskLists+0x68>)
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20000af8 	.word	0x20000af8
 8006a58:	20000f58 	.word	0x20000f58
 8006a5c:	20000f6c 	.word	0x20000f6c
 8006a60:	20000f88 	.word	0x20000f88
 8006a64:	20000f9c 	.word	0x20000f9c
 8006a68:	20000fb4 	.word	0x20000fb4
 8006a6c:	20000f80 	.word	0x20000f80
 8006a70:	20000f84 	.word	0x20000f84

08006a74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a7a:	e019      	b.n	8006ab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a7c:	f000 fdda 	bl	8007634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a80:	4b10      	ldr	r3, [pc, #64]	; (8006ac4 <prvCheckTasksWaitingTermination+0x50>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fd14 	bl	80054ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a92:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <prvCheckTasksWaitingTermination+0x54>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	4a0b      	ldr	r2, [pc, #44]	; (8006ac8 <prvCheckTasksWaitingTermination+0x54>)
 8006a9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <prvCheckTasksWaitingTermination+0x58>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <prvCheckTasksWaitingTermination+0x58>)
 8006aa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aa6:	f000 fdf5 	bl	8007694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f810 	bl	8006ad0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ab0:	4b06      	ldr	r3, [pc, #24]	; (8006acc <prvCheckTasksWaitingTermination+0x58>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e1      	bne.n	8006a7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000f9c 	.word	0x20000f9c
 8006ac8:	20000fc8 	.word	0x20000fc8
 8006acc:	20000fb0 	.word	0x20000fb0

08006ad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3354      	adds	r3, #84	; 0x54
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fefb 	bl	80088d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d108      	bne.n	8006afe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 ff8d 	bl	8007a10 <vPortFree>
				vPortFree( pxTCB );
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 ff8a 	bl	8007a10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006afc:	e018      	b.n	8006b30 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d103      	bne.n	8006b10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 ff81 	bl	8007a10 <vPortFree>
	}
 8006b0e:	e00f      	b.n	8006b30 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d00a      	beq.n	8006b30 <prvDeleteTCB+0x60>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	60fb      	str	r3, [r7, #12]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <prvDeleteTCB+0x5e>
	}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b3e:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <prvResetNextTaskUnblockTime+0x38>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <prvResetNextTaskUnblockTime+0x3c>)
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b50:	e008      	b.n	8006b64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b52:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <prvResetNextTaskUnblockTime+0x38>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4a04      	ldr	r2, [pc, #16]	; (8006b74 <prvResetNextTaskUnblockTime+0x3c>)
 8006b62:	6013      	str	r3, [r2, #0]
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	20000f80 	.word	0x20000f80
 8006b74:	20000fe8 	.word	0x20000fe8

08006b78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <xTaskGetSchedulerState+0x34>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b86:	2301      	movs	r3, #1
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	e008      	b.n	8006b9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8c:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <xTaskGetSchedulerState+0x38>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b94:	2302      	movs	r3, #2
 8006b96:	607b      	str	r3, [r7, #4]
 8006b98:	e001      	b.n	8006b9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b9e:	687b      	ldr	r3, [r7, #4]
	}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20000fd4 	.word	0x20000fd4
 8006bb0:	20000ff0 	.word	0x20000ff0

08006bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d056      	beq.n	8006c78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <xTaskPriorityDisinherit+0xd0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d00a      	beq.n	8006bea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	60fb      	str	r3, [r7, #12]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	60bb      	str	r3, [r7, #8]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0c:	1e5a      	subs	r2, r3, #1
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d02c      	beq.n	8006c78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d128      	bne.n	8006c78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fc45 	bl	80054ba <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <xTaskPriorityDisinherit+0xd4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d903      	bls.n	8006c58 <xTaskPriorityDisinherit+0xa4>
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <xTaskPriorityDisinherit+0xd4>)
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <xTaskPriorityDisinherit+0xd8>)
 8006c66:	441a      	add	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7fe fbc6 	bl	8005400 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c78:	697b      	ldr	r3, [r7, #20]
	}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000af4 	.word	0x20000af4
 8006c88:	20000fd0 	.word	0x20000fd0
 8006c8c:	20000af8 	.word	0x20000af8

08006c90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c9a:	4b21      	ldr	r3, [pc, #132]	; (8006d20 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ca0:	4b20      	ldr	r3, [pc, #128]	; (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fc07 	bl	80054ba <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d10a      	bne.n	8006cca <prvAddCurrentTaskToDelayedList+0x3a>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cba:	4b1a      	ldr	r3, [pc, #104]	; (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4819      	ldr	r0, [pc, #100]	; (8006d28 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cc4:	f7fe fb9c 	bl	8005400 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cc8:	e026      	b.n	8006d18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4413      	add	r3, r2
 8006cd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cd2:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d209      	bcs.n	8006cf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ce2:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f7fe fbaa 	bl	8005448 <vListInsert>
}
 8006cf4:	e010      	b.n	8006d18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f7fe fba0 	bl	8005448 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d202      	bcs.n	8006d18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d12:	4a08      	ldr	r2, [pc, #32]	; (8006d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000fcc 	.word	0x20000fcc
 8006d24:	20000af4 	.word	0x20000af4
 8006d28:	20000fb4 	.word	0x20000fb4
 8006d2c:	20000f84 	.word	0x20000f84
 8006d30:	20000f80 	.word	0x20000f80
 8006d34:	20000fe8 	.word	0x20000fe8

08006d38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	; 0x28
 8006d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d42:	f000 fb07 	bl	8007354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d46:	4b1c      	ldr	r3, [pc, #112]	; (8006db8 <xTimerCreateTimerTask+0x80>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d021      	beq.n	8006d92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d56:	1d3a      	adds	r2, r7, #4
 8006d58:	f107 0108 	add.w	r1, r7, #8
 8006d5c:	f107 030c 	add.w	r3, r7, #12
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fab5 	bl	80052d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	9202      	str	r2, [sp, #8]
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	2302      	movs	r3, #2
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	460a      	mov	r2, r1
 8006d78:	4910      	ldr	r1, [pc, #64]	; (8006dbc <xTimerCreateTimerTask+0x84>)
 8006d7a:	4811      	ldr	r0, [pc, #68]	; (8006dc0 <xTimerCreateTimerTask+0x88>)
 8006d7c:	f7ff f8b4 	bl	8005ee8 <xTaskCreateStatic>
 8006d80:	4603      	mov	r3, r0
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <xTimerCreateTimerTask+0x8c>)
 8006d84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d86:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <xTimerCreateTimerTask+0x8c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	613b      	str	r3, [r7, #16]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006dae:	697b      	ldr	r3, [r7, #20]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20001024 	.word	0x20001024
 8006dbc:	0800abe4 	.word	0x0800abe4
 8006dc0:	08006efd 	.word	0x08006efd
 8006dc4:	20001028 	.word	0x20001028

08006dc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	623b      	str	r3, [r7, #32]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006df6:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <xTimerGenericCommand+0x98>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d02a      	beq.n	8006e54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	dc18      	bgt.n	8006e42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e10:	f7ff feb2 	bl	8006b78 <xTaskGetSchedulerState>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d109      	bne.n	8006e2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <xTimerGenericCommand+0x98>)
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	f107 0110 	add.w	r1, r7, #16
 8006e22:	2300      	movs	r3, #0
 8006e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e26:	f7fe fc77 	bl	8005718 <xQueueGenericSend>
 8006e2a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e2c:	e012      	b.n	8006e54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <xTimerGenericCommand+0x98>)
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	f107 0110 	add.w	r1, r7, #16
 8006e36:	2300      	movs	r3, #0
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f7fe fc6d 	bl	8005718 <xQueueGenericSend>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e40:	e008      	b.n	8006e54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <xTimerGenericCommand+0x98>)
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	f107 0110 	add.w	r1, r7, #16
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	f7fe fd61 	bl	8005914 <xQueueGenericSendFromISR>
 8006e52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3728      	adds	r7, #40	; 0x28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20001024 	.word	0x20001024

08006e64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e6e:	4b22      	ldr	r3, [pc, #136]	; (8006ef8 <prvProcessExpiredTimer+0x94>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fe fb1c 	bl	80054ba <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d022      	beq.n	8006ed6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	18d1      	adds	r1, r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	6978      	ldr	r0, [r7, #20]
 8006e9e:	f000 f8d1 	bl	8007044 <prvInsertTimerInActiveList>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01f      	beq.n	8006ee8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	2300      	movs	r3, #0
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	6978      	ldr	r0, [r7, #20]
 8006eb4:	f7ff ff88 	bl	8006dc8 <xTimerGenericCommand>
 8006eb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d113      	bne.n	8006ee8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60fb      	str	r3, [r7, #12]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	6978      	ldr	r0, [r7, #20]
 8006eee:	4798      	blx	r3
}
 8006ef0:	bf00      	nop
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	2000101c 	.word	0x2000101c

08006efc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f04:	f107 0308 	add.w	r3, r7, #8
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 f857 	bl	8006fbc <prvGetNextExpireTime>
 8006f0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f803 	bl	8006f20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f1a:	f000 f8d5 	bl	80070c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f1e:	e7f1      	b.n	8006f04 <prvTimerTask+0x8>

08006f20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f2a:	f7ff fa39 	bl	80063a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f866 	bl	8007004 <prvSampleTimeNow>
 8006f38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d130      	bne.n	8006fa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <prvProcessTimerOrBlockTask+0x3c>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d806      	bhi.n	8006f5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f4e:	f7ff fa35 	bl	80063bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff85 	bl	8006e64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f5a:	e024      	b.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <prvProcessTimerOrBlockTask+0x90>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <prvProcessTimerOrBlockTask+0x50>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <prvProcessTimerOrBlockTask+0x52>
 8006f70:	2300      	movs	r3, #0
 8006f72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f74:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <prvProcessTimerOrBlockTask+0x94>)
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4619      	mov	r1, r3
 8006f82:	f7fe ff7d 	bl	8005e80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f86:	f7ff fa19 	bl	80063bc <xTaskResumeAll>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f90:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <prvProcessTimerOrBlockTask+0x98>)
 8006f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	f3bf 8f6f 	isb	sy
}
 8006fa0:	e001      	b.n	8006fa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fa2:	f7ff fa0b 	bl	80063bc <xTaskResumeAll>
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20001020 	.word	0x20001020
 8006fb4:	20001024 	.word	0x20001024
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <prvGetNextExpireTime+0x44>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <prvGetNextExpireTime+0x16>
 8006fce:	2201      	movs	r2, #1
 8006fd0:	e000      	b.n	8006fd4 <prvGetNextExpireTime+0x18>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <prvGetNextExpireTime+0x44>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e001      	b.n	8006ff0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	2000101c 	.word	0x2000101c

08007004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800700c:	f7ff fa74 	bl	80064f8 <xTaskGetTickCount>
 8007010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007012:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <prvSampleTimeNow+0x3c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d205      	bcs.n	8007028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800701c:	f000 f936 	bl	800728c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e002      	b.n	800702e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800702e:	4a04      	ldr	r2, [pc, #16]	; (8007040 <prvSampleTimeNow+0x3c>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2000102c 	.word	0x2000102c

08007044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d812      	bhi.n	8007090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e01b      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <prvInsertTimerInActiveList+0x7c>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe f9dd 	bl	8005448 <vListInsert>
 800708e:	e012      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d206      	bcs.n	80070a6 <prvInsertTimerInActiveList+0x62>
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d302      	bcc.n	80070a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070a0:	2301      	movs	r3, #1
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e007      	b.n	80070b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070a6:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <prvInsertTimerInActiveList+0x80>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f7fe f9c9 	bl	8005448 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070b6:	697b      	ldr	r3, [r7, #20]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20001020 	.word	0x20001020
 80070c4:	2000101c 	.word	0x2000101c

080070c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070ce:	e0ca      	b.n	8007266 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da18      	bge.n	8007108 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070d6:	1d3b      	adds	r3, r7, #4
 80070d8:	3304      	adds	r3, #4
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	61fb      	str	r3, [r7, #28]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070fe:	6850      	ldr	r0, [r2, #4]
 8007100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007102:	6892      	ldr	r2, [r2, #8]
 8007104:	4611      	mov	r1, r2
 8007106:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	f2c0 80aa 	blt.w	8007264 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	3304      	adds	r3, #4
 8007120:	4618      	mov	r0, r3
 8007122:	f7fe f9ca 	bl	80054ba <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007126:	463b      	mov	r3, r7
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff ff6b 	bl	8007004 <prvSampleTimeNow>
 800712e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b09      	cmp	r3, #9
 8007134:	f200 8097 	bhi.w	8007266 <prvProcessReceivedCommands+0x19e>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <prvProcessReceivedCommands+0x78>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	08007169 	.word	0x08007169
 8007144:	08007169 	.word	0x08007169
 8007148:	08007169 	.word	0x08007169
 800714c:	080071dd 	.word	0x080071dd
 8007150:	080071f1 	.word	0x080071f1
 8007154:	0800723b 	.word	0x0800723b
 8007158:	08007169 	.word	0x08007169
 800715c:	08007169 	.word	0x08007169
 8007160:	080071dd 	.word	0x080071dd
 8007164:	080071f1 	.word	0x080071f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	b2da      	uxtb	r2, r3
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	18d1      	adds	r1, r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007188:	f7ff ff5c 	bl	8007044 <prvInsertTimerInActiveList>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d069      	beq.n	8007266 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007198:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d05e      	beq.n	8007266 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	441a      	add	r2, r3
 80071b0:	2300      	movs	r3, #0
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2300      	movs	r3, #0
 80071b6:	2100      	movs	r1, #0
 80071b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ba:	f7ff fe05 	bl	8006dc8 <xTimerGenericCommand>
 80071be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d14f      	bne.n	8007266 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	61bb      	str	r3, [r7, #24]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e2:	f023 0301 	bic.w	r3, r3, #1
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80071ee:	e03a      	b.n	8007266 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071f6:	f043 0301 	orr.w	r3, r3, #1
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	617b      	str	r3, [r7, #20]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	18d1      	adds	r1, r2, r3
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007234:	f7ff ff06 	bl	8007044 <prvInsertTimerInActiveList>
					break;
 8007238:	e015      	b.n	8007266 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800723a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724a:	f000 fbe1 	bl	8007a10 <vPortFree>
 800724e:	e00a      	b.n	8007266 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007262:	e000      	b.n	8007266 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007264:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007266:	4b08      	ldr	r3, [pc, #32]	; (8007288 <prvProcessReceivedCommands+0x1c0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	1d39      	adds	r1, r7, #4
 800726c:	2200      	movs	r2, #0
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fbec 	bl	8005a4c <xQueueReceive>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	f47f af2a 	bne.w	80070d0 <prvProcessReceivedCommands+0x8>
	}
}
 800727c:	bf00      	nop
 800727e:	bf00      	nop
 8007280:	3730      	adds	r7, #48	; 0x30
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20001024 	.word	0x20001024

0800728c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007292:	e048      	b.n	8007326 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007294:	4b2d      	ldr	r3, [pc, #180]	; (800734c <prvSwitchTimerLists+0xc0>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729e:	4b2b      	ldr	r3, [pc, #172]	; (800734c <prvSwitchTimerLists+0xc0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe f904 	bl	80054ba <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d02e      	beq.n	8007326 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d90e      	bls.n	80072f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072e6:	4b19      	ldr	r3, [pc, #100]	; (800734c <prvSwitchTimerLists+0xc0>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fe f8a9 	bl	8005448 <vListInsert>
 80072f6:	e016      	b.n	8007326 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072f8:	2300      	movs	r3, #0
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	2300      	movs	r3, #0
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	2100      	movs	r1, #0
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff fd60 	bl	8006dc8 <xTimerGenericCommand>
 8007308:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	603b      	str	r3, [r7, #0]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <prvSwitchTimerLists+0xc0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1b1      	bne.n	8007294 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <prvSwitchTimerLists+0xc0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007336:	4b06      	ldr	r3, [pc, #24]	; (8007350 <prvSwitchTimerLists+0xc4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a04      	ldr	r2, [pc, #16]	; (800734c <prvSwitchTimerLists+0xc0>)
 800733c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800733e:	4a04      	ldr	r2, [pc, #16]	; (8007350 <prvSwitchTimerLists+0xc4>)
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	6013      	str	r3, [r2, #0]
}
 8007344:	bf00      	nop
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	2000101c 	.word	0x2000101c
 8007350:	20001020 	.word	0x20001020

08007354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800735a:	f000 f96b 	bl	8007634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800735e:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <prvCheckForValidListAndQueue+0x60>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d120      	bne.n	80073a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007366:	4814      	ldr	r0, [pc, #80]	; (80073b8 <prvCheckForValidListAndQueue+0x64>)
 8007368:	f7fe f81d 	bl	80053a6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800736c:	4813      	ldr	r0, [pc, #76]	; (80073bc <prvCheckForValidListAndQueue+0x68>)
 800736e:	f7fe f81a 	bl	80053a6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007372:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <prvCheckForValidListAndQueue+0x6c>)
 8007374:	4a10      	ldr	r2, [pc, #64]	; (80073b8 <prvCheckForValidListAndQueue+0x64>)
 8007376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007378:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <prvCheckForValidListAndQueue+0x70>)
 800737a:	4a10      	ldr	r2, [pc, #64]	; (80073bc <prvCheckForValidListAndQueue+0x68>)
 800737c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800737e:	2300      	movs	r3, #0
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <prvCheckForValidListAndQueue+0x74>)
 8007384:	4a11      	ldr	r2, [pc, #68]	; (80073cc <prvCheckForValidListAndQueue+0x78>)
 8007386:	2110      	movs	r1, #16
 8007388:	200a      	movs	r0, #10
 800738a:	f7fe f929 	bl	80055e0 <xQueueGenericCreateStatic>
 800738e:	4603      	mov	r3, r0
 8007390:	4a08      	ldr	r2, [pc, #32]	; (80073b4 <prvCheckForValidListAndQueue+0x60>)
 8007392:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007394:	4b07      	ldr	r3, [pc, #28]	; (80073b4 <prvCheckForValidListAndQueue+0x60>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800739c:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <prvCheckForValidListAndQueue+0x60>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	490b      	ldr	r1, [pc, #44]	; (80073d0 <prvCheckForValidListAndQueue+0x7c>)
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe fd42 	bl	8005e2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073a8:	f000 f974 	bl	8007694 <vPortExitCritical>
}
 80073ac:	bf00      	nop
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20001024 	.word	0x20001024
 80073b8:	20000ff4 	.word	0x20000ff4
 80073bc:	20001008 	.word	0x20001008
 80073c0:	2000101c 	.word	0x2000101c
 80073c4:	20001020 	.word	0x20001020
 80073c8:	200010d0 	.word	0x200010d0
 80073cc:	20001030 	.word	0x20001030
 80073d0:	0800abec 	.word	0x0800abec

080073d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3b04      	subs	r3, #4
 80073e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3b04      	subs	r3, #4
 80073f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f023 0201 	bic.w	r2, r3, #1
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3b04      	subs	r3, #4
 8007402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007404:	4a0c      	ldr	r2, [pc, #48]	; (8007438 <pxPortInitialiseStack+0x64>)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3b14      	subs	r3, #20
 800740e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3b04      	subs	r3, #4
 800741a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f06f 0202 	mvn.w	r2, #2
 8007422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3b20      	subs	r3, #32
 8007428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	0800743d 	.word	0x0800743d

0800743c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <prvTaskExitError+0x54>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d00a      	beq.n	8007466 <prvTaskExitError+0x2a>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60fb      	str	r3, [r7, #12]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <prvTaskExitError+0x28>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60bb      	str	r3, [r7, #8]
}
 8007478:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800747a:	bf00      	nop
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0fc      	beq.n	800747c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007482:	bf00      	nop
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	2000000c 	.word	0x2000000c
	...

080074a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <pxCurrentTCBConst2>)
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6808      	ldr	r0, [r1, #0]
 80074a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074aa:	f380 8809 	msr	PSP, r0
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8811 	msr	BASEPRI, r0
 80074ba:	4770      	bx	lr
 80074bc:	f3af 8000 	nop.w

080074c0 <pxCurrentTCBConst2>:
 80074c0:	20000af4 	.word	0x20000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074c8:	4808      	ldr	r0, [pc, #32]	; (80074ec <prvPortStartFirstTask+0x24>)
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	6800      	ldr	r0, [r0, #0]
 80074ce:	f380 8808 	msr	MSP, r0
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8814 	msr	CONTROL, r0
 80074da:	b662      	cpsie	i
 80074dc:	b661      	cpsie	f
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	df00      	svc	0
 80074e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ea:	bf00      	nop
 80074ec:	e000ed08 	.word	0xe000ed08

080074f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074f6:	4b46      	ldr	r3, [pc, #280]	; (8007610 <xPortStartScheduler+0x120>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a46      	ldr	r2, [pc, #280]	; (8007614 <xPortStartScheduler+0x124>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10a      	bne.n	8007516 <xPortStartScheduler+0x26>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	613b      	str	r3, [r7, #16]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007516:	4b3e      	ldr	r3, [pc, #248]	; (8007610 <xPortStartScheduler+0x120>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <xPortStartScheduler+0x128>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10a      	bne.n	8007536 <xPortStartScheduler+0x46>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60fb      	str	r3, [r7, #12]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007536:	4b39      	ldr	r3, [pc, #228]	; (800761c <xPortStartScheduler+0x12c>)
 8007538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	22ff      	movs	r2, #255	; 0xff
 8007546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007558:	b2da      	uxtb	r2, r3
 800755a:	4b31      	ldr	r3, [pc, #196]	; (8007620 <xPortStartScheduler+0x130>)
 800755c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800755e:	4b31      	ldr	r3, [pc, #196]	; (8007624 <xPortStartScheduler+0x134>)
 8007560:	2207      	movs	r2, #7
 8007562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007564:	e009      	b.n	800757a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007566:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <xPortStartScheduler+0x134>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3b01      	subs	r3, #1
 800756c:	4a2d      	ldr	r2, [pc, #180]	; (8007624 <xPortStartScheduler+0x134>)
 800756e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	b2db      	uxtb	r3, r3
 8007578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d0ef      	beq.n	8007566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007586:	4b27      	ldr	r3, [pc, #156]	; (8007624 <xPortStartScheduler+0x134>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f1c3 0307 	rsb	r3, r3, #7
 800758e:	2b04      	cmp	r3, #4
 8007590:	d00a      	beq.n	80075a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60bb      	str	r3, [r7, #8]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075a8:	4b1e      	ldr	r3, [pc, #120]	; (8007624 <xPortStartScheduler+0x134>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <xPortStartScheduler+0x134>)
 80075b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <xPortStartScheduler+0x134>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ba:	4a1a      	ldr	r2, [pc, #104]	; (8007624 <xPortStartScheduler+0x134>)
 80075bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075c6:	4b18      	ldr	r3, [pc, #96]	; (8007628 <xPortStartScheduler+0x138>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <xPortStartScheduler+0x138>)
 80075cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075d2:	4b15      	ldr	r3, [pc, #84]	; (8007628 <xPortStartScheduler+0x138>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a14      	ldr	r2, [pc, #80]	; (8007628 <xPortStartScheduler+0x138>)
 80075d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075de:	f000 f8dd 	bl	800779c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075e2:	4b12      	ldr	r3, [pc, #72]	; (800762c <xPortStartScheduler+0x13c>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075e8:	f000 f8fc 	bl	80077e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075ec:	4b10      	ldr	r3, [pc, #64]	; (8007630 <xPortStartScheduler+0x140>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a0f      	ldr	r2, [pc, #60]	; (8007630 <xPortStartScheduler+0x140>)
 80075f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075f8:	f7ff ff66 	bl	80074c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075fc:	f7ff f846 	bl	800668c <vTaskSwitchContext>
	prvTaskExitError();
 8007600:	f7ff ff1c 	bl	800743c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	e000ed00 	.word	0xe000ed00
 8007614:	410fc271 	.word	0x410fc271
 8007618:	410fc270 	.word	0x410fc270
 800761c:	e000e400 	.word	0xe000e400
 8007620:	20001120 	.word	0x20001120
 8007624:	20001124 	.word	0x20001124
 8007628:	e000ed20 	.word	0xe000ed20
 800762c:	2000000c 	.word	0x2000000c
 8007630:	e000ef34 	.word	0xe000ef34

08007634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	607b      	str	r3, [r7, #4]
}
 800764c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <vPortEnterCritical+0x58>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3301      	adds	r3, #1
 8007654:	4a0d      	ldr	r2, [pc, #52]	; (800768c <vPortEnterCritical+0x58>)
 8007656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <vPortEnterCritical+0x58>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d10f      	bne.n	8007680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <vPortEnterCritical+0x5c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <vPortEnterCritical+0x4c>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	603b      	str	r3, [r7, #0]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <vPortEnterCritical+0x4a>
	}
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	2000000c 	.word	0x2000000c
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800769a:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <vPortExitCritical+0x50>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <vPortExitCritical+0x24>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	607b      	str	r3, [r7, #4]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076b8:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <vPortExitCritical+0x50>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3b01      	subs	r3, #1
 80076be:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <vPortExitCritical+0x50>)
 80076c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076c2:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <vPortExitCritical+0x50>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d105      	bne.n	80076d6 <vPortExitCritical+0x42>
 80076ca:	2300      	movs	r3, #0
 80076cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f383 8811 	msr	BASEPRI, r3
}
 80076d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	2000000c 	.word	0x2000000c
	...

080076f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076f0:	f3ef 8009 	mrs	r0, PSP
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4b15      	ldr	r3, [pc, #84]	; (8007750 <pxCurrentTCBConst>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	f01e 0f10 	tst.w	lr, #16
 8007700:	bf08      	it	eq
 8007702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	6010      	str	r0, [r2, #0]
 800770c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007714:	f380 8811 	msr	BASEPRI, r0
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f7fe ffb4 	bl	800668c <vTaskSwitchContext>
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	f380 8811 	msr	BASEPRI, r0
 800772c:	bc09      	pop	{r0, r3}
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	6808      	ldr	r0, [r1, #0]
 8007732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007736:	f01e 0f10 	tst.w	lr, #16
 800773a:	bf08      	it	eq
 800773c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007740:	f380 8809 	msr	PSP, r0
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	f3af 8000 	nop.w

08007750 <pxCurrentTCBConst>:
 8007750:	20000af4 	.word	0x20000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop

08007758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	607b      	str	r3, [r7, #4]
}
 8007770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007772:	f7fe fed1 	bl	8006518 <xTaskIncrementTick>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <xPortSysTickHandler+0x40>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f383 8811 	msr	BASEPRI, r3
}
 800778e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077a0:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <vPortSetupTimerInterrupt+0x34>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077a6:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <vPortSetupTimerInterrupt+0x38>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <vPortSetupTimerInterrupt+0x3c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <vPortSetupTimerInterrupt+0x40>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <vPortSetupTimerInterrupt+0x44>)
 80077ba:	3b01      	subs	r3, #1
 80077bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077be:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <vPortSetupTimerInterrupt+0x34>)
 80077c0:	2207      	movs	r2, #7
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	e000e010 	.word	0xe000e010
 80077d4:	e000e018 	.word	0xe000e018
 80077d8:	20000000 	.word	0x20000000
 80077dc:	10624dd3 	.word	0x10624dd3
 80077e0:	e000e014 	.word	0xe000e014

080077e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077f4 <vPortEnableVFP+0x10>
 80077e8:	6801      	ldr	r1, [r0, #0]
 80077ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077ee:	6001      	str	r1, [r0, #0]
 80077f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077f2:	bf00      	nop
 80077f4:	e000ed88 	.word	0xe000ed88

080077f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077fe:	f3ef 8305 	mrs	r3, IPSR
 8007802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d914      	bls.n	8007834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800780a:	4a17      	ldr	r2, [pc, #92]	; (8007868 <vPortValidateInterruptPriority+0x70>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007814:	4b15      	ldr	r3, [pc, #84]	; (800786c <vPortValidateInterruptPriority+0x74>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	7afa      	ldrb	r2, [r7, #11]
 800781a:	429a      	cmp	r2, r3
 800781c:	d20a      	bcs.n	8007834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <vPortValidateInterruptPriority+0x78>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <vPortValidateInterruptPriority+0x7c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d90a      	bls.n	800785a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	603b      	str	r3, [r7, #0]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <vPortValidateInterruptPriority+0x60>
	}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	e000e3f0 	.word	0xe000e3f0
 800786c:	20001120 	.word	0x20001120
 8007870:	e000ed0c 	.word	0xe000ed0c
 8007874:	20001124 	.word	0x20001124

08007878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007884:	f7fe fd8c 	bl	80063a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007888:	4b5b      	ldr	r3, [pc, #364]	; (80079f8 <pvPortMalloc+0x180>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007890:	f000 f920 	bl	8007ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007894:	4b59      	ldr	r3, [pc, #356]	; (80079fc <pvPortMalloc+0x184>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 8093 	bne.w	80079c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01d      	beq.n	80078e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078a8:	2208      	movs	r2, #8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d014      	beq.n	80078e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f023 0307 	bic.w	r3, r3, #7
 80078c0:	3308      	adds	r3, #8
 80078c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <pvPortMalloc+0x6c>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	617b      	str	r3, [r7, #20]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d06e      	beq.n	80079c8 <pvPortMalloc+0x150>
 80078ea:	4b45      	ldr	r3, [pc, #276]	; (8007a00 <pvPortMalloc+0x188>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d869      	bhi.n	80079c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078f4:	4b43      	ldr	r3, [pc, #268]	; (8007a04 <pvPortMalloc+0x18c>)
 80078f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078f8:	4b42      	ldr	r3, [pc, #264]	; (8007a04 <pvPortMalloc+0x18c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078fe:	e004      	b.n	800790a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d903      	bls.n	800791c <pvPortMalloc+0xa4>
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f1      	bne.n	8007900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800791c:	4b36      	ldr	r3, [pc, #216]	; (80079f8 <pvPortMalloc+0x180>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007922:	429a      	cmp	r2, r3
 8007924:	d050      	beq.n	80079c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2208      	movs	r2, #8
 800792c:	4413      	add	r3, r2
 800792e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	1ad2      	subs	r2, r2, r3
 8007940:	2308      	movs	r3, #8
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	429a      	cmp	r2, r3
 8007946:	d91f      	bls.n	8007988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <pvPortMalloc+0xf8>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	613b      	str	r3, [r7, #16]
}
 800796c:	bf00      	nop
 800796e:	e7fe      	b.n	800796e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007982:	69b8      	ldr	r0, [r7, #24]
 8007984:	f000 f908 	bl	8007b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007988:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <pvPortMalloc+0x188>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	4a1b      	ldr	r2, [pc, #108]	; (8007a00 <pvPortMalloc+0x188>)
 8007994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007996:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <pvPortMalloc+0x188>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <pvPortMalloc+0x190>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d203      	bcs.n	80079aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079a2:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <pvPortMalloc+0x188>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <pvPortMalloc+0x190>)
 80079a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <pvPortMalloc+0x184>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <pvPortMalloc+0x194>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a11      	ldr	r2, [pc, #68]	; (8007a0c <pvPortMalloc+0x194>)
 80079c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079c8:	f7fe fcf8 	bl	80063bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <pvPortMalloc+0x174>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	60fb      	str	r3, [r7, #12]
}
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <pvPortMalloc+0x172>
	return pvReturn;
 80079ec:	69fb      	ldr	r3, [r7, #28]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3728      	adds	r7, #40	; 0x28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20004d30 	.word	0x20004d30
 80079fc:	20004d44 	.word	0x20004d44
 8007a00:	20004d34 	.word	0x20004d34
 8007a04:	20004d28 	.word	0x20004d28
 8007a08:	20004d38 	.word	0x20004d38
 8007a0c:	20004d3c 	.word	0x20004d3c

08007a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d04d      	beq.n	8007abe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a22:	2308      	movs	r3, #8
 8007a24:	425b      	negs	r3, r3
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4413      	add	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	4b24      	ldr	r3, [pc, #144]	; (8007ac8 <vPortFree+0xb8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <vPortFree+0x44>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <vPortFree+0x62>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60bb      	str	r3, [r7, #8]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <vPortFree+0xb8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01e      	beq.n	8007abe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11a      	bne.n	8007abe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <vPortFree+0xb8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a98:	f7fe fc82 	bl	80063a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <vPortFree+0xbc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	4a09      	ldr	r2, [pc, #36]	; (8007acc <vPortFree+0xbc>)
 8007aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aaa:	6938      	ldr	r0, [r7, #16]
 8007aac:	f000 f874 	bl	8007b98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <vPortFree+0xc0>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	4a06      	ldr	r2, [pc, #24]	; (8007ad0 <vPortFree+0xc0>)
 8007ab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aba:	f7fe fc7f 	bl	80063bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20004d44 	.word	0x20004d44
 8007acc:	20004d34 	.word	0x20004d34
 8007ad0:	20004d40 	.word	0x20004d40

08007ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ada:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ae0:	4b27      	ldr	r3, [pc, #156]	; (8007b80 <prvHeapInit+0xac>)
 8007ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3307      	adds	r3, #7
 8007af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0307 	bic.w	r3, r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <prvHeapInit+0xac>)
 8007b04:	4413      	add	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b0c:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <prvHeapInit+0xb0>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b12:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <prvHeapInit+0xb0>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b20:	2208      	movs	r2, #8
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <prvHeapInit+0xb4>)
 8007b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b36:	4b14      	ldr	r3, [pc, #80]	; (8007b88 <prvHeapInit+0xb4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b3e:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <prvHeapInit+0xb4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b54:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <prvHeapInit+0xb4>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	4a0a      	ldr	r2, [pc, #40]	; (8007b8c <prvHeapInit+0xb8>)
 8007b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <prvHeapInit+0xbc>)
 8007b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b6c:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <prvHeapInit+0xc0>)
 8007b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	20001128 	.word	0x20001128
 8007b84:	20004d28 	.word	0x20004d28
 8007b88:	20004d30 	.word	0x20004d30
 8007b8c:	20004d38 	.word	0x20004d38
 8007b90:	20004d34 	.word	0x20004d34
 8007b94:	20004d44 	.word	0x20004d44

08007b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <prvInsertBlockIntoFreeList+0xac>)
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e002      	b.n	8007bac <prvInsertBlockIntoFreeList+0x14>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d8f7      	bhi.n	8007ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d108      	bne.n	8007bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	441a      	add	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	441a      	add	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d118      	bne.n	8007c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <prvInsertBlockIntoFreeList+0xb0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d00d      	beq.n	8007c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	441a      	add	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e008      	b.n	8007c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c16:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <prvInsertBlockIntoFreeList+0xb0>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e003      	b.n	8007c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d002      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c36:	bf00      	nop
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20004d28 	.word	0x20004d28
 8007c48:	20004d30 	.word	0x20004d30

08007c4c <__errno>:
 8007c4c:	4b01      	ldr	r3, [pc, #4]	; (8007c54 <__errno+0x8>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000010 	.word	0x20000010

08007c58 <std>:
 8007c58:	2300      	movs	r3, #0
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c66:	6083      	str	r3, [r0, #8]
 8007c68:	8181      	strh	r1, [r0, #12]
 8007c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c6c:	81c2      	strh	r2, [r0, #14]
 8007c6e:	6183      	str	r3, [r0, #24]
 8007c70:	4619      	mov	r1, r3
 8007c72:	2208      	movs	r2, #8
 8007c74:	305c      	adds	r0, #92	; 0x5c
 8007c76:	f000 f91a 	bl	8007eae <memset>
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <std+0x38>)
 8007c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <std+0x3c>)
 8007c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <std+0x40>)
 8007c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <std+0x44>)
 8007c88:	6224      	str	r4, [r4, #32]
 8007c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	08008a19 	.word	0x08008a19
 8007c94:	08008a3b 	.word	0x08008a3b
 8007c98:	08008a73 	.word	0x08008a73
 8007c9c:	08008a97 	.word	0x08008a97

08007ca0 <_cleanup_r>:
 8007ca0:	4901      	ldr	r1, [pc, #4]	; (8007ca8 <_cleanup_r+0x8>)
 8007ca2:	f000 b8af 	b.w	8007e04 <_fwalk_reent>
 8007ca6:	bf00      	nop
 8007ca8:	080098e9 	.word	0x080098e9

08007cac <__sfmoreglue>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	2268      	movs	r2, #104	; 0x68
 8007cb0:	1e4d      	subs	r5, r1, #1
 8007cb2:	4355      	muls	r5, r2
 8007cb4:	460e      	mov	r6, r1
 8007cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cba:	f000 f921 	bl	8007f00 <_malloc_r>
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	b140      	cbz	r0, 8007cd4 <__sfmoreglue+0x28>
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8007cc8:	300c      	adds	r0, #12
 8007cca:	60a0      	str	r0, [r4, #8]
 8007ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cd0:	f000 f8ed 	bl	8007eae <memset>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}

08007cd8 <__sfp_lock_acquire>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sfp_lock_acquire+0x8>)
 8007cda:	f000 b8d8 	b.w	8007e8e <__retarget_lock_acquire_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20004d49 	.word	0x20004d49

08007ce4 <__sfp_lock_release>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__sfp_lock_release+0x8>)
 8007ce6:	f000 b8d3 	b.w	8007e90 <__retarget_lock_release_recursive>
 8007cea:	bf00      	nop
 8007cec:	20004d49 	.word	0x20004d49

08007cf0 <__sinit_lock_acquire>:
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <__sinit_lock_acquire+0x8>)
 8007cf2:	f000 b8cc 	b.w	8007e8e <__retarget_lock_acquire_recursive>
 8007cf6:	bf00      	nop
 8007cf8:	20004d4a 	.word	0x20004d4a

08007cfc <__sinit_lock_release>:
 8007cfc:	4801      	ldr	r0, [pc, #4]	; (8007d04 <__sinit_lock_release+0x8>)
 8007cfe:	f000 b8c7 	b.w	8007e90 <__retarget_lock_release_recursive>
 8007d02:	bf00      	nop
 8007d04:	20004d4a 	.word	0x20004d4a

08007d08 <__sinit>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	f7ff fff0 	bl	8007cf0 <__sinit_lock_acquire>
 8007d10:	69a3      	ldr	r3, [r4, #24]
 8007d12:	b11b      	cbz	r3, 8007d1c <__sinit+0x14>
 8007d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d18:	f7ff bff0 	b.w	8007cfc <__sinit_lock_release>
 8007d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d20:	6523      	str	r3, [r4, #80]	; 0x50
 8007d22:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <__sinit+0x68>)
 8007d24:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <__sinit+0x6c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	bf04      	itt	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	61a3      	streq	r3, [r4, #24]
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 f820 	bl	8007d78 <__sfp>
 8007d38:	6060      	str	r0, [r4, #4]
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 f81c 	bl	8007d78 <__sfp>
 8007d40:	60a0      	str	r0, [r4, #8]
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 f818 	bl	8007d78 <__sfp>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	60e0      	str	r0, [r4, #12]
 8007d4c:	2104      	movs	r1, #4
 8007d4e:	6860      	ldr	r0, [r4, #4]
 8007d50:	f7ff ff82 	bl	8007c58 <std>
 8007d54:	68a0      	ldr	r0, [r4, #8]
 8007d56:	2201      	movs	r2, #1
 8007d58:	2109      	movs	r1, #9
 8007d5a:	f7ff ff7d 	bl	8007c58 <std>
 8007d5e:	68e0      	ldr	r0, [r4, #12]
 8007d60:	2202      	movs	r2, #2
 8007d62:	2112      	movs	r1, #18
 8007d64:	f7ff ff78 	bl	8007c58 <std>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	61a3      	str	r3, [r4, #24]
 8007d6c:	e7d2      	b.n	8007d14 <__sinit+0xc>
 8007d6e:	bf00      	nop
 8007d70:	0800ace8 	.word	0x0800ace8
 8007d74:	08007ca1 	.word	0x08007ca1

08007d78 <__sfp>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	4607      	mov	r7, r0
 8007d7c:	f7ff ffac 	bl	8007cd8 <__sfp_lock_acquire>
 8007d80:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <__sfp+0x84>)
 8007d82:	681e      	ldr	r6, [r3, #0]
 8007d84:	69b3      	ldr	r3, [r6, #24]
 8007d86:	b913      	cbnz	r3, 8007d8e <__sfp+0x16>
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff ffbd 	bl	8007d08 <__sinit>
 8007d8e:	3648      	adds	r6, #72	; 0x48
 8007d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	d503      	bpl.n	8007da0 <__sfp+0x28>
 8007d98:	6833      	ldr	r3, [r6, #0]
 8007d9a:	b30b      	cbz	r3, 8007de0 <__sfp+0x68>
 8007d9c:	6836      	ldr	r6, [r6, #0]
 8007d9e:	e7f7      	b.n	8007d90 <__sfp+0x18>
 8007da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007da4:	b9d5      	cbnz	r5, 8007ddc <__sfp+0x64>
 8007da6:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <__sfp+0x88>)
 8007da8:	60e3      	str	r3, [r4, #12]
 8007daa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dae:	6665      	str	r5, [r4, #100]	; 0x64
 8007db0:	f000 f86c 	bl	8007e8c <__retarget_lock_init_recursive>
 8007db4:	f7ff ff96 	bl	8007ce4 <__sfp_lock_release>
 8007db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dc0:	6025      	str	r5, [r4, #0]
 8007dc2:	61a5      	str	r5, [r4, #24]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dcc:	f000 f86f 	bl	8007eae <memset>
 8007dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dd8:	4620      	mov	r0, r4
 8007dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ddc:	3468      	adds	r4, #104	; 0x68
 8007dde:	e7d9      	b.n	8007d94 <__sfp+0x1c>
 8007de0:	2104      	movs	r1, #4
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7ff ff62 	bl	8007cac <__sfmoreglue>
 8007de8:	4604      	mov	r4, r0
 8007dea:	6030      	str	r0, [r6, #0]
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d1d5      	bne.n	8007d9c <__sfp+0x24>
 8007df0:	f7ff ff78 	bl	8007ce4 <__sfp_lock_release>
 8007df4:	230c      	movs	r3, #12
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	e7ee      	b.n	8007dd8 <__sfp+0x60>
 8007dfa:	bf00      	nop
 8007dfc:	0800ace8 	.word	0x0800ace8
 8007e00:	ffff0001 	.word	0xffff0001

08007e04 <_fwalk_reent>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	4606      	mov	r6, r0
 8007e0a:	4688      	mov	r8, r1
 8007e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e10:	2700      	movs	r7, #0
 8007e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e16:	f1b9 0901 	subs.w	r9, r9, #1
 8007e1a:	d505      	bpl.n	8007e28 <_fwalk_reent+0x24>
 8007e1c:	6824      	ldr	r4, [r4, #0]
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	d1f7      	bne.n	8007e12 <_fwalk_reent+0xe>
 8007e22:	4638      	mov	r0, r7
 8007e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e28:	89ab      	ldrh	r3, [r5, #12]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d907      	bls.n	8007e3e <_fwalk_reent+0x3a>
 8007e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e32:	3301      	adds	r3, #1
 8007e34:	d003      	beq.n	8007e3e <_fwalk_reent+0x3a>
 8007e36:	4629      	mov	r1, r5
 8007e38:	4630      	mov	r0, r6
 8007e3a:	47c0      	blx	r8
 8007e3c:	4307      	orrs	r7, r0
 8007e3e:	3568      	adds	r5, #104	; 0x68
 8007e40:	e7e9      	b.n	8007e16 <_fwalk_reent+0x12>
	...

08007e44 <__libc_init_array>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	4d0d      	ldr	r5, [pc, #52]	; (8007e7c <__libc_init_array+0x38>)
 8007e48:	4c0d      	ldr	r4, [pc, #52]	; (8007e80 <__libc_init_array+0x3c>)
 8007e4a:	1b64      	subs	r4, r4, r5
 8007e4c:	10a4      	asrs	r4, r4, #2
 8007e4e:	2600      	movs	r6, #0
 8007e50:	42a6      	cmp	r6, r4
 8007e52:	d109      	bne.n	8007e68 <__libc_init_array+0x24>
 8007e54:	4d0b      	ldr	r5, [pc, #44]	; (8007e84 <__libc_init_array+0x40>)
 8007e56:	4c0c      	ldr	r4, [pc, #48]	; (8007e88 <__libc_init_array+0x44>)
 8007e58:	f002 fe8c 	bl	800ab74 <_init>
 8007e5c:	1b64      	subs	r4, r4, r5
 8007e5e:	10a4      	asrs	r4, r4, #2
 8007e60:	2600      	movs	r6, #0
 8007e62:	42a6      	cmp	r6, r4
 8007e64:	d105      	bne.n	8007e72 <__libc_init_array+0x2e>
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6c:	4798      	blx	r3
 8007e6e:	3601      	adds	r6, #1
 8007e70:	e7ee      	b.n	8007e50 <__libc_init_array+0xc>
 8007e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e76:	4798      	blx	r3
 8007e78:	3601      	adds	r6, #1
 8007e7a:	e7f2      	b.n	8007e62 <__libc_init_array+0x1e>
 8007e7c:	0800b06c 	.word	0x0800b06c
 8007e80:	0800b06c 	.word	0x0800b06c
 8007e84:	0800b06c 	.word	0x0800b06c
 8007e88:	0800b070 	.word	0x0800b070

08007e8c <__retarget_lock_init_recursive>:
 8007e8c:	4770      	bx	lr

08007e8e <__retarget_lock_acquire_recursive>:
 8007e8e:	4770      	bx	lr

08007e90 <__retarget_lock_release_recursive>:
 8007e90:	4770      	bx	lr

08007e92 <memcpy>:
 8007e92:	440a      	add	r2, r1
 8007e94:	4291      	cmp	r1, r2
 8007e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e9a:	d100      	bne.n	8007e9e <memcpy+0xc>
 8007e9c:	4770      	bx	lr
 8007e9e:	b510      	push	{r4, lr}
 8007ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea8:	4291      	cmp	r1, r2
 8007eaa:	d1f9      	bne.n	8007ea0 <memcpy+0xe>
 8007eac:	bd10      	pop	{r4, pc}

08007eae <memset>:
 8007eae:	4402      	add	r2, r0
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d100      	bne.n	8007eb8 <memset+0xa>
 8007eb6:	4770      	bx	lr
 8007eb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ebc:	e7f9      	b.n	8007eb2 <memset+0x4>
	...

08007ec0 <sbrk_aligned>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	4e0e      	ldr	r6, [pc, #56]	; (8007efc <sbrk_aligned+0x3c>)
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	6831      	ldr	r1, [r6, #0]
 8007ec8:	4605      	mov	r5, r0
 8007eca:	b911      	cbnz	r1, 8007ed2 <sbrk_aligned+0x12>
 8007ecc:	f000 fd60 	bl	8008990 <_sbrk_r>
 8007ed0:	6030      	str	r0, [r6, #0]
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f000 fd5b 	bl	8008990 <_sbrk_r>
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	d00a      	beq.n	8007ef4 <sbrk_aligned+0x34>
 8007ede:	1cc4      	adds	r4, r0, #3
 8007ee0:	f024 0403 	bic.w	r4, r4, #3
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d007      	beq.n	8007ef8 <sbrk_aligned+0x38>
 8007ee8:	1a21      	subs	r1, r4, r0
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 fd50 	bl	8008990 <_sbrk_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d101      	bne.n	8007ef8 <sbrk_aligned+0x38>
 8007ef4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ef8:	4620      	mov	r0, r4
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	20004d50 	.word	0x20004d50

08007f00 <_malloc_r>:
 8007f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f04:	1ccd      	adds	r5, r1, #3
 8007f06:	f025 0503 	bic.w	r5, r5, #3
 8007f0a:	3508      	adds	r5, #8
 8007f0c:	2d0c      	cmp	r5, #12
 8007f0e:	bf38      	it	cc
 8007f10:	250c      	movcc	r5, #12
 8007f12:	2d00      	cmp	r5, #0
 8007f14:	4607      	mov	r7, r0
 8007f16:	db01      	blt.n	8007f1c <_malloc_r+0x1c>
 8007f18:	42a9      	cmp	r1, r5
 8007f1a:	d905      	bls.n	8007f28 <_malloc_r+0x28>
 8007f1c:	230c      	movs	r3, #12
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	2600      	movs	r6, #0
 8007f22:	4630      	mov	r0, r6
 8007f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f28:	4e2e      	ldr	r6, [pc, #184]	; (8007fe4 <_malloc_r+0xe4>)
 8007f2a:	f001 fd37 	bl	800999c <__malloc_lock>
 8007f2e:	6833      	ldr	r3, [r6, #0]
 8007f30:	461c      	mov	r4, r3
 8007f32:	bb34      	cbnz	r4, 8007f82 <_malloc_r+0x82>
 8007f34:	4629      	mov	r1, r5
 8007f36:	4638      	mov	r0, r7
 8007f38:	f7ff ffc2 	bl	8007ec0 <sbrk_aligned>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	4604      	mov	r4, r0
 8007f40:	d14d      	bne.n	8007fde <_malloc_r+0xde>
 8007f42:	6834      	ldr	r4, [r6, #0]
 8007f44:	4626      	mov	r6, r4
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	d140      	bne.n	8007fcc <_malloc_r+0xcc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4638      	mov	r0, r7
 8007f50:	eb04 0803 	add.w	r8, r4, r3
 8007f54:	f000 fd1c 	bl	8008990 <_sbrk_r>
 8007f58:	4580      	cmp	r8, r0
 8007f5a:	d13a      	bne.n	8007fd2 <_malloc_r+0xd2>
 8007f5c:	6821      	ldr	r1, [r4, #0]
 8007f5e:	3503      	adds	r5, #3
 8007f60:	1a6d      	subs	r5, r5, r1
 8007f62:	f025 0503 	bic.w	r5, r5, #3
 8007f66:	3508      	adds	r5, #8
 8007f68:	2d0c      	cmp	r5, #12
 8007f6a:	bf38      	it	cc
 8007f6c:	250c      	movcc	r5, #12
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ffa5 	bl	8007ec0 <sbrk_aligned>
 8007f76:	3001      	adds	r0, #1
 8007f78:	d02b      	beq.n	8007fd2 <_malloc_r+0xd2>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	442b      	add	r3, r5
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	e00e      	b.n	8007fa0 <_malloc_r+0xa0>
 8007f82:	6822      	ldr	r2, [r4, #0]
 8007f84:	1b52      	subs	r2, r2, r5
 8007f86:	d41e      	bmi.n	8007fc6 <_malloc_r+0xc6>
 8007f88:	2a0b      	cmp	r2, #11
 8007f8a:	d916      	bls.n	8007fba <_malloc_r+0xba>
 8007f8c:	1961      	adds	r1, r4, r5
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	6025      	str	r5, [r4, #0]
 8007f92:	bf18      	it	ne
 8007f94:	6059      	strne	r1, [r3, #4]
 8007f96:	6863      	ldr	r3, [r4, #4]
 8007f98:	bf08      	it	eq
 8007f9a:	6031      	streq	r1, [r6, #0]
 8007f9c:	5162      	str	r2, [r4, r5]
 8007f9e:	604b      	str	r3, [r1, #4]
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f104 060b 	add.w	r6, r4, #11
 8007fa6:	f001 fcff 	bl	80099a8 <__malloc_unlock>
 8007faa:	f026 0607 	bic.w	r6, r6, #7
 8007fae:	1d23      	adds	r3, r4, #4
 8007fb0:	1af2      	subs	r2, r6, r3
 8007fb2:	d0b6      	beq.n	8007f22 <_malloc_r+0x22>
 8007fb4:	1b9b      	subs	r3, r3, r6
 8007fb6:	50a3      	str	r3, [r4, r2]
 8007fb8:	e7b3      	b.n	8007f22 <_malloc_r+0x22>
 8007fba:	6862      	ldr	r2, [r4, #4]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	bf0c      	ite	eq
 8007fc0:	6032      	streq	r2, [r6, #0]
 8007fc2:	605a      	strne	r2, [r3, #4]
 8007fc4:	e7ec      	b.n	8007fa0 <_malloc_r+0xa0>
 8007fc6:	4623      	mov	r3, r4
 8007fc8:	6864      	ldr	r4, [r4, #4]
 8007fca:	e7b2      	b.n	8007f32 <_malloc_r+0x32>
 8007fcc:	4634      	mov	r4, r6
 8007fce:	6876      	ldr	r6, [r6, #4]
 8007fd0:	e7b9      	b.n	8007f46 <_malloc_r+0x46>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	603b      	str	r3, [r7, #0]
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	f001 fce6 	bl	80099a8 <__malloc_unlock>
 8007fdc:	e7a1      	b.n	8007f22 <_malloc_r+0x22>
 8007fde:	6025      	str	r5, [r4, #0]
 8007fe0:	e7de      	b.n	8007fa0 <_malloc_r+0xa0>
 8007fe2:	bf00      	nop
 8007fe4:	20004d4c 	.word	0x20004d4c

08007fe8 <__cvt>:
 8007fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fec:	ec55 4b10 	vmov	r4, r5, d0
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	460e      	mov	r6, r1
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	462b      	mov	r3, r5
 8007ff8:	bfbb      	ittet	lt
 8007ffa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ffe:	461d      	movlt	r5, r3
 8008000:	2300      	movge	r3, #0
 8008002:	232d      	movlt	r3, #45	; 0x2d
 8008004:	700b      	strb	r3, [r1, #0]
 8008006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008008:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800800c:	4691      	mov	r9, r2
 800800e:	f023 0820 	bic.w	r8, r3, #32
 8008012:	bfbc      	itt	lt
 8008014:	4622      	movlt	r2, r4
 8008016:	4614      	movlt	r4, r2
 8008018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800801c:	d005      	beq.n	800802a <__cvt+0x42>
 800801e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008022:	d100      	bne.n	8008026 <__cvt+0x3e>
 8008024:	3601      	adds	r6, #1
 8008026:	2102      	movs	r1, #2
 8008028:	e000      	b.n	800802c <__cvt+0x44>
 800802a:	2103      	movs	r1, #3
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	ab02      	add	r3, sp, #8
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	ec45 4b10 	vmov	d0, r4, r5
 8008038:	4653      	mov	r3, sl
 800803a:	4632      	mov	r2, r6
 800803c:	f000 fde0 	bl	8008c00 <_dtoa_r>
 8008040:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008044:	4607      	mov	r7, r0
 8008046:	d102      	bne.n	800804e <__cvt+0x66>
 8008048:	f019 0f01 	tst.w	r9, #1
 800804c:	d022      	beq.n	8008094 <__cvt+0xac>
 800804e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008052:	eb07 0906 	add.w	r9, r7, r6
 8008056:	d110      	bne.n	800807a <__cvt+0x92>
 8008058:	783b      	ldrb	r3, [r7, #0]
 800805a:	2b30      	cmp	r3, #48	; 0x30
 800805c:	d10a      	bne.n	8008074 <__cvt+0x8c>
 800805e:	2200      	movs	r2, #0
 8008060:	2300      	movs	r3, #0
 8008062:	4620      	mov	r0, r4
 8008064:	4629      	mov	r1, r5
 8008066:	f7f8 fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800806a:	b918      	cbnz	r0, 8008074 <__cvt+0x8c>
 800806c:	f1c6 0601 	rsb	r6, r6, #1
 8008070:	f8ca 6000 	str.w	r6, [sl]
 8008074:	f8da 3000 	ldr.w	r3, [sl]
 8008078:	4499      	add	r9, r3
 800807a:	2200      	movs	r2, #0
 800807c:	2300      	movs	r3, #0
 800807e:	4620      	mov	r0, r4
 8008080:	4629      	mov	r1, r5
 8008082:	f7f8 fd29 	bl	8000ad8 <__aeabi_dcmpeq>
 8008086:	b108      	cbz	r0, 800808c <__cvt+0xa4>
 8008088:	f8cd 900c 	str.w	r9, [sp, #12]
 800808c:	2230      	movs	r2, #48	; 0x30
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	454b      	cmp	r3, r9
 8008092:	d307      	bcc.n	80080a4 <__cvt+0xbc>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008098:	1bdb      	subs	r3, r3, r7
 800809a:	4638      	mov	r0, r7
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	b004      	add	sp, #16
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a4:	1c59      	adds	r1, r3, #1
 80080a6:	9103      	str	r1, [sp, #12]
 80080a8:	701a      	strb	r2, [r3, #0]
 80080aa:	e7f0      	b.n	800808e <__cvt+0xa6>

080080ac <__exponent>:
 80080ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ae:	4603      	mov	r3, r0
 80080b0:	2900      	cmp	r1, #0
 80080b2:	bfb8      	it	lt
 80080b4:	4249      	neglt	r1, r1
 80080b6:	f803 2b02 	strb.w	r2, [r3], #2
 80080ba:	bfb4      	ite	lt
 80080bc:	222d      	movlt	r2, #45	; 0x2d
 80080be:	222b      	movge	r2, #43	; 0x2b
 80080c0:	2909      	cmp	r1, #9
 80080c2:	7042      	strb	r2, [r0, #1]
 80080c4:	dd2a      	ble.n	800811c <__exponent+0x70>
 80080c6:	f10d 0407 	add.w	r4, sp, #7
 80080ca:	46a4      	mov	ip, r4
 80080cc:	270a      	movs	r7, #10
 80080ce:	46a6      	mov	lr, r4
 80080d0:	460a      	mov	r2, r1
 80080d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80080d6:	fb07 1516 	mls	r5, r7, r6, r1
 80080da:	3530      	adds	r5, #48	; 0x30
 80080dc:	2a63      	cmp	r2, #99	; 0x63
 80080de:	f104 34ff 	add.w	r4, r4, #4294967295
 80080e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080e6:	4631      	mov	r1, r6
 80080e8:	dcf1      	bgt.n	80080ce <__exponent+0x22>
 80080ea:	3130      	adds	r1, #48	; 0x30
 80080ec:	f1ae 0502 	sub.w	r5, lr, #2
 80080f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080f4:	1c44      	adds	r4, r0, #1
 80080f6:	4629      	mov	r1, r5
 80080f8:	4561      	cmp	r1, ip
 80080fa:	d30a      	bcc.n	8008112 <__exponent+0x66>
 80080fc:	f10d 0209 	add.w	r2, sp, #9
 8008100:	eba2 020e 	sub.w	r2, r2, lr
 8008104:	4565      	cmp	r5, ip
 8008106:	bf88      	it	hi
 8008108:	2200      	movhi	r2, #0
 800810a:	4413      	add	r3, r2
 800810c:	1a18      	subs	r0, r3, r0
 800810e:	b003      	add	sp, #12
 8008110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008116:	f804 2f01 	strb.w	r2, [r4, #1]!
 800811a:	e7ed      	b.n	80080f8 <__exponent+0x4c>
 800811c:	2330      	movs	r3, #48	; 0x30
 800811e:	3130      	adds	r1, #48	; 0x30
 8008120:	7083      	strb	r3, [r0, #2]
 8008122:	70c1      	strb	r1, [r0, #3]
 8008124:	1d03      	adds	r3, r0, #4
 8008126:	e7f1      	b.n	800810c <__exponent+0x60>

08008128 <_printf_float>:
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	ed2d 8b02 	vpush	{d8}
 8008130:	b08d      	sub	sp, #52	; 0x34
 8008132:	460c      	mov	r4, r1
 8008134:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008138:	4616      	mov	r6, r2
 800813a:	461f      	mov	r7, r3
 800813c:	4605      	mov	r5, r0
 800813e:	f001 fc0f 	bl	8009960 <_localeconv_r>
 8008142:	f8d0 a000 	ldr.w	sl, [r0]
 8008146:	4650      	mov	r0, sl
 8008148:	f7f8 f84a 	bl	80001e0 <strlen>
 800814c:	2300      	movs	r3, #0
 800814e:	930a      	str	r3, [sp, #40]	; 0x28
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	f8d8 3000 	ldr.w	r3, [r8]
 8008158:	f894 b018 	ldrb.w	fp, [r4, #24]
 800815c:	3307      	adds	r3, #7
 800815e:	f023 0307 	bic.w	r3, r3, #7
 8008162:	f103 0208 	add.w	r2, r3, #8
 8008166:	f8c8 2000 	str.w	r2, [r8]
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008172:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800817a:	9307      	str	r3, [sp, #28]
 800817c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008180:	ee08 0a10 	vmov	s16, r0
 8008184:	4b9f      	ldr	r3, [pc, #636]	; (8008404 <_printf_float+0x2dc>)
 8008186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	f7f8 fcd5 	bl	8000b3c <__aeabi_dcmpun>
 8008192:	bb88      	cbnz	r0, 80081f8 <_printf_float+0xd0>
 8008194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008198:	4b9a      	ldr	r3, [pc, #616]	; (8008404 <_printf_float+0x2dc>)
 800819a:	f04f 32ff 	mov.w	r2, #4294967295
 800819e:	f7f8 fcaf 	bl	8000b00 <__aeabi_dcmple>
 80081a2:	bb48      	cbnz	r0, 80081f8 <_printf_float+0xd0>
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	4640      	mov	r0, r8
 80081aa:	4649      	mov	r1, r9
 80081ac:	f7f8 fc9e 	bl	8000aec <__aeabi_dcmplt>
 80081b0:	b110      	cbz	r0, 80081b8 <_printf_float+0x90>
 80081b2:	232d      	movs	r3, #45	; 0x2d
 80081b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081b8:	4b93      	ldr	r3, [pc, #588]	; (8008408 <_printf_float+0x2e0>)
 80081ba:	4894      	ldr	r0, [pc, #592]	; (800840c <_printf_float+0x2e4>)
 80081bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081c0:	bf94      	ite	ls
 80081c2:	4698      	movls	r8, r3
 80081c4:	4680      	movhi	r8, r0
 80081c6:	2303      	movs	r3, #3
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	9b05      	ldr	r3, [sp, #20]
 80081cc:	f023 0204 	bic.w	r2, r3, #4
 80081d0:	6022      	str	r2, [r4, #0]
 80081d2:	f04f 0900 	mov.w	r9, #0
 80081d6:	9700      	str	r7, [sp, #0]
 80081d8:	4633      	mov	r3, r6
 80081da:	aa0b      	add	r2, sp, #44	; 0x2c
 80081dc:	4621      	mov	r1, r4
 80081de:	4628      	mov	r0, r5
 80081e0:	f000 f9d8 	bl	8008594 <_printf_common>
 80081e4:	3001      	adds	r0, #1
 80081e6:	f040 8090 	bne.w	800830a <_printf_float+0x1e2>
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295
 80081ee:	b00d      	add	sp, #52	; 0x34
 80081f0:	ecbd 8b02 	vpop	{d8}
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	f7f8 fc9c 	bl	8000b3c <__aeabi_dcmpun>
 8008204:	b140      	cbz	r0, 8008218 <_printf_float+0xf0>
 8008206:	464b      	mov	r3, r9
 8008208:	2b00      	cmp	r3, #0
 800820a:	bfbc      	itt	lt
 800820c:	232d      	movlt	r3, #45	; 0x2d
 800820e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008212:	487f      	ldr	r0, [pc, #508]	; (8008410 <_printf_float+0x2e8>)
 8008214:	4b7f      	ldr	r3, [pc, #508]	; (8008414 <_printf_float+0x2ec>)
 8008216:	e7d1      	b.n	80081bc <_printf_float+0x94>
 8008218:	6863      	ldr	r3, [r4, #4]
 800821a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800821e:	9206      	str	r2, [sp, #24]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	d13f      	bne.n	80082a4 <_printf_float+0x17c>
 8008224:	2306      	movs	r3, #6
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	9b05      	ldr	r3, [sp, #20]
 800822a:	6861      	ldr	r1, [r4, #4]
 800822c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008230:	2300      	movs	r3, #0
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	ab0a      	add	r3, sp, #40	; 0x28
 8008236:	e9cd b301 	strd	fp, r3, [sp, #4]
 800823a:	ab09      	add	r3, sp, #36	; 0x24
 800823c:	ec49 8b10 	vmov	d0, r8, r9
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	6022      	str	r2, [r4, #0]
 8008244:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008248:	4628      	mov	r0, r5
 800824a:	f7ff fecd 	bl	8007fe8 <__cvt>
 800824e:	9b06      	ldr	r3, [sp, #24]
 8008250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008252:	2b47      	cmp	r3, #71	; 0x47
 8008254:	4680      	mov	r8, r0
 8008256:	d108      	bne.n	800826a <_printf_float+0x142>
 8008258:	1cc8      	adds	r0, r1, #3
 800825a:	db02      	blt.n	8008262 <_printf_float+0x13a>
 800825c:	6863      	ldr	r3, [r4, #4]
 800825e:	4299      	cmp	r1, r3
 8008260:	dd41      	ble.n	80082e6 <_printf_float+0x1be>
 8008262:	f1ab 0b02 	sub.w	fp, fp, #2
 8008266:	fa5f fb8b 	uxtb.w	fp, fp
 800826a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800826e:	d820      	bhi.n	80082b2 <_printf_float+0x18a>
 8008270:	3901      	subs	r1, #1
 8008272:	465a      	mov	r2, fp
 8008274:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008278:	9109      	str	r1, [sp, #36]	; 0x24
 800827a:	f7ff ff17 	bl	80080ac <__exponent>
 800827e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008280:	1813      	adds	r3, r2, r0
 8008282:	2a01      	cmp	r2, #1
 8008284:	4681      	mov	r9, r0
 8008286:	6123      	str	r3, [r4, #16]
 8008288:	dc02      	bgt.n	8008290 <_printf_float+0x168>
 800828a:	6822      	ldr	r2, [r4, #0]
 800828c:	07d2      	lsls	r2, r2, #31
 800828e:	d501      	bpl.n	8008294 <_printf_float+0x16c>
 8008290:	3301      	adds	r3, #1
 8008292:	6123      	str	r3, [r4, #16]
 8008294:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008298:	2b00      	cmp	r3, #0
 800829a:	d09c      	beq.n	80081d6 <_printf_float+0xae>
 800829c:	232d      	movs	r3, #45	; 0x2d
 800829e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a2:	e798      	b.n	80081d6 <_printf_float+0xae>
 80082a4:	9a06      	ldr	r2, [sp, #24]
 80082a6:	2a47      	cmp	r2, #71	; 0x47
 80082a8:	d1be      	bne.n	8008228 <_printf_float+0x100>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1bc      	bne.n	8008228 <_printf_float+0x100>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e7b9      	b.n	8008226 <_printf_float+0xfe>
 80082b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082b6:	d118      	bne.n	80082ea <_printf_float+0x1c2>
 80082b8:	2900      	cmp	r1, #0
 80082ba:	6863      	ldr	r3, [r4, #4]
 80082bc:	dd0b      	ble.n	80082d6 <_printf_float+0x1ae>
 80082be:	6121      	str	r1, [r4, #16]
 80082c0:	b913      	cbnz	r3, 80082c8 <_printf_float+0x1a0>
 80082c2:	6822      	ldr	r2, [r4, #0]
 80082c4:	07d0      	lsls	r0, r2, #31
 80082c6:	d502      	bpl.n	80082ce <_printf_float+0x1a6>
 80082c8:	3301      	adds	r3, #1
 80082ca:	440b      	add	r3, r1
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80082d0:	f04f 0900 	mov.w	r9, #0
 80082d4:	e7de      	b.n	8008294 <_printf_float+0x16c>
 80082d6:	b913      	cbnz	r3, 80082de <_printf_float+0x1b6>
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	07d2      	lsls	r2, r2, #31
 80082dc:	d501      	bpl.n	80082e2 <_printf_float+0x1ba>
 80082de:	3302      	adds	r3, #2
 80082e0:	e7f4      	b.n	80082cc <_printf_float+0x1a4>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7f2      	b.n	80082cc <_printf_float+0x1a4>
 80082e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ec:	4299      	cmp	r1, r3
 80082ee:	db05      	blt.n	80082fc <_printf_float+0x1d4>
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	6121      	str	r1, [r4, #16]
 80082f4:	07d8      	lsls	r0, r3, #31
 80082f6:	d5ea      	bpl.n	80082ce <_printf_float+0x1a6>
 80082f8:	1c4b      	adds	r3, r1, #1
 80082fa:	e7e7      	b.n	80082cc <_printf_float+0x1a4>
 80082fc:	2900      	cmp	r1, #0
 80082fe:	bfd4      	ite	le
 8008300:	f1c1 0202 	rsble	r2, r1, #2
 8008304:	2201      	movgt	r2, #1
 8008306:	4413      	add	r3, r2
 8008308:	e7e0      	b.n	80082cc <_printf_float+0x1a4>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	055a      	lsls	r2, r3, #21
 800830e:	d407      	bmi.n	8008320 <_printf_float+0x1f8>
 8008310:	6923      	ldr	r3, [r4, #16]
 8008312:	4642      	mov	r2, r8
 8008314:	4631      	mov	r1, r6
 8008316:	4628      	mov	r0, r5
 8008318:	47b8      	blx	r7
 800831a:	3001      	adds	r0, #1
 800831c:	d12c      	bne.n	8008378 <_printf_float+0x250>
 800831e:	e764      	b.n	80081ea <_printf_float+0xc2>
 8008320:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008324:	f240 80e0 	bls.w	80084e8 <_printf_float+0x3c0>
 8008328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800832c:	2200      	movs	r2, #0
 800832e:	2300      	movs	r3, #0
 8008330:	f7f8 fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008334:	2800      	cmp	r0, #0
 8008336:	d034      	beq.n	80083a2 <_printf_float+0x27a>
 8008338:	4a37      	ldr	r2, [pc, #220]	; (8008418 <_printf_float+0x2f0>)
 800833a:	2301      	movs	r3, #1
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f af51 	beq.w	80081ea <_printf_float+0xc2>
 8008348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800834c:	429a      	cmp	r2, r3
 800834e:	db02      	blt.n	8008356 <_printf_float+0x22e>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	07d8      	lsls	r0, r3, #31
 8008354:	d510      	bpl.n	8008378 <_printf_float+0x250>
 8008356:	ee18 3a10 	vmov	r3, s16
 800835a:	4652      	mov	r2, sl
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f af41 	beq.w	80081ea <_printf_float+0xc2>
 8008368:	f04f 0800 	mov.w	r8, #0
 800836c:	f104 091a 	add.w	r9, r4, #26
 8008370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008372:	3b01      	subs	r3, #1
 8008374:	4543      	cmp	r3, r8
 8008376:	dc09      	bgt.n	800838c <_printf_float+0x264>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	079b      	lsls	r3, r3, #30
 800837c:	f100 8105 	bmi.w	800858a <_printf_float+0x462>
 8008380:	68e0      	ldr	r0, [r4, #12]
 8008382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008384:	4298      	cmp	r0, r3
 8008386:	bfb8      	it	lt
 8008388:	4618      	movlt	r0, r3
 800838a:	e730      	b.n	80081ee <_printf_float+0xc6>
 800838c:	2301      	movs	r3, #1
 800838e:	464a      	mov	r2, r9
 8008390:	4631      	mov	r1, r6
 8008392:	4628      	mov	r0, r5
 8008394:	47b8      	blx	r7
 8008396:	3001      	adds	r0, #1
 8008398:	f43f af27 	beq.w	80081ea <_printf_float+0xc2>
 800839c:	f108 0801 	add.w	r8, r8, #1
 80083a0:	e7e6      	b.n	8008370 <_printf_float+0x248>
 80083a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dc39      	bgt.n	800841c <_printf_float+0x2f4>
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <_printf_float+0x2f0>)
 80083aa:	2301      	movs	r3, #1
 80083ac:	4631      	mov	r1, r6
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f af19 	beq.w	80081ea <_printf_float+0xc2>
 80083b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083bc:	4313      	orrs	r3, r2
 80083be:	d102      	bne.n	80083c6 <_printf_float+0x29e>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	07d9      	lsls	r1, r3, #31
 80083c4:	d5d8      	bpl.n	8008378 <_printf_float+0x250>
 80083c6:	ee18 3a10 	vmov	r3, s16
 80083ca:	4652      	mov	r2, sl
 80083cc:	4631      	mov	r1, r6
 80083ce:	4628      	mov	r0, r5
 80083d0:	47b8      	blx	r7
 80083d2:	3001      	adds	r0, #1
 80083d4:	f43f af09 	beq.w	80081ea <_printf_float+0xc2>
 80083d8:	f04f 0900 	mov.w	r9, #0
 80083dc:	f104 0a1a 	add.w	sl, r4, #26
 80083e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e2:	425b      	negs	r3, r3
 80083e4:	454b      	cmp	r3, r9
 80083e6:	dc01      	bgt.n	80083ec <_printf_float+0x2c4>
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	e792      	b.n	8008312 <_printf_float+0x1ea>
 80083ec:	2301      	movs	r3, #1
 80083ee:	4652      	mov	r2, sl
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f aef7 	beq.w	80081ea <_printf_float+0xc2>
 80083fc:	f109 0901 	add.w	r9, r9, #1
 8008400:	e7ee      	b.n	80083e0 <_printf_float+0x2b8>
 8008402:	bf00      	nop
 8008404:	7fefffff 	.word	0x7fefffff
 8008408:	0800acec 	.word	0x0800acec
 800840c:	0800acf0 	.word	0x0800acf0
 8008410:	0800acf8 	.word	0x0800acf8
 8008414:	0800acf4 	.word	0x0800acf4
 8008418:	0800acfc 	.word	0x0800acfc
 800841c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800841e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008420:	429a      	cmp	r2, r3
 8008422:	bfa8      	it	ge
 8008424:	461a      	movge	r2, r3
 8008426:	2a00      	cmp	r2, #0
 8008428:	4691      	mov	r9, r2
 800842a:	dc37      	bgt.n	800849c <_printf_float+0x374>
 800842c:	f04f 0b00 	mov.w	fp, #0
 8008430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008434:	f104 021a 	add.w	r2, r4, #26
 8008438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800843a:	9305      	str	r3, [sp, #20]
 800843c:	eba3 0309 	sub.w	r3, r3, r9
 8008440:	455b      	cmp	r3, fp
 8008442:	dc33      	bgt.n	80084ac <_printf_float+0x384>
 8008444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008448:	429a      	cmp	r2, r3
 800844a:	db3b      	blt.n	80084c4 <_printf_float+0x39c>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	07da      	lsls	r2, r3, #31
 8008450:	d438      	bmi.n	80084c4 <_printf_float+0x39c>
 8008452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008454:	9a05      	ldr	r2, [sp, #20]
 8008456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008458:	1a9a      	subs	r2, r3, r2
 800845a:	eba3 0901 	sub.w	r9, r3, r1
 800845e:	4591      	cmp	r9, r2
 8008460:	bfa8      	it	ge
 8008462:	4691      	movge	r9, r2
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	dc35      	bgt.n	80084d6 <_printf_float+0x3ae>
 800846a:	f04f 0800 	mov.w	r8, #0
 800846e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008472:	f104 0a1a 	add.w	sl, r4, #26
 8008476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800847a:	1a9b      	subs	r3, r3, r2
 800847c:	eba3 0309 	sub.w	r3, r3, r9
 8008480:	4543      	cmp	r3, r8
 8008482:	f77f af79 	ble.w	8008378 <_printf_float+0x250>
 8008486:	2301      	movs	r3, #1
 8008488:	4652      	mov	r2, sl
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	f43f aeaa 	beq.w	80081ea <_printf_float+0xc2>
 8008496:	f108 0801 	add.w	r8, r8, #1
 800849a:	e7ec      	b.n	8008476 <_printf_float+0x34e>
 800849c:	4613      	mov	r3, r2
 800849e:	4631      	mov	r1, r6
 80084a0:	4642      	mov	r2, r8
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b8      	blx	r7
 80084a6:	3001      	adds	r0, #1
 80084a8:	d1c0      	bne.n	800842c <_printf_float+0x304>
 80084aa:	e69e      	b.n	80081ea <_printf_float+0xc2>
 80084ac:	2301      	movs	r3, #1
 80084ae:	4631      	mov	r1, r6
 80084b0:	4628      	mov	r0, r5
 80084b2:	9205      	str	r2, [sp, #20]
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f ae97 	beq.w	80081ea <_printf_float+0xc2>
 80084bc:	9a05      	ldr	r2, [sp, #20]
 80084be:	f10b 0b01 	add.w	fp, fp, #1
 80084c2:	e7b9      	b.n	8008438 <_printf_float+0x310>
 80084c4:	ee18 3a10 	vmov	r3, s16
 80084c8:	4652      	mov	r2, sl
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	d1be      	bne.n	8008452 <_printf_float+0x32a>
 80084d4:	e689      	b.n	80081ea <_printf_float+0xc2>
 80084d6:	9a05      	ldr	r2, [sp, #20]
 80084d8:	464b      	mov	r3, r9
 80084da:	4442      	add	r2, r8
 80084dc:	4631      	mov	r1, r6
 80084de:	4628      	mov	r0, r5
 80084e0:	47b8      	blx	r7
 80084e2:	3001      	adds	r0, #1
 80084e4:	d1c1      	bne.n	800846a <_printf_float+0x342>
 80084e6:	e680      	b.n	80081ea <_printf_float+0xc2>
 80084e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ea:	2a01      	cmp	r2, #1
 80084ec:	dc01      	bgt.n	80084f2 <_printf_float+0x3ca>
 80084ee:	07db      	lsls	r3, r3, #31
 80084f0:	d538      	bpl.n	8008564 <_printf_float+0x43c>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4642      	mov	r2, r8
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	f43f ae74 	beq.w	80081ea <_printf_float+0xc2>
 8008502:	ee18 3a10 	vmov	r3, s16
 8008506:	4652      	mov	r2, sl
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f ae6b 	beq.w	80081ea <_printf_float+0xc2>
 8008514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008518:	2200      	movs	r2, #0
 800851a:	2300      	movs	r3, #0
 800851c:	f7f8 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008520:	b9d8      	cbnz	r0, 800855a <_printf_float+0x432>
 8008522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008524:	f108 0201 	add.w	r2, r8, #1
 8008528:	3b01      	subs	r3, #1
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	d10e      	bne.n	8008552 <_printf_float+0x42a>
 8008534:	e659      	b.n	80081ea <_printf_float+0xc2>
 8008536:	2301      	movs	r3, #1
 8008538:	4652      	mov	r2, sl
 800853a:	4631      	mov	r1, r6
 800853c:	4628      	mov	r0, r5
 800853e:	47b8      	blx	r7
 8008540:	3001      	adds	r0, #1
 8008542:	f43f ae52 	beq.w	80081ea <_printf_float+0xc2>
 8008546:	f108 0801 	add.w	r8, r8, #1
 800854a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854c:	3b01      	subs	r3, #1
 800854e:	4543      	cmp	r3, r8
 8008550:	dcf1      	bgt.n	8008536 <_printf_float+0x40e>
 8008552:	464b      	mov	r3, r9
 8008554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008558:	e6dc      	b.n	8008314 <_printf_float+0x1ec>
 800855a:	f04f 0800 	mov.w	r8, #0
 800855e:	f104 0a1a 	add.w	sl, r4, #26
 8008562:	e7f2      	b.n	800854a <_printf_float+0x422>
 8008564:	2301      	movs	r3, #1
 8008566:	4642      	mov	r2, r8
 8008568:	e7df      	b.n	800852a <_printf_float+0x402>
 800856a:	2301      	movs	r3, #1
 800856c:	464a      	mov	r2, r9
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f ae38 	beq.w	80081ea <_printf_float+0xc2>
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	4543      	cmp	r3, r8
 8008586:	dcf0      	bgt.n	800856a <_printf_float+0x442>
 8008588:	e6fa      	b.n	8008380 <_printf_float+0x258>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	f104 0919 	add.w	r9, r4, #25
 8008592:	e7f4      	b.n	800857e <_printf_float+0x456>

08008594 <_printf_common>:
 8008594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	4616      	mov	r6, r2
 800859a:	4699      	mov	r9, r3
 800859c:	688a      	ldr	r2, [r1, #8]
 800859e:	690b      	ldr	r3, [r1, #16]
 80085a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	bfb8      	it	lt
 80085a8:	4613      	movlt	r3, r2
 80085aa:	6033      	str	r3, [r6, #0]
 80085ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085b0:	4607      	mov	r7, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	b10a      	cbz	r2, 80085ba <_printf_common+0x26>
 80085b6:	3301      	adds	r3, #1
 80085b8:	6033      	str	r3, [r6, #0]
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	0699      	lsls	r1, r3, #26
 80085be:	bf42      	ittt	mi
 80085c0:	6833      	ldrmi	r3, [r6, #0]
 80085c2:	3302      	addmi	r3, #2
 80085c4:	6033      	strmi	r3, [r6, #0]
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	f015 0506 	ands.w	r5, r5, #6
 80085cc:	d106      	bne.n	80085dc <_printf_common+0x48>
 80085ce:	f104 0a19 	add.w	sl, r4, #25
 80085d2:	68e3      	ldr	r3, [r4, #12]
 80085d4:	6832      	ldr	r2, [r6, #0]
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dc26      	bgt.n	800862a <_printf_common+0x96>
 80085dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085e0:	1e13      	subs	r3, r2, #0
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	bf18      	it	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	0692      	lsls	r2, r2, #26
 80085ea:	d42b      	bmi.n	8008644 <_printf_common+0xb0>
 80085ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085f0:	4649      	mov	r1, r9
 80085f2:	4638      	mov	r0, r7
 80085f4:	47c0      	blx	r8
 80085f6:	3001      	adds	r0, #1
 80085f8:	d01e      	beq.n	8008638 <_printf_common+0xa4>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	68e5      	ldr	r5, [r4, #12]
 80085fe:	6832      	ldr	r2, [r6, #0]
 8008600:	f003 0306 	and.w	r3, r3, #6
 8008604:	2b04      	cmp	r3, #4
 8008606:	bf08      	it	eq
 8008608:	1aad      	subeq	r5, r5, r2
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	6922      	ldr	r2, [r4, #16]
 800860e:	bf0c      	ite	eq
 8008610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008614:	2500      	movne	r5, #0
 8008616:	4293      	cmp	r3, r2
 8008618:	bfc4      	itt	gt
 800861a:	1a9b      	subgt	r3, r3, r2
 800861c:	18ed      	addgt	r5, r5, r3
 800861e:	2600      	movs	r6, #0
 8008620:	341a      	adds	r4, #26
 8008622:	42b5      	cmp	r5, r6
 8008624:	d11a      	bne.n	800865c <_printf_common+0xc8>
 8008626:	2000      	movs	r0, #0
 8008628:	e008      	b.n	800863c <_printf_common+0xa8>
 800862a:	2301      	movs	r3, #1
 800862c:	4652      	mov	r2, sl
 800862e:	4649      	mov	r1, r9
 8008630:	4638      	mov	r0, r7
 8008632:	47c0      	blx	r8
 8008634:	3001      	adds	r0, #1
 8008636:	d103      	bne.n	8008640 <_printf_common+0xac>
 8008638:	f04f 30ff 	mov.w	r0, #4294967295
 800863c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008640:	3501      	adds	r5, #1
 8008642:	e7c6      	b.n	80085d2 <_printf_common+0x3e>
 8008644:	18e1      	adds	r1, r4, r3
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	2030      	movs	r0, #48	; 0x30
 800864a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800864e:	4422      	add	r2, r4
 8008650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008658:	3302      	adds	r3, #2
 800865a:	e7c7      	b.n	80085ec <_printf_common+0x58>
 800865c:	2301      	movs	r3, #1
 800865e:	4622      	mov	r2, r4
 8008660:	4649      	mov	r1, r9
 8008662:	4638      	mov	r0, r7
 8008664:	47c0      	blx	r8
 8008666:	3001      	adds	r0, #1
 8008668:	d0e6      	beq.n	8008638 <_printf_common+0xa4>
 800866a:	3601      	adds	r6, #1
 800866c:	e7d9      	b.n	8008622 <_printf_common+0x8e>
	...

08008670 <_printf_i>:
 8008670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	7e0f      	ldrb	r7, [r1, #24]
 8008676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008678:	2f78      	cmp	r7, #120	; 0x78
 800867a:	4691      	mov	r9, r2
 800867c:	4680      	mov	r8, r0
 800867e:	460c      	mov	r4, r1
 8008680:	469a      	mov	sl, r3
 8008682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008686:	d807      	bhi.n	8008698 <_printf_i+0x28>
 8008688:	2f62      	cmp	r7, #98	; 0x62
 800868a:	d80a      	bhi.n	80086a2 <_printf_i+0x32>
 800868c:	2f00      	cmp	r7, #0
 800868e:	f000 80d8 	beq.w	8008842 <_printf_i+0x1d2>
 8008692:	2f58      	cmp	r7, #88	; 0x58
 8008694:	f000 80a3 	beq.w	80087de <_printf_i+0x16e>
 8008698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800869c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086a0:	e03a      	b.n	8008718 <_printf_i+0xa8>
 80086a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086a6:	2b15      	cmp	r3, #21
 80086a8:	d8f6      	bhi.n	8008698 <_printf_i+0x28>
 80086aa:	a101      	add	r1, pc, #4	; (adr r1, 80086b0 <_printf_i+0x40>)
 80086ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086b0:	08008709 	.word	0x08008709
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	08008699 	.word	0x08008699
 80086bc:	08008699 	.word	0x08008699
 80086c0:	08008699 	.word	0x08008699
 80086c4:	08008699 	.word	0x08008699
 80086c8:	0800871d 	.word	0x0800871d
 80086cc:	08008699 	.word	0x08008699
 80086d0:	08008699 	.word	0x08008699
 80086d4:	08008699 	.word	0x08008699
 80086d8:	08008699 	.word	0x08008699
 80086dc:	08008829 	.word	0x08008829
 80086e0:	0800874d 	.word	0x0800874d
 80086e4:	0800880b 	.word	0x0800880b
 80086e8:	08008699 	.word	0x08008699
 80086ec:	08008699 	.word	0x08008699
 80086f0:	0800884b 	.word	0x0800884b
 80086f4:	08008699 	.word	0x08008699
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	08008699 	.word	0x08008699
 8008700:	08008699 	.word	0x08008699
 8008704:	08008813 	.word	0x08008813
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	1d1a      	adds	r2, r3, #4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	602a      	str	r2, [r5, #0]
 8008710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008718:	2301      	movs	r3, #1
 800871a:	e0a3      	b.n	8008864 <_printf_i+0x1f4>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	6829      	ldr	r1, [r5, #0]
 8008720:	0606      	lsls	r6, r0, #24
 8008722:	f101 0304 	add.w	r3, r1, #4
 8008726:	d50a      	bpl.n	800873e <_printf_i+0xce>
 8008728:	680e      	ldr	r6, [r1, #0]
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	2e00      	cmp	r6, #0
 800872e:	da03      	bge.n	8008738 <_printf_i+0xc8>
 8008730:	232d      	movs	r3, #45	; 0x2d
 8008732:	4276      	negs	r6, r6
 8008734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008738:	485e      	ldr	r0, [pc, #376]	; (80088b4 <_printf_i+0x244>)
 800873a:	230a      	movs	r3, #10
 800873c:	e019      	b.n	8008772 <_printf_i+0x102>
 800873e:	680e      	ldr	r6, [r1, #0]
 8008740:	602b      	str	r3, [r5, #0]
 8008742:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008746:	bf18      	it	ne
 8008748:	b236      	sxthne	r6, r6
 800874a:	e7ef      	b.n	800872c <_printf_i+0xbc>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	1d19      	adds	r1, r3, #4
 8008752:	6029      	str	r1, [r5, #0]
 8008754:	0601      	lsls	r1, r0, #24
 8008756:	d501      	bpl.n	800875c <_printf_i+0xec>
 8008758:	681e      	ldr	r6, [r3, #0]
 800875a:	e002      	b.n	8008762 <_printf_i+0xf2>
 800875c:	0646      	lsls	r6, r0, #25
 800875e:	d5fb      	bpl.n	8008758 <_printf_i+0xe8>
 8008760:	881e      	ldrh	r6, [r3, #0]
 8008762:	4854      	ldr	r0, [pc, #336]	; (80088b4 <_printf_i+0x244>)
 8008764:	2f6f      	cmp	r7, #111	; 0x6f
 8008766:	bf0c      	ite	eq
 8008768:	2308      	moveq	r3, #8
 800876a:	230a      	movne	r3, #10
 800876c:	2100      	movs	r1, #0
 800876e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008772:	6865      	ldr	r5, [r4, #4]
 8008774:	60a5      	str	r5, [r4, #8]
 8008776:	2d00      	cmp	r5, #0
 8008778:	bfa2      	ittt	ge
 800877a:	6821      	ldrge	r1, [r4, #0]
 800877c:	f021 0104 	bicge.w	r1, r1, #4
 8008780:	6021      	strge	r1, [r4, #0]
 8008782:	b90e      	cbnz	r6, 8008788 <_printf_i+0x118>
 8008784:	2d00      	cmp	r5, #0
 8008786:	d04d      	beq.n	8008824 <_printf_i+0x1b4>
 8008788:	4615      	mov	r5, r2
 800878a:	fbb6 f1f3 	udiv	r1, r6, r3
 800878e:	fb03 6711 	mls	r7, r3, r1, r6
 8008792:	5dc7      	ldrb	r7, [r0, r7]
 8008794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008798:	4637      	mov	r7, r6
 800879a:	42bb      	cmp	r3, r7
 800879c:	460e      	mov	r6, r1
 800879e:	d9f4      	bls.n	800878a <_printf_i+0x11a>
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d10b      	bne.n	80087bc <_printf_i+0x14c>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	07de      	lsls	r6, r3, #31
 80087a8:	d508      	bpl.n	80087bc <_printf_i+0x14c>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	6861      	ldr	r1, [r4, #4]
 80087ae:	4299      	cmp	r1, r3
 80087b0:	bfde      	ittt	le
 80087b2:	2330      	movle	r3, #48	; 0x30
 80087b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087bc:	1b52      	subs	r2, r2, r5
 80087be:	6122      	str	r2, [r4, #16]
 80087c0:	f8cd a000 	str.w	sl, [sp]
 80087c4:	464b      	mov	r3, r9
 80087c6:	aa03      	add	r2, sp, #12
 80087c8:	4621      	mov	r1, r4
 80087ca:	4640      	mov	r0, r8
 80087cc:	f7ff fee2 	bl	8008594 <_printf_common>
 80087d0:	3001      	adds	r0, #1
 80087d2:	d14c      	bne.n	800886e <_printf_i+0x1fe>
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	b004      	add	sp, #16
 80087da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087de:	4835      	ldr	r0, [pc, #212]	; (80088b4 <_printf_i+0x244>)
 80087e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087e4:	6829      	ldr	r1, [r5, #0]
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80087ec:	6029      	str	r1, [r5, #0]
 80087ee:	061d      	lsls	r5, r3, #24
 80087f0:	d514      	bpl.n	800881c <_printf_i+0x1ac>
 80087f2:	07df      	lsls	r7, r3, #31
 80087f4:	bf44      	itt	mi
 80087f6:	f043 0320 	orrmi.w	r3, r3, #32
 80087fa:	6023      	strmi	r3, [r4, #0]
 80087fc:	b91e      	cbnz	r6, 8008806 <_printf_i+0x196>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	f023 0320 	bic.w	r3, r3, #32
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	2310      	movs	r3, #16
 8008808:	e7b0      	b.n	800876c <_printf_i+0xfc>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f043 0320 	orr.w	r3, r3, #32
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	2378      	movs	r3, #120	; 0x78
 8008814:	4828      	ldr	r0, [pc, #160]	; (80088b8 <_printf_i+0x248>)
 8008816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800881a:	e7e3      	b.n	80087e4 <_printf_i+0x174>
 800881c:	0659      	lsls	r1, r3, #25
 800881e:	bf48      	it	mi
 8008820:	b2b6      	uxthmi	r6, r6
 8008822:	e7e6      	b.n	80087f2 <_printf_i+0x182>
 8008824:	4615      	mov	r5, r2
 8008826:	e7bb      	b.n	80087a0 <_printf_i+0x130>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	6826      	ldr	r6, [r4, #0]
 800882c:	6961      	ldr	r1, [r4, #20]
 800882e:	1d18      	adds	r0, r3, #4
 8008830:	6028      	str	r0, [r5, #0]
 8008832:	0635      	lsls	r5, r6, #24
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	d501      	bpl.n	800883c <_printf_i+0x1cc>
 8008838:	6019      	str	r1, [r3, #0]
 800883a:	e002      	b.n	8008842 <_printf_i+0x1d2>
 800883c:	0670      	lsls	r0, r6, #25
 800883e:	d5fb      	bpl.n	8008838 <_printf_i+0x1c8>
 8008840:	8019      	strh	r1, [r3, #0]
 8008842:	2300      	movs	r3, #0
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	4615      	mov	r5, r2
 8008848:	e7ba      	b.n	80087c0 <_printf_i+0x150>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	1d1a      	adds	r2, r3, #4
 800884e:	602a      	str	r2, [r5, #0]
 8008850:	681d      	ldr	r5, [r3, #0]
 8008852:	6862      	ldr	r2, [r4, #4]
 8008854:	2100      	movs	r1, #0
 8008856:	4628      	mov	r0, r5
 8008858:	f7f7 fcca 	bl	80001f0 <memchr>
 800885c:	b108      	cbz	r0, 8008862 <_printf_i+0x1f2>
 800885e:	1b40      	subs	r0, r0, r5
 8008860:	6060      	str	r0, [r4, #4]
 8008862:	6863      	ldr	r3, [r4, #4]
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	2300      	movs	r3, #0
 8008868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886c:	e7a8      	b.n	80087c0 <_printf_i+0x150>
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	462a      	mov	r2, r5
 8008872:	4649      	mov	r1, r9
 8008874:	4640      	mov	r0, r8
 8008876:	47d0      	blx	sl
 8008878:	3001      	adds	r0, #1
 800887a:	d0ab      	beq.n	80087d4 <_printf_i+0x164>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	079b      	lsls	r3, r3, #30
 8008880:	d413      	bmi.n	80088aa <_printf_i+0x23a>
 8008882:	68e0      	ldr	r0, [r4, #12]
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	4298      	cmp	r0, r3
 8008888:	bfb8      	it	lt
 800888a:	4618      	movlt	r0, r3
 800888c:	e7a4      	b.n	80087d8 <_printf_i+0x168>
 800888e:	2301      	movs	r3, #1
 8008890:	4632      	mov	r2, r6
 8008892:	4649      	mov	r1, r9
 8008894:	4640      	mov	r0, r8
 8008896:	47d0      	blx	sl
 8008898:	3001      	adds	r0, #1
 800889a:	d09b      	beq.n	80087d4 <_printf_i+0x164>
 800889c:	3501      	adds	r5, #1
 800889e:	68e3      	ldr	r3, [r4, #12]
 80088a0:	9903      	ldr	r1, [sp, #12]
 80088a2:	1a5b      	subs	r3, r3, r1
 80088a4:	42ab      	cmp	r3, r5
 80088a6:	dcf2      	bgt.n	800888e <_printf_i+0x21e>
 80088a8:	e7eb      	b.n	8008882 <_printf_i+0x212>
 80088aa:	2500      	movs	r5, #0
 80088ac:	f104 0619 	add.w	r6, r4, #25
 80088b0:	e7f5      	b.n	800889e <_printf_i+0x22e>
 80088b2:	bf00      	nop
 80088b4:	0800acfe 	.word	0x0800acfe
 80088b8:	0800ad0f 	.word	0x0800ad0f

080088bc <cleanup_glue>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	460c      	mov	r4, r1
 80088c0:	6809      	ldr	r1, [r1, #0]
 80088c2:	4605      	mov	r5, r0
 80088c4:	b109      	cbz	r1, 80088ca <cleanup_glue+0xe>
 80088c6:	f7ff fff9 	bl	80088bc <cleanup_glue>
 80088ca:	4621      	mov	r1, r4
 80088cc:	4628      	mov	r0, r5
 80088ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d2:	f001 bc09 	b.w	800a0e8 <_free_r>
	...

080088d8 <_reclaim_reent>:
 80088d8:	4b2c      	ldr	r3, [pc, #176]	; (800898c <_reclaim_reent+0xb4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4283      	cmp	r3, r0
 80088de:	b570      	push	{r4, r5, r6, lr}
 80088e0:	4604      	mov	r4, r0
 80088e2:	d051      	beq.n	8008988 <_reclaim_reent+0xb0>
 80088e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80088e6:	b143      	cbz	r3, 80088fa <_reclaim_reent+0x22>
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d14a      	bne.n	8008984 <_reclaim_reent+0xac>
 80088ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088f0:	6819      	ldr	r1, [r3, #0]
 80088f2:	b111      	cbz	r1, 80088fa <_reclaim_reent+0x22>
 80088f4:	4620      	mov	r0, r4
 80088f6:	f001 fbf7 	bl	800a0e8 <_free_r>
 80088fa:	6961      	ldr	r1, [r4, #20]
 80088fc:	b111      	cbz	r1, 8008904 <_reclaim_reent+0x2c>
 80088fe:	4620      	mov	r0, r4
 8008900:	f001 fbf2 	bl	800a0e8 <_free_r>
 8008904:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008906:	b111      	cbz	r1, 800890e <_reclaim_reent+0x36>
 8008908:	4620      	mov	r0, r4
 800890a:	f001 fbed 	bl	800a0e8 <_free_r>
 800890e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008910:	b111      	cbz	r1, 8008918 <_reclaim_reent+0x40>
 8008912:	4620      	mov	r0, r4
 8008914:	f001 fbe8 	bl	800a0e8 <_free_r>
 8008918:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800891a:	b111      	cbz	r1, 8008922 <_reclaim_reent+0x4a>
 800891c:	4620      	mov	r0, r4
 800891e:	f001 fbe3 	bl	800a0e8 <_free_r>
 8008922:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008924:	b111      	cbz	r1, 800892c <_reclaim_reent+0x54>
 8008926:	4620      	mov	r0, r4
 8008928:	f001 fbde 	bl	800a0e8 <_free_r>
 800892c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800892e:	b111      	cbz	r1, 8008936 <_reclaim_reent+0x5e>
 8008930:	4620      	mov	r0, r4
 8008932:	f001 fbd9 	bl	800a0e8 <_free_r>
 8008936:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008938:	b111      	cbz	r1, 8008940 <_reclaim_reent+0x68>
 800893a:	4620      	mov	r0, r4
 800893c:	f001 fbd4 	bl	800a0e8 <_free_r>
 8008940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008942:	b111      	cbz	r1, 800894a <_reclaim_reent+0x72>
 8008944:	4620      	mov	r0, r4
 8008946:	f001 fbcf 	bl	800a0e8 <_free_r>
 800894a:	69a3      	ldr	r3, [r4, #24]
 800894c:	b1e3      	cbz	r3, 8008988 <_reclaim_reent+0xb0>
 800894e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008950:	4620      	mov	r0, r4
 8008952:	4798      	blx	r3
 8008954:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008956:	b1b9      	cbz	r1, 8008988 <_reclaim_reent+0xb0>
 8008958:	4620      	mov	r0, r4
 800895a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800895e:	f7ff bfad 	b.w	80088bc <cleanup_glue>
 8008962:	5949      	ldr	r1, [r1, r5]
 8008964:	b941      	cbnz	r1, 8008978 <_reclaim_reent+0xa0>
 8008966:	3504      	adds	r5, #4
 8008968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800896a:	2d80      	cmp	r5, #128	; 0x80
 800896c:	68d9      	ldr	r1, [r3, #12]
 800896e:	d1f8      	bne.n	8008962 <_reclaim_reent+0x8a>
 8008970:	4620      	mov	r0, r4
 8008972:	f001 fbb9 	bl	800a0e8 <_free_r>
 8008976:	e7ba      	b.n	80088ee <_reclaim_reent+0x16>
 8008978:	680e      	ldr	r6, [r1, #0]
 800897a:	4620      	mov	r0, r4
 800897c:	f001 fbb4 	bl	800a0e8 <_free_r>
 8008980:	4631      	mov	r1, r6
 8008982:	e7ef      	b.n	8008964 <_reclaim_reent+0x8c>
 8008984:	2500      	movs	r5, #0
 8008986:	e7ef      	b.n	8008968 <_reclaim_reent+0x90>
 8008988:	bd70      	pop	{r4, r5, r6, pc}
 800898a:	bf00      	nop
 800898c:	20000010 	.word	0x20000010

08008990 <_sbrk_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_sbrk_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	f7f9 fd20 	bl	80023e0 <_sbrk>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_sbrk_r+0x1a>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_sbrk_r+0x1a>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20004d54 	.word	0x20004d54

080089b0 <sniprintf>:
 80089b0:	b40c      	push	{r2, r3}
 80089b2:	b530      	push	{r4, r5, lr}
 80089b4:	4b17      	ldr	r3, [pc, #92]	; (8008a14 <sniprintf+0x64>)
 80089b6:	1e0c      	subs	r4, r1, #0
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	b09d      	sub	sp, #116	; 0x74
 80089bc:	da08      	bge.n	80089d0 <sniprintf+0x20>
 80089be:	238b      	movs	r3, #139	; 0x8b
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	b01d      	add	sp, #116	; 0x74
 80089c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089cc:	b002      	add	sp, #8
 80089ce:	4770      	bx	lr
 80089d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80089d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80089d8:	bf14      	ite	ne
 80089da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80089de:	4623      	moveq	r3, r4
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	9307      	str	r3, [sp, #28]
 80089e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089e8:	9002      	str	r0, [sp, #8]
 80089ea:	9006      	str	r0, [sp, #24]
 80089ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80089f2:	ab21      	add	r3, sp, #132	; 0x84
 80089f4:	a902      	add	r1, sp, #8
 80089f6:	4628      	mov	r0, r5
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	f001 fc1d 	bl	800a238 <_svfiprintf_r>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	bfbc      	itt	lt
 8008a02:	238b      	movlt	r3, #139	; 0x8b
 8008a04:	602b      	strlt	r3, [r5, #0]
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d0dd      	beq.n	80089c6 <sniprintf+0x16>
 8008a0a:	9b02      	ldr	r3, [sp, #8]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	701a      	strb	r2, [r3, #0]
 8008a10:	e7d9      	b.n	80089c6 <sniprintf+0x16>
 8008a12:	bf00      	nop
 8008a14:	20000010 	.word	0x20000010

08008a18 <__sread>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a20:	f001 fd0a 	bl	800a438 <_read_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	bfab      	itete	ge
 8008a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a2c:	181b      	addge	r3, r3, r0
 8008a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a32:	bfac      	ite	ge
 8008a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a36:	81a3      	strhlt	r3, [r4, #12]
 8008a38:	bd10      	pop	{r4, pc}

08008a3a <__swrite>:
 8008a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3e:	461f      	mov	r7, r3
 8008a40:	898b      	ldrh	r3, [r1, #12]
 8008a42:	05db      	lsls	r3, r3, #23
 8008a44:	4605      	mov	r5, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	4616      	mov	r6, r2
 8008a4a:	d505      	bpl.n	8008a58 <__swrite+0x1e>
 8008a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a50:	2302      	movs	r3, #2
 8008a52:	2200      	movs	r2, #0
 8008a54:	f000 ff88 	bl	8009968 <_lseek_r>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	4632      	mov	r2, r6
 8008a66:	463b      	mov	r3, r7
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	f000 b817 	b.w	8008aa0 <_write_r>

08008a72 <__sseek>:
 8008a72:	b510      	push	{r4, lr}
 8008a74:	460c      	mov	r4, r1
 8008a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7a:	f000 ff75 	bl	8009968 <_lseek_r>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	bf15      	itete	ne
 8008a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a8e:	81a3      	strheq	r3, [r4, #12]
 8008a90:	bf18      	it	ne
 8008a92:	81a3      	strhne	r3, [r4, #12]
 8008a94:	bd10      	pop	{r4, pc}

08008a96 <__sclose>:
 8008a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9a:	f000 b813 	b.w	8008ac4 <_close_r>
	...

08008aa0 <_write_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	; (8008ac0 <_write_r+0x20>)
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	4608      	mov	r0, r1
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	2200      	movs	r2, #0
 8008aac:	602a      	str	r2, [r5, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f7f9 fc45 	bl	800233e <_write>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_write_r+0x1e>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_write_r+0x1e>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20004d54 	.word	0x20004d54

08008ac4 <_close_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_close_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f9 fc51 	bl	8002376 <_close>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_close_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_close_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20004d54 	.word	0x20004d54

08008ae4 <quorem>:
 8008ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	6903      	ldr	r3, [r0, #16]
 8008aea:	690c      	ldr	r4, [r1, #16]
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	4607      	mov	r7, r0
 8008af0:	f2c0 8081 	blt.w	8008bf6 <quorem+0x112>
 8008af4:	3c01      	subs	r4, #1
 8008af6:	f101 0814 	add.w	r8, r1, #20
 8008afa:	f100 0514 	add.w	r5, r0, #20
 8008afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b18:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b1c:	d331      	bcc.n	8008b82 <quorem+0x9e>
 8008b1e:	f04f 0e00 	mov.w	lr, #0
 8008b22:	4640      	mov	r0, r8
 8008b24:	46ac      	mov	ip, r5
 8008b26:	46f2      	mov	sl, lr
 8008b28:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b2c:	b293      	uxth	r3, r2
 8008b2e:	fb06 e303 	mla	r3, r6, r3, lr
 8008b32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	ebaa 0303 	sub.w	r3, sl, r3
 8008b3c:	f8dc a000 	ldr.w	sl, [ip]
 8008b40:	0c12      	lsrs	r2, r2, #16
 8008b42:	fa13 f38a 	uxtah	r3, r3, sl
 8008b46:	fb06 e202 	mla	r2, r6, r2, lr
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b52:	b292      	uxth	r2, r2
 8008b54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b60:	4581      	cmp	r9, r0
 8008b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b66:	f84c 3b04 	str.w	r3, [ip], #4
 8008b6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b6e:	d2db      	bcs.n	8008b28 <quorem+0x44>
 8008b70:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b74:	b92b      	cbnz	r3, 8008b82 <quorem+0x9e>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	429d      	cmp	r5, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	d32e      	bcc.n	8008bde <quorem+0xfa>
 8008b80:	613c      	str	r4, [r7, #16]
 8008b82:	4638      	mov	r0, r7
 8008b84:	f001 f998 	bl	8009eb8 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	db24      	blt.n	8008bd6 <quorem+0xf2>
 8008b8c:	3601      	adds	r6, #1
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f04f 0c00 	mov.w	ip, #0
 8008b94:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b98:	f8d0 e000 	ldr.w	lr, [r0]
 8008b9c:	b293      	uxth	r3, r2
 8008b9e:	ebac 0303 	sub.w	r3, ip, r3
 8008ba2:	0c12      	lsrs	r2, r2, #16
 8008ba4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ba8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bb6:	45c1      	cmp	r9, r8
 8008bb8:	f840 3b04 	str.w	r3, [r0], #4
 8008bbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bc0:	d2e8      	bcs.n	8008b94 <quorem+0xb0>
 8008bc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bca:	b922      	cbnz	r2, 8008bd6 <quorem+0xf2>
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	429d      	cmp	r5, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	d30a      	bcc.n	8008bea <quorem+0x106>
 8008bd4:	613c      	str	r4, [r7, #16]
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	b003      	add	sp, #12
 8008bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	3b04      	subs	r3, #4
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	d1cc      	bne.n	8008b80 <quorem+0x9c>
 8008be6:	3c01      	subs	r4, #1
 8008be8:	e7c7      	b.n	8008b7a <quorem+0x96>
 8008bea:	6812      	ldr	r2, [r2, #0]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	d1f0      	bne.n	8008bd4 <quorem+0xf0>
 8008bf2:	3c01      	subs	r4, #1
 8008bf4:	e7eb      	b.n	8008bce <quorem+0xea>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e7ee      	b.n	8008bd8 <quorem+0xf4>
 8008bfa:	0000      	movs	r0, r0
 8008bfc:	0000      	movs	r0, r0
	...

08008c00 <_dtoa_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	ed2d 8b04 	vpush	{d8-d9}
 8008c08:	ec57 6b10 	vmov	r6, r7, d0
 8008c0c:	b093      	sub	sp, #76	; 0x4c
 8008c0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c14:	9106      	str	r1, [sp, #24]
 8008c16:	ee10 aa10 	vmov	sl, s0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c20:	46bb      	mov	fp, r7
 8008c22:	b975      	cbnz	r5, 8008c42 <_dtoa_r+0x42>
 8008c24:	2010      	movs	r0, #16
 8008c26:	f000 feb1 	bl	800998c <malloc>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c2e:	b920      	cbnz	r0, 8008c3a <_dtoa_r+0x3a>
 8008c30:	4ba7      	ldr	r3, [pc, #668]	; (8008ed0 <_dtoa_r+0x2d0>)
 8008c32:	21ea      	movs	r1, #234	; 0xea
 8008c34:	48a7      	ldr	r0, [pc, #668]	; (8008ed4 <_dtoa_r+0x2d4>)
 8008c36:	f001 fc11 	bl	800a45c <__assert_func>
 8008c3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c3e:	6005      	str	r5, [r0, #0]
 8008c40:	60c5      	str	r5, [r0, #12]
 8008c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c44:	6819      	ldr	r1, [r3, #0]
 8008c46:	b151      	cbz	r1, 8008c5e <_dtoa_r+0x5e>
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	604a      	str	r2, [r1, #4]
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	4093      	lsls	r3, r2
 8008c50:	608b      	str	r3, [r1, #8]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 feee 	bl	8009a34 <_Bfree>
 8008c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	1e3b      	subs	r3, r7, #0
 8008c60:	bfaa      	itet	ge
 8008c62:	2300      	movge	r3, #0
 8008c64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c68:	f8c8 3000 	strge.w	r3, [r8]
 8008c6c:	4b9a      	ldr	r3, [pc, #616]	; (8008ed8 <_dtoa_r+0x2d8>)
 8008c6e:	bfbc      	itt	lt
 8008c70:	2201      	movlt	r2, #1
 8008c72:	f8c8 2000 	strlt.w	r2, [r8]
 8008c76:	ea33 030b 	bics.w	r3, r3, fp
 8008c7a:	d11b      	bne.n	8008cb4 <_dtoa_r+0xb4>
 8008c7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c88:	4333      	orrs	r3, r6
 8008c8a:	f000 8592 	beq.w	80097b2 <_dtoa_r+0xbb2>
 8008c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c90:	b963      	cbnz	r3, 8008cac <_dtoa_r+0xac>
 8008c92:	4b92      	ldr	r3, [pc, #584]	; (8008edc <_dtoa_r+0x2dc>)
 8008c94:	e022      	b.n	8008cdc <_dtoa_r+0xdc>
 8008c96:	4b92      	ldr	r3, [pc, #584]	; (8008ee0 <_dtoa_r+0x2e0>)
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	9801      	ldr	r0, [sp, #4]
 8008ca2:	b013      	add	sp, #76	; 0x4c
 8008ca4:	ecbd 8b04 	vpop	{d8-d9}
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	4b8b      	ldr	r3, [pc, #556]	; (8008edc <_dtoa_r+0x2dc>)
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	3303      	adds	r3, #3
 8008cb2:	e7f3      	b.n	8008c9c <_dtoa_r+0x9c>
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4650      	mov	r0, sl
 8008cba:	4659      	mov	r1, fp
 8008cbc:	f7f7 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cc0:	ec4b ab19 	vmov	d9, sl, fp
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	b158      	cbz	r0, 8008ce0 <_dtoa_r+0xe0>
 8008cc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cca:	2301      	movs	r3, #1
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 856b 	beq.w	80097ac <_dtoa_r+0xbac>
 8008cd6:	4883      	ldr	r0, [pc, #524]	; (8008ee4 <_dtoa_r+0x2e4>)
 8008cd8:	6018      	str	r0, [r3, #0]
 8008cda:	1e43      	subs	r3, r0, #1
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	e7df      	b.n	8008ca0 <_dtoa_r+0xa0>
 8008ce0:	ec4b ab10 	vmov	d0, sl, fp
 8008ce4:	aa10      	add	r2, sp, #64	; 0x40
 8008ce6:	a911      	add	r1, sp, #68	; 0x44
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f001 f98b 	bl	800a004 <__d2b>
 8008cee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cf2:	ee08 0a10 	vmov	s16, r0
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	f000 8084 	beq.w	8008e04 <_dtoa_r+0x204>
 8008cfc:	ee19 3a90 	vmov	r3, s19
 8008d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d08:	4656      	mov	r6, sl
 8008d0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d16:	4b74      	ldr	r3, [pc, #464]	; (8008ee8 <_dtoa_r+0x2e8>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f7 fabb 	bl	8000298 <__aeabi_dsub>
 8008d22:	a365      	add	r3, pc, #404	; (adr r3, 8008eb8 <_dtoa_r+0x2b8>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fc6e 	bl	8000608 <__aeabi_dmul>
 8008d2c:	a364      	add	r3, pc, #400	; (adr r3, 8008ec0 <_dtoa_r+0x2c0>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fab3 	bl	800029c <__adddf3>
 8008d36:	4606      	mov	r6, r0
 8008d38:	4628      	mov	r0, r5
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	f7f7 fbfa 	bl	8000534 <__aeabi_i2d>
 8008d40:	a361      	add	r3, pc, #388	; (adr r3, 8008ec8 <_dtoa_r+0x2c8>)
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	f7f7 fc5f 	bl	8000608 <__aeabi_dmul>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 faa3 	bl	800029c <__adddf3>
 8008d56:	4606      	mov	r6, r0
 8008d58:	460f      	mov	r7, r1
 8008d5a:	f7f7 ff05 	bl	8000b68 <__aeabi_d2iz>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	9000      	str	r0, [sp, #0]
 8008d62:	2300      	movs	r3, #0
 8008d64:	4630      	mov	r0, r6
 8008d66:	4639      	mov	r1, r7
 8008d68:	f7f7 fec0 	bl	8000aec <__aeabi_dcmplt>
 8008d6c:	b150      	cbz	r0, 8008d84 <_dtoa_r+0x184>
 8008d6e:	9800      	ldr	r0, [sp, #0]
 8008d70:	f7f7 fbe0 	bl	8000534 <__aeabi_i2d>
 8008d74:	4632      	mov	r2, r6
 8008d76:	463b      	mov	r3, r7
 8008d78:	f7f7 feae 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d7c:	b910      	cbnz	r0, 8008d84 <_dtoa_r+0x184>
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	9b00      	ldr	r3, [sp, #0]
 8008d86:	2b16      	cmp	r3, #22
 8008d88:	d85a      	bhi.n	8008e40 <_dtoa_r+0x240>
 8008d8a:	9a00      	ldr	r2, [sp, #0]
 8008d8c:	4b57      	ldr	r3, [pc, #348]	; (8008eec <_dtoa_r+0x2ec>)
 8008d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	ec51 0b19 	vmov	r0, r1, d9
 8008d9a:	f7f7 fea7 	bl	8000aec <__aeabi_dcmplt>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d050      	beq.n	8008e44 <_dtoa_r+0x244>
 8008da2:	9b00      	ldr	r3, [sp, #0]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	2300      	movs	r3, #0
 8008daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dae:	1b5d      	subs	r5, r3, r5
 8008db0:	1e6b      	subs	r3, r5, #1
 8008db2:	9305      	str	r3, [sp, #20]
 8008db4:	bf45      	ittet	mi
 8008db6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008dba:	9304      	strmi	r3, [sp, #16]
 8008dbc:	2300      	movpl	r3, #0
 8008dbe:	2300      	movmi	r3, #0
 8008dc0:	bf4c      	ite	mi
 8008dc2:	9305      	strmi	r3, [sp, #20]
 8008dc4:	9304      	strpl	r3, [sp, #16]
 8008dc6:	9b00      	ldr	r3, [sp, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db3d      	blt.n	8008e48 <_dtoa_r+0x248>
 8008dcc:	9b05      	ldr	r3, [sp, #20]
 8008dce:	9a00      	ldr	r2, [sp, #0]
 8008dd0:	920a      	str	r2, [sp, #40]	; 0x28
 8008dd2:	4413      	add	r3, r2
 8008dd4:	9305      	str	r3, [sp, #20]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	2b09      	cmp	r3, #9
 8008dde:	f200 8089 	bhi.w	8008ef4 <_dtoa_r+0x2f4>
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	bfc4      	itt	gt
 8008de6:	3b04      	subgt	r3, #4
 8008de8:	9306      	strgt	r3, [sp, #24]
 8008dea:	9b06      	ldr	r3, [sp, #24]
 8008dec:	f1a3 0302 	sub.w	r3, r3, #2
 8008df0:	bfcc      	ite	gt
 8008df2:	2500      	movgt	r5, #0
 8008df4:	2501      	movle	r5, #1
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	f200 8087 	bhi.w	8008f0a <_dtoa_r+0x30a>
 8008dfc:	e8df f003 	tbb	[pc, r3]
 8008e00:	59383a2d 	.word	0x59383a2d
 8008e04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e08:	441d      	add	r5, r3
 8008e0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	bfc1      	itttt	gt
 8008e12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e22:	bfda      	itte	le
 8008e24:	f1c3 0320 	rsble	r3, r3, #32
 8008e28:	fa06 f003 	lslle.w	r0, r6, r3
 8008e2c:	4318      	orrgt	r0, r3
 8008e2e:	f7f7 fb71 	bl	8000514 <__aeabi_ui2d>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4606      	mov	r6, r0
 8008e36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e3a:	3d01      	subs	r5, #1
 8008e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e3e:	e76a      	b.n	8008d16 <_dtoa_r+0x116>
 8008e40:	2301      	movs	r3, #1
 8008e42:	e7b2      	b.n	8008daa <_dtoa_r+0x1aa>
 8008e44:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e46:	e7b1      	b.n	8008dac <_dtoa_r+0x1ac>
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	9a00      	ldr	r2, [sp, #0]
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	9304      	str	r3, [sp, #16]
 8008e50:	4253      	negs	r3, r2
 8008e52:	9307      	str	r3, [sp, #28]
 8008e54:	2300      	movs	r3, #0
 8008e56:	930a      	str	r3, [sp, #40]	; 0x28
 8008e58:	e7bf      	b.n	8008dda <_dtoa_r+0x1da>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9308      	str	r3, [sp, #32]
 8008e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dc55      	bgt.n	8008f10 <_dtoa_r+0x310>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6e:	e00c      	b.n	8008e8a <_dtoa_r+0x28a>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e7f3      	b.n	8008e5c <_dtoa_r+0x25c>
 8008e74:	2300      	movs	r3, #0
 8008e76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e78:	9308      	str	r3, [sp, #32]
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	9302      	str	r3, [sp, #8]
 8008e80:	3301      	adds	r3, #1
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	9303      	str	r3, [sp, #12]
 8008e86:	bfb8      	it	lt
 8008e88:	2301      	movlt	r3, #1
 8008e8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	6042      	str	r2, [r0, #4]
 8008e90:	2204      	movs	r2, #4
 8008e92:	f102 0614 	add.w	r6, r2, #20
 8008e96:	429e      	cmp	r6, r3
 8008e98:	6841      	ldr	r1, [r0, #4]
 8008e9a:	d93d      	bls.n	8008f18 <_dtoa_r+0x318>
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 fd89 	bl	80099b4 <_Balloc>
 8008ea2:	9001      	str	r0, [sp, #4]
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d13b      	bne.n	8008f20 <_dtoa_r+0x320>
 8008ea8:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <_dtoa_r+0x2f0>)
 8008eaa:	4602      	mov	r2, r0
 8008eac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008eb0:	e6c0      	b.n	8008c34 <_dtoa_r+0x34>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e7df      	b.n	8008e76 <_dtoa_r+0x276>
 8008eb6:	bf00      	nop
 8008eb8:	636f4361 	.word	0x636f4361
 8008ebc:	3fd287a7 	.word	0x3fd287a7
 8008ec0:	8b60c8b3 	.word	0x8b60c8b3
 8008ec4:	3fc68a28 	.word	0x3fc68a28
 8008ec8:	509f79fb 	.word	0x509f79fb
 8008ecc:	3fd34413 	.word	0x3fd34413
 8008ed0:	0800ad2d 	.word	0x0800ad2d
 8008ed4:	0800ad44 	.word	0x0800ad44
 8008ed8:	7ff00000 	.word	0x7ff00000
 8008edc:	0800ad29 	.word	0x0800ad29
 8008ee0:	0800ad20 	.word	0x0800ad20
 8008ee4:	0800acfd 	.word	0x0800acfd
 8008ee8:	3ff80000 	.word	0x3ff80000
 8008eec:	0800ae38 	.word	0x0800ae38
 8008ef0:	0800ad9f 	.word	0x0800ad9f
 8008ef4:	2501      	movs	r5, #1
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9306      	str	r3, [sp, #24]
 8008efa:	9508      	str	r5, [sp, #32]
 8008efc:	f04f 33ff 	mov.w	r3, #4294967295
 8008f00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f04:	2200      	movs	r2, #0
 8008f06:	2312      	movs	r3, #18
 8008f08:	e7b0      	b.n	8008e6c <_dtoa_r+0x26c>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	9308      	str	r3, [sp, #32]
 8008f0e:	e7f5      	b.n	8008efc <_dtoa_r+0x2fc>
 8008f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f16:	e7b8      	b.n	8008e8a <_dtoa_r+0x28a>
 8008f18:	3101      	adds	r1, #1
 8008f1a:	6041      	str	r1, [r0, #4]
 8008f1c:	0052      	lsls	r2, r2, #1
 8008f1e:	e7b8      	b.n	8008e92 <_dtoa_r+0x292>
 8008f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f22:	9a01      	ldr	r2, [sp, #4]
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	2b0e      	cmp	r3, #14
 8008f2a:	f200 809d 	bhi.w	8009068 <_dtoa_r+0x468>
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	f000 809a 	beq.w	8009068 <_dtoa_r+0x468>
 8008f34:	9b00      	ldr	r3, [sp, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	dd32      	ble.n	8008fa0 <_dtoa_r+0x3a0>
 8008f3a:	4ab7      	ldr	r2, [pc, #732]	; (8009218 <_dtoa_r+0x618>)
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f48:	9b00      	ldr	r3, [sp, #0]
 8008f4a:	05d8      	lsls	r0, r3, #23
 8008f4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f50:	d516      	bpl.n	8008f80 <_dtoa_r+0x380>
 8008f52:	4bb2      	ldr	r3, [pc, #712]	; (800921c <_dtoa_r+0x61c>)
 8008f54:	ec51 0b19 	vmov	r0, r1, d9
 8008f58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f5c:	f7f7 fc7e 	bl	800085c <__aeabi_ddiv>
 8008f60:	f007 070f 	and.w	r7, r7, #15
 8008f64:	4682      	mov	sl, r0
 8008f66:	468b      	mov	fp, r1
 8008f68:	2503      	movs	r5, #3
 8008f6a:	4eac      	ldr	r6, [pc, #688]	; (800921c <_dtoa_r+0x61c>)
 8008f6c:	b957      	cbnz	r7, 8008f84 <_dtoa_r+0x384>
 8008f6e:	4642      	mov	r2, r8
 8008f70:	464b      	mov	r3, r9
 8008f72:	4650      	mov	r0, sl
 8008f74:	4659      	mov	r1, fp
 8008f76:	f7f7 fc71 	bl	800085c <__aeabi_ddiv>
 8008f7a:	4682      	mov	sl, r0
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	e028      	b.n	8008fd2 <_dtoa_r+0x3d2>
 8008f80:	2502      	movs	r5, #2
 8008f82:	e7f2      	b.n	8008f6a <_dtoa_r+0x36a>
 8008f84:	07f9      	lsls	r1, r7, #31
 8008f86:	d508      	bpl.n	8008f9a <_dtoa_r+0x39a>
 8008f88:	4640      	mov	r0, r8
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f90:	f7f7 fb3a 	bl	8000608 <__aeabi_dmul>
 8008f94:	3501      	adds	r5, #1
 8008f96:	4680      	mov	r8, r0
 8008f98:	4689      	mov	r9, r1
 8008f9a:	107f      	asrs	r7, r7, #1
 8008f9c:	3608      	adds	r6, #8
 8008f9e:	e7e5      	b.n	8008f6c <_dtoa_r+0x36c>
 8008fa0:	f000 809b 	beq.w	80090da <_dtoa_r+0x4da>
 8008fa4:	9b00      	ldr	r3, [sp, #0]
 8008fa6:	4f9d      	ldr	r7, [pc, #628]	; (800921c <_dtoa_r+0x61c>)
 8008fa8:	425e      	negs	r6, r3
 8008faa:	4b9b      	ldr	r3, [pc, #620]	; (8009218 <_dtoa_r+0x618>)
 8008fac:	f006 020f 	and.w	r2, r6, #15
 8008fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	ec51 0b19 	vmov	r0, r1, d9
 8008fbc:	f7f7 fb24 	bl	8000608 <__aeabi_dmul>
 8008fc0:	1136      	asrs	r6, r6, #4
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	468b      	mov	fp, r1
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2502      	movs	r5, #2
 8008fca:	2e00      	cmp	r6, #0
 8008fcc:	d17a      	bne.n	80090c4 <_dtoa_r+0x4c4>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1d3      	bne.n	8008f7a <_dtoa_r+0x37a>
 8008fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8082 	beq.w	80090de <_dtoa_r+0x4de>
 8008fda:	4b91      	ldr	r3, [pc, #580]	; (8009220 <_dtoa_r+0x620>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4650      	mov	r0, sl
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	f7f7 fd83 	bl	8000aec <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d079      	beq.n	80090de <_dtoa_r+0x4de>
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d076      	beq.n	80090de <_dtoa_r+0x4de>
 8008ff0:	9b02      	ldr	r3, [sp, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dd36      	ble.n	8009064 <_dtoa_r+0x464>
 8008ff6:	9b00      	ldr	r3, [sp, #0]
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	4659      	mov	r1, fp
 8008ffc:	1e5f      	subs	r7, r3, #1
 8008ffe:	2200      	movs	r2, #0
 8009000:	4b88      	ldr	r3, [pc, #544]	; (8009224 <_dtoa_r+0x624>)
 8009002:	f7f7 fb01 	bl	8000608 <__aeabi_dmul>
 8009006:	9e02      	ldr	r6, [sp, #8]
 8009008:	4682      	mov	sl, r0
 800900a:	468b      	mov	fp, r1
 800900c:	3501      	adds	r5, #1
 800900e:	4628      	mov	r0, r5
 8009010:	f7f7 fa90 	bl	8000534 <__aeabi_i2d>
 8009014:	4652      	mov	r2, sl
 8009016:	465b      	mov	r3, fp
 8009018:	f7f7 faf6 	bl	8000608 <__aeabi_dmul>
 800901c:	4b82      	ldr	r3, [pc, #520]	; (8009228 <_dtoa_r+0x628>)
 800901e:	2200      	movs	r2, #0
 8009020:	f7f7 f93c 	bl	800029c <__adddf3>
 8009024:	46d0      	mov	r8, sl
 8009026:	46d9      	mov	r9, fp
 8009028:	4682      	mov	sl, r0
 800902a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800902e:	2e00      	cmp	r6, #0
 8009030:	d158      	bne.n	80090e4 <_dtoa_r+0x4e4>
 8009032:	4b7e      	ldr	r3, [pc, #504]	; (800922c <_dtoa_r+0x62c>)
 8009034:	2200      	movs	r2, #0
 8009036:	4640      	mov	r0, r8
 8009038:	4649      	mov	r1, r9
 800903a:	f7f7 f92d 	bl	8000298 <__aeabi_dsub>
 800903e:	4652      	mov	r2, sl
 8009040:	465b      	mov	r3, fp
 8009042:	4680      	mov	r8, r0
 8009044:	4689      	mov	r9, r1
 8009046:	f7f7 fd6f 	bl	8000b28 <__aeabi_dcmpgt>
 800904a:	2800      	cmp	r0, #0
 800904c:	f040 8295 	bne.w	800957a <_dtoa_r+0x97a>
 8009050:	4652      	mov	r2, sl
 8009052:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009056:	4640      	mov	r0, r8
 8009058:	4649      	mov	r1, r9
 800905a:	f7f7 fd47 	bl	8000aec <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	f040 8289 	bne.w	8009576 <_dtoa_r+0x976>
 8009064:	ec5b ab19 	vmov	sl, fp, d9
 8009068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800906a:	2b00      	cmp	r3, #0
 800906c:	f2c0 8148 	blt.w	8009300 <_dtoa_r+0x700>
 8009070:	9a00      	ldr	r2, [sp, #0]
 8009072:	2a0e      	cmp	r2, #14
 8009074:	f300 8144 	bgt.w	8009300 <_dtoa_r+0x700>
 8009078:	4b67      	ldr	r3, [pc, #412]	; (8009218 <_dtoa_r+0x618>)
 800907a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800907e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009084:	2b00      	cmp	r3, #0
 8009086:	f280 80d5 	bge.w	8009234 <_dtoa_r+0x634>
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f300 80d1 	bgt.w	8009234 <_dtoa_r+0x634>
 8009092:	f040 826f 	bne.w	8009574 <_dtoa_r+0x974>
 8009096:	4b65      	ldr	r3, [pc, #404]	; (800922c <_dtoa_r+0x62c>)
 8009098:	2200      	movs	r2, #0
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f7f7 fab3 	bl	8000608 <__aeabi_dmul>
 80090a2:	4652      	mov	r2, sl
 80090a4:	465b      	mov	r3, fp
 80090a6:	f7f7 fd35 	bl	8000b14 <__aeabi_dcmpge>
 80090aa:	9e03      	ldr	r6, [sp, #12]
 80090ac:	4637      	mov	r7, r6
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f040 8245 	bne.w	800953e <_dtoa_r+0x93e>
 80090b4:	9d01      	ldr	r5, [sp, #4]
 80090b6:	2331      	movs	r3, #49	; 0x31
 80090b8:	f805 3b01 	strb.w	r3, [r5], #1
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	3301      	adds	r3, #1
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	e240      	b.n	8009546 <_dtoa_r+0x946>
 80090c4:	07f2      	lsls	r2, r6, #31
 80090c6:	d505      	bpl.n	80090d4 <_dtoa_r+0x4d4>
 80090c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090cc:	f7f7 fa9c 	bl	8000608 <__aeabi_dmul>
 80090d0:	3501      	adds	r5, #1
 80090d2:	2301      	movs	r3, #1
 80090d4:	1076      	asrs	r6, r6, #1
 80090d6:	3708      	adds	r7, #8
 80090d8:	e777      	b.n	8008fca <_dtoa_r+0x3ca>
 80090da:	2502      	movs	r5, #2
 80090dc:	e779      	b.n	8008fd2 <_dtoa_r+0x3d2>
 80090de:	9f00      	ldr	r7, [sp, #0]
 80090e0:	9e03      	ldr	r6, [sp, #12]
 80090e2:	e794      	b.n	800900e <_dtoa_r+0x40e>
 80090e4:	9901      	ldr	r1, [sp, #4]
 80090e6:	4b4c      	ldr	r3, [pc, #304]	; (8009218 <_dtoa_r+0x618>)
 80090e8:	4431      	add	r1, r6
 80090ea:	910d      	str	r1, [sp, #52]	; 0x34
 80090ec:	9908      	ldr	r1, [sp, #32]
 80090ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090f6:	2900      	cmp	r1, #0
 80090f8:	d043      	beq.n	8009182 <_dtoa_r+0x582>
 80090fa:	494d      	ldr	r1, [pc, #308]	; (8009230 <_dtoa_r+0x630>)
 80090fc:	2000      	movs	r0, #0
 80090fe:	f7f7 fbad 	bl	800085c <__aeabi_ddiv>
 8009102:	4652      	mov	r2, sl
 8009104:	465b      	mov	r3, fp
 8009106:	f7f7 f8c7 	bl	8000298 <__aeabi_dsub>
 800910a:	9d01      	ldr	r5, [sp, #4]
 800910c:	4682      	mov	sl, r0
 800910e:	468b      	mov	fp, r1
 8009110:	4649      	mov	r1, r9
 8009112:	4640      	mov	r0, r8
 8009114:	f7f7 fd28 	bl	8000b68 <__aeabi_d2iz>
 8009118:	4606      	mov	r6, r0
 800911a:	f7f7 fa0b 	bl	8000534 <__aeabi_i2d>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	f7f7 f8b7 	bl	8000298 <__aeabi_dsub>
 800912a:	3630      	adds	r6, #48	; 0x30
 800912c:	f805 6b01 	strb.w	r6, [r5], #1
 8009130:	4652      	mov	r2, sl
 8009132:	465b      	mov	r3, fp
 8009134:	4680      	mov	r8, r0
 8009136:	4689      	mov	r9, r1
 8009138:	f7f7 fcd8 	bl	8000aec <__aeabi_dcmplt>
 800913c:	2800      	cmp	r0, #0
 800913e:	d163      	bne.n	8009208 <_dtoa_r+0x608>
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	4936      	ldr	r1, [pc, #216]	; (8009220 <_dtoa_r+0x620>)
 8009146:	2000      	movs	r0, #0
 8009148:	f7f7 f8a6 	bl	8000298 <__aeabi_dsub>
 800914c:	4652      	mov	r2, sl
 800914e:	465b      	mov	r3, fp
 8009150:	f7f7 fccc 	bl	8000aec <__aeabi_dcmplt>
 8009154:	2800      	cmp	r0, #0
 8009156:	f040 80b5 	bne.w	80092c4 <_dtoa_r+0x6c4>
 800915a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800915c:	429d      	cmp	r5, r3
 800915e:	d081      	beq.n	8009064 <_dtoa_r+0x464>
 8009160:	4b30      	ldr	r3, [pc, #192]	; (8009224 <_dtoa_r+0x624>)
 8009162:	2200      	movs	r2, #0
 8009164:	4650      	mov	r0, sl
 8009166:	4659      	mov	r1, fp
 8009168:	f7f7 fa4e 	bl	8000608 <__aeabi_dmul>
 800916c:	4b2d      	ldr	r3, [pc, #180]	; (8009224 <_dtoa_r+0x624>)
 800916e:	4682      	mov	sl, r0
 8009170:	468b      	mov	fp, r1
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	2200      	movs	r2, #0
 8009178:	f7f7 fa46 	bl	8000608 <__aeabi_dmul>
 800917c:	4680      	mov	r8, r0
 800917e:	4689      	mov	r9, r1
 8009180:	e7c6      	b.n	8009110 <_dtoa_r+0x510>
 8009182:	4650      	mov	r0, sl
 8009184:	4659      	mov	r1, fp
 8009186:	f7f7 fa3f 	bl	8000608 <__aeabi_dmul>
 800918a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800918c:	9d01      	ldr	r5, [sp, #4]
 800918e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009190:	4682      	mov	sl, r0
 8009192:	468b      	mov	fp, r1
 8009194:	4649      	mov	r1, r9
 8009196:	4640      	mov	r0, r8
 8009198:	f7f7 fce6 	bl	8000b68 <__aeabi_d2iz>
 800919c:	4606      	mov	r6, r0
 800919e:	f7f7 f9c9 	bl	8000534 <__aeabi_i2d>
 80091a2:	3630      	adds	r6, #48	; 0x30
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4640      	mov	r0, r8
 80091aa:	4649      	mov	r1, r9
 80091ac:	f7f7 f874 	bl	8000298 <__aeabi_dsub>
 80091b0:	f805 6b01 	strb.w	r6, [r5], #1
 80091b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091b6:	429d      	cmp	r5, r3
 80091b8:	4680      	mov	r8, r0
 80091ba:	4689      	mov	r9, r1
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	d124      	bne.n	800920c <_dtoa_r+0x60c>
 80091c2:	4b1b      	ldr	r3, [pc, #108]	; (8009230 <_dtoa_r+0x630>)
 80091c4:	4650      	mov	r0, sl
 80091c6:	4659      	mov	r1, fp
 80091c8:	f7f7 f868 	bl	800029c <__adddf3>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	f7f7 fca8 	bl	8000b28 <__aeabi_dcmpgt>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d173      	bne.n	80092c4 <_dtoa_r+0x6c4>
 80091dc:	4652      	mov	r2, sl
 80091de:	465b      	mov	r3, fp
 80091e0:	4913      	ldr	r1, [pc, #76]	; (8009230 <_dtoa_r+0x630>)
 80091e2:	2000      	movs	r0, #0
 80091e4:	f7f7 f858 	bl	8000298 <__aeabi_dsub>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4640      	mov	r0, r8
 80091ee:	4649      	mov	r1, r9
 80091f0:	f7f7 fc7c 	bl	8000aec <__aeabi_dcmplt>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	f43f af35 	beq.w	8009064 <_dtoa_r+0x464>
 80091fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091fc:	1e6b      	subs	r3, r5, #1
 80091fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009200:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009204:	2b30      	cmp	r3, #48	; 0x30
 8009206:	d0f8      	beq.n	80091fa <_dtoa_r+0x5fa>
 8009208:	9700      	str	r7, [sp, #0]
 800920a:	e049      	b.n	80092a0 <_dtoa_r+0x6a0>
 800920c:	4b05      	ldr	r3, [pc, #20]	; (8009224 <_dtoa_r+0x624>)
 800920e:	f7f7 f9fb 	bl	8000608 <__aeabi_dmul>
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	e7bd      	b.n	8009194 <_dtoa_r+0x594>
 8009218:	0800ae38 	.word	0x0800ae38
 800921c:	0800ae10 	.word	0x0800ae10
 8009220:	3ff00000 	.word	0x3ff00000
 8009224:	40240000 	.word	0x40240000
 8009228:	401c0000 	.word	0x401c0000
 800922c:	40140000 	.word	0x40140000
 8009230:	3fe00000 	.word	0x3fe00000
 8009234:	9d01      	ldr	r5, [sp, #4]
 8009236:	4656      	mov	r6, sl
 8009238:	465f      	mov	r7, fp
 800923a:	4642      	mov	r2, r8
 800923c:	464b      	mov	r3, r9
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	f7f7 fb0b 	bl	800085c <__aeabi_ddiv>
 8009246:	f7f7 fc8f 	bl	8000b68 <__aeabi_d2iz>
 800924a:	4682      	mov	sl, r0
 800924c:	f7f7 f972 	bl	8000534 <__aeabi_i2d>
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	f7f7 f9d8 	bl	8000608 <__aeabi_dmul>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4630      	mov	r0, r6
 800925e:	4639      	mov	r1, r7
 8009260:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009264:	f7f7 f818 	bl	8000298 <__aeabi_dsub>
 8009268:	f805 6b01 	strb.w	r6, [r5], #1
 800926c:	9e01      	ldr	r6, [sp, #4]
 800926e:	9f03      	ldr	r7, [sp, #12]
 8009270:	1bae      	subs	r6, r5, r6
 8009272:	42b7      	cmp	r7, r6
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	d135      	bne.n	80092e6 <_dtoa_r+0x6e6>
 800927a:	f7f7 f80f 	bl	800029c <__adddf3>
 800927e:	4642      	mov	r2, r8
 8009280:	464b      	mov	r3, r9
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	f7f7 fc4f 	bl	8000b28 <__aeabi_dcmpgt>
 800928a:	b9d0      	cbnz	r0, 80092c2 <_dtoa_r+0x6c2>
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	4630      	mov	r0, r6
 8009292:	4639      	mov	r1, r7
 8009294:	f7f7 fc20 	bl	8000ad8 <__aeabi_dcmpeq>
 8009298:	b110      	cbz	r0, 80092a0 <_dtoa_r+0x6a0>
 800929a:	f01a 0f01 	tst.w	sl, #1
 800929e:	d110      	bne.n	80092c2 <_dtoa_r+0x6c2>
 80092a0:	4620      	mov	r0, r4
 80092a2:	ee18 1a10 	vmov	r1, s16
 80092a6:	f000 fbc5 	bl	8009a34 <_Bfree>
 80092aa:	2300      	movs	r3, #0
 80092ac:	9800      	ldr	r0, [sp, #0]
 80092ae:	702b      	strb	r3, [r5, #0]
 80092b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092b2:	3001      	adds	r0, #1
 80092b4:	6018      	str	r0, [r3, #0]
 80092b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f43f acf1 	beq.w	8008ca0 <_dtoa_r+0xa0>
 80092be:	601d      	str	r5, [r3, #0]
 80092c0:	e4ee      	b.n	8008ca0 <_dtoa_r+0xa0>
 80092c2:	9f00      	ldr	r7, [sp, #0]
 80092c4:	462b      	mov	r3, r5
 80092c6:	461d      	mov	r5, r3
 80092c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092cc:	2a39      	cmp	r2, #57	; 0x39
 80092ce:	d106      	bne.n	80092de <_dtoa_r+0x6de>
 80092d0:	9a01      	ldr	r2, [sp, #4]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d1f7      	bne.n	80092c6 <_dtoa_r+0x6c6>
 80092d6:	9901      	ldr	r1, [sp, #4]
 80092d8:	2230      	movs	r2, #48	; 0x30
 80092da:	3701      	adds	r7, #1
 80092dc:	700a      	strb	r2, [r1, #0]
 80092de:	781a      	ldrb	r2, [r3, #0]
 80092e0:	3201      	adds	r2, #1
 80092e2:	701a      	strb	r2, [r3, #0]
 80092e4:	e790      	b.n	8009208 <_dtoa_r+0x608>
 80092e6:	4ba6      	ldr	r3, [pc, #664]	; (8009580 <_dtoa_r+0x980>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	f7f7 f98d 	bl	8000608 <__aeabi_dmul>
 80092ee:	2200      	movs	r2, #0
 80092f0:	2300      	movs	r3, #0
 80092f2:	4606      	mov	r6, r0
 80092f4:	460f      	mov	r7, r1
 80092f6:	f7f7 fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d09d      	beq.n	800923a <_dtoa_r+0x63a>
 80092fe:	e7cf      	b.n	80092a0 <_dtoa_r+0x6a0>
 8009300:	9a08      	ldr	r2, [sp, #32]
 8009302:	2a00      	cmp	r2, #0
 8009304:	f000 80d7 	beq.w	80094b6 <_dtoa_r+0x8b6>
 8009308:	9a06      	ldr	r2, [sp, #24]
 800930a:	2a01      	cmp	r2, #1
 800930c:	f300 80ba 	bgt.w	8009484 <_dtoa_r+0x884>
 8009310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009312:	2a00      	cmp	r2, #0
 8009314:	f000 80b2 	beq.w	800947c <_dtoa_r+0x87c>
 8009318:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800931c:	9e07      	ldr	r6, [sp, #28]
 800931e:	9d04      	ldr	r5, [sp, #16]
 8009320:	9a04      	ldr	r2, [sp, #16]
 8009322:	441a      	add	r2, r3
 8009324:	9204      	str	r2, [sp, #16]
 8009326:	9a05      	ldr	r2, [sp, #20]
 8009328:	2101      	movs	r1, #1
 800932a:	441a      	add	r2, r3
 800932c:	4620      	mov	r0, r4
 800932e:	9205      	str	r2, [sp, #20]
 8009330:	f000 fc38 	bl	8009ba4 <__i2b>
 8009334:	4607      	mov	r7, r0
 8009336:	2d00      	cmp	r5, #0
 8009338:	dd0c      	ble.n	8009354 <_dtoa_r+0x754>
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd09      	ble.n	8009354 <_dtoa_r+0x754>
 8009340:	42ab      	cmp	r3, r5
 8009342:	9a04      	ldr	r2, [sp, #16]
 8009344:	bfa8      	it	ge
 8009346:	462b      	movge	r3, r5
 8009348:	1ad2      	subs	r2, r2, r3
 800934a:	9204      	str	r2, [sp, #16]
 800934c:	9a05      	ldr	r2, [sp, #20]
 800934e:	1aed      	subs	r5, r5, r3
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	9b07      	ldr	r3, [sp, #28]
 8009356:	b31b      	cbz	r3, 80093a0 <_dtoa_r+0x7a0>
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80af 	beq.w	80094be <_dtoa_r+0x8be>
 8009360:	2e00      	cmp	r6, #0
 8009362:	dd13      	ble.n	800938c <_dtoa_r+0x78c>
 8009364:	4639      	mov	r1, r7
 8009366:	4632      	mov	r2, r6
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fcdb 	bl	8009d24 <__pow5mult>
 800936e:	ee18 2a10 	vmov	r2, s16
 8009372:	4601      	mov	r1, r0
 8009374:	4607      	mov	r7, r0
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fc2a 	bl	8009bd0 <__multiply>
 800937c:	ee18 1a10 	vmov	r1, s16
 8009380:	4680      	mov	r8, r0
 8009382:	4620      	mov	r0, r4
 8009384:	f000 fb56 	bl	8009a34 <_Bfree>
 8009388:	ee08 8a10 	vmov	s16, r8
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	1b9a      	subs	r2, r3, r6
 8009390:	d006      	beq.n	80093a0 <_dtoa_r+0x7a0>
 8009392:	ee18 1a10 	vmov	r1, s16
 8009396:	4620      	mov	r0, r4
 8009398:	f000 fcc4 	bl	8009d24 <__pow5mult>
 800939c:	ee08 0a10 	vmov	s16, r0
 80093a0:	2101      	movs	r1, #1
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 fbfe 	bl	8009ba4 <__i2b>
 80093a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	4606      	mov	r6, r0
 80093ae:	f340 8088 	ble.w	80094c2 <_dtoa_r+0x8c2>
 80093b2:	461a      	mov	r2, r3
 80093b4:	4601      	mov	r1, r0
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 fcb4 	bl	8009d24 <__pow5mult>
 80093bc:	9b06      	ldr	r3, [sp, #24]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	4606      	mov	r6, r0
 80093c2:	f340 8081 	ble.w	80094c8 <_dtoa_r+0x8c8>
 80093c6:	f04f 0800 	mov.w	r8, #0
 80093ca:	6933      	ldr	r3, [r6, #16]
 80093cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093d0:	6918      	ldr	r0, [r3, #16]
 80093d2:	f000 fb97 	bl	8009b04 <__hi0bits>
 80093d6:	f1c0 0020 	rsb	r0, r0, #32
 80093da:	9b05      	ldr	r3, [sp, #20]
 80093dc:	4418      	add	r0, r3
 80093de:	f010 001f 	ands.w	r0, r0, #31
 80093e2:	f000 8092 	beq.w	800950a <_dtoa_r+0x90a>
 80093e6:	f1c0 0320 	rsb	r3, r0, #32
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	f340 808a 	ble.w	8009504 <_dtoa_r+0x904>
 80093f0:	f1c0 001c 	rsb	r0, r0, #28
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	4403      	add	r3, r0
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	9b05      	ldr	r3, [sp, #20]
 80093fc:	4403      	add	r3, r0
 80093fe:	4405      	add	r5, r0
 8009400:	9305      	str	r3, [sp, #20]
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dd07      	ble.n	8009418 <_dtoa_r+0x818>
 8009408:	ee18 1a10 	vmov	r1, s16
 800940c:	461a      	mov	r2, r3
 800940e:	4620      	mov	r0, r4
 8009410:	f000 fce2 	bl	8009dd8 <__lshift>
 8009414:	ee08 0a10 	vmov	s16, r0
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd05      	ble.n	800942a <_dtoa_r+0x82a>
 800941e:	4631      	mov	r1, r6
 8009420:	461a      	mov	r2, r3
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fcd8 	bl	8009dd8 <__lshift>
 8009428:	4606      	mov	r6, r0
 800942a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d06e      	beq.n	800950e <_dtoa_r+0x90e>
 8009430:	ee18 0a10 	vmov	r0, s16
 8009434:	4631      	mov	r1, r6
 8009436:	f000 fd3f 	bl	8009eb8 <__mcmp>
 800943a:	2800      	cmp	r0, #0
 800943c:	da67      	bge.n	800950e <_dtoa_r+0x90e>
 800943e:	9b00      	ldr	r3, [sp, #0]
 8009440:	3b01      	subs	r3, #1
 8009442:	ee18 1a10 	vmov	r1, s16
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	220a      	movs	r2, #10
 800944a:	2300      	movs	r3, #0
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fb13 	bl	8009a78 <__multadd>
 8009452:	9b08      	ldr	r3, [sp, #32]
 8009454:	ee08 0a10 	vmov	s16, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 81b1 	beq.w	80097c0 <_dtoa_r+0xbc0>
 800945e:	2300      	movs	r3, #0
 8009460:	4639      	mov	r1, r7
 8009462:	220a      	movs	r2, #10
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fb07 	bl	8009a78 <__multadd>
 800946a:	9b02      	ldr	r3, [sp, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	4607      	mov	r7, r0
 8009470:	f300 808e 	bgt.w	8009590 <_dtoa_r+0x990>
 8009474:	9b06      	ldr	r3, [sp, #24]
 8009476:	2b02      	cmp	r3, #2
 8009478:	dc51      	bgt.n	800951e <_dtoa_r+0x91e>
 800947a:	e089      	b.n	8009590 <_dtoa_r+0x990>
 800947c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800947e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009482:	e74b      	b.n	800931c <_dtoa_r+0x71c>
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	1e5e      	subs	r6, r3, #1
 8009488:	9b07      	ldr	r3, [sp, #28]
 800948a:	42b3      	cmp	r3, r6
 800948c:	bfbf      	itttt	lt
 800948e:	9b07      	ldrlt	r3, [sp, #28]
 8009490:	9607      	strlt	r6, [sp, #28]
 8009492:	1af2      	sublt	r2, r6, r3
 8009494:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009496:	bfb6      	itet	lt
 8009498:	189b      	addlt	r3, r3, r2
 800949a:	1b9e      	subge	r6, r3, r6
 800949c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	bfb8      	it	lt
 80094a2:	2600      	movlt	r6, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bfb7      	itett	lt
 80094a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094b0:	1a9d      	sublt	r5, r3, r2
 80094b2:	2300      	movlt	r3, #0
 80094b4:	e734      	b.n	8009320 <_dtoa_r+0x720>
 80094b6:	9e07      	ldr	r6, [sp, #28]
 80094b8:	9d04      	ldr	r5, [sp, #16]
 80094ba:	9f08      	ldr	r7, [sp, #32]
 80094bc:	e73b      	b.n	8009336 <_dtoa_r+0x736>
 80094be:	9a07      	ldr	r2, [sp, #28]
 80094c0:	e767      	b.n	8009392 <_dtoa_r+0x792>
 80094c2:	9b06      	ldr	r3, [sp, #24]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	dc18      	bgt.n	80094fa <_dtoa_r+0x8fa>
 80094c8:	f1ba 0f00 	cmp.w	sl, #0
 80094cc:	d115      	bne.n	80094fa <_dtoa_r+0x8fa>
 80094ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094d2:	b993      	cbnz	r3, 80094fa <_dtoa_r+0x8fa>
 80094d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094d8:	0d1b      	lsrs	r3, r3, #20
 80094da:	051b      	lsls	r3, r3, #20
 80094dc:	b183      	cbz	r3, 8009500 <_dtoa_r+0x900>
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	3301      	adds	r3, #1
 80094e2:	9304      	str	r3, [sp, #16]
 80094e4:	9b05      	ldr	r3, [sp, #20]
 80094e6:	3301      	adds	r3, #1
 80094e8:	9305      	str	r3, [sp, #20]
 80094ea:	f04f 0801 	mov.w	r8, #1
 80094ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f47f af6a 	bne.w	80093ca <_dtoa_r+0x7ca>
 80094f6:	2001      	movs	r0, #1
 80094f8:	e76f      	b.n	80093da <_dtoa_r+0x7da>
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	e7f6      	b.n	80094ee <_dtoa_r+0x8ee>
 8009500:	4698      	mov	r8, r3
 8009502:	e7f4      	b.n	80094ee <_dtoa_r+0x8ee>
 8009504:	f43f af7d 	beq.w	8009402 <_dtoa_r+0x802>
 8009508:	4618      	mov	r0, r3
 800950a:	301c      	adds	r0, #28
 800950c:	e772      	b.n	80093f4 <_dtoa_r+0x7f4>
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	2b00      	cmp	r3, #0
 8009512:	dc37      	bgt.n	8009584 <_dtoa_r+0x984>
 8009514:	9b06      	ldr	r3, [sp, #24]
 8009516:	2b02      	cmp	r3, #2
 8009518:	dd34      	ble.n	8009584 <_dtoa_r+0x984>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	9302      	str	r3, [sp, #8]
 800951e:	9b02      	ldr	r3, [sp, #8]
 8009520:	b96b      	cbnz	r3, 800953e <_dtoa_r+0x93e>
 8009522:	4631      	mov	r1, r6
 8009524:	2205      	movs	r2, #5
 8009526:	4620      	mov	r0, r4
 8009528:	f000 faa6 	bl	8009a78 <__multadd>
 800952c:	4601      	mov	r1, r0
 800952e:	4606      	mov	r6, r0
 8009530:	ee18 0a10 	vmov	r0, s16
 8009534:	f000 fcc0 	bl	8009eb8 <__mcmp>
 8009538:	2800      	cmp	r0, #0
 800953a:	f73f adbb 	bgt.w	80090b4 <_dtoa_r+0x4b4>
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	9d01      	ldr	r5, [sp, #4]
 8009542:	43db      	mvns	r3, r3
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	4631      	mov	r1, r6
 800954c:	4620      	mov	r0, r4
 800954e:	f000 fa71 	bl	8009a34 <_Bfree>
 8009552:	2f00      	cmp	r7, #0
 8009554:	f43f aea4 	beq.w	80092a0 <_dtoa_r+0x6a0>
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	d005      	beq.n	800956a <_dtoa_r+0x96a>
 800955e:	45b8      	cmp	r8, r7
 8009560:	d003      	beq.n	800956a <_dtoa_r+0x96a>
 8009562:	4641      	mov	r1, r8
 8009564:	4620      	mov	r0, r4
 8009566:	f000 fa65 	bl	8009a34 <_Bfree>
 800956a:	4639      	mov	r1, r7
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fa61 	bl	8009a34 <_Bfree>
 8009572:	e695      	b.n	80092a0 <_dtoa_r+0x6a0>
 8009574:	2600      	movs	r6, #0
 8009576:	4637      	mov	r7, r6
 8009578:	e7e1      	b.n	800953e <_dtoa_r+0x93e>
 800957a:	9700      	str	r7, [sp, #0]
 800957c:	4637      	mov	r7, r6
 800957e:	e599      	b.n	80090b4 <_dtoa_r+0x4b4>
 8009580:	40240000 	.word	0x40240000
 8009584:	9b08      	ldr	r3, [sp, #32]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 80ca 	beq.w	8009720 <_dtoa_r+0xb20>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	9302      	str	r3, [sp, #8]
 8009590:	2d00      	cmp	r5, #0
 8009592:	dd05      	ble.n	80095a0 <_dtoa_r+0x9a0>
 8009594:	4639      	mov	r1, r7
 8009596:	462a      	mov	r2, r5
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fc1d 	bl	8009dd8 <__lshift>
 800959e:	4607      	mov	r7, r0
 80095a0:	f1b8 0f00 	cmp.w	r8, #0
 80095a4:	d05b      	beq.n	800965e <_dtoa_r+0xa5e>
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 fa03 	bl	80099b4 <_Balloc>
 80095ae:	4605      	mov	r5, r0
 80095b0:	b928      	cbnz	r0, 80095be <_dtoa_r+0x9be>
 80095b2:	4b87      	ldr	r3, [pc, #540]	; (80097d0 <_dtoa_r+0xbd0>)
 80095b4:	4602      	mov	r2, r0
 80095b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095ba:	f7ff bb3b 	b.w	8008c34 <_dtoa_r+0x34>
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	3202      	adds	r2, #2
 80095c2:	0092      	lsls	r2, r2, #2
 80095c4:	f107 010c 	add.w	r1, r7, #12
 80095c8:	300c      	adds	r0, #12
 80095ca:	f7fe fc62 	bl	8007e92 <memcpy>
 80095ce:	2201      	movs	r2, #1
 80095d0:	4629      	mov	r1, r5
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fc00 	bl	8009dd8 <__lshift>
 80095d8:	9b01      	ldr	r3, [sp, #4]
 80095da:	f103 0901 	add.w	r9, r3, #1
 80095de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095e2:	4413      	add	r3, r2
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	f00a 0301 	and.w	r3, sl, #1
 80095ea:	46b8      	mov	r8, r7
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	4607      	mov	r7, r0
 80095f0:	4631      	mov	r1, r6
 80095f2:	ee18 0a10 	vmov	r0, s16
 80095f6:	f7ff fa75 	bl	8008ae4 <quorem>
 80095fa:	4641      	mov	r1, r8
 80095fc:	9002      	str	r0, [sp, #8]
 80095fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009602:	ee18 0a10 	vmov	r0, s16
 8009606:	f000 fc57 	bl	8009eb8 <__mcmp>
 800960a:	463a      	mov	r2, r7
 800960c:	9003      	str	r0, [sp, #12]
 800960e:	4631      	mov	r1, r6
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fc6d 	bl	8009ef0 <__mdiff>
 8009616:	68c2      	ldr	r2, [r0, #12]
 8009618:	f109 3bff 	add.w	fp, r9, #4294967295
 800961c:	4605      	mov	r5, r0
 800961e:	bb02      	cbnz	r2, 8009662 <_dtoa_r+0xa62>
 8009620:	4601      	mov	r1, r0
 8009622:	ee18 0a10 	vmov	r0, s16
 8009626:	f000 fc47 	bl	8009eb8 <__mcmp>
 800962a:	4602      	mov	r2, r0
 800962c:	4629      	mov	r1, r5
 800962e:	4620      	mov	r0, r4
 8009630:	9207      	str	r2, [sp, #28]
 8009632:	f000 f9ff 	bl	8009a34 <_Bfree>
 8009636:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800963a:	ea43 0102 	orr.w	r1, r3, r2
 800963e:	9b04      	ldr	r3, [sp, #16]
 8009640:	430b      	orrs	r3, r1
 8009642:	464d      	mov	r5, r9
 8009644:	d10f      	bne.n	8009666 <_dtoa_r+0xa66>
 8009646:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800964a:	d02a      	beq.n	80096a2 <_dtoa_r+0xaa2>
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	dd02      	ble.n	8009658 <_dtoa_r+0xa58>
 8009652:	9b02      	ldr	r3, [sp, #8]
 8009654:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009658:	f88b a000 	strb.w	sl, [fp]
 800965c:	e775      	b.n	800954a <_dtoa_r+0x94a>
 800965e:	4638      	mov	r0, r7
 8009660:	e7ba      	b.n	80095d8 <_dtoa_r+0x9d8>
 8009662:	2201      	movs	r2, #1
 8009664:	e7e2      	b.n	800962c <_dtoa_r+0xa2c>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	db04      	blt.n	8009676 <_dtoa_r+0xa76>
 800966c:	9906      	ldr	r1, [sp, #24]
 800966e:	430b      	orrs	r3, r1
 8009670:	9904      	ldr	r1, [sp, #16]
 8009672:	430b      	orrs	r3, r1
 8009674:	d122      	bne.n	80096bc <_dtoa_r+0xabc>
 8009676:	2a00      	cmp	r2, #0
 8009678:	ddee      	ble.n	8009658 <_dtoa_r+0xa58>
 800967a:	ee18 1a10 	vmov	r1, s16
 800967e:	2201      	movs	r2, #1
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fba9 	bl	8009dd8 <__lshift>
 8009686:	4631      	mov	r1, r6
 8009688:	ee08 0a10 	vmov	s16, r0
 800968c:	f000 fc14 	bl	8009eb8 <__mcmp>
 8009690:	2800      	cmp	r0, #0
 8009692:	dc03      	bgt.n	800969c <_dtoa_r+0xa9c>
 8009694:	d1e0      	bne.n	8009658 <_dtoa_r+0xa58>
 8009696:	f01a 0f01 	tst.w	sl, #1
 800969a:	d0dd      	beq.n	8009658 <_dtoa_r+0xa58>
 800969c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096a0:	d1d7      	bne.n	8009652 <_dtoa_r+0xa52>
 80096a2:	2339      	movs	r3, #57	; 0x39
 80096a4:	f88b 3000 	strb.w	r3, [fp]
 80096a8:	462b      	mov	r3, r5
 80096aa:	461d      	mov	r5, r3
 80096ac:	3b01      	subs	r3, #1
 80096ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096b2:	2a39      	cmp	r2, #57	; 0x39
 80096b4:	d071      	beq.n	800979a <_dtoa_r+0xb9a>
 80096b6:	3201      	adds	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	e746      	b.n	800954a <_dtoa_r+0x94a>
 80096bc:	2a00      	cmp	r2, #0
 80096be:	dd07      	ble.n	80096d0 <_dtoa_r+0xad0>
 80096c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096c4:	d0ed      	beq.n	80096a2 <_dtoa_r+0xaa2>
 80096c6:	f10a 0301 	add.w	r3, sl, #1
 80096ca:	f88b 3000 	strb.w	r3, [fp]
 80096ce:	e73c      	b.n	800954a <_dtoa_r+0x94a>
 80096d0:	9b05      	ldr	r3, [sp, #20]
 80096d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096d6:	4599      	cmp	r9, r3
 80096d8:	d047      	beq.n	800976a <_dtoa_r+0xb6a>
 80096da:	ee18 1a10 	vmov	r1, s16
 80096de:	2300      	movs	r3, #0
 80096e0:	220a      	movs	r2, #10
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 f9c8 	bl	8009a78 <__multadd>
 80096e8:	45b8      	cmp	r8, r7
 80096ea:	ee08 0a10 	vmov	s16, r0
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	f04f 020a 	mov.w	r2, #10
 80096f6:	4641      	mov	r1, r8
 80096f8:	4620      	mov	r0, r4
 80096fa:	d106      	bne.n	800970a <_dtoa_r+0xb0a>
 80096fc:	f000 f9bc 	bl	8009a78 <__multadd>
 8009700:	4680      	mov	r8, r0
 8009702:	4607      	mov	r7, r0
 8009704:	f109 0901 	add.w	r9, r9, #1
 8009708:	e772      	b.n	80095f0 <_dtoa_r+0x9f0>
 800970a:	f000 f9b5 	bl	8009a78 <__multadd>
 800970e:	4639      	mov	r1, r7
 8009710:	4680      	mov	r8, r0
 8009712:	2300      	movs	r3, #0
 8009714:	220a      	movs	r2, #10
 8009716:	4620      	mov	r0, r4
 8009718:	f000 f9ae 	bl	8009a78 <__multadd>
 800971c:	4607      	mov	r7, r0
 800971e:	e7f1      	b.n	8009704 <_dtoa_r+0xb04>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	9302      	str	r3, [sp, #8]
 8009724:	9d01      	ldr	r5, [sp, #4]
 8009726:	ee18 0a10 	vmov	r0, s16
 800972a:	4631      	mov	r1, r6
 800972c:	f7ff f9da 	bl	8008ae4 <quorem>
 8009730:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009734:	9b01      	ldr	r3, [sp, #4]
 8009736:	f805 ab01 	strb.w	sl, [r5], #1
 800973a:	1aea      	subs	r2, r5, r3
 800973c:	9b02      	ldr	r3, [sp, #8]
 800973e:	4293      	cmp	r3, r2
 8009740:	dd09      	ble.n	8009756 <_dtoa_r+0xb56>
 8009742:	ee18 1a10 	vmov	r1, s16
 8009746:	2300      	movs	r3, #0
 8009748:	220a      	movs	r2, #10
 800974a:	4620      	mov	r0, r4
 800974c:	f000 f994 	bl	8009a78 <__multadd>
 8009750:	ee08 0a10 	vmov	s16, r0
 8009754:	e7e7      	b.n	8009726 <_dtoa_r+0xb26>
 8009756:	9b02      	ldr	r3, [sp, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfc8      	it	gt
 800975c:	461d      	movgt	r5, r3
 800975e:	9b01      	ldr	r3, [sp, #4]
 8009760:	bfd8      	it	le
 8009762:	2501      	movle	r5, #1
 8009764:	441d      	add	r5, r3
 8009766:	f04f 0800 	mov.w	r8, #0
 800976a:	ee18 1a10 	vmov	r1, s16
 800976e:	2201      	movs	r2, #1
 8009770:	4620      	mov	r0, r4
 8009772:	f000 fb31 	bl	8009dd8 <__lshift>
 8009776:	4631      	mov	r1, r6
 8009778:	ee08 0a10 	vmov	s16, r0
 800977c:	f000 fb9c 	bl	8009eb8 <__mcmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	dc91      	bgt.n	80096a8 <_dtoa_r+0xaa8>
 8009784:	d102      	bne.n	800978c <_dtoa_r+0xb8c>
 8009786:	f01a 0f01 	tst.w	sl, #1
 800978a:	d18d      	bne.n	80096a8 <_dtoa_r+0xaa8>
 800978c:	462b      	mov	r3, r5
 800978e:	461d      	mov	r5, r3
 8009790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009794:	2a30      	cmp	r2, #48	; 0x30
 8009796:	d0fa      	beq.n	800978e <_dtoa_r+0xb8e>
 8009798:	e6d7      	b.n	800954a <_dtoa_r+0x94a>
 800979a:	9a01      	ldr	r2, [sp, #4]
 800979c:	429a      	cmp	r2, r3
 800979e:	d184      	bne.n	80096aa <_dtoa_r+0xaaa>
 80097a0:	9b00      	ldr	r3, [sp, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	2331      	movs	r3, #49	; 0x31
 80097a8:	7013      	strb	r3, [r2, #0]
 80097aa:	e6ce      	b.n	800954a <_dtoa_r+0x94a>
 80097ac:	4b09      	ldr	r3, [pc, #36]	; (80097d4 <_dtoa_r+0xbd4>)
 80097ae:	f7ff ba95 	b.w	8008cdc <_dtoa_r+0xdc>
 80097b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f47f aa6e 	bne.w	8008c96 <_dtoa_r+0x96>
 80097ba:	4b07      	ldr	r3, [pc, #28]	; (80097d8 <_dtoa_r+0xbd8>)
 80097bc:	f7ff ba8e 	b.w	8008cdc <_dtoa_r+0xdc>
 80097c0:	9b02      	ldr	r3, [sp, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	dcae      	bgt.n	8009724 <_dtoa_r+0xb24>
 80097c6:	9b06      	ldr	r3, [sp, #24]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	f73f aea8 	bgt.w	800951e <_dtoa_r+0x91e>
 80097ce:	e7a9      	b.n	8009724 <_dtoa_r+0xb24>
 80097d0:	0800ad9f 	.word	0x0800ad9f
 80097d4:	0800acfc 	.word	0x0800acfc
 80097d8:	0800ad20 	.word	0x0800ad20

080097dc <__sflush_r>:
 80097dc:	898a      	ldrh	r2, [r1, #12]
 80097de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e2:	4605      	mov	r5, r0
 80097e4:	0710      	lsls	r0, r2, #28
 80097e6:	460c      	mov	r4, r1
 80097e8:	d458      	bmi.n	800989c <__sflush_r+0xc0>
 80097ea:	684b      	ldr	r3, [r1, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dc05      	bgt.n	80097fc <__sflush_r+0x20>
 80097f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	dc02      	bgt.n	80097fc <__sflush_r+0x20>
 80097f6:	2000      	movs	r0, #0
 80097f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097fe:	2e00      	cmp	r6, #0
 8009800:	d0f9      	beq.n	80097f6 <__sflush_r+0x1a>
 8009802:	2300      	movs	r3, #0
 8009804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009808:	682f      	ldr	r7, [r5, #0]
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	d032      	beq.n	8009874 <__sflush_r+0x98>
 800980e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	075a      	lsls	r2, r3, #29
 8009814:	d505      	bpl.n	8009822 <__sflush_r+0x46>
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	1ac0      	subs	r0, r0, r3
 800981a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800981c:	b10b      	cbz	r3, 8009822 <__sflush_r+0x46>
 800981e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009820:	1ac0      	subs	r0, r0, r3
 8009822:	2300      	movs	r3, #0
 8009824:	4602      	mov	r2, r0
 8009826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009828:	6a21      	ldr	r1, [r4, #32]
 800982a:	4628      	mov	r0, r5
 800982c:	47b0      	blx	r6
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	d106      	bne.n	8009842 <__sflush_r+0x66>
 8009834:	6829      	ldr	r1, [r5, #0]
 8009836:	291d      	cmp	r1, #29
 8009838:	d82c      	bhi.n	8009894 <__sflush_r+0xb8>
 800983a:	4a2a      	ldr	r2, [pc, #168]	; (80098e4 <__sflush_r+0x108>)
 800983c:	40ca      	lsrs	r2, r1
 800983e:	07d6      	lsls	r6, r2, #31
 8009840:	d528      	bpl.n	8009894 <__sflush_r+0xb8>
 8009842:	2200      	movs	r2, #0
 8009844:	6062      	str	r2, [r4, #4]
 8009846:	04d9      	lsls	r1, r3, #19
 8009848:	6922      	ldr	r2, [r4, #16]
 800984a:	6022      	str	r2, [r4, #0]
 800984c:	d504      	bpl.n	8009858 <__sflush_r+0x7c>
 800984e:	1c42      	adds	r2, r0, #1
 8009850:	d101      	bne.n	8009856 <__sflush_r+0x7a>
 8009852:	682b      	ldr	r3, [r5, #0]
 8009854:	b903      	cbnz	r3, 8009858 <__sflush_r+0x7c>
 8009856:	6560      	str	r0, [r4, #84]	; 0x54
 8009858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800985a:	602f      	str	r7, [r5, #0]
 800985c:	2900      	cmp	r1, #0
 800985e:	d0ca      	beq.n	80097f6 <__sflush_r+0x1a>
 8009860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009864:	4299      	cmp	r1, r3
 8009866:	d002      	beq.n	800986e <__sflush_r+0x92>
 8009868:	4628      	mov	r0, r5
 800986a:	f000 fc3d 	bl	800a0e8 <_free_r>
 800986e:	2000      	movs	r0, #0
 8009870:	6360      	str	r0, [r4, #52]	; 0x34
 8009872:	e7c1      	b.n	80097f8 <__sflush_r+0x1c>
 8009874:	6a21      	ldr	r1, [r4, #32]
 8009876:	2301      	movs	r3, #1
 8009878:	4628      	mov	r0, r5
 800987a:	47b0      	blx	r6
 800987c:	1c41      	adds	r1, r0, #1
 800987e:	d1c7      	bne.n	8009810 <__sflush_r+0x34>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d0c4      	beq.n	8009810 <__sflush_r+0x34>
 8009886:	2b1d      	cmp	r3, #29
 8009888:	d001      	beq.n	800988e <__sflush_r+0xb2>
 800988a:	2b16      	cmp	r3, #22
 800988c:	d101      	bne.n	8009892 <__sflush_r+0xb6>
 800988e:	602f      	str	r7, [r5, #0]
 8009890:	e7b1      	b.n	80097f6 <__sflush_r+0x1a>
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	e7ad      	b.n	80097f8 <__sflush_r+0x1c>
 800989c:	690f      	ldr	r7, [r1, #16]
 800989e:	2f00      	cmp	r7, #0
 80098a0:	d0a9      	beq.n	80097f6 <__sflush_r+0x1a>
 80098a2:	0793      	lsls	r3, r2, #30
 80098a4:	680e      	ldr	r6, [r1, #0]
 80098a6:	bf08      	it	eq
 80098a8:	694b      	ldreq	r3, [r1, #20]
 80098aa:	600f      	str	r7, [r1, #0]
 80098ac:	bf18      	it	ne
 80098ae:	2300      	movne	r3, #0
 80098b0:	eba6 0807 	sub.w	r8, r6, r7
 80098b4:	608b      	str	r3, [r1, #8]
 80098b6:	f1b8 0f00 	cmp.w	r8, #0
 80098ba:	dd9c      	ble.n	80097f6 <__sflush_r+0x1a>
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098c0:	4643      	mov	r3, r8
 80098c2:	463a      	mov	r2, r7
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b0      	blx	r6
 80098c8:	2800      	cmp	r0, #0
 80098ca:	dc06      	bgt.n	80098da <__sflush_r+0xfe>
 80098cc:	89a3      	ldrh	r3, [r4, #12]
 80098ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	e78e      	b.n	80097f8 <__sflush_r+0x1c>
 80098da:	4407      	add	r7, r0
 80098dc:	eba8 0800 	sub.w	r8, r8, r0
 80098e0:	e7e9      	b.n	80098b6 <__sflush_r+0xda>
 80098e2:	bf00      	nop
 80098e4:	20400001 	.word	0x20400001

080098e8 <_fflush_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	690b      	ldr	r3, [r1, #16]
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	b913      	cbnz	r3, 80098f8 <_fflush_r+0x10>
 80098f2:	2500      	movs	r5, #0
 80098f4:	4628      	mov	r0, r5
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	b118      	cbz	r0, 8009902 <_fflush_r+0x1a>
 80098fa:	6983      	ldr	r3, [r0, #24]
 80098fc:	b90b      	cbnz	r3, 8009902 <_fflush_r+0x1a>
 80098fe:	f7fe fa03 	bl	8007d08 <__sinit>
 8009902:	4b14      	ldr	r3, [pc, #80]	; (8009954 <_fflush_r+0x6c>)
 8009904:	429c      	cmp	r4, r3
 8009906:	d11b      	bne.n	8009940 <_fflush_r+0x58>
 8009908:	686c      	ldr	r4, [r5, #4]
 800990a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0ef      	beq.n	80098f2 <_fflush_r+0xa>
 8009912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009914:	07d0      	lsls	r0, r2, #31
 8009916:	d404      	bmi.n	8009922 <_fflush_r+0x3a>
 8009918:	0599      	lsls	r1, r3, #22
 800991a:	d402      	bmi.n	8009922 <_fflush_r+0x3a>
 800991c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800991e:	f7fe fab6 	bl	8007e8e <__retarget_lock_acquire_recursive>
 8009922:	4628      	mov	r0, r5
 8009924:	4621      	mov	r1, r4
 8009926:	f7ff ff59 	bl	80097dc <__sflush_r>
 800992a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800992c:	07da      	lsls	r2, r3, #31
 800992e:	4605      	mov	r5, r0
 8009930:	d4e0      	bmi.n	80098f4 <_fflush_r+0xc>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	059b      	lsls	r3, r3, #22
 8009936:	d4dd      	bmi.n	80098f4 <_fflush_r+0xc>
 8009938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800993a:	f7fe faa9 	bl	8007e90 <__retarget_lock_release_recursive>
 800993e:	e7d9      	b.n	80098f4 <_fflush_r+0xc>
 8009940:	4b05      	ldr	r3, [pc, #20]	; (8009958 <_fflush_r+0x70>)
 8009942:	429c      	cmp	r4, r3
 8009944:	d101      	bne.n	800994a <_fflush_r+0x62>
 8009946:	68ac      	ldr	r4, [r5, #8]
 8009948:	e7df      	b.n	800990a <_fflush_r+0x22>
 800994a:	4b04      	ldr	r3, [pc, #16]	; (800995c <_fflush_r+0x74>)
 800994c:	429c      	cmp	r4, r3
 800994e:	bf08      	it	eq
 8009950:	68ec      	ldreq	r4, [r5, #12]
 8009952:	e7da      	b.n	800990a <_fflush_r+0x22>
 8009954:	0800aca8 	.word	0x0800aca8
 8009958:	0800acc8 	.word	0x0800acc8
 800995c:	0800ac88 	.word	0x0800ac88

08009960 <_localeconv_r>:
 8009960:	4800      	ldr	r0, [pc, #0]	; (8009964 <_localeconv_r+0x4>)
 8009962:	4770      	bx	lr
 8009964:	20000164 	.word	0x20000164

08009968 <_lseek_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d07      	ldr	r5, [pc, #28]	; (8009988 <_lseek_r+0x20>)
 800996c:	4604      	mov	r4, r0
 800996e:	4608      	mov	r0, r1
 8009970:	4611      	mov	r1, r2
 8009972:	2200      	movs	r2, #0
 8009974:	602a      	str	r2, [r5, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	f7f8 fd24 	bl	80023c4 <_lseek>
 800997c:	1c43      	adds	r3, r0, #1
 800997e:	d102      	bne.n	8009986 <_lseek_r+0x1e>
 8009980:	682b      	ldr	r3, [r5, #0]
 8009982:	b103      	cbz	r3, 8009986 <_lseek_r+0x1e>
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	20004d54 	.word	0x20004d54

0800998c <malloc>:
 800998c:	4b02      	ldr	r3, [pc, #8]	; (8009998 <malloc+0xc>)
 800998e:	4601      	mov	r1, r0
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f7fe bab5 	b.w	8007f00 <_malloc_r>
 8009996:	bf00      	nop
 8009998:	20000010 	.word	0x20000010

0800999c <__malloc_lock>:
 800999c:	4801      	ldr	r0, [pc, #4]	; (80099a4 <__malloc_lock+0x8>)
 800999e:	f7fe ba76 	b.w	8007e8e <__retarget_lock_acquire_recursive>
 80099a2:	bf00      	nop
 80099a4:	20004d48 	.word	0x20004d48

080099a8 <__malloc_unlock>:
 80099a8:	4801      	ldr	r0, [pc, #4]	; (80099b0 <__malloc_unlock+0x8>)
 80099aa:	f7fe ba71 	b.w	8007e90 <__retarget_lock_release_recursive>
 80099ae:	bf00      	nop
 80099b0:	20004d48 	.word	0x20004d48

080099b4 <_Balloc>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099b8:	4604      	mov	r4, r0
 80099ba:	460d      	mov	r5, r1
 80099bc:	b976      	cbnz	r6, 80099dc <_Balloc+0x28>
 80099be:	2010      	movs	r0, #16
 80099c0:	f7ff ffe4 	bl	800998c <malloc>
 80099c4:	4602      	mov	r2, r0
 80099c6:	6260      	str	r0, [r4, #36]	; 0x24
 80099c8:	b920      	cbnz	r0, 80099d4 <_Balloc+0x20>
 80099ca:	4b18      	ldr	r3, [pc, #96]	; (8009a2c <_Balloc+0x78>)
 80099cc:	4818      	ldr	r0, [pc, #96]	; (8009a30 <_Balloc+0x7c>)
 80099ce:	2166      	movs	r1, #102	; 0x66
 80099d0:	f000 fd44 	bl	800a45c <__assert_func>
 80099d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099d8:	6006      	str	r6, [r0, #0]
 80099da:	60c6      	str	r6, [r0, #12]
 80099dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099de:	68f3      	ldr	r3, [r6, #12]
 80099e0:	b183      	cbz	r3, 8009a04 <_Balloc+0x50>
 80099e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ea:	b9b8      	cbnz	r0, 8009a1c <_Balloc+0x68>
 80099ec:	2101      	movs	r1, #1
 80099ee:	fa01 f605 	lsl.w	r6, r1, r5
 80099f2:	1d72      	adds	r2, r6, #5
 80099f4:	0092      	lsls	r2, r2, #2
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 fb60 	bl	800a0bc <_calloc_r>
 80099fc:	b160      	cbz	r0, 8009a18 <_Balloc+0x64>
 80099fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a02:	e00e      	b.n	8009a22 <_Balloc+0x6e>
 8009a04:	2221      	movs	r2, #33	; 0x21
 8009a06:	2104      	movs	r1, #4
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 fb57 	bl	800a0bc <_calloc_r>
 8009a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a10:	60f0      	str	r0, [r6, #12]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e4      	bne.n	80099e2 <_Balloc+0x2e>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
 8009a1c:	6802      	ldr	r2, [r0, #0]
 8009a1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a22:	2300      	movs	r3, #0
 8009a24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a28:	e7f7      	b.n	8009a1a <_Balloc+0x66>
 8009a2a:	bf00      	nop
 8009a2c:	0800ad2d 	.word	0x0800ad2d
 8009a30:	0800adb0 	.word	0x0800adb0

08009a34 <_Bfree>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a38:	4605      	mov	r5, r0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	b976      	cbnz	r6, 8009a5c <_Bfree+0x28>
 8009a3e:	2010      	movs	r0, #16
 8009a40:	f7ff ffa4 	bl	800998c <malloc>
 8009a44:	4602      	mov	r2, r0
 8009a46:	6268      	str	r0, [r5, #36]	; 0x24
 8009a48:	b920      	cbnz	r0, 8009a54 <_Bfree+0x20>
 8009a4a:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <_Bfree+0x3c>)
 8009a4c:	4809      	ldr	r0, [pc, #36]	; (8009a74 <_Bfree+0x40>)
 8009a4e:	218a      	movs	r1, #138	; 0x8a
 8009a50:	f000 fd04 	bl	800a45c <__assert_func>
 8009a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a58:	6006      	str	r6, [r0, #0]
 8009a5a:	60c6      	str	r6, [r0, #12]
 8009a5c:	b13c      	cbz	r4, 8009a6e <_Bfree+0x3a>
 8009a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a60:	6862      	ldr	r2, [r4, #4]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a68:	6021      	str	r1, [r4, #0]
 8009a6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a6e:	bd70      	pop	{r4, r5, r6, pc}
 8009a70:	0800ad2d 	.word	0x0800ad2d
 8009a74:	0800adb0 	.word	0x0800adb0

08009a78 <__multadd>:
 8009a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7c:	690d      	ldr	r5, [r1, #16]
 8009a7e:	4607      	mov	r7, r0
 8009a80:	460c      	mov	r4, r1
 8009a82:	461e      	mov	r6, r3
 8009a84:	f101 0c14 	add.w	ip, r1, #20
 8009a88:	2000      	movs	r0, #0
 8009a8a:	f8dc 3000 	ldr.w	r3, [ip]
 8009a8e:	b299      	uxth	r1, r3
 8009a90:	fb02 6101 	mla	r1, r2, r1, r6
 8009a94:	0c1e      	lsrs	r6, r3, #16
 8009a96:	0c0b      	lsrs	r3, r1, #16
 8009a98:	fb02 3306 	mla	r3, r2, r6, r3
 8009a9c:	b289      	uxth	r1, r1
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009aa4:	4285      	cmp	r5, r0
 8009aa6:	f84c 1b04 	str.w	r1, [ip], #4
 8009aaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009aae:	dcec      	bgt.n	8009a8a <__multadd+0x12>
 8009ab0:	b30e      	cbz	r6, 8009af6 <__multadd+0x7e>
 8009ab2:	68a3      	ldr	r3, [r4, #8]
 8009ab4:	42ab      	cmp	r3, r5
 8009ab6:	dc19      	bgt.n	8009aec <__multadd+0x74>
 8009ab8:	6861      	ldr	r1, [r4, #4]
 8009aba:	4638      	mov	r0, r7
 8009abc:	3101      	adds	r1, #1
 8009abe:	f7ff ff79 	bl	80099b4 <_Balloc>
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	b928      	cbnz	r0, 8009ad2 <__multadd+0x5a>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <__multadd+0x84>)
 8009aca:	480d      	ldr	r0, [pc, #52]	; (8009b00 <__multadd+0x88>)
 8009acc:	21b5      	movs	r1, #181	; 0xb5
 8009ace:	f000 fcc5 	bl	800a45c <__assert_func>
 8009ad2:	6922      	ldr	r2, [r4, #16]
 8009ad4:	3202      	adds	r2, #2
 8009ad6:	f104 010c 	add.w	r1, r4, #12
 8009ada:	0092      	lsls	r2, r2, #2
 8009adc:	300c      	adds	r0, #12
 8009ade:	f7fe f9d8 	bl	8007e92 <memcpy>
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f7ff ffa5 	bl	8009a34 <_Bfree>
 8009aea:	4644      	mov	r4, r8
 8009aec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009af0:	3501      	adds	r5, #1
 8009af2:	615e      	str	r6, [r3, #20]
 8009af4:	6125      	str	r5, [r4, #16]
 8009af6:	4620      	mov	r0, r4
 8009af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afc:	0800ad9f 	.word	0x0800ad9f
 8009b00:	0800adb0 	.word	0x0800adb0

08009b04 <__hi0bits>:
 8009b04:	0c03      	lsrs	r3, r0, #16
 8009b06:	041b      	lsls	r3, r3, #16
 8009b08:	b9d3      	cbnz	r3, 8009b40 <__hi0bits+0x3c>
 8009b0a:	0400      	lsls	r0, r0, #16
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b12:	bf04      	itt	eq
 8009b14:	0200      	lsleq	r0, r0, #8
 8009b16:	3308      	addeq	r3, #8
 8009b18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b1c:	bf04      	itt	eq
 8009b1e:	0100      	lsleq	r0, r0, #4
 8009b20:	3304      	addeq	r3, #4
 8009b22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b26:	bf04      	itt	eq
 8009b28:	0080      	lsleq	r0, r0, #2
 8009b2a:	3302      	addeq	r3, #2
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	db05      	blt.n	8009b3c <__hi0bits+0x38>
 8009b30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b34:	f103 0301 	add.w	r3, r3, #1
 8009b38:	bf08      	it	eq
 8009b3a:	2320      	moveq	r3, #32
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	4770      	bx	lr
 8009b40:	2300      	movs	r3, #0
 8009b42:	e7e4      	b.n	8009b0e <__hi0bits+0xa>

08009b44 <__lo0bits>:
 8009b44:	6803      	ldr	r3, [r0, #0]
 8009b46:	f013 0207 	ands.w	r2, r3, #7
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	d00b      	beq.n	8009b66 <__lo0bits+0x22>
 8009b4e:	07da      	lsls	r2, r3, #31
 8009b50:	d423      	bmi.n	8009b9a <__lo0bits+0x56>
 8009b52:	0798      	lsls	r0, r3, #30
 8009b54:	bf49      	itett	mi
 8009b56:	085b      	lsrmi	r3, r3, #1
 8009b58:	089b      	lsrpl	r3, r3, #2
 8009b5a:	2001      	movmi	r0, #1
 8009b5c:	600b      	strmi	r3, [r1, #0]
 8009b5e:	bf5c      	itt	pl
 8009b60:	600b      	strpl	r3, [r1, #0]
 8009b62:	2002      	movpl	r0, #2
 8009b64:	4770      	bx	lr
 8009b66:	b298      	uxth	r0, r3
 8009b68:	b9a8      	cbnz	r0, 8009b96 <__lo0bits+0x52>
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	2010      	movs	r0, #16
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	b90a      	cbnz	r2, 8009b76 <__lo0bits+0x32>
 8009b72:	3008      	adds	r0, #8
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	071a      	lsls	r2, r3, #28
 8009b78:	bf04      	itt	eq
 8009b7a:	091b      	lsreq	r3, r3, #4
 8009b7c:	3004      	addeq	r0, #4
 8009b7e:	079a      	lsls	r2, r3, #30
 8009b80:	bf04      	itt	eq
 8009b82:	089b      	lsreq	r3, r3, #2
 8009b84:	3002      	addeq	r0, #2
 8009b86:	07da      	lsls	r2, r3, #31
 8009b88:	d403      	bmi.n	8009b92 <__lo0bits+0x4e>
 8009b8a:	085b      	lsrs	r3, r3, #1
 8009b8c:	f100 0001 	add.w	r0, r0, #1
 8009b90:	d005      	beq.n	8009b9e <__lo0bits+0x5a>
 8009b92:	600b      	str	r3, [r1, #0]
 8009b94:	4770      	bx	lr
 8009b96:	4610      	mov	r0, r2
 8009b98:	e7e9      	b.n	8009b6e <__lo0bits+0x2a>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	4770      	bx	lr
 8009b9e:	2020      	movs	r0, #32
 8009ba0:	4770      	bx	lr
	...

08009ba4 <__i2b>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	2101      	movs	r1, #1
 8009baa:	f7ff ff03 	bl	80099b4 <_Balloc>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	b928      	cbnz	r0, 8009bbe <__i2b+0x1a>
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <__i2b+0x24>)
 8009bb4:	4805      	ldr	r0, [pc, #20]	; (8009bcc <__i2b+0x28>)
 8009bb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bba:	f000 fc4f 	bl	800a45c <__assert_func>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	6144      	str	r4, [r0, #20]
 8009bc2:	6103      	str	r3, [r0, #16]
 8009bc4:	bd10      	pop	{r4, pc}
 8009bc6:	bf00      	nop
 8009bc8:	0800ad9f 	.word	0x0800ad9f
 8009bcc:	0800adb0 	.word	0x0800adb0

08009bd0 <__multiply>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	4691      	mov	r9, r2
 8009bd6:	690a      	ldr	r2, [r1, #16]
 8009bd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	bfb8      	it	lt
 8009be0:	460b      	movlt	r3, r1
 8009be2:	460c      	mov	r4, r1
 8009be4:	bfbc      	itt	lt
 8009be6:	464c      	movlt	r4, r9
 8009be8:	4699      	movlt	r9, r3
 8009bea:	6927      	ldr	r7, [r4, #16]
 8009bec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bf0:	68a3      	ldr	r3, [r4, #8]
 8009bf2:	6861      	ldr	r1, [r4, #4]
 8009bf4:	eb07 060a 	add.w	r6, r7, sl
 8009bf8:	42b3      	cmp	r3, r6
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	bfb8      	it	lt
 8009bfe:	3101      	addlt	r1, #1
 8009c00:	f7ff fed8 	bl	80099b4 <_Balloc>
 8009c04:	b930      	cbnz	r0, 8009c14 <__multiply+0x44>
 8009c06:	4602      	mov	r2, r0
 8009c08:	4b44      	ldr	r3, [pc, #272]	; (8009d1c <__multiply+0x14c>)
 8009c0a:	4845      	ldr	r0, [pc, #276]	; (8009d20 <__multiply+0x150>)
 8009c0c:	f240 115d 	movw	r1, #349	; 0x15d
 8009c10:	f000 fc24 	bl	800a45c <__assert_func>
 8009c14:	f100 0514 	add.w	r5, r0, #20
 8009c18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	2200      	movs	r2, #0
 8009c20:	4543      	cmp	r3, r8
 8009c22:	d321      	bcc.n	8009c68 <__multiply+0x98>
 8009c24:	f104 0314 	add.w	r3, r4, #20
 8009c28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c2c:	f109 0314 	add.w	r3, r9, #20
 8009c30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c34:	9202      	str	r2, [sp, #8]
 8009c36:	1b3a      	subs	r2, r7, r4
 8009c38:	3a15      	subs	r2, #21
 8009c3a:	f022 0203 	bic.w	r2, r2, #3
 8009c3e:	3204      	adds	r2, #4
 8009c40:	f104 0115 	add.w	r1, r4, #21
 8009c44:	428f      	cmp	r7, r1
 8009c46:	bf38      	it	cc
 8009c48:	2204      	movcc	r2, #4
 8009c4a:	9201      	str	r2, [sp, #4]
 8009c4c:	9a02      	ldr	r2, [sp, #8]
 8009c4e:	9303      	str	r3, [sp, #12]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d80c      	bhi.n	8009c6e <__multiply+0x9e>
 8009c54:	2e00      	cmp	r6, #0
 8009c56:	dd03      	ble.n	8009c60 <__multiply+0x90>
 8009c58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d05a      	beq.n	8009d16 <__multiply+0x146>
 8009c60:	6106      	str	r6, [r0, #16]
 8009c62:	b005      	add	sp, #20
 8009c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	f843 2b04 	str.w	r2, [r3], #4
 8009c6c:	e7d8      	b.n	8009c20 <__multiply+0x50>
 8009c6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c72:	f1ba 0f00 	cmp.w	sl, #0
 8009c76:	d024      	beq.n	8009cc2 <__multiply+0xf2>
 8009c78:	f104 0e14 	add.w	lr, r4, #20
 8009c7c:	46a9      	mov	r9, r5
 8009c7e:	f04f 0c00 	mov.w	ip, #0
 8009c82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c86:	f8d9 1000 	ldr.w	r1, [r9]
 8009c8a:	fa1f fb82 	uxth.w	fp, r2
 8009c8e:	b289      	uxth	r1, r1
 8009c90:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c98:	f8d9 2000 	ldr.w	r2, [r9]
 8009c9c:	4461      	add	r1, ip
 8009c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ca2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ca6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009caa:	b289      	uxth	r1, r1
 8009cac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cb0:	4577      	cmp	r7, lr
 8009cb2:	f849 1b04 	str.w	r1, [r9], #4
 8009cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cba:	d8e2      	bhi.n	8009c82 <__multiply+0xb2>
 8009cbc:	9a01      	ldr	r2, [sp, #4]
 8009cbe:	f845 c002 	str.w	ip, [r5, r2]
 8009cc2:	9a03      	ldr	r2, [sp, #12]
 8009cc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	f1b9 0f00 	cmp.w	r9, #0
 8009cce:	d020      	beq.n	8009d12 <__multiply+0x142>
 8009cd0:	6829      	ldr	r1, [r5, #0]
 8009cd2:	f104 0c14 	add.w	ip, r4, #20
 8009cd6:	46ae      	mov	lr, r5
 8009cd8:	f04f 0a00 	mov.w	sl, #0
 8009cdc:	f8bc b000 	ldrh.w	fp, [ip]
 8009ce0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ce4:	fb09 220b 	mla	r2, r9, fp, r2
 8009ce8:	4492      	add	sl, r2
 8009cea:	b289      	uxth	r1, r1
 8009cec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cf0:	f84e 1b04 	str.w	r1, [lr], #4
 8009cf4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cf8:	f8be 1000 	ldrh.w	r1, [lr]
 8009cfc:	0c12      	lsrs	r2, r2, #16
 8009cfe:	fb09 1102 	mla	r1, r9, r2, r1
 8009d02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d06:	4567      	cmp	r7, ip
 8009d08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d0c:	d8e6      	bhi.n	8009cdc <__multiply+0x10c>
 8009d0e:	9a01      	ldr	r2, [sp, #4]
 8009d10:	50a9      	str	r1, [r5, r2]
 8009d12:	3504      	adds	r5, #4
 8009d14:	e79a      	b.n	8009c4c <__multiply+0x7c>
 8009d16:	3e01      	subs	r6, #1
 8009d18:	e79c      	b.n	8009c54 <__multiply+0x84>
 8009d1a:	bf00      	nop
 8009d1c:	0800ad9f 	.word	0x0800ad9f
 8009d20:	0800adb0 	.word	0x0800adb0

08009d24 <__pow5mult>:
 8009d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d28:	4615      	mov	r5, r2
 8009d2a:	f012 0203 	ands.w	r2, r2, #3
 8009d2e:	4606      	mov	r6, r0
 8009d30:	460f      	mov	r7, r1
 8009d32:	d007      	beq.n	8009d44 <__pow5mult+0x20>
 8009d34:	4c25      	ldr	r4, [pc, #148]	; (8009dcc <__pow5mult+0xa8>)
 8009d36:	3a01      	subs	r2, #1
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d3e:	f7ff fe9b 	bl	8009a78 <__multadd>
 8009d42:	4607      	mov	r7, r0
 8009d44:	10ad      	asrs	r5, r5, #2
 8009d46:	d03d      	beq.n	8009dc4 <__pow5mult+0xa0>
 8009d48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d4a:	b97c      	cbnz	r4, 8009d6c <__pow5mult+0x48>
 8009d4c:	2010      	movs	r0, #16
 8009d4e:	f7ff fe1d 	bl	800998c <malloc>
 8009d52:	4602      	mov	r2, r0
 8009d54:	6270      	str	r0, [r6, #36]	; 0x24
 8009d56:	b928      	cbnz	r0, 8009d64 <__pow5mult+0x40>
 8009d58:	4b1d      	ldr	r3, [pc, #116]	; (8009dd0 <__pow5mult+0xac>)
 8009d5a:	481e      	ldr	r0, [pc, #120]	; (8009dd4 <__pow5mult+0xb0>)
 8009d5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d60:	f000 fb7c 	bl	800a45c <__assert_func>
 8009d64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d68:	6004      	str	r4, [r0, #0]
 8009d6a:	60c4      	str	r4, [r0, #12]
 8009d6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d74:	b94c      	cbnz	r4, 8009d8a <__pow5mult+0x66>
 8009d76:	f240 2171 	movw	r1, #625	; 0x271
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7ff ff12 	bl	8009ba4 <__i2b>
 8009d80:	2300      	movs	r3, #0
 8009d82:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d86:	4604      	mov	r4, r0
 8009d88:	6003      	str	r3, [r0, #0]
 8009d8a:	f04f 0900 	mov.w	r9, #0
 8009d8e:	07eb      	lsls	r3, r5, #31
 8009d90:	d50a      	bpl.n	8009da8 <__pow5mult+0x84>
 8009d92:	4639      	mov	r1, r7
 8009d94:	4622      	mov	r2, r4
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ff1a 	bl	8009bd0 <__multiply>
 8009d9c:	4639      	mov	r1, r7
 8009d9e:	4680      	mov	r8, r0
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7ff fe47 	bl	8009a34 <_Bfree>
 8009da6:	4647      	mov	r7, r8
 8009da8:	106d      	asrs	r5, r5, #1
 8009daa:	d00b      	beq.n	8009dc4 <__pow5mult+0xa0>
 8009dac:	6820      	ldr	r0, [r4, #0]
 8009dae:	b938      	cbnz	r0, 8009dc0 <__pow5mult+0x9c>
 8009db0:	4622      	mov	r2, r4
 8009db2:	4621      	mov	r1, r4
 8009db4:	4630      	mov	r0, r6
 8009db6:	f7ff ff0b 	bl	8009bd0 <__multiply>
 8009dba:	6020      	str	r0, [r4, #0]
 8009dbc:	f8c0 9000 	str.w	r9, [r0]
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	e7e4      	b.n	8009d8e <__pow5mult+0x6a>
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dca:	bf00      	nop
 8009dcc:	0800af00 	.word	0x0800af00
 8009dd0:	0800ad2d 	.word	0x0800ad2d
 8009dd4:	0800adb0 	.word	0x0800adb0

08009dd8 <__lshift>:
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	460c      	mov	r4, r1
 8009dde:	6849      	ldr	r1, [r1, #4]
 8009de0:	6923      	ldr	r3, [r4, #16]
 8009de2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009de6:	68a3      	ldr	r3, [r4, #8]
 8009de8:	4607      	mov	r7, r0
 8009dea:	4691      	mov	r9, r2
 8009dec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df0:	f108 0601 	add.w	r6, r8, #1
 8009df4:	42b3      	cmp	r3, r6
 8009df6:	db0b      	blt.n	8009e10 <__lshift+0x38>
 8009df8:	4638      	mov	r0, r7
 8009dfa:	f7ff fddb 	bl	80099b4 <_Balloc>
 8009dfe:	4605      	mov	r5, r0
 8009e00:	b948      	cbnz	r0, 8009e16 <__lshift+0x3e>
 8009e02:	4602      	mov	r2, r0
 8009e04:	4b2a      	ldr	r3, [pc, #168]	; (8009eb0 <__lshift+0xd8>)
 8009e06:	482b      	ldr	r0, [pc, #172]	; (8009eb4 <__lshift+0xdc>)
 8009e08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e0c:	f000 fb26 	bl	800a45c <__assert_func>
 8009e10:	3101      	adds	r1, #1
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	e7ee      	b.n	8009df4 <__lshift+0x1c>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f100 0114 	add.w	r1, r0, #20
 8009e1c:	f100 0210 	add.w	r2, r0, #16
 8009e20:	4618      	mov	r0, r3
 8009e22:	4553      	cmp	r3, sl
 8009e24:	db37      	blt.n	8009e96 <__lshift+0xbe>
 8009e26:	6920      	ldr	r0, [r4, #16]
 8009e28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e2c:	f104 0314 	add.w	r3, r4, #20
 8009e30:	f019 091f 	ands.w	r9, r9, #31
 8009e34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e3c:	d02f      	beq.n	8009e9e <__lshift+0xc6>
 8009e3e:	f1c9 0e20 	rsb	lr, r9, #32
 8009e42:	468a      	mov	sl, r1
 8009e44:	f04f 0c00 	mov.w	ip, #0
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	fa02 f209 	lsl.w	r2, r2, r9
 8009e4e:	ea42 020c 	orr.w	r2, r2, ip
 8009e52:	f84a 2b04 	str.w	r2, [sl], #4
 8009e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5a:	4298      	cmp	r0, r3
 8009e5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e60:	d8f2      	bhi.n	8009e48 <__lshift+0x70>
 8009e62:	1b03      	subs	r3, r0, r4
 8009e64:	3b15      	subs	r3, #21
 8009e66:	f023 0303 	bic.w	r3, r3, #3
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	f104 0215 	add.w	r2, r4, #21
 8009e70:	4290      	cmp	r0, r2
 8009e72:	bf38      	it	cc
 8009e74:	2304      	movcc	r3, #4
 8009e76:	f841 c003 	str.w	ip, [r1, r3]
 8009e7a:	f1bc 0f00 	cmp.w	ip, #0
 8009e7e:	d001      	beq.n	8009e84 <__lshift+0xac>
 8009e80:	f108 0602 	add.w	r6, r8, #2
 8009e84:	3e01      	subs	r6, #1
 8009e86:	4638      	mov	r0, r7
 8009e88:	612e      	str	r6, [r5, #16]
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	f7ff fdd2 	bl	8009a34 <_Bfree>
 8009e90:	4628      	mov	r0, r5
 8009e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e96:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	e7c1      	b.n	8009e22 <__lshift+0x4a>
 8009e9e:	3904      	subs	r1, #4
 8009ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ea8:	4298      	cmp	r0, r3
 8009eaa:	d8f9      	bhi.n	8009ea0 <__lshift+0xc8>
 8009eac:	e7ea      	b.n	8009e84 <__lshift+0xac>
 8009eae:	bf00      	nop
 8009eb0:	0800ad9f 	.word	0x0800ad9f
 8009eb4:	0800adb0 	.word	0x0800adb0

08009eb8 <__mcmp>:
 8009eb8:	b530      	push	{r4, r5, lr}
 8009eba:	6902      	ldr	r2, [r0, #16]
 8009ebc:	690c      	ldr	r4, [r1, #16]
 8009ebe:	1b12      	subs	r2, r2, r4
 8009ec0:	d10e      	bne.n	8009ee0 <__mcmp+0x28>
 8009ec2:	f100 0314 	add.w	r3, r0, #20
 8009ec6:	3114      	adds	r1, #20
 8009ec8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ecc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ed0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ed4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ed8:	42a5      	cmp	r5, r4
 8009eda:	d003      	beq.n	8009ee4 <__mcmp+0x2c>
 8009edc:	d305      	bcc.n	8009eea <__mcmp+0x32>
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	bd30      	pop	{r4, r5, pc}
 8009ee4:	4283      	cmp	r3, r0
 8009ee6:	d3f3      	bcc.n	8009ed0 <__mcmp+0x18>
 8009ee8:	e7fa      	b.n	8009ee0 <__mcmp+0x28>
 8009eea:	f04f 32ff 	mov.w	r2, #4294967295
 8009eee:	e7f7      	b.n	8009ee0 <__mcmp+0x28>

08009ef0 <__mdiff>:
 8009ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4620      	mov	r0, r4
 8009efc:	4690      	mov	r8, r2
 8009efe:	f7ff ffdb 	bl	8009eb8 <__mcmp>
 8009f02:	1e05      	subs	r5, r0, #0
 8009f04:	d110      	bne.n	8009f28 <__mdiff+0x38>
 8009f06:	4629      	mov	r1, r5
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7ff fd53 	bl	80099b4 <_Balloc>
 8009f0e:	b930      	cbnz	r0, 8009f1e <__mdiff+0x2e>
 8009f10:	4b3a      	ldr	r3, [pc, #232]	; (8009ffc <__mdiff+0x10c>)
 8009f12:	4602      	mov	r2, r0
 8009f14:	f240 2132 	movw	r1, #562	; 0x232
 8009f18:	4839      	ldr	r0, [pc, #228]	; (800a000 <__mdiff+0x110>)
 8009f1a:	f000 fa9f 	bl	800a45c <__assert_func>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	bfa4      	itt	ge
 8009f2a:	4643      	movge	r3, r8
 8009f2c:	46a0      	movge	r8, r4
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f34:	bfa6      	itte	ge
 8009f36:	461c      	movge	r4, r3
 8009f38:	2500      	movge	r5, #0
 8009f3a:	2501      	movlt	r5, #1
 8009f3c:	f7ff fd3a 	bl	80099b4 <_Balloc>
 8009f40:	b920      	cbnz	r0, 8009f4c <__mdiff+0x5c>
 8009f42:	4b2e      	ldr	r3, [pc, #184]	; (8009ffc <__mdiff+0x10c>)
 8009f44:	4602      	mov	r2, r0
 8009f46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f4a:	e7e5      	b.n	8009f18 <__mdiff+0x28>
 8009f4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f50:	6926      	ldr	r6, [r4, #16]
 8009f52:	60c5      	str	r5, [r0, #12]
 8009f54:	f104 0914 	add.w	r9, r4, #20
 8009f58:	f108 0514 	add.w	r5, r8, #20
 8009f5c:	f100 0e14 	add.w	lr, r0, #20
 8009f60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f68:	f108 0210 	add.w	r2, r8, #16
 8009f6c:	46f2      	mov	sl, lr
 8009f6e:	2100      	movs	r1, #0
 8009f70:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f78:	fa1f f883 	uxth.w	r8, r3
 8009f7c:	fa11 f18b 	uxtah	r1, r1, fp
 8009f80:	0c1b      	lsrs	r3, r3, #16
 8009f82:	eba1 0808 	sub.w	r8, r1, r8
 8009f86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f8e:	fa1f f888 	uxth.w	r8, r8
 8009f92:	1419      	asrs	r1, r3, #16
 8009f94:	454e      	cmp	r6, r9
 8009f96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f9a:	f84a 3b04 	str.w	r3, [sl], #4
 8009f9e:	d8e7      	bhi.n	8009f70 <__mdiff+0x80>
 8009fa0:	1b33      	subs	r3, r6, r4
 8009fa2:	3b15      	subs	r3, #21
 8009fa4:	f023 0303 	bic.w	r3, r3, #3
 8009fa8:	3304      	adds	r3, #4
 8009faa:	3415      	adds	r4, #21
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	bf38      	it	cc
 8009fb0:	2304      	movcc	r3, #4
 8009fb2:	441d      	add	r5, r3
 8009fb4:	4473      	add	r3, lr
 8009fb6:	469e      	mov	lr, r3
 8009fb8:	462e      	mov	r6, r5
 8009fba:	4566      	cmp	r6, ip
 8009fbc:	d30e      	bcc.n	8009fdc <__mdiff+0xec>
 8009fbe:	f10c 0203 	add.w	r2, ip, #3
 8009fc2:	1b52      	subs	r2, r2, r5
 8009fc4:	f022 0203 	bic.w	r2, r2, #3
 8009fc8:	3d03      	subs	r5, #3
 8009fca:	45ac      	cmp	ip, r5
 8009fcc:	bf38      	it	cc
 8009fce:	2200      	movcc	r2, #0
 8009fd0:	441a      	add	r2, r3
 8009fd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fd6:	b17b      	cbz	r3, 8009ff8 <__mdiff+0x108>
 8009fd8:	6107      	str	r7, [r0, #16]
 8009fda:	e7a3      	b.n	8009f24 <__mdiff+0x34>
 8009fdc:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fe0:	fa11 f288 	uxtah	r2, r1, r8
 8009fe4:	1414      	asrs	r4, r2, #16
 8009fe6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009fea:	b292      	uxth	r2, r2
 8009fec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ff0:	f84e 2b04 	str.w	r2, [lr], #4
 8009ff4:	1421      	asrs	r1, r4, #16
 8009ff6:	e7e0      	b.n	8009fba <__mdiff+0xca>
 8009ff8:	3f01      	subs	r7, #1
 8009ffa:	e7ea      	b.n	8009fd2 <__mdiff+0xe2>
 8009ffc:	0800ad9f 	.word	0x0800ad9f
 800a000:	0800adb0 	.word	0x0800adb0

0800a004 <__d2b>:
 800a004:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a008:	4689      	mov	r9, r1
 800a00a:	2101      	movs	r1, #1
 800a00c:	ec57 6b10 	vmov	r6, r7, d0
 800a010:	4690      	mov	r8, r2
 800a012:	f7ff fccf 	bl	80099b4 <_Balloc>
 800a016:	4604      	mov	r4, r0
 800a018:	b930      	cbnz	r0, 800a028 <__d2b+0x24>
 800a01a:	4602      	mov	r2, r0
 800a01c:	4b25      	ldr	r3, [pc, #148]	; (800a0b4 <__d2b+0xb0>)
 800a01e:	4826      	ldr	r0, [pc, #152]	; (800a0b8 <__d2b+0xb4>)
 800a020:	f240 310a 	movw	r1, #778	; 0x30a
 800a024:	f000 fa1a 	bl	800a45c <__assert_func>
 800a028:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a02c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a030:	bb35      	cbnz	r5, 800a080 <__d2b+0x7c>
 800a032:	2e00      	cmp	r6, #0
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	d028      	beq.n	800a08a <__d2b+0x86>
 800a038:	4668      	mov	r0, sp
 800a03a:	9600      	str	r6, [sp, #0]
 800a03c:	f7ff fd82 	bl	8009b44 <__lo0bits>
 800a040:	9900      	ldr	r1, [sp, #0]
 800a042:	b300      	cbz	r0, 800a086 <__d2b+0x82>
 800a044:	9a01      	ldr	r2, [sp, #4]
 800a046:	f1c0 0320 	rsb	r3, r0, #32
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	430b      	orrs	r3, r1
 800a050:	40c2      	lsrs	r2, r0
 800a052:	6163      	str	r3, [r4, #20]
 800a054:	9201      	str	r2, [sp, #4]
 800a056:	9b01      	ldr	r3, [sp, #4]
 800a058:	61a3      	str	r3, [r4, #24]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	bf14      	ite	ne
 800a05e:	2202      	movne	r2, #2
 800a060:	2201      	moveq	r2, #1
 800a062:	6122      	str	r2, [r4, #16]
 800a064:	b1d5      	cbz	r5, 800a09c <__d2b+0x98>
 800a066:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a06a:	4405      	add	r5, r0
 800a06c:	f8c9 5000 	str.w	r5, [r9]
 800a070:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a074:	f8c8 0000 	str.w	r0, [r8]
 800a078:	4620      	mov	r0, r4
 800a07a:	b003      	add	sp, #12
 800a07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a084:	e7d5      	b.n	800a032 <__d2b+0x2e>
 800a086:	6161      	str	r1, [r4, #20]
 800a088:	e7e5      	b.n	800a056 <__d2b+0x52>
 800a08a:	a801      	add	r0, sp, #4
 800a08c:	f7ff fd5a 	bl	8009b44 <__lo0bits>
 800a090:	9b01      	ldr	r3, [sp, #4]
 800a092:	6163      	str	r3, [r4, #20]
 800a094:	2201      	movs	r2, #1
 800a096:	6122      	str	r2, [r4, #16]
 800a098:	3020      	adds	r0, #32
 800a09a:	e7e3      	b.n	800a064 <__d2b+0x60>
 800a09c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0a4:	f8c9 0000 	str.w	r0, [r9]
 800a0a8:	6918      	ldr	r0, [r3, #16]
 800a0aa:	f7ff fd2b 	bl	8009b04 <__hi0bits>
 800a0ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0b2:	e7df      	b.n	800a074 <__d2b+0x70>
 800a0b4:	0800ad9f 	.word	0x0800ad9f
 800a0b8:	0800adb0 	.word	0x0800adb0

0800a0bc <_calloc_r>:
 800a0bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0be:	fba1 2402 	umull	r2, r4, r1, r2
 800a0c2:	b94c      	cbnz	r4, 800a0d8 <_calloc_r+0x1c>
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	9201      	str	r2, [sp, #4]
 800a0c8:	f7fd ff1a 	bl	8007f00 <_malloc_r>
 800a0cc:	9a01      	ldr	r2, [sp, #4]
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	b930      	cbnz	r0, 800a0e0 <_calloc_r+0x24>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	b003      	add	sp, #12
 800a0d6:	bd30      	pop	{r4, r5, pc}
 800a0d8:	220c      	movs	r2, #12
 800a0da:	6002      	str	r2, [r0, #0]
 800a0dc:	2500      	movs	r5, #0
 800a0de:	e7f8      	b.n	800a0d2 <_calloc_r+0x16>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	f7fd fee4 	bl	8007eae <memset>
 800a0e6:	e7f4      	b.n	800a0d2 <_calloc_r+0x16>

0800a0e8 <_free_r>:
 800a0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	d044      	beq.n	800a178 <_free_r+0x90>
 800a0ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f2:	9001      	str	r0, [sp, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f1a1 0404 	sub.w	r4, r1, #4
 800a0fa:	bfb8      	it	lt
 800a0fc:	18e4      	addlt	r4, r4, r3
 800a0fe:	f7ff fc4d 	bl	800999c <__malloc_lock>
 800a102:	4a1e      	ldr	r2, [pc, #120]	; (800a17c <_free_r+0x94>)
 800a104:	9801      	ldr	r0, [sp, #4]
 800a106:	6813      	ldr	r3, [r2, #0]
 800a108:	b933      	cbnz	r3, 800a118 <_free_r+0x30>
 800a10a:	6063      	str	r3, [r4, #4]
 800a10c:	6014      	str	r4, [r2, #0]
 800a10e:	b003      	add	sp, #12
 800a110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a114:	f7ff bc48 	b.w	80099a8 <__malloc_unlock>
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d908      	bls.n	800a12e <_free_r+0x46>
 800a11c:	6825      	ldr	r5, [r4, #0]
 800a11e:	1961      	adds	r1, r4, r5
 800a120:	428b      	cmp	r3, r1
 800a122:	bf01      	itttt	eq
 800a124:	6819      	ldreq	r1, [r3, #0]
 800a126:	685b      	ldreq	r3, [r3, #4]
 800a128:	1949      	addeq	r1, r1, r5
 800a12a:	6021      	streq	r1, [r4, #0]
 800a12c:	e7ed      	b.n	800a10a <_free_r+0x22>
 800a12e:	461a      	mov	r2, r3
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	b10b      	cbz	r3, 800a138 <_free_r+0x50>
 800a134:	42a3      	cmp	r3, r4
 800a136:	d9fa      	bls.n	800a12e <_free_r+0x46>
 800a138:	6811      	ldr	r1, [r2, #0]
 800a13a:	1855      	adds	r5, r2, r1
 800a13c:	42a5      	cmp	r5, r4
 800a13e:	d10b      	bne.n	800a158 <_free_r+0x70>
 800a140:	6824      	ldr	r4, [r4, #0]
 800a142:	4421      	add	r1, r4
 800a144:	1854      	adds	r4, r2, r1
 800a146:	42a3      	cmp	r3, r4
 800a148:	6011      	str	r1, [r2, #0]
 800a14a:	d1e0      	bne.n	800a10e <_free_r+0x26>
 800a14c:	681c      	ldr	r4, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	6053      	str	r3, [r2, #4]
 800a152:	4421      	add	r1, r4
 800a154:	6011      	str	r1, [r2, #0]
 800a156:	e7da      	b.n	800a10e <_free_r+0x26>
 800a158:	d902      	bls.n	800a160 <_free_r+0x78>
 800a15a:	230c      	movs	r3, #12
 800a15c:	6003      	str	r3, [r0, #0]
 800a15e:	e7d6      	b.n	800a10e <_free_r+0x26>
 800a160:	6825      	ldr	r5, [r4, #0]
 800a162:	1961      	adds	r1, r4, r5
 800a164:	428b      	cmp	r3, r1
 800a166:	bf04      	itt	eq
 800a168:	6819      	ldreq	r1, [r3, #0]
 800a16a:	685b      	ldreq	r3, [r3, #4]
 800a16c:	6063      	str	r3, [r4, #4]
 800a16e:	bf04      	itt	eq
 800a170:	1949      	addeq	r1, r1, r5
 800a172:	6021      	streq	r1, [r4, #0]
 800a174:	6054      	str	r4, [r2, #4]
 800a176:	e7ca      	b.n	800a10e <_free_r+0x26>
 800a178:	b003      	add	sp, #12
 800a17a:	bd30      	pop	{r4, r5, pc}
 800a17c:	20004d4c 	.word	0x20004d4c

0800a180 <__ssputs_r>:
 800a180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	688e      	ldr	r6, [r1, #8]
 800a186:	429e      	cmp	r6, r3
 800a188:	4682      	mov	sl, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	4690      	mov	r8, r2
 800a18e:	461f      	mov	r7, r3
 800a190:	d838      	bhi.n	800a204 <__ssputs_r+0x84>
 800a192:	898a      	ldrh	r2, [r1, #12]
 800a194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a198:	d032      	beq.n	800a200 <__ssputs_r+0x80>
 800a19a:	6825      	ldr	r5, [r4, #0]
 800a19c:	6909      	ldr	r1, [r1, #16]
 800a19e:	eba5 0901 	sub.w	r9, r5, r1
 800a1a2:	6965      	ldr	r5, [r4, #20]
 800a1a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	444b      	add	r3, r9
 800a1b0:	106d      	asrs	r5, r5, #1
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	bf38      	it	cc
 800a1b6:	461d      	movcc	r5, r3
 800a1b8:	0553      	lsls	r3, r2, #21
 800a1ba:	d531      	bpl.n	800a220 <__ssputs_r+0xa0>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	f7fd fe9f 	bl	8007f00 <_malloc_r>
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	b950      	cbnz	r0, 800a1dc <__ssputs_r+0x5c>
 800a1c6:	230c      	movs	r3, #12
 800a1c8:	f8ca 3000 	str.w	r3, [sl]
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1dc:	6921      	ldr	r1, [r4, #16]
 800a1de:	464a      	mov	r2, r9
 800a1e0:	f7fd fe57 	bl	8007e92 <memcpy>
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ee:	81a3      	strh	r3, [r4, #12]
 800a1f0:	6126      	str	r6, [r4, #16]
 800a1f2:	6165      	str	r5, [r4, #20]
 800a1f4:	444e      	add	r6, r9
 800a1f6:	eba5 0509 	sub.w	r5, r5, r9
 800a1fa:	6026      	str	r6, [r4, #0]
 800a1fc:	60a5      	str	r5, [r4, #8]
 800a1fe:	463e      	mov	r6, r7
 800a200:	42be      	cmp	r6, r7
 800a202:	d900      	bls.n	800a206 <__ssputs_r+0x86>
 800a204:	463e      	mov	r6, r7
 800a206:	6820      	ldr	r0, [r4, #0]
 800a208:	4632      	mov	r2, r6
 800a20a:	4641      	mov	r1, r8
 800a20c:	f000 f968 	bl	800a4e0 <memmove>
 800a210:	68a3      	ldr	r3, [r4, #8]
 800a212:	1b9b      	subs	r3, r3, r6
 800a214:	60a3      	str	r3, [r4, #8]
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	4433      	add	r3, r6
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	2000      	movs	r0, #0
 800a21e:	e7db      	b.n	800a1d8 <__ssputs_r+0x58>
 800a220:	462a      	mov	r2, r5
 800a222:	f000 f977 	bl	800a514 <_realloc_r>
 800a226:	4606      	mov	r6, r0
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1e1      	bne.n	800a1f0 <__ssputs_r+0x70>
 800a22c:	6921      	ldr	r1, [r4, #16]
 800a22e:	4650      	mov	r0, sl
 800a230:	f7ff ff5a 	bl	800a0e8 <_free_r>
 800a234:	e7c7      	b.n	800a1c6 <__ssputs_r+0x46>
	...

0800a238 <_svfiprintf_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	4698      	mov	r8, r3
 800a23e:	898b      	ldrh	r3, [r1, #12]
 800a240:	061b      	lsls	r3, r3, #24
 800a242:	b09d      	sub	sp, #116	; 0x74
 800a244:	4607      	mov	r7, r0
 800a246:	460d      	mov	r5, r1
 800a248:	4614      	mov	r4, r2
 800a24a:	d50e      	bpl.n	800a26a <_svfiprintf_r+0x32>
 800a24c:	690b      	ldr	r3, [r1, #16]
 800a24e:	b963      	cbnz	r3, 800a26a <_svfiprintf_r+0x32>
 800a250:	2140      	movs	r1, #64	; 0x40
 800a252:	f7fd fe55 	bl	8007f00 <_malloc_r>
 800a256:	6028      	str	r0, [r5, #0]
 800a258:	6128      	str	r0, [r5, #16]
 800a25a:	b920      	cbnz	r0, 800a266 <_svfiprintf_r+0x2e>
 800a25c:	230c      	movs	r3, #12
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	e0d1      	b.n	800a40a <_svfiprintf_r+0x1d2>
 800a266:	2340      	movs	r3, #64	; 0x40
 800a268:	616b      	str	r3, [r5, #20]
 800a26a:	2300      	movs	r3, #0
 800a26c:	9309      	str	r3, [sp, #36]	; 0x24
 800a26e:	2320      	movs	r3, #32
 800a270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a274:	f8cd 800c 	str.w	r8, [sp, #12]
 800a278:	2330      	movs	r3, #48	; 0x30
 800a27a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a424 <_svfiprintf_r+0x1ec>
 800a27e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a282:	f04f 0901 	mov.w	r9, #1
 800a286:	4623      	mov	r3, r4
 800a288:	469a      	mov	sl, r3
 800a28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a28e:	b10a      	cbz	r2, 800a294 <_svfiprintf_r+0x5c>
 800a290:	2a25      	cmp	r2, #37	; 0x25
 800a292:	d1f9      	bne.n	800a288 <_svfiprintf_r+0x50>
 800a294:	ebba 0b04 	subs.w	fp, sl, r4
 800a298:	d00b      	beq.n	800a2b2 <_svfiprintf_r+0x7a>
 800a29a:	465b      	mov	r3, fp
 800a29c:	4622      	mov	r2, r4
 800a29e:	4629      	mov	r1, r5
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	f7ff ff6d 	bl	800a180 <__ssputs_r>
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f000 80aa 	beq.w	800a400 <_svfiprintf_r+0x1c8>
 800a2ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ae:	445a      	add	r2, fp
 800a2b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 80a2 	beq.w	800a400 <_svfiprintf_r+0x1c8>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c6:	f10a 0a01 	add.w	sl, sl, #1
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	9307      	str	r3, [sp, #28]
 800a2ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a2d4:	4654      	mov	r4, sl
 800a2d6:	2205      	movs	r2, #5
 800a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2dc:	4851      	ldr	r0, [pc, #324]	; (800a424 <_svfiprintf_r+0x1ec>)
 800a2de:	f7f5 ff87 	bl	80001f0 <memchr>
 800a2e2:	9a04      	ldr	r2, [sp, #16]
 800a2e4:	b9d8      	cbnz	r0, 800a31e <_svfiprintf_r+0xe6>
 800a2e6:	06d0      	lsls	r0, r2, #27
 800a2e8:	bf44      	itt	mi
 800a2ea:	2320      	movmi	r3, #32
 800a2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f0:	0711      	lsls	r1, r2, #28
 800a2f2:	bf44      	itt	mi
 800a2f4:	232b      	movmi	r3, #43	; 0x2b
 800a2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a300:	d015      	beq.n	800a32e <_svfiprintf_r+0xf6>
 800a302:	9a07      	ldr	r2, [sp, #28]
 800a304:	4654      	mov	r4, sl
 800a306:	2000      	movs	r0, #0
 800a308:	f04f 0c0a 	mov.w	ip, #10
 800a30c:	4621      	mov	r1, r4
 800a30e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a312:	3b30      	subs	r3, #48	; 0x30
 800a314:	2b09      	cmp	r3, #9
 800a316:	d94e      	bls.n	800a3b6 <_svfiprintf_r+0x17e>
 800a318:	b1b0      	cbz	r0, 800a348 <_svfiprintf_r+0x110>
 800a31a:	9207      	str	r2, [sp, #28]
 800a31c:	e014      	b.n	800a348 <_svfiprintf_r+0x110>
 800a31e:	eba0 0308 	sub.w	r3, r0, r8
 800a322:	fa09 f303 	lsl.w	r3, r9, r3
 800a326:	4313      	orrs	r3, r2
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	46a2      	mov	sl, r4
 800a32c:	e7d2      	b.n	800a2d4 <_svfiprintf_r+0x9c>
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	1d19      	adds	r1, r3, #4
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	9103      	str	r1, [sp, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	bfbb      	ittet	lt
 800a33a:	425b      	neglt	r3, r3
 800a33c:	f042 0202 	orrlt.w	r2, r2, #2
 800a340:	9307      	strge	r3, [sp, #28]
 800a342:	9307      	strlt	r3, [sp, #28]
 800a344:	bfb8      	it	lt
 800a346:	9204      	strlt	r2, [sp, #16]
 800a348:	7823      	ldrb	r3, [r4, #0]
 800a34a:	2b2e      	cmp	r3, #46	; 0x2e
 800a34c:	d10c      	bne.n	800a368 <_svfiprintf_r+0x130>
 800a34e:	7863      	ldrb	r3, [r4, #1]
 800a350:	2b2a      	cmp	r3, #42	; 0x2a
 800a352:	d135      	bne.n	800a3c0 <_svfiprintf_r+0x188>
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	1d1a      	adds	r2, r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	9203      	str	r2, [sp, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	bfb8      	it	lt
 800a360:	f04f 33ff 	movlt.w	r3, #4294967295
 800a364:	3402      	adds	r4, #2
 800a366:	9305      	str	r3, [sp, #20]
 800a368:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a434 <_svfiprintf_r+0x1fc>
 800a36c:	7821      	ldrb	r1, [r4, #0]
 800a36e:	2203      	movs	r2, #3
 800a370:	4650      	mov	r0, sl
 800a372:	f7f5 ff3d 	bl	80001f0 <memchr>
 800a376:	b140      	cbz	r0, 800a38a <_svfiprintf_r+0x152>
 800a378:	2340      	movs	r3, #64	; 0x40
 800a37a:	eba0 000a 	sub.w	r0, r0, sl
 800a37e:	fa03 f000 	lsl.w	r0, r3, r0
 800a382:	9b04      	ldr	r3, [sp, #16]
 800a384:	4303      	orrs	r3, r0
 800a386:	3401      	adds	r4, #1
 800a388:	9304      	str	r3, [sp, #16]
 800a38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38e:	4826      	ldr	r0, [pc, #152]	; (800a428 <_svfiprintf_r+0x1f0>)
 800a390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a394:	2206      	movs	r2, #6
 800a396:	f7f5 ff2b 	bl	80001f0 <memchr>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d038      	beq.n	800a410 <_svfiprintf_r+0x1d8>
 800a39e:	4b23      	ldr	r3, [pc, #140]	; (800a42c <_svfiprintf_r+0x1f4>)
 800a3a0:	bb1b      	cbnz	r3, 800a3ea <_svfiprintf_r+0x1b2>
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	3307      	adds	r3, #7
 800a3a6:	f023 0307 	bic.w	r3, r3, #7
 800a3aa:	3308      	adds	r3, #8
 800a3ac:	9303      	str	r3, [sp, #12]
 800a3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b0:	4433      	add	r3, r6
 800a3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b4:	e767      	b.n	800a286 <_svfiprintf_r+0x4e>
 800a3b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	2001      	movs	r0, #1
 800a3be:	e7a5      	b.n	800a30c <_svfiprintf_r+0xd4>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	3401      	adds	r4, #1
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	f04f 0c0a 	mov.w	ip, #10
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3d2:	3a30      	subs	r2, #48	; 0x30
 800a3d4:	2a09      	cmp	r2, #9
 800a3d6:	d903      	bls.n	800a3e0 <_svfiprintf_r+0x1a8>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0c5      	beq.n	800a368 <_svfiprintf_r+0x130>
 800a3dc:	9105      	str	r1, [sp, #20]
 800a3de:	e7c3      	b.n	800a368 <_svfiprintf_r+0x130>
 800a3e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e7f0      	b.n	800a3cc <_svfiprintf_r+0x194>
 800a3ea:	ab03      	add	r3, sp, #12
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	462a      	mov	r2, r5
 800a3f0:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <_svfiprintf_r+0x1f8>)
 800a3f2:	a904      	add	r1, sp, #16
 800a3f4:	4638      	mov	r0, r7
 800a3f6:	f7fd fe97 	bl	8008128 <_printf_float>
 800a3fa:	1c42      	adds	r2, r0, #1
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	d1d6      	bne.n	800a3ae <_svfiprintf_r+0x176>
 800a400:	89ab      	ldrh	r3, [r5, #12]
 800a402:	065b      	lsls	r3, r3, #25
 800a404:	f53f af2c 	bmi.w	800a260 <_svfiprintf_r+0x28>
 800a408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a40a:	b01d      	add	sp, #116	; 0x74
 800a40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a410:	ab03      	add	r3, sp, #12
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	462a      	mov	r2, r5
 800a416:	4b06      	ldr	r3, [pc, #24]	; (800a430 <_svfiprintf_r+0x1f8>)
 800a418:	a904      	add	r1, sp, #16
 800a41a:	4638      	mov	r0, r7
 800a41c:	f7fe f928 	bl	8008670 <_printf_i>
 800a420:	e7eb      	b.n	800a3fa <_svfiprintf_r+0x1c2>
 800a422:	bf00      	nop
 800a424:	0800af0c 	.word	0x0800af0c
 800a428:	0800af16 	.word	0x0800af16
 800a42c:	08008129 	.word	0x08008129
 800a430:	0800a181 	.word	0x0800a181
 800a434:	0800af12 	.word	0x0800af12

0800a438 <_read_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4d07      	ldr	r5, [pc, #28]	; (800a458 <_read_r+0x20>)
 800a43c:	4604      	mov	r4, r0
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	2200      	movs	r2, #0
 800a444:	602a      	str	r2, [r5, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	f7f7 ff5c 	bl	8002304 <_read>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_read_r+0x1e>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_read_r+0x1e>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20004d54 	.word	0x20004d54

0800a45c <__assert_func>:
 800a45c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a45e:	4614      	mov	r4, r2
 800a460:	461a      	mov	r2, r3
 800a462:	4b09      	ldr	r3, [pc, #36]	; (800a488 <__assert_func+0x2c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4605      	mov	r5, r0
 800a468:	68d8      	ldr	r0, [r3, #12]
 800a46a:	b14c      	cbz	r4, 800a480 <__assert_func+0x24>
 800a46c:	4b07      	ldr	r3, [pc, #28]	; (800a48c <__assert_func+0x30>)
 800a46e:	9100      	str	r1, [sp, #0]
 800a470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a474:	4906      	ldr	r1, [pc, #24]	; (800a490 <__assert_func+0x34>)
 800a476:	462b      	mov	r3, r5
 800a478:	f000 f80e 	bl	800a498 <fiprintf>
 800a47c:	f000 faa0 	bl	800a9c0 <abort>
 800a480:	4b04      	ldr	r3, [pc, #16]	; (800a494 <__assert_func+0x38>)
 800a482:	461c      	mov	r4, r3
 800a484:	e7f3      	b.n	800a46e <__assert_func+0x12>
 800a486:	bf00      	nop
 800a488:	20000010 	.word	0x20000010
 800a48c:	0800af1d 	.word	0x0800af1d
 800a490:	0800af2a 	.word	0x0800af2a
 800a494:	0800af58 	.word	0x0800af58

0800a498 <fiprintf>:
 800a498:	b40e      	push	{r1, r2, r3}
 800a49a:	b503      	push	{r0, r1, lr}
 800a49c:	4601      	mov	r1, r0
 800a49e:	ab03      	add	r3, sp, #12
 800a4a0:	4805      	ldr	r0, [pc, #20]	; (800a4b8 <fiprintf+0x20>)
 800a4a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a6:	6800      	ldr	r0, [r0, #0]
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	f000 f88b 	bl	800a5c4 <_vfiprintf_r>
 800a4ae:	b002      	add	sp, #8
 800a4b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b4:	b003      	add	sp, #12
 800a4b6:	4770      	bx	lr
 800a4b8:	20000010 	.word	0x20000010

0800a4bc <__ascii_mbtowc>:
 800a4bc:	b082      	sub	sp, #8
 800a4be:	b901      	cbnz	r1, 800a4c2 <__ascii_mbtowc+0x6>
 800a4c0:	a901      	add	r1, sp, #4
 800a4c2:	b142      	cbz	r2, 800a4d6 <__ascii_mbtowc+0x1a>
 800a4c4:	b14b      	cbz	r3, 800a4da <__ascii_mbtowc+0x1e>
 800a4c6:	7813      	ldrb	r3, [r2, #0]
 800a4c8:	600b      	str	r3, [r1, #0]
 800a4ca:	7812      	ldrb	r2, [r2, #0]
 800a4cc:	1e10      	subs	r0, r2, #0
 800a4ce:	bf18      	it	ne
 800a4d0:	2001      	movne	r0, #1
 800a4d2:	b002      	add	sp, #8
 800a4d4:	4770      	bx	lr
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	e7fb      	b.n	800a4d2 <__ascii_mbtowc+0x16>
 800a4da:	f06f 0001 	mvn.w	r0, #1
 800a4de:	e7f8      	b.n	800a4d2 <__ascii_mbtowc+0x16>

0800a4e0 <memmove>:
 800a4e0:	4288      	cmp	r0, r1
 800a4e2:	b510      	push	{r4, lr}
 800a4e4:	eb01 0402 	add.w	r4, r1, r2
 800a4e8:	d902      	bls.n	800a4f0 <memmove+0x10>
 800a4ea:	4284      	cmp	r4, r0
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	d807      	bhi.n	800a500 <memmove+0x20>
 800a4f0:	1e43      	subs	r3, r0, #1
 800a4f2:	42a1      	cmp	r1, r4
 800a4f4:	d008      	beq.n	800a508 <memmove+0x28>
 800a4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4fe:	e7f8      	b.n	800a4f2 <memmove+0x12>
 800a500:	4402      	add	r2, r0
 800a502:	4601      	mov	r1, r0
 800a504:	428a      	cmp	r2, r1
 800a506:	d100      	bne.n	800a50a <memmove+0x2a>
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a50e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a512:	e7f7      	b.n	800a504 <memmove+0x24>

0800a514 <_realloc_r>:
 800a514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a518:	4680      	mov	r8, r0
 800a51a:	4614      	mov	r4, r2
 800a51c:	460e      	mov	r6, r1
 800a51e:	b921      	cbnz	r1, 800a52a <_realloc_r+0x16>
 800a520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a524:	4611      	mov	r1, r2
 800a526:	f7fd bceb 	b.w	8007f00 <_malloc_r>
 800a52a:	b92a      	cbnz	r2, 800a538 <_realloc_r+0x24>
 800a52c:	f7ff fddc 	bl	800a0e8 <_free_r>
 800a530:	4625      	mov	r5, r4
 800a532:	4628      	mov	r0, r5
 800a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a538:	f000 faae 	bl	800aa98 <_malloc_usable_size_r>
 800a53c:	4284      	cmp	r4, r0
 800a53e:	4607      	mov	r7, r0
 800a540:	d802      	bhi.n	800a548 <_realloc_r+0x34>
 800a542:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a546:	d812      	bhi.n	800a56e <_realloc_r+0x5a>
 800a548:	4621      	mov	r1, r4
 800a54a:	4640      	mov	r0, r8
 800a54c:	f7fd fcd8 	bl	8007f00 <_malloc_r>
 800a550:	4605      	mov	r5, r0
 800a552:	2800      	cmp	r0, #0
 800a554:	d0ed      	beq.n	800a532 <_realloc_r+0x1e>
 800a556:	42bc      	cmp	r4, r7
 800a558:	4622      	mov	r2, r4
 800a55a:	4631      	mov	r1, r6
 800a55c:	bf28      	it	cs
 800a55e:	463a      	movcs	r2, r7
 800a560:	f7fd fc97 	bl	8007e92 <memcpy>
 800a564:	4631      	mov	r1, r6
 800a566:	4640      	mov	r0, r8
 800a568:	f7ff fdbe 	bl	800a0e8 <_free_r>
 800a56c:	e7e1      	b.n	800a532 <_realloc_r+0x1e>
 800a56e:	4635      	mov	r5, r6
 800a570:	e7df      	b.n	800a532 <_realloc_r+0x1e>

0800a572 <__sfputc_r>:
 800a572:	6893      	ldr	r3, [r2, #8]
 800a574:	3b01      	subs	r3, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	b410      	push	{r4}
 800a57a:	6093      	str	r3, [r2, #8]
 800a57c:	da08      	bge.n	800a590 <__sfputc_r+0x1e>
 800a57e:	6994      	ldr	r4, [r2, #24]
 800a580:	42a3      	cmp	r3, r4
 800a582:	db01      	blt.n	800a588 <__sfputc_r+0x16>
 800a584:	290a      	cmp	r1, #10
 800a586:	d103      	bne.n	800a590 <__sfputc_r+0x1e>
 800a588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a58c:	f000 b94a 	b.w	800a824 <__swbuf_r>
 800a590:	6813      	ldr	r3, [r2, #0]
 800a592:	1c58      	adds	r0, r3, #1
 800a594:	6010      	str	r0, [r2, #0]
 800a596:	7019      	strb	r1, [r3, #0]
 800a598:	4608      	mov	r0, r1
 800a59a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <__sfputs_r>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	460f      	mov	r7, r1
 800a5a6:	4614      	mov	r4, r2
 800a5a8:	18d5      	adds	r5, r2, r3
 800a5aa:	42ac      	cmp	r4, r5
 800a5ac:	d101      	bne.n	800a5b2 <__sfputs_r+0x12>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e007      	b.n	800a5c2 <__sfputs_r+0x22>
 800a5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b6:	463a      	mov	r2, r7
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7ff ffda 	bl	800a572 <__sfputc_r>
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	d1f3      	bne.n	800a5aa <__sfputs_r+0xa>
 800a5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5c4 <_vfiprintf_r>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	b09d      	sub	sp, #116	; 0x74
 800a5cc:	4614      	mov	r4, r2
 800a5ce:	4698      	mov	r8, r3
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	b118      	cbz	r0, 800a5dc <_vfiprintf_r+0x18>
 800a5d4:	6983      	ldr	r3, [r0, #24]
 800a5d6:	b90b      	cbnz	r3, 800a5dc <_vfiprintf_r+0x18>
 800a5d8:	f7fd fb96 	bl	8007d08 <__sinit>
 800a5dc:	4b89      	ldr	r3, [pc, #548]	; (800a804 <_vfiprintf_r+0x240>)
 800a5de:	429d      	cmp	r5, r3
 800a5e0:	d11b      	bne.n	800a61a <_vfiprintf_r+0x56>
 800a5e2:	6875      	ldr	r5, [r6, #4]
 800a5e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e6:	07d9      	lsls	r1, r3, #31
 800a5e8:	d405      	bmi.n	800a5f6 <_vfiprintf_r+0x32>
 800a5ea:	89ab      	ldrh	r3, [r5, #12]
 800a5ec:	059a      	lsls	r2, r3, #22
 800a5ee:	d402      	bmi.n	800a5f6 <_vfiprintf_r+0x32>
 800a5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f2:	f7fd fc4c 	bl	8007e8e <__retarget_lock_acquire_recursive>
 800a5f6:	89ab      	ldrh	r3, [r5, #12]
 800a5f8:	071b      	lsls	r3, r3, #28
 800a5fa:	d501      	bpl.n	800a600 <_vfiprintf_r+0x3c>
 800a5fc:	692b      	ldr	r3, [r5, #16]
 800a5fe:	b9eb      	cbnz	r3, 800a63c <_vfiprintf_r+0x78>
 800a600:	4629      	mov	r1, r5
 800a602:	4630      	mov	r0, r6
 800a604:	f000 f96e 	bl	800a8e4 <__swsetup_r>
 800a608:	b1c0      	cbz	r0, 800a63c <_vfiprintf_r+0x78>
 800a60a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a60c:	07dc      	lsls	r4, r3, #31
 800a60e:	d50e      	bpl.n	800a62e <_vfiprintf_r+0x6a>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	b01d      	add	sp, #116	; 0x74
 800a616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61a:	4b7b      	ldr	r3, [pc, #492]	; (800a808 <_vfiprintf_r+0x244>)
 800a61c:	429d      	cmp	r5, r3
 800a61e:	d101      	bne.n	800a624 <_vfiprintf_r+0x60>
 800a620:	68b5      	ldr	r5, [r6, #8]
 800a622:	e7df      	b.n	800a5e4 <_vfiprintf_r+0x20>
 800a624:	4b79      	ldr	r3, [pc, #484]	; (800a80c <_vfiprintf_r+0x248>)
 800a626:	429d      	cmp	r5, r3
 800a628:	bf08      	it	eq
 800a62a:	68f5      	ldreq	r5, [r6, #12]
 800a62c:	e7da      	b.n	800a5e4 <_vfiprintf_r+0x20>
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	0598      	lsls	r0, r3, #22
 800a632:	d4ed      	bmi.n	800a610 <_vfiprintf_r+0x4c>
 800a634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a636:	f7fd fc2b 	bl	8007e90 <__retarget_lock_release_recursive>
 800a63a:	e7e9      	b.n	800a610 <_vfiprintf_r+0x4c>
 800a63c:	2300      	movs	r3, #0
 800a63e:	9309      	str	r3, [sp, #36]	; 0x24
 800a640:	2320      	movs	r3, #32
 800a642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a646:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64a:	2330      	movs	r3, #48	; 0x30
 800a64c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a810 <_vfiprintf_r+0x24c>
 800a650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a654:	f04f 0901 	mov.w	r9, #1
 800a658:	4623      	mov	r3, r4
 800a65a:	469a      	mov	sl, r3
 800a65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a660:	b10a      	cbz	r2, 800a666 <_vfiprintf_r+0xa2>
 800a662:	2a25      	cmp	r2, #37	; 0x25
 800a664:	d1f9      	bne.n	800a65a <_vfiprintf_r+0x96>
 800a666:	ebba 0b04 	subs.w	fp, sl, r4
 800a66a:	d00b      	beq.n	800a684 <_vfiprintf_r+0xc0>
 800a66c:	465b      	mov	r3, fp
 800a66e:	4622      	mov	r2, r4
 800a670:	4629      	mov	r1, r5
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff ff94 	bl	800a5a0 <__sfputs_r>
 800a678:	3001      	adds	r0, #1
 800a67a:	f000 80aa 	beq.w	800a7d2 <_vfiprintf_r+0x20e>
 800a67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a680:	445a      	add	r2, fp
 800a682:	9209      	str	r2, [sp, #36]	; 0x24
 800a684:	f89a 3000 	ldrb.w	r3, [sl]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 80a2 	beq.w	800a7d2 <_vfiprintf_r+0x20e>
 800a68e:	2300      	movs	r3, #0
 800a690:	f04f 32ff 	mov.w	r2, #4294967295
 800a694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a698:	f10a 0a01 	add.w	sl, sl, #1
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a6a6:	4654      	mov	r4, sl
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ae:	4858      	ldr	r0, [pc, #352]	; (800a810 <_vfiprintf_r+0x24c>)
 800a6b0:	f7f5 fd9e 	bl	80001f0 <memchr>
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	b9d8      	cbnz	r0, 800a6f0 <_vfiprintf_r+0x12c>
 800a6b8:	06d1      	lsls	r1, r2, #27
 800a6ba:	bf44      	itt	mi
 800a6bc:	2320      	movmi	r3, #32
 800a6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6c2:	0713      	lsls	r3, r2, #28
 800a6c4:	bf44      	itt	mi
 800a6c6:	232b      	movmi	r3, #43	; 0x2b
 800a6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d2:	d015      	beq.n	800a700 <_vfiprintf_r+0x13c>
 800a6d4:	9a07      	ldr	r2, [sp, #28]
 800a6d6:	4654      	mov	r4, sl
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f04f 0c0a 	mov.w	ip, #10
 800a6de:	4621      	mov	r1, r4
 800a6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e4:	3b30      	subs	r3, #48	; 0x30
 800a6e6:	2b09      	cmp	r3, #9
 800a6e8:	d94e      	bls.n	800a788 <_vfiprintf_r+0x1c4>
 800a6ea:	b1b0      	cbz	r0, 800a71a <_vfiprintf_r+0x156>
 800a6ec:	9207      	str	r2, [sp, #28]
 800a6ee:	e014      	b.n	800a71a <_vfiprintf_r+0x156>
 800a6f0:	eba0 0308 	sub.w	r3, r0, r8
 800a6f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	46a2      	mov	sl, r4
 800a6fe:	e7d2      	b.n	800a6a6 <_vfiprintf_r+0xe2>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	1d19      	adds	r1, r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	9103      	str	r1, [sp, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	bfbb      	ittet	lt
 800a70c:	425b      	neglt	r3, r3
 800a70e:	f042 0202 	orrlt.w	r2, r2, #2
 800a712:	9307      	strge	r3, [sp, #28]
 800a714:	9307      	strlt	r3, [sp, #28]
 800a716:	bfb8      	it	lt
 800a718:	9204      	strlt	r2, [sp, #16]
 800a71a:	7823      	ldrb	r3, [r4, #0]
 800a71c:	2b2e      	cmp	r3, #46	; 0x2e
 800a71e:	d10c      	bne.n	800a73a <_vfiprintf_r+0x176>
 800a720:	7863      	ldrb	r3, [r4, #1]
 800a722:	2b2a      	cmp	r3, #42	; 0x2a
 800a724:	d135      	bne.n	800a792 <_vfiprintf_r+0x1ce>
 800a726:	9b03      	ldr	r3, [sp, #12]
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	9203      	str	r2, [sp, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bfb8      	it	lt
 800a732:	f04f 33ff 	movlt.w	r3, #4294967295
 800a736:	3402      	adds	r4, #2
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a820 <_vfiprintf_r+0x25c>
 800a73e:	7821      	ldrb	r1, [r4, #0]
 800a740:	2203      	movs	r2, #3
 800a742:	4650      	mov	r0, sl
 800a744:	f7f5 fd54 	bl	80001f0 <memchr>
 800a748:	b140      	cbz	r0, 800a75c <_vfiprintf_r+0x198>
 800a74a:	2340      	movs	r3, #64	; 0x40
 800a74c:	eba0 000a 	sub.w	r0, r0, sl
 800a750:	fa03 f000 	lsl.w	r0, r3, r0
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	4303      	orrs	r3, r0
 800a758:	3401      	adds	r4, #1
 800a75a:	9304      	str	r3, [sp, #16]
 800a75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a760:	482c      	ldr	r0, [pc, #176]	; (800a814 <_vfiprintf_r+0x250>)
 800a762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a766:	2206      	movs	r2, #6
 800a768:	f7f5 fd42 	bl	80001f0 <memchr>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d03f      	beq.n	800a7f0 <_vfiprintf_r+0x22c>
 800a770:	4b29      	ldr	r3, [pc, #164]	; (800a818 <_vfiprintf_r+0x254>)
 800a772:	bb1b      	cbnz	r3, 800a7bc <_vfiprintf_r+0x1f8>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	3307      	adds	r3, #7
 800a778:	f023 0307 	bic.w	r3, r3, #7
 800a77c:	3308      	adds	r3, #8
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a782:	443b      	add	r3, r7
 800a784:	9309      	str	r3, [sp, #36]	; 0x24
 800a786:	e767      	b.n	800a658 <_vfiprintf_r+0x94>
 800a788:	fb0c 3202 	mla	r2, ip, r2, r3
 800a78c:	460c      	mov	r4, r1
 800a78e:	2001      	movs	r0, #1
 800a790:	e7a5      	b.n	800a6de <_vfiprintf_r+0x11a>
 800a792:	2300      	movs	r3, #0
 800a794:	3401      	adds	r4, #1
 800a796:	9305      	str	r3, [sp, #20]
 800a798:	4619      	mov	r1, r3
 800a79a:	f04f 0c0a 	mov.w	ip, #10
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a4:	3a30      	subs	r2, #48	; 0x30
 800a7a6:	2a09      	cmp	r2, #9
 800a7a8:	d903      	bls.n	800a7b2 <_vfiprintf_r+0x1ee>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0c5      	beq.n	800a73a <_vfiprintf_r+0x176>
 800a7ae:	9105      	str	r1, [sp, #20]
 800a7b0:	e7c3      	b.n	800a73a <_vfiprintf_r+0x176>
 800a7b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e7f0      	b.n	800a79e <_vfiprintf_r+0x1da>
 800a7bc:	ab03      	add	r3, sp, #12
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4b16      	ldr	r3, [pc, #88]	; (800a81c <_vfiprintf_r+0x258>)
 800a7c4:	a904      	add	r1, sp, #16
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7fd fcae 	bl	8008128 <_printf_float>
 800a7cc:	4607      	mov	r7, r0
 800a7ce:	1c78      	adds	r0, r7, #1
 800a7d0:	d1d6      	bne.n	800a780 <_vfiprintf_r+0x1bc>
 800a7d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7d4:	07d9      	lsls	r1, r3, #31
 800a7d6:	d405      	bmi.n	800a7e4 <_vfiprintf_r+0x220>
 800a7d8:	89ab      	ldrh	r3, [r5, #12]
 800a7da:	059a      	lsls	r2, r3, #22
 800a7dc:	d402      	bmi.n	800a7e4 <_vfiprintf_r+0x220>
 800a7de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7e0:	f7fd fb56 	bl	8007e90 <__retarget_lock_release_recursive>
 800a7e4:	89ab      	ldrh	r3, [r5, #12]
 800a7e6:	065b      	lsls	r3, r3, #25
 800a7e8:	f53f af12 	bmi.w	800a610 <_vfiprintf_r+0x4c>
 800a7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ee:	e711      	b.n	800a614 <_vfiprintf_r+0x50>
 800a7f0:	ab03      	add	r3, sp, #12
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	4b09      	ldr	r3, [pc, #36]	; (800a81c <_vfiprintf_r+0x258>)
 800a7f8:	a904      	add	r1, sp, #16
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f7fd ff38 	bl	8008670 <_printf_i>
 800a800:	e7e4      	b.n	800a7cc <_vfiprintf_r+0x208>
 800a802:	bf00      	nop
 800a804:	0800aca8 	.word	0x0800aca8
 800a808:	0800acc8 	.word	0x0800acc8
 800a80c:	0800ac88 	.word	0x0800ac88
 800a810:	0800af0c 	.word	0x0800af0c
 800a814:	0800af16 	.word	0x0800af16
 800a818:	08008129 	.word	0x08008129
 800a81c:	0800a5a1 	.word	0x0800a5a1
 800a820:	0800af12 	.word	0x0800af12

0800a824 <__swbuf_r>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	460e      	mov	r6, r1
 800a828:	4614      	mov	r4, r2
 800a82a:	4605      	mov	r5, r0
 800a82c:	b118      	cbz	r0, 800a836 <__swbuf_r+0x12>
 800a82e:	6983      	ldr	r3, [r0, #24]
 800a830:	b90b      	cbnz	r3, 800a836 <__swbuf_r+0x12>
 800a832:	f7fd fa69 	bl	8007d08 <__sinit>
 800a836:	4b21      	ldr	r3, [pc, #132]	; (800a8bc <__swbuf_r+0x98>)
 800a838:	429c      	cmp	r4, r3
 800a83a:	d12b      	bne.n	800a894 <__swbuf_r+0x70>
 800a83c:	686c      	ldr	r4, [r5, #4]
 800a83e:	69a3      	ldr	r3, [r4, #24]
 800a840:	60a3      	str	r3, [r4, #8]
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	071a      	lsls	r2, r3, #28
 800a846:	d52f      	bpl.n	800a8a8 <__swbuf_r+0x84>
 800a848:	6923      	ldr	r3, [r4, #16]
 800a84a:	b36b      	cbz	r3, 800a8a8 <__swbuf_r+0x84>
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	6820      	ldr	r0, [r4, #0]
 800a850:	1ac0      	subs	r0, r0, r3
 800a852:	6963      	ldr	r3, [r4, #20]
 800a854:	b2f6      	uxtb	r6, r6
 800a856:	4283      	cmp	r3, r0
 800a858:	4637      	mov	r7, r6
 800a85a:	dc04      	bgt.n	800a866 <__swbuf_r+0x42>
 800a85c:	4621      	mov	r1, r4
 800a85e:	4628      	mov	r0, r5
 800a860:	f7ff f842 	bl	80098e8 <_fflush_r>
 800a864:	bb30      	cbnz	r0, 800a8b4 <__swbuf_r+0x90>
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	3b01      	subs	r3, #1
 800a86a:	60a3      	str	r3, [r4, #8]
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	6022      	str	r2, [r4, #0]
 800a872:	701e      	strb	r6, [r3, #0]
 800a874:	6963      	ldr	r3, [r4, #20]
 800a876:	3001      	adds	r0, #1
 800a878:	4283      	cmp	r3, r0
 800a87a:	d004      	beq.n	800a886 <__swbuf_r+0x62>
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	07db      	lsls	r3, r3, #31
 800a880:	d506      	bpl.n	800a890 <__swbuf_r+0x6c>
 800a882:	2e0a      	cmp	r6, #10
 800a884:	d104      	bne.n	800a890 <__swbuf_r+0x6c>
 800a886:	4621      	mov	r1, r4
 800a888:	4628      	mov	r0, r5
 800a88a:	f7ff f82d 	bl	80098e8 <_fflush_r>
 800a88e:	b988      	cbnz	r0, 800a8b4 <__swbuf_r+0x90>
 800a890:	4638      	mov	r0, r7
 800a892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a894:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <__swbuf_r+0x9c>)
 800a896:	429c      	cmp	r4, r3
 800a898:	d101      	bne.n	800a89e <__swbuf_r+0x7a>
 800a89a:	68ac      	ldr	r4, [r5, #8]
 800a89c:	e7cf      	b.n	800a83e <__swbuf_r+0x1a>
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <__swbuf_r+0xa0>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	bf08      	it	eq
 800a8a4:	68ec      	ldreq	r4, [r5, #12]
 800a8a6:	e7ca      	b.n	800a83e <__swbuf_r+0x1a>
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f000 f81a 	bl	800a8e4 <__swsetup_r>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d0cb      	beq.n	800a84c <__swbuf_r+0x28>
 800a8b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a8b8:	e7ea      	b.n	800a890 <__swbuf_r+0x6c>
 800a8ba:	bf00      	nop
 800a8bc:	0800aca8 	.word	0x0800aca8
 800a8c0:	0800acc8 	.word	0x0800acc8
 800a8c4:	0800ac88 	.word	0x0800ac88

0800a8c8 <__ascii_wctomb>:
 800a8c8:	b149      	cbz	r1, 800a8de <__ascii_wctomb+0x16>
 800a8ca:	2aff      	cmp	r2, #255	; 0xff
 800a8cc:	bf85      	ittet	hi
 800a8ce:	238a      	movhi	r3, #138	; 0x8a
 800a8d0:	6003      	strhi	r3, [r0, #0]
 800a8d2:	700a      	strbls	r2, [r1, #0]
 800a8d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8d8:	bf98      	it	ls
 800a8da:	2001      	movls	r0, #1
 800a8dc:	4770      	bx	lr
 800a8de:	4608      	mov	r0, r1
 800a8e0:	4770      	bx	lr
	...

0800a8e4 <__swsetup_r>:
 800a8e4:	4b32      	ldr	r3, [pc, #200]	; (800a9b0 <__swsetup_r+0xcc>)
 800a8e6:	b570      	push	{r4, r5, r6, lr}
 800a8e8:	681d      	ldr	r5, [r3, #0]
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	b125      	cbz	r5, 800a8fa <__swsetup_r+0x16>
 800a8f0:	69ab      	ldr	r3, [r5, #24]
 800a8f2:	b913      	cbnz	r3, 800a8fa <__swsetup_r+0x16>
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f7fd fa07 	bl	8007d08 <__sinit>
 800a8fa:	4b2e      	ldr	r3, [pc, #184]	; (800a9b4 <__swsetup_r+0xd0>)
 800a8fc:	429c      	cmp	r4, r3
 800a8fe:	d10f      	bne.n	800a920 <__swsetup_r+0x3c>
 800a900:	686c      	ldr	r4, [r5, #4]
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a908:	0719      	lsls	r1, r3, #28
 800a90a:	d42c      	bmi.n	800a966 <__swsetup_r+0x82>
 800a90c:	06dd      	lsls	r5, r3, #27
 800a90e:	d411      	bmi.n	800a934 <__swsetup_r+0x50>
 800a910:	2309      	movs	r3, #9
 800a912:	6033      	str	r3, [r6, #0]
 800a914:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	f04f 30ff 	mov.w	r0, #4294967295
 800a91e:	e03e      	b.n	800a99e <__swsetup_r+0xba>
 800a920:	4b25      	ldr	r3, [pc, #148]	; (800a9b8 <__swsetup_r+0xd4>)
 800a922:	429c      	cmp	r4, r3
 800a924:	d101      	bne.n	800a92a <__swsetup_r+0x46>
 800a926:	68ac      	ldr	r4, [r5, #8]
 800a928:	e7eb      	b.n	800a902 <__swsetup_r+0x1e>
 800a92a:	4b24      	ldr	r3, [pc, #144]	; (800a9bc <__swsetup_r+0xd8>)
 800a92c:	429c      	cmp	r4, r3
 800a92e:	bf08      	it	eq
 800a930:	68ec      	ldreq	r4, [r5, #12]
 800a932:	e7e6      	b.n	800a902 <__swsetup_r+0x1e>
 800a934:	0758      	lsls	r0, r3, #29
 800a936:	d512      	bpl.n	800a95e <__swsetup_r+0x7a>
 800a938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a93a:	b141      	cbz	r1, 800a94e <__swsetup_r+0x6a>
 800a93c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a940:	4299      	cmp	r1, r3
 800a942:	d002      	beq.n	800a94a <__swsetup_r+0x66>
 800a944:	4630      	mov	r0, r6
 800a946:	f7ff fbcf 	bl	800a0e8 <_free_r>
 800a94a:	2300      	movs	r3, #0
 800a94c:	6363      	str	r3, [r4, #52]	; 0x34
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	2300      	movs	r3, #0
 800a958:	6063      	str	r3, [r4, #4]
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f043 0308 	orr.w	r3, r3, #8
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	b94b      	cbnz	r3, 800a97e <__swsetup_r+0x9a>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a974:	d003      	beq.n	800a97e <__swsetup_r+0x9a>
 800a976:	4621      	mov	r1, r4
 800a978:	4630      	mov	r0, r6
 800a97a:	f000 f84d 	bl	800aa18 <__smakebuf_r>
 800a97e:	89a0      	ldrh	r0, [r4, #12]
 800a980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a984:	f010 0301 	ands.w	r3, r0, #1
 800a988:	d00a      	beq.n	800a9a0 <__swsetup_r+0xbc>
 800a98a:	2300      	movs	r3, #0
 800a98c:	60a3      	str	r3, [r4, #8]
 800a98e:	6963      	ldr	r3, [r4, #20]
 800a990:	425b      	negs	r3, r3
 800a992:	61a3      	str	r3, [r4, #24]
 800a994:	6923      	ldr	r3, [r4, #16]
 800a996:	b943      	cbnz	r3, 800a9aa <__swsetup_r+0xc6>
 800a998:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a99c:	d1ba      	bne.n	800a914 <__swsetup_r+0x30>
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	0781      	lsls	r1, r0, #30
 800a9a2:	bf58      	it	pl
 800a9a4:	6963      	ldrpl	r3, [r4, #20]
 800a9a6:	60a3      	str	r3, [r4, #8]
 800a9a8:	e7f4      	b.n	800a994 <__swsetup_r+0xb0>
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	e7f7      	b.n	800a99e <__swsetup_r+0xba>
 800a9ae:	bf00      	nop
 800a9b0:	20000010 	.word	0x20000010
 800a9b4:	0800aca8 	.word	0x0800aca8
 800a9b8:	0800acc8 	.word	0x0800acc8
 800a9bc:	0800ac88 	.word	0x0800ac88

0800a9c0 <abort>:
 800a9c0:	b508      	push	{r3, lr}
 800a9c2:	2006      	movs	r0, #6
 800a9c4:	f000 f898 	bl	800aaf8 <raise>
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	f7f7 fc91 	bl	80022f0 <_exit>

0800a9ce <__swhatbuf_r>:
 800a9ce:	b570      	push	{r4, r5, r6, lr}
 800a9d0:	460e      	mov	r6, r1
 800a9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d6:	2900      	cmp	r1, #0
 800a9d8:	b096      	sub	sp, #88	; 0x58
 800a9da:	4614      	mov	r4, r2
 800a9dc:	461d      	mov	r5, r3
 800a9de:	da08      	bge.n	800a9f2 <__swhatbuf_r+0x24>
 800a9e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	602a      	str	r2, [r5, #0]
 800a9e8:	061a      	lsls	r2, r3, #24
 800a9ea:	d410      	bmi.n	800aa0e <__swhatbuf_r+0x40>
 800a9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9f0:	e00e      	b.n	800aa10 <__swhatbuf_r+0x42>
 800a9f2:	466a      	mov	r2, sp
 800a9f4:	f000 f89c 	bl	800ab30 <_fstat_r>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	dbf1      	blt.n	800a9e0 <__swhatbuf_r+0x12>
 800a9fc:	9a01      	ldr	r2, [sp, #4]
 800a9fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa06:	425a      	negs	r2, r3
 800aa08:	415a      	adcs	r2, r3
 800aa0a:	602a      	str	r2, [r5, #0]
 800aa0c:	e7ee      	b.n	800a9ec <__swhatbuf_r+0x1e>
 800aa0e:	2340      	movs	r3, #64	; 0x40
 800aa10:	2000      	movs	r0, #0
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	b016      	add	sp, #88	; 0x58
 800aa16:	bd70      	pop	{r4, r5, r6, pc}

0800aa18 <__smakebuf_r>:
 800aa18:	898b      	ldrh	r3, [r1, #12]
 800aa1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa1c:	079d      	lsls	r5, r3, #30
 800aa1e:	4606      	mov	r6, r0
 800aa20:	460c      	mov	r4, r1
 800aa22:	d507      	bpl.n	800aa34 <__smakebuf_r+0x1c>
 800aa24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	6123      	str	r3, [r4, #16]
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	6163      	str	r3, [r4, #20]
 800aa30:	b002      	add	sp, #8
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	ab01      	add	r3, sp, #4
 800aa36:	466a      	mov	r2, sp
 800aa38:	f7ff ffc9 	bl	800a9ce <__swhatbuf_r>
 800aa3c:	9900      	ldr	r1, [sp, #0]
 800aa3e:	4605      	mov	r5, r0
 800aa40:	4630      	mov	r0, r6
 800aa42:	f7fd fa5d 	bl	8007f00 <_malloc_r>
 800aa46:	b948      	cbnz	r0, 800aa5c <__smakebuf_r+0x44>
 800aa48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa4c:	059a      	lsls	r2, r3, #22
 800aa4e:	d4ef      	bmi.n	800aa30 <__smakebuf_r+0x18>
 800aa50:	f023 0303 	bic.w	r3, r3, #3
 800aa54:	f043 0302 	orr.w	r3, r3, #2
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	e7e3      	b.n	800aa24 <__smakebuf_r+0xc>
 800aa5c:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <__smakebuf_r+0x7c>)
 800aa5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	6020      	str	r0, [r4, #0]
 800aa64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	9b00      	ldr	r3, [sp, #0]
 800aa6c:	6163      	str	r3, [r4, #20]
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	6120      	str	r0, [r4, #16]
 800aa72:	b15b      	cbz	r3, 800aa8c <__smakebuf_r+0x74>
 800aa74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa78:	4630      	mov	r0, r6
 800aa7a:	f000 f86b 	bl	800ab54 <_isatty_r>
 800aa7e:	b128      	cbz	r0, 800aa8c <__smakebuf_r+0x74>
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	f023 0303 	bic.w	r3, r3, #3
 800aa86:	f043 0301 	orr.w	r3, r3, #1
 800aa8a:	81a3      	strh	r3, [r4, #12]
 800aa8c:	89a0      	ldrh	r0, [r4, #12]
 800aa8e:	4305      	orrs	r5, r0
 800aa90:	81a5      	strh	r5, [r4, #12]
 800aa92:	e7cd      	b.n	800aa30 <__smakebuf_r+0x18>
 800aa94:	08007ca1 	.word	0x08007ca1

0800aa98 <_malloc_usable_size_r>:
 800aa98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa9c:	1f18      	subs	r0, r3, #4
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bfbc      	itt	lt
 800aaa2:	580b      	ldrlt	r3, [r1, r0]
 800aaa4:	18c0      	addlt	r0, r0, r3
 800aaa6:	4770      	bx	lr

0800aaa8 <_raise_r>:
 800aaa8:	291f      	cmp	r1, #31
 800aaaa:	b538      	push	{r3, r4, r5, lr}
 800aaac:	4604      	mov	r4, r0
 800aaae:	460d      	mov	r5, r1
 800aab0:	d904      	bls.n	800aabc <_raise_r+0x14>
 800aab2:	2316      	movs	r3, #22
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aabe:	b112      	cbz	r2, 800aac6 <_raise_r+0x1e>
 800aac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aac4:	b94b      	cbnz	r3, 800aada <_raise_r+0x32>
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 f830 	bl	800ab2c <_getpid_r>
 800aacc:	462a      	mov	r2, r5
 800aace:	4601      	mov	r1, r0
 800aad0:	4620      	mov	r0, r4
 800aad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aad6:	f000 b817 	b.w	800ab08 <_kill_r>
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d00a      	beq.n	800aaf4 <_raise_r+0x4c>
 800aade:	1c59      	adds	r1, r3, #1
 800aae0:	d103      	bne.n	800aaea <_raise_r+0x42>
 800aae2:	2316      	movs	r3, #22
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	2001      	movs	r0, #1
 800aae8:	e7e7      	b.n	800aaba <_raise_r+0x12>
 800aaea:	2400      	movs	r4, #0
 800aaec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	4798      	blx	r3
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	e7e0      	b.n	800aaba <_raise_r+0x12>

0800aaf8 <raise>:
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <raise+0xc>)
 800aafa:	4601      	mov	r1, r0
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	f7ff bfd3 	b.w	800aaa8 <_raise_r>
 800ab02:	bf00      	nop
 800ab04:	20000010 	.word	0x20000010

0800ab08 <_kill_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4d07      	ldr	r5, [pc, #28]	; (800ab28 <_kill_r+0x20>)
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4604      	mov	r4, r0
 800ab10:	4608      	mov	r0, r1
 800ab12:	4611      	mov	r1, r2
 800ab14:	602b      	str	r3, [r5, #0]
 800ab16:	f7f7 fbdb 	bl	80022d0 <_kill>
 800ab1a:	1c43      	adds	r3, r0, #1
 800ab1c:	d102      	bne.n	800ab24 <_kill_r+0x1c>
 800ab1e:	682b      	ldr	r3, [r5, #0]
 800ab20:	b103      	cbz	r3, 800ab24 <_kill_r+0x1c>
 800ab22:	6023      	str	r3, [r4, #0]
 800ab24:	bd38      	pop	{r3, r4, r5, pc}
 800ab26:	bf00      	nop
 800ab28:	20004d54 	.word	0x20004d54

0800ab2c <_getpid_r>:
 800ab2c:	f7f7 bbc8 	b.w	80022c0 <_getpid>

0800ab30 <_fstat_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d07      	ldr	r5, [pc, #28]	; (800ab50 <_fstat_r+0x20>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	602b      	str	r3, [r5, #0]
 800ab3e:	f7f7 fc26 	bl	800238e <_fstat>
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	d102      	bne.n	800ab4c <_fstat_r+0x1c>
 800ab46:	682b      	ldr	r3, [r5, #0]
 800ab48:	b103      	cbz	r3, 800ab4c <_fstat_r+0x1c>
 800ab4a:	6023      	str	r3, [r4, #0]
 800ab4c:	bd38      	pop	{r3, r4, r5, pc}
 800ab4e:	bf00      	nop
 800ab50:	20004d54 	.word	0x20004d54

0800ab54 <_isatty_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d06      	ldr	r5, [pc, #24]	; (800ab70 <_isatty_r+0x1c>)
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	602b      	str	r3, [r5, #0]
 800ab60:	f7f7 fc25 	bl	80023ae <_isatty>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_isatty_r+0x1a>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_isatty_r+0x1a>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	20004d54 	.word	0x20004d54

0800ab74 <_init>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_fini>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr
