
stm32_Test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000874  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000980  08000980  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000980  08000980  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000980  08000980  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000980  08000980  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000980  08000980  00010980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000984  08000984  00010984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000994  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000994  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002138  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ab2  00000000  00000000  0002216d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000330  00000000  00000000  00022c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b8  00000000  00000000  00022f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015711  00000000  00000000  00023208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000377b  00000000  00000000  00038919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b5d1  00000000  00000000  0003c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b7665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ab8  00000000  00000000  000b76b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000968 	.word	0x08000968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000968 	.word	0x08000968

0800014c <main>:
#include "main.h"

static void MX_GPIO_Init(void);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f8e0 	bl	8000314 <HAL_Init>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000154:	f000 f818 	bl	8000188 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000158:	2201      	movs	r2, #1
 800015a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800015e:	4809      	ldr	r0, [pc, #36]	; (8000184 <main+0x38>)
 8000160:	f000 fbc6 	bl	80008f0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000168:	f000 f936 	bl	80003d8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000172:	4804      	ldr	r0, [pc, #16]	; (8000184 <main+0x38>)
 8000174:	f000 fbbc 	bl	80008f0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017c:	f000 f92c 	bl	80003d8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000180:	e7ea      	b.n	8000158 <main+0xc>
 8000182:	bf00      	nop
 8000184:	40010c00 	.word	0x40010c00

08000188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b086      	sub	sp, #24
 800018c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	f107 0308 	add.w	r3, r7, #8
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800019c:	4b18      	ldr	r3, [pc, #96]	; (8000200 <MX_GPIO_Init+0x78>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a17      	ldr	r2, [pc, #92]	; (8000200 <MX_GPIO_Init+0x78>)
 80001a2:	f043 0308 	orr.w	r3, r3, #8
 80001a6:	6193      	str	r3, [r2, #24]
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <MX_GPIO_Init+0x78>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	f003 0308 	and.w	r3, r3, #8
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b4:	4b12      	ldr	r3, [pc, #72]	; (8000200 <MX_GPIO_Init+0x78>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a11      	ldr	r2, [pc, #68]	; (8000200 <MX_GPIO_Init+0x78>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
 80001c0:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <MX_GPIO_Init+0x78>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0304 	and.w	r3, r3, #4
 80001c8:	603b      	str	r3, [r7, #0]
 80001ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d2:	480c      	ldr	r0, [pc, #48]	; (8000204 <MX_GPIO_Init+0x7c>)
 80001d4:	f000 fb8c 	bl	80008f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80001d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80001dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001ea:	f107 0308 	add.w	r3, r7, #8
 80001ee:	4619      	mov	r1, r3
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <MX_GPIO_Init+0x7c>)
 80001f2:	f000 f9f9 	bl	80005e8 <HAL_GPIO_Init>

}
 80001f6:	bf00      	nop
 80001f8:	3718      	adds	r7, #24
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000
 8000204:	40010c00 	.word	0x40010c00

08000208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <HAL_MspInit+0x5c>)
 8000210:	699b      	ldr	r3, [r3, #24]
 8000212:	4a14      	ldr	r2, [pc, #80]	; (8000264 <HAL_MspInit+0x5c>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6193      	str	r3, [r2, #24]
 800021a:	4b12      	ldr	r3, [pc, #72]	; (8000264 <HAL_MspInit+0x5c>)
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000226:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <HAL_MspInit+0x5c>)
 8000228:	69db      	ldr	r3, [r3, #28]
 800022a:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <HAL_MspInit+0x5c>)
 800022c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000230:	61d3      	str	r3, [r2, #28]
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <HAL_MspInit+0x5c>)
 8000234:	69db      	ldr	r3, [r3, #28]
 8000236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <HAL_MspInit+0x60>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	4a04      	ldr	r2, [pc, #16]	; (8000268 <HAL_MspInit+0x60>)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800025a:	bf00      	nop
 800025c:	3714      	adds	r7, #20
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40021000 	.word	0x40021000
 8000268:	40010000 	.word	0x40010000

0800026c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000270:	e7fe      	b.n	8000270 <NMI_Handler+0x4>

08000272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000272:	b480      	push	{r7}
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000276:	e7fe      	b.n	8000276 <HardFault_Handler+0x4>

08000278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800027c:	e7fe      	b.n	800027c <MemManage_Handler+0x4>

0800027e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000282:	e7fe      	b.n	8000282 <BusFault_Handler+0x4>

08000284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000288:	e7fe      	b.n	8000288 <UsageFault_Handler+0x4>

0800028a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr

08000296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr

080002a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr

080002ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b2:	f000 f875 	bl	80003a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}

080002ba <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002ba:	b480      	push	{r7}
 80002bc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	; (8000300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <LoopFillZerobss+0x22>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002ee:	f7ff ffe4 	bl	80002ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002f2:	f000 fb15 	bl	8000920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff29 	bl	800014c <main>
  bx lr
 80002fa:	4770      	bx	lr
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000304:	08000988 	.word	0x08000988
  ldr r2, =_sbss
 8000308:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800030c:	2000002c 	.word	0x2000002c

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>
	...

08000314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <HAL_Init+0x28>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <HAL_Init+0x28>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000324:	2003      	movs	r0, #3
 8000326:	f000 f92b 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800032a:	200f      	movs	r0, #15
 800032c:	f000 f808 	bl	8000340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000330:	f7ff ff6a 	bl	8000208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000334:	2300      	movs	r3, #0
}
 8000336:	4618      	mov	r0, r3
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40022000 	.word	0x40022000

08000340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <HAL_InitTick+0x54>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <HAL_InitTick+0x58>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	4619      	mov	r1, r3
 8000352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000356:	fbb3 f3f1 	udiv	r3, r3, r1
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f935 	bl	80005ce <HAL_SYSTICK_Config>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800036a:	2301      	movs	r3, #1
 800036c:	e00e      	b.n	800038c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d80a      	bhi.n	800038a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000374:	2200      	movs	r2, #0
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	f04f 30ff 	mov.w	r0, #4294967295
 800037c:	f000 f90b 	bl	8000596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000380:	4a06      	ldr	r2, [pc, #24]	; (800039c <HAL_InitTick+0x5c>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000386:	2300      	movs	r3, #0
 8000388:	e000      	b.n	800038c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000000 	.word	0x20000000
 8000398:	20000008 	.word	0x20000008
 800039c:	20000004 	.word	0x20000004

080003a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <HAL_IncTick+0x1c>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <HAL_IncTick+0x20>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4413      	add	r3, r2
 80003b0:	4a03      	ldr	r2, [pc, #12]	; (80003c0 <HAL_IncTick+0x20>)
 80003b2:	6013      	str	r3, [r2, #0]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	20000008 	.word	0x20000008
 80003c0:	20000028 	.word	0x20000028

080003c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  return uwTick;
 80003c8:	4b02      	ldr	r3, [pc, #8]	; (80003d4 <HAL_GetTick+0x10>)
 80003ca:	681b      	ldr	r3, [r3, #0]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	20000028 	.word	0x20000028

080003d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80003e0:	f7ff fff0 	bl	80003c4 <HAL_GetTick>
 80003e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003f0:	d005      	beq.n	80003fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <HAL_Delay+0x44>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	4413      	add	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003fe:	bf00      	nop
 8000400:	f7ff ffe0 	bl	80003c4 <HAL_GetTick>
 8000404:	4602      	mov	r2, r0
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	68fa      	ldr	r2, [r7, #12]
 800040c:	429a      	cmp	r2, r3
 800040e:	d8f7      	bhi.n	8000400 <HAL_Delay+0x28>
  {
  }
}
 8000410:	bf00      	nop
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000008 	.word	0x20000008

08000420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f003 0307 	and.w	r3, r3, #7
 800042e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <__NVIC_SetPriorityGrouping+0x44>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800043c:	4013      	ands	r3, r2
 800043e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800044c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000452:	4a04      	ldr	r2, [pc, #16]	; (8000464 <__NVIC_SetPriorityGrouping+0x44>)
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	60d3      	str	r3, [r2, #12]
}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <__NVIC_GetPriorityGrouping+0x18>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	0a1b      	lsrs	r3, r3, #8
 8000472:	f003 0307 	and.w	r3, r3, #7
}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db0a      	blt.n	80004ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	b2da      	uxtb	r2, r3
 800049c:	490c      	ldr	r1, [pc, #48]	; (80004d0 <__NVIC_SetPriority+0x4c>)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	0112      	lsls	r2, r2, #4
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	440b      	add	r3, r1
 80004a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ac:	e00a      	b.n	80004c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <__NVIC_SetPriority+0x50>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	3b04      	subs	r3, #4
 80004bc:	0112      	lsls	r2, r2, #4
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	440b      	add	r3, r1
 80004c2:	761a      	strb	r2, [r3, #24]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000e100 	.word	0xe000e100
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004d8:	b480      	push	{r7}
 80004da:	b089      	sub	sp, #36	; 0x24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	f1c3 0307 	rsb	r3, r3, #7
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	bf28      	it	cs
 80004f6:	2304      	movcs	r3, #4
 80004f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	3304      	adds	r3, #4
 80004fe:	2b06      	cmp	r3, #6
 8000500:	d902      	bls.n	8000508 <NVIC_EncodePriority+0x30>
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	3b03      	subs	r3, #3
 8000506:	e000      	b.n	800050a <NVIC_EncodePriority+0x32>
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800050c:	f04f 32ff 	mov.w	r2, #4294967295
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	43da      	mvns	r2, r3
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	401a      	ands	r2, r3
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000520:	f04f 31ff 	mov.w	r1, #4294967295
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	fa01 f303 	lsl.w	r3, r1, r3
 800052a:	43d9      	mvns	r1, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000530:	4313      	orrs	r3, r2
         );
}
 8000532:	4618      	mov	r0, r3
 8000534:	3724      	adds	r7, #36	; 0x24
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3b01      	subs	r3, #1
 8000548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800054c:	d301      	bcc.n	8000552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800054e:	2301      	movs	r3, #1
 8000550:	e00f      	b.n	8000572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <SysTick_Config+0x40>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3b01      	subs	r3, #1
 8000558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800055a:	210f      	movs	r1, #15
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f7ff ff90 	bl	8000484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <SysTick_Config+0x40>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <SysTick_Config+0x40>)
 800056c:	2207      	movs	r2, #7
 800056e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	e000e010 	.word	0xe000e010

08000580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff ff49 	bl	8000420 <__NVIC_SetPriorityGrouping>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000596:	b580      	push	{r7, lr}
 8000598:	b086      	sub	sp, #24
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
 80005a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005a8:	f7ff ff5e 	bl	8000468 <__NVIC_GetPriorityGrouping>
 80005ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	6978      	ldr	r0, [r7, #20]
 80005b4:	f7ff ff90 	bl	80004d8 <NVIC_EncodePriority>
 80005b8:	4602      	mov	r2, r0
 80005ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005be:	4611      	mov	r1, r2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ff5f 	bl	8000484 <__NVIC_SetPriority>
}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ffb0 	bl	800053c <SysTick_Config>
 80005dc:	4603      	mov	r3, r0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b08b      	sub	sp, #44	; 0x2c
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005fa:	e169      	b.n	80008d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80005fc:	2201      	movs	r2, #1
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	69fa      	ldr	r2, [r7, #28]
 800060c:	4013      	ands	r3, r2
 800060e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000610:	69ba      	ldr	r2, [r7, #24]
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	429a      	cmp	r2, r3
 8000616:	f040 8158 	bne.w	80008ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	4a9a      	ldr	r2, [pc, #616]	; (8000888 <HAL_GPIO_Init+0x2a0>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d05e      	beq.n	80006e2 <HAL_GPIO_Init+0xfa>
 8000624:	4a98      	ldr	r2, [pc, #608]	; (8000888 <HAL_GPIO_Init+0x2a0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d875      	bhi.n	8000716 <HAL_GPIO_Init+0x12e>
 800062a:	4a98      	ldr	r2, [pc, #608]	; (800088c <HAL_GPIO_Init+0x2a4>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d058      	beq.n	80006e2 <HAL_GPIO_Init+0xfa>
 8000630:	4a96      	ldr	r2, [pc, #600]	; (800088c <HAL_GPIO_Init+0x2a4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d86f      	bhi.n	8000716 <HAL_GPIO_Init+0x12e>
 8000636:	4a96      	ldr	r2, [pc, #600]	; (8000890 <HAL_GPIO_Init+0x2a8>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d052      	beq.n	80006e2 <HAL_GPIO_Init+0xfa>
 800063c:	4a94      	ldr	r2, [pc, #592]	; (8000890 <HAL_GPIO_Init+0x2a8>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d869      	bhi.n	8000716 <HAL_GPIO_Init+0x12e>
 8000642:	4a94      	ldr	r2, [pc, #592]	; (8000894 <HAL_GPIO_Init+0x2ac>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d04c      	beq.n	80006e2 <HAL_GPIO_Init+0xfa>
 8000648:	4a92      	ldr	r2, [pc, #584]	; (8000894 <HAL_GPIO_Init+0x2ac>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d863      	bhi.n	8000716 <HAL_GPIO_Init+0x12e>
 800064e:	4a92      	ldr	r2, [pc, #584]	; (8000898 <HAL_GPIO_Init+0x2b0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d046      	beq.n	80006e2 <HAL_GPIO_Init+0xfa>
 8000654:	4a90      	ldr	r2, [pc, #576]	; (8000898 <HAL_GPIO_Init+0x2b0>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d85d      	bhi.n	8000716 <HAL_GPIO_Init+0x12e>
 800065a:	2b12      	cmp	r3, #18
 800065c:	d82a      	bhi.n	80006b4 <HAL_GPIO_Init+0xcc>
 800065e:	2b12      	cmp	r3, #18
 8000660:	d859      	bhi.n	8000716 <HAL_GPIO_Init+0x12e>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <HAL_GPIO_Init+0x80>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	080006e3 	.word	0x080006e3
 800066c:	080006bd 	.word	0x080006bd
 8000670:	080006cf 	.word	0x080006cf
 8000674:	08000711 	.word	0x08000711
 8000678:	08000717 	.word	0x08000717
 800067c:	08000717 	.word	0x08000717
 8000680:	08000717 	.word	0x08000717
 8000684:	08000717 	.word	0x08000717
 8000688:	08000717 	.word	0x08000717
 800068c:	08000717 	.word	0x08000717
 8000690:	08000717 	.word	0x08000717
 8000694:	08000717 	.word	0x08000717
 8000698:	08000717 	.word	0x08000717
 800069c:	08000717 	.word	0x08000717
 80006a0:	08000717 	.word	0x08000717
 80006a4:	08000717 	.word	0x08000717
 80006a8:	08000717 	.word	0x08000717
 80006ac:	080006c5 	.word	0x080006c5
 80006b0:	080006d9 	.word	0x080006d9
 80006b4:	4a79      	ldr	r2, [pc, #484]	; (800089c <HAL_GPIO_Init+0x2b4>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d013      	beq.n	80006e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80006ba:	e02c      	b.n	8000716 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	623b      	str	r3, [r7, #32]
          break;
 80006c2:	e029      	b.n	8000718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	3304      	adds	r3, #4
 80006ca:	623b      	str	r3, [r7, #32]
          break;
 80006cc:	e024      	b.n	8000718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	3308      	adds	r3, #8
 80006d4:	623b      	str	r3, [r7, #32]
          break;
 80006d6:	e01f      	b.n	8000718 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	330c      	adds	r3, #12
 80006de:	623b      	str	r3, [r7, #32]
          break;
 80006e0:	e01a      	b.n	8000718 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006ea:	2304      	movs	r3, #4
 80006ec:	623b      	str	r3, [r7, #32]
          break;
 80006ee:	e013      	b.n	8000718 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d105      	bne.n	8000704 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006f8:	2308      	movs	r3, #8
 80006fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	69fa      	ldr	r2, [r7, #28]
 8000700:	611a      	str	r2, [r3, #16]
          break;
 8000702:	e009      	b.n	8000718 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000704:	2308      	movs	r3, #8
 8000706:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	615a      	str	r2, [r3, #20]
          break;
 800070e:	e003      	b.n	8000718 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
          break;
 8000714:	e000      	b.n	8000718 <HAL_GPIO_Init+0x130>
          break;
 8000716:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	2bff      	cmp	r3, #255	; 0xff
 800071c:	d801      	bhi.n	8000722 <HAL_GPIO_Init+0x13a>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	e001      	b.n	8000726 <HAL_GPIO_Init+0x13e>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	2bff      	cmp	r3, #255	; 0xff
 800072c:	d802      	bhi.n	8000734 <HAL_GPIO_Init+0x14c>
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	e002      	b.n	800073a <HAL_GPIO_Init+0x152>
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	3b08      	subs	r3, #8
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	210f      	movs	r1, #15
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	401a      	ands	r2, r3
 800074c:	6a39      	ldr	r1, [r7, #32]
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	fa01 f303 	lsl.w	r3, r1, r3
 8000754:	431a      	orrs	r2, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	2b00      	cmp	r3, #0
 8000764:	f000 80b1 	beq.w	80008ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000768:	4b4d      	ldr	r3, [pc, #308]	; (80008a0 <HAL_GPIO_Init+0x2b8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a4c      	ldr	r2, [pc, #304]	; (80008a0 <HAL_GPIO_Init+0x2b8>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <HAL_GPIO_Init+0x2b8>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000780:	4a48      	ldr	r2, [pc, #288]	; (80008a4 <HAL_GPIO_Init+0x2bc>)
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	089b      	lsrs	r3, r3, #2
 8000786:	3302      	adds	r3, #2
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	f003 0303 	and.w	r3, r3, #3
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	220f      	movs	r2, #15
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <HAL_GPIO_Init+0x2c0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d013      	beq.n	80007d4 <HAL_GPIO_Init+0x1ec>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a3f      	ldr	r2, [pc, #252]	; (80008ac <HAL_GPIO_Init+0x2c4>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d00d      	beq.n	80007d0 <HAL_GPIO_Init+0x1e8>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a3e      	ldr	r2, [pc, #248]	; (80008b0 <HAL_GPIO_Init+0x2c8>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d007      	beq.n	80007cc <HAL_GPIO_Init+0x1e4>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a3d      	ldr	r2, [pc, #244]	; (80008b4 <HAL_GPIO_Init+0x2cc>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d101      	bne.n	80007c8 <HAL_GPIO_Init+0x1e0>
 80007c4:	2303      	movs	r3, #3
 80007c6:	e006      	b.n	80007d6 <HAL_GPIO_Init+0x1ee>
 80007c8:	2304      	movs	r3, #4
 80007ca:	e004      	b.n	80007d6 <HAL_GPIO_Init+0x1ee>
 80007cc:	2302      	movs	r3, #2
 80007ce:	e002      	b.n	80007d6 <HAL_GPIO_Init+0x1ee>
 80007d0:	2301      	movs	r3, #1
 80007d2:	e000      	b.n	80007d6 <HAL_GPIO_Init+0x1ee>
 80007d4:	2300      	movs	r3, #0
 80007d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007d8:	f002 0203 	and.w	r2, r2, #3
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	4093      	lsls	r3, r2
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80007e6:	492f      	ldr	r1, [pc, #188]	; (80008a4 <HAL_GPIO_Init+0x2bc>)
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	089b      	lsrs	r3, r3, #2
 80007ec:	3302      	adds	r3, #2
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d006      	beq.n	800080e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000800:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	492c      	ldr	r1, [pc, #176]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	4313      	orrs	r3, r2
 800080a:	600b      	str	r3, [r1, #0]
 800080c:	e006      	b.n	800081c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	43db      	mvns	r3, r3
 8000816:	4928      	ldr	r1, [pc, #160]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000818:	4013      	ands	r3, r2
 800081a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	4922      	ldr	r1, [pc, #136]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	4313      	orrs	r3, r2
 8000832:	604b      	str	r3, [r1, #4]
 8000834:	e006      	b.n	8000844 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	43db      	mvns	r3, r3
 800083e:	491e      	ldr	r1, [pc, #120]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000840:	4013      	ands	r3, r2
 8000842:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800084c:	2b00      	cmp	r3, #0
 800084e:	d006      	beq.n	800085e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	4918      	ldr	r1, [pc, #96]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	4313      	orrs	r3, r2
 800085a:	608b      	str	r3, [r1, #8]
 800085c:	e006      	b.n	800086c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	43db      	mvns	r3, r3
 8000866:	4914      	ldr	r1, [pc, #80]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 8000868:	4013      	ands	r3, r2
 800086a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000874:	2b00      	cmp	r3, #0
 8000876:	d021      	beq.n	80008bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	490e      	ldr	r1, [pc, #56]	; (80008b8 <HAL_GPIO_Init+0x2d0>)
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	60cb      	str	r3, [r1, #12]
 8000884:	e021      	b.n	80008ca <HAL_GPIO_Init+0x2e2>
 8000886:	bf00      	nop
 8000888:	10320000 	.word	0x10320000
 800088c:	10310000 	.word	0x10310000
 8000890:	10220000 	.word	0x10220000
 8000894:	10210000 	.word	0x10210000
 8000898:	10120000 	.word	0x10120000
 800089c:	10110000 	.word	0x10110000
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010000 	.word	0x40010000
 80008a8:	40010800 	.word	0x40010800
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	40011000 	.word	0x40011000
 80008b4:	40011400 	.word	0x40011400
 80008b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_GPIO_Init+0x304>)
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	43db      	mvns	r3, r3
 80008c4:	4909      	ldr	r1, [pc, #36]	; (80008ec <HAL_GPIO_Init+0x304>)
 80008c6:	4013      	ands	r3, r2
 80008c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	3301      	adds	r3, #1
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	fa22 f303 	lsr.w	r3, r2, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f47f ae8e 	bne.w	80005fc <HAL_GPIO_Init+0x14>
  }
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	372c      	adds	r7, #44	; 0x2c
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40010400 	.word	0x40010400

080008f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	807b      	strh	r3, [r7, #2]
 80008fc:	4613      	mov	r3, r2
 80008fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000900:	787b      	ldrb	r3, [r7, #1]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000906:	887a      	ldrh	r2, [r7, #2]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800090c:	e003      	b.n	8000916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800090e:	887b      	ldrh	r3, [r7, #2]
 8000910:	041a      	lsls	r2, r3, #16
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	611a      	str	r2, [r3, #16]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <__libc_init_array>:
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	2600      	movs	r6, #0
 8000924:	4d0c      	ldr	r5, [pc, #48]	; (8000958 <__libc_init_array+0x38>)
 8000926:	4c0d      	ldr	r4, [pc, #52]	; (800095c <__libc_init_array+0x3c>)
 8000928:	1b64      	subs	r4, r4, r5
 800092a:	10a4      	asrs	r4, r4, #2
 800092c:	42a6      	cmp	r6, r4
 800092e:	d109      	bne.n	8000944 <__libc_init_array+0x24>
 8000930:	f000 f81a 	bl	8000968 <_init>
 8000934:	2600      	movs	r6, #0
 8000936:	4d0a      	ldr	r5, [pc, #40]	; (8000960 <__libc_init_array+0x40>)
 8000938:	4c0a      	ldr	r4, [pc, #40]	; (8000964 <__libc_init_array+0x44>)
 800093a:	1b64      	subs	r4, r4, r5
 800093c:	10a4      	asrs	r4, r4, #2
 800093e:	42a6      	cmp	r6, r4
 8000940:	d105      	bne.n	800094e <__libc_init_array+0x2e>
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f855 3b04 	ldr.w	r3, [r5], #4
 8000948:	4798      	blx	r3
 800094a:	3601      	adds	r6, #1
 800094c:	e7ee      	b.n	800092c <__libc_init_array+0xc>
 800094e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000952:	4798      	blx	r3
 8000954:	3601      	adds	r6, #1
 8000956:	e7f2      	b.n	800093e <__libc_init_array+0x1e>
 8000958:	08000980 	.word	0x08000980
 800095c:	08000980 	.word	0x08000980
 8000960:	08000980 	.word	0x08000980
 8000964:	08000984 	.word	0x08000984

08000968 <_init>:
 8000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096a:	bf00      	nop
 800096c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800096e:	bc08      	pop	{r3}
 8000970:	469e      	mov	lr, r3
 8000972:	4770      	bx	lr

08000974 <_fini>:
 8000974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000976:	bf00      	nop
 8000978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800097a:	bc08      	pop	{r3}
 800097c:	469e      	mov	lr, r3
 800097e:	4770      	bx	lr
