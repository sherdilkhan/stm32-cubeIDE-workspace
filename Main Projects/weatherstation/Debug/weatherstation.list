
weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e0  0800ce30  0800ce30  0000de30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e110  0800e110  000101e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e110  0800e110  0000f110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e118  0800e118  000101e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e118  0800e118  0000f118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e11c  0800e11c  0000f11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800e120  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101e0  2**0
                  CONTENTS
 10 .bss          00005010  200001e0  200001e0  000101e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200051f0  200051f0  000101e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8a4  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a85  00000000  00000000  0002bab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e0  00000000  00000000  0002f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001364  00000000  00000000  00030e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f17  00000000  00000000  00032184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2f3  00000000  00000000  0005609b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db371  00000000  00000000  0007238e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d6ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c28  00000000  00000000  0014d744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0015536c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce14 	.word	0x0800ce14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ce14 	.word	0x0800ce14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9b5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000fe0:	2305      	movs	r3, #5
 8000fe2:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 facb 	bl	8002584 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d133      	bne.n	8001062 <bme280_init+0x8a>
		while (try_count) {
 8000ffa:	e028      	b.n	800104e <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000ffc:	f107 010d 	add.w	r1, r7, #13
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	20d0      	movs	r0, #208	@ 0xd0
 8001006:	f000 f832 	bl	800106e <bme280_get_regs>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d114      	bne.n	8001040 <bme280_init+0x68>
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	2b60      	cmp	r3, #96	@ 0x60
 800101a:	d111      	bne.n	8001040 <bme280_init+0x68>
				dev->chip_id = chip_id;
 800101c:	7b7a      	ldrb	r2, [r7, #13]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f978 	bl	8001318 <bme280_soft_reset>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d110      	bne.n	8001056 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 f919 	bl	800226c <get_calib_data>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800103e:	e00a      	b.n	8001056 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2001      	movs	r0, #1
 8001046:	4798      	blx	r3
			--try_count;
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	3b01      	subs	r3, #1
 800104c:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1d3      	bne.n	8000ffc <bme280_init+0x24>
 8001054:	e000      	b.n	8001058 <bme280_init+0x80>
				break;
 8001056:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800105e:	23fe      	movs	r3, #254	@ 0xfe
 8001060:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800106e:	b590      	push	{r4, r7, lr}
 8001070:	b087      	sub	sp, #28
 8001072:	af00      	add	r7, sp, #0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	4613      	mov	r3, r2
 800107e:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f001 fa7f 	bl	8002584 <null_ptr_check>
 8001086:	4603      	mov	r3, r0
 8001088:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800108a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d117      	bne.n	80010c2 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	789b      	ldrb	r3, [r3, #2]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d003      	beq.n	80010a2 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010a0:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685c      	ldr	r4, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7858      	ldrb	r0, [r3, #1]
 80010aa:	89bb      	ldrh	r3, [r7, #12]
 80010ac:	7bf9      	ldrb	r1, [r7, #15]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	47a0      	blx	r4
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 80010b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 80010be:	23fc      	movs	r3, #252	@ 0xfc
 80010c0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80010c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}

080010ce <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b08d      	sub	sp, #52	@ 0x34
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4613      	mov	r3, r2
 80010dc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b0a      	cmp	r3, #10
 80010e2:	d901      	bls.n	80010e8 <bme280_set_regs+0x1a>
		len = 10;
 80010e4:	230a      	movs	r3, #10
 80010e6:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f001 fa4b 	bl	8002584 <null_ptr_check>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80010f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d156      	bne.n	80011aa <bme280_set_regs+0xdc>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d053      	beq.n	80011aa <bme280_set_regs+0xdc>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d050      	beq.n	80011aa <bme280_set_regs+0xdc>
		if (len != 0) {
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d049      	beq.n	80011a2 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	789b      	ldrb	r3, [r3, #2]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d01a      	beq.n	8001152 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800111c:	2300      	movs	r3, #0
 800111e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001122:	e011      	b.n	8001148 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001124:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001132:	68f9      	ldr	r1, [r7, #12]
 8001134:	440b      	add	r3, r1
 8001136:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800113e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001142:	3301      	adds	r3, #1
 8001144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001148:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3e8      	bcc.n	8001124 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d90d      	bls.n	8001174 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f107 0114 	add.w	r1, r7, #20
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f001 f8c8 	bl	80022f6 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	b29b      	uxth	r3, r3
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001172:	e001      	b.n	8001178 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689c      	ldr	r4, [r3, #8]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	7858      	ldrb	r0, [r3, #1]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	7819      	ldrb	r1, [r3, #0]
 8001184:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001186:	f107 0214 	add.w	r2, r7, #20
 800118a:	47a0      	blx	r4
 800118c:	4603      	mov	r3, r0
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8001192:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 800119a:	23fc      	movs	r3, #252	@ 0xfc
 800119c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80011a0:	e007      	b.n	80011b2 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80011a2:	23fd      	movs	r3, #253	@ 0xfd
 80011a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80011a8:	e003      	b.n	80011b2 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011aa:	23ff      	movs	r3, #255	@ 0xff
 80011ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011b0:	e000      	b.n	80011b4 <bme280_set_regs+0xe6>
		if (len != 0) {
 80011b2:	bf00      	nop
	}


	return rslt;
 80011b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3734      	adds	r7, #52	@ 0x34
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}

080011c0 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f001 f9d9 	bl	8002584 <null_ptr_check>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d13f      	bne.n	800125e <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80011de:	f107 030e 	add.w	r3, r7, #14
 80011e2:	6839      	ldr	r1, [r7, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f874 	bl	80012d2 <bme280_get_sensor_mode>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d107      	bne.n	8001206 <bme280_set_sensor_settings+0x46>
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f000 fb36 	bl	800186e <put_device_to_sleep>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d127      	bne.n	800125e <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4619      	mov	r1, r3
 8001212:	2007      	movs	r0, #7
 8001214:	f001 f99a 	bl	800254c <are_settings_changed>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d009      	beq.n	8001232 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f972 	bl	8001512 <set_osr_settings>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d111      	bne.n	800125e <bme280_set_sensor_settings+0x9e>
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4619      	mov	r1, r3
 800123e:	2018      	movs	r0, #24
 8001240:	f001 f984 	bl	800254c <are_settings_changed>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f9f9 	bl	800164c <set_filter_standby_settings>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	6039      	str	r1, [r7, #0]
 8001274:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f001 f984 	bl	8002584 <null_ptr_check>
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11e      	bne.n	80012c6 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001288:	f107 030e 	add.w	r3, r7, #14
 800128c:	6839      	ldr	r1, [r7, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f81f 	bl	80012d2 <bme280_get_sensor_mode>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d107      	bne.n	80012b0 <bme280_set_sensor_mode+0x46>
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f000 fae1 	bl	800186e <put_device_to_sleep>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 faa3 	bl	8001808 <write_power_mode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f001 f951 	bl	8002584 <null_ptr_check>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10e      	bne.n	800130c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	20f4      	movs	r0, #244	@ 0xf4
 80012f6:	f7ff feba 	bl	800106e <bme280_get_regs>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	b2da      	uxtb	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800130c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001320:	23e0      	movs	r3, #224	@ 0xe0
 8001322:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001324:	23b6      	movs	r3, #182	@ 0xb6
 8001326:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f001 f92b 	bl	8002584 <null_ptr_check>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10d      	bne.n	8001356 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800133a:	f107 010d 	add.w	r1, r7, #13
 800133e:	f107 000e 	add.w	r0, r7, #14
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f7ff fec2 	bl	80010ce <bme280_set_regs>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2002      	movs	r0, #2
 8001354:	4798      	blx	r3
	}

	return rslt;
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b08a      	sub	sp, #40	@ 0x28
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f001 f8fd 	bl	8002584 <null_ptr_check>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001390:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001394:	2b00      	cmp	r3, #0
 8001396:	d124      	bne.n	80013e2 <bme280_get_sensor_data+0x80>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d021      	beq.n	80013e2 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800139e:	f107 011c 	add.w	r1, r7, #28
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2208      	movs	r2, #8
 80013a6:	20f7      	movs	r0, #247	@ 0xf7
 80013a8:	f7ff fe61 	bl	800106e <bme280_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 80013b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80013ba:	f107 0210 	add.w	r2, r7, #16
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f815 	bl	80013f4 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3310      	adds	r3, #16
 80013ce:	f107 0110 	add.w	r1, r7, #16
 80013d2:	7bf8      	ldrb	r0, [r7, #15]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	f000 f853 	bl	8001480 <bme280_compensate_data>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80013e0:	e002      	b.n	80013e8 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80013e2:	23ff      	movs	r3, #255	@ 0xff
 80013e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 80013e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3301      	adds	r3, #1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3302      	adds	r3, #2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	b2db      	uxtb	r3, r3
 800141a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	431a      	orrs	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	431a      	orrs	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3303      	adds	r3, #3
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	031b      	lsls	r3, r3, #12
 8001432:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3304      	adds	r3, #4
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3305      	adds	r3, #5
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	b2db      	uxtb	r3, r3
 8001448:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	431a      	orrs	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	431a      	orrs	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3306      	adds	r3, #6
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3307      	adds	r3, #7
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	431a      	orrs	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d033      	beq.n	8001502 <bme280_compensate_data+0x82>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d030      	beq.n	8001502 <bme280_compensate_data+0x82>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d02d      	beq.n	8001502 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 fa1f 	bl	8001908 <compensate_temperature>
 80014ca:	4602      	mov	r2, r0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	f000 fa75 	bl	80019cc <compensate_pressure>
 80014e2:	4602      	mov	r2, r0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80014f2:	6839      	ldr	r1, [r7, #0]
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f000 fe0d 	bl	8002114 <compensate_humidity>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001500:	e001      	b.n	8001506 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001502:	23ff      	movs	r3, #255	@ 0xff
 8001504:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001520:	2301      	movs	r3, #1
 8001522:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f000 f815 	bl	8001560 <set_osr_humidity_settings>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f842 	bl	80015d4 <set_osr_press_temp_settings>
 8001550:	4603      	mov	r3, r0
 8001552:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001554:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800156a:	23f2      	movs	r3, #242	@ 0xf2
 800156c:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	789b      	ldrb	r3, [r3, #2]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800157a:	f107 010e 	add.w	r1, r7, #14
 800157e:	f107 000c 	add.w	r0, r7, #12
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	f7ff fda2 	bl	80010ce <bme280_set_regs>
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d118      	bne.n	80015c8 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001596:	23f4      	movs	r3, #244	@ 0xf4
 8001598:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800159a:	7b38      	ldrb	r0, [r7, #12]
 800159c:	f107 010d 	add.w	r1, r7, #13
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f7ff fd63 	bl	800106e <bme280_get_regs>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80015ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80015b4:	f107 010d 	add.w	r1, r7, #13
 80015b8:	f107 000c 	add.w	r0, r7, #12
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	f7ff fd85 	bl	80010ce <bme280_set_regs>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80015e2:	23f4      	movs	r3, #244	@ 0xf4
 80015e4:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015e6:	7db8      	ldrb	r0, [r7, #22]
 80015e8:	f107 0115 	add.w	r1, r7, #21
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f7ff fd3d 	bl	800106e <bme280_get_regs>
 80015f4:	4603      	mov	r3, r0
 80015f6:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11f      	bne.n	8001640 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800160a:	f107 0315 	add.w	r3, r7, #21
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f88e 	bl	8001732 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001620:	f107 0315 	add.w	r3, r7, #21
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f8a0 	bl	800176c <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800162c:	f107 0115 	add.w	r1, r7, #21
 8001630:	f107 0016 	add.w	r0, r7, #22
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f7ff fd49 	bl	80010ce <bme280_set_regs>
 800163c:	4603      	mov	r3, r0
 800163e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800165a:	23f5      	movs	r3, #245	@ 0xf5
 800165c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800165e:	7db8      	ldrb	r0, [r7, #22]
 8001660:	f107 0115 	add.w	r1, r7, #21
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f7ff fd01 	bl	800106e <bme280_get_regs>
 800166c:	4603      	mov	r3, r0
 800166e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11f      	bne.n	80016b8 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001682:	f107 0315 	add.w	r3, r7, #21
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f81b 	bl	80016c4 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001698:	f107 0315 	add.w	r3, r7, #21
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f82d 	bl	80016fe <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016a4:	f107 0115 	add.w	r1, r7, #21
 80016a8:	f107 0016 	add.w	r0, r7, #22
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f7ff fd0d 	bl	80010ce <bme280_set_regs>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80016b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	f023 031c 	bic.w	r3, r3, #28
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	78db      	ldrb	r3, [r3, #3]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	f003 031c 	and.w	r3, r3, #28
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	701a      	strb	r2, [r3, #0]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	b25a      	sxtb	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	791b      	ldrb	r3, [r3, #4]
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	b25b      	sxtb	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b25b      	sxtb	r3, r3
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25b      	sxtb	r3, r3
 8001742:	f023 031c 	bic.w	r3, r3, #28
 8001746:	b25a      	sxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	b25b      	sxtb	r3, r3
 8001750:	f003 031c 	and.w	r3, r3, #28
 8001754:	b25b      	sxtb	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b25b      	sxtb	r3, r3
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	b25a      	sxtb	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	785b      	ldrb	r3, [r3, #1]
 8001786:	015b      	lsls	r3, r3, #5
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4313      	orrs	r3, r2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	b2da      	uxtb	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	701a      	strb	r2, [r3, #0]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3302      	adds	r3, #2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	109b      	asrs	r3, r3, #2
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3302      	adds	r3, #2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3303      	adds	r3, #3
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	109b      	asrs	r3, r3, #2
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3303      	adds	r3, #3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	711a      	strb	r2, [r3, #4]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001814:	23f4      	movs	r3, #244	@ 0xf4
 8001816:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001818:	7bb8      	ldrb	r0, [r7, #14]
 800181a:	f107 010d 	add.w	r1, r7, #13
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	f7ff fc24 	bl	800106e <bme280_get_regs>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d117      	bne.n	8001862 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001832:	7b7b      	ldrb	r3, [r7, #13]
 8001834:	b25b      	sxtb	r3, r3
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	b25a      	sxtb	r2, r3
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	b25b      	sxtb	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800184e:	f107 010d 	add.w	r1, r7, #13
 8001852:	f107 000e 	add.w	r0, r7, #14
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	f7ff fc38 	bl	80010ce <bme280_set_regs>
 800185e:	4603      	mov	r3, r0
 8001860:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001876:	f107 0110 	add.w	r1, r7, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2204      	movs	r2, #4
 800187e:	20f2      	movs	r0, #242	@ 0xf2
 8001880:	f7ff fbf5 	bl	800106e <bme280_get_regs>
 8001884:	4603      	mov	r3, r0
 8001886:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d118      	bne.n	80018c2 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff80 	bl	80017a0 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fd39 	bl	8001318 <bme280_soft_reset>
 80018a6:	4603      	mov	r3, r0
 80018a8:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80018aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f808 	bl	80018ce <reload_device_settings>
 80018be:	4603      	mov	r3, r0
 80018c0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80018c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	201f      	movs	r0, #31
 80018de:	f7ff fe18 	bl	8001512 <set_osr_settings>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	201f      	movs	r0, #31
 80018f4:	f7ff feaa 	bl	800164c <set_filter_standby_settings>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80018fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <compensate_temperature+0xc0>)
 8001914:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001916:	f242 1334 	movw	r3, #8500	@ 0x2134
 800191a:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	8812      	ldrh	r2, [r2, #0]
 8001926:	0052      	lsls	r2, r2, #1
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001932:	461a      	mov	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	da01      	bge.n	8001942 <compensate_temperature+0x3a>
 800193e:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001942:	12db      	asrs	r3, r3, #11
 8001944:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	8812      	ldrh	r2, [r2, #0]
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	fb03 f303 	mul.w	r3, r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	da01      	bge.n	8001962 <compensate_temperature+0x5a>
 800195e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001962:	131b      	asrs	r3, r3, #12
 8001964:	461a      	mov	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	da02      	bge.n	800197a <compensate_temperature+0x72>
 8001974:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001978:	333f      	adds	r3, #63	@ 0x3f
 800197a:	139b      	asrs	r3, r3, #14
 800197c:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	441a      	add	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	3380      	adds	r3, #128	@ 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	da00      	bge.n	800199a <compensate_temperature+0x92>
 8001998:	33ff      	adds	r3, #255	@ 0xff
 800199a:	121b      	asrs	r3, r3, #8
 800199c:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	da02      	bge.n	80019ac <compensate_temperature+0xa4>
		temperature = temperature_min;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e005      	b.n	80019b8 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dd01      	ble.n	80019b8 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	61fb      	str	r3, [r7, #28]

	return temperature;
 80019b8:	69fb      	ldr	r3, [r7, #28]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	fffff060 	.word	0xfffff060

080019cc <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80019cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d0:	b0ea      	sub	sp, #424	@ 0x1a8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 80019d8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 80019dc:	4bbf      	ldr	r3, [pc, #764]	@ (8001cdc <compensate_pressure+0x310>)
 80019de:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 80019e2:	4bbf      	ldr	r3, [pc, #764]	@ (8001ce0 <compensate_pressure+0x314>)
 80019e4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80019e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	17da      	asrs	r2, r3, #31
 80019f0:	4698      	mov	r8, r3
 80019f2:	4691      	mov	r9, r2
 80019f4:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 80019f8:	f149 3bff 	adc.w	fp, r9, #4294967295
 80019fc:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001a00:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a04:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a08:	fb03 f102 	mul.w	r1, r3, r2
 8001a0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a10:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	18ca      	adds	r2, r1, r3
 8001a1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a1e:	fba3 4503 	umull	r4, r5, r3, r3
 8001a22:	1953      	adds	r3, r2, r5
 8001a24:	461d      	mov	r5, r3
 8001a26:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a2a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	17da      	asrs	r2, r3, #31
 8001a32:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a36:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001a3a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001a3e:	4603      	mov	r3, r0
 8001a40:	fb03 f205 	mul.w	r2, r3, r5
 8001a44:	460b      	mov	r3, r1
 8001a46:	fb04 f303 	mul.w	r3, r4, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	fba4 1202 	umull	r1, r2, r4, r2
 8001a52:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001a56:	460a      	mov	r2, r1
 8001a58:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001a5c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a60:	4413      	add	r3, r2
 8001a62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001a66:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001a6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 8001a6e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001a72:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a76:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	17da      	asrs	r2, r3, #31
 8001a7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001a82:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a86:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a8a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001a8e:	462a      	mov	r2, r5
 8001a90:	fb02 f203 	mul.w	r2, r2, r3
 8001a94:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001a98:	4621      	mov	r1, r4
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	441a      	add	r2, r3
 8001aa0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	fba3 1301 	umull	r1, r3, r3, r1
 8001aaa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001aae:	460b      	mov	r3, r1
 8001ab0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001ab4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001ab8:	18d3      	adds	r3, r2, r3
 8001aba:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001abe:	f04f 0000 	mov.w	r0, #0
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001aca:	462b      	mov	r3, r5
 8001acc:	0459      	lsls	r1, r3, #17
 8001ace:	4623      	mov	r3, r4
 8001ad0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	0458      	lsls	r0, r3, #17
 8001ad8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001adc:	1814      	adds	r4, r2, r0
 8001ade:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001ae2:	414b      	adcs	r3, r1
 8001ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001ae8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001aec:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001af0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001af4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	17da      	asrs	r2, r3, #31
 8001afc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001b00:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001b04:	f04f 0000 	mov.w	r0, #0
 8001b08:	f04f 0100 	mov.w	r1, #0
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b10:	00d9      	lsls	r1, r3, #3
 8001b12:	2000      	movs	r0, #0
 8001b14:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001b18:	1814      	adds	r4, r2, r0
 8001b1a:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001b1e:	414b      	adcs	r3, r1
 8001b20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001b24:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001b28:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001b2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b30:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b34:	fb03 f102 	mul.w	r1, r3, r2
 8001b38:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	18ca      	adds	r2, r1, r3
 8001b46:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b4a:	fba3 1303 	umull	r1, r3, r3, r3
 8001b4e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001b52:	460b      	mov	r3, r1
 8001b54:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001b58:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b5c:	18d3      	adds	r3, r2, r3
 8001b5e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001b62:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	17da      	asrs	r2, r3, #31
 8001b6e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001b72:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001b76:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001b80:	4642      	mov	r2, r8
 8001b82:	fb02 f203 	mul.w	r2, r2, r3
 8001b86:	464b      	mov	r3, r9
 8001b88:	4621      	mov	r1, r4
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	4622      	mov	r2, r4
 8001b92:	4641      	mov	r1, r8
 8001b94:	fba2 1201 	umull	r1, r2, r2, r1
 8001b98:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001ba2:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001bac:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da09      	bge.n	8001bc8 <compensate_pressure+0x1fc>
 8001bb4:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001bb8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001bbc:	f143 0300 	adc.w	r3, r3, #0
 8001bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001bc4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0a10      	lsrs	r0, r2, #8
 8001bd2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001bd6:	1219      	asrs	r1, r3, #8
 8001bd8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001be8:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001bec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001bf0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001bf4:	464a      	mov	r2, r9
 8001bf6:	fb02 f203 	mul.w	r2, r2, r3
 8001bfa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001bfe:	4644      	mov	r4, r8
 8001c00:	fb04 f303 	mul.w	r3, r4, r3
 8001c04:	441a      	add	r2, r3
 8001c06:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c0a:	4644      	mov	r4, r8
 8001c0c:	fba3 4304 	umull	r4, r3, r3, r4
 8001c10:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c14:	4623      	mov	r3, r4
 8001c16:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c1a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001c1e:	18d3      	adds	r3, r2, r3
 8001c20:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001c30:	464c      	mov	r4, r9
 8001c32:	0323      	lsls	r3, r4, #12
 8001c34:	4644      	mov	r4, r8
 8001c36:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c3a:	4644      	mov	r4, r8
 8001c3c:	0322      	lsls	r2, r4, #12
 8001c3e:	1884      	adds	r4, r0, r2
 8001c40:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001c44:	eb41 0303 	adc.w	r3, r1, r3
 8001c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c4c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001c50:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c5c:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001c60:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001c64:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001c68:	1884      	adds	r4, r0, r2
 8001c6a:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001c6e:	eb41 0303 	adc.w	r3, r1, r3
 8001c72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001c76:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c7a:	88db      	ldrh	r3, [r3, #6]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001c84:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c88:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001c8c:	462b      	mov	r3, r5
 8001c8e:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001c92:	4642      	mov	r2, r8
 8001c94:	fb02 f203 	mul.w	r2, r2, r3
 8001c98:	464b      	mov	r3, r9
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	4641      	mov	r1, r8
 8001ca6:	fba2 1201 	umull	r1, r2, r2, r1
 8001caa:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001cae:	460a      	mov	r2, r1
 8001cb0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001cb4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001cb8:	4413      	add	r3, r2
 8001cba:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001cbe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da0e      	bge.n	8001ce4 <compensate_pressure+0x318>
 8001cc6:	1e51      	subs	r1, r2, #1
 8001cc8:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001ccc:	f143 0301 	adc.w	r3, r3, #1
 8001cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001cd8:	e004      	b.n	8001ce4 <compensate_pressure+0x318>
 8001cda:	bf00      	nop
 8001cdc:	002dc6c0 	.word	0x002dc6c0
 8001ce0:	00a7d8c0 	.word	0x00a7d8c0
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	1058      	asrs	r0, r3, #1
 8001cee:	17d9      	asrs	r1, r3, #31
 8001cf0:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001cf4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f000 81fc 	beq.w	80020f6 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001cfe:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d0e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d12:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001d16:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001d1a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	07d9      	lsls	r1, r3, #31
 8001d28:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001d2c:	07d0      	lsls	r0, r2, #31
 8001d2e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001d32:	1a84      	subs	r4, r0, r2
 8001d34:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001d38:	eb61 0303 	sbc.w	r3, r1, r3
 8001d3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d40:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d44:	4622      	mov	r2, r4
 8001d46:	462b      	mov	r3, r5
 8001d48:	1891      	adds	r1, r2, r2
 8001d4a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001d4c:	415b      	adcs	r3, r3
 8001d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d50:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001d54:	4621      	mov	r1, r4
 8001d56:	1851      	adds	r1, r2, r1
 8001d58:	6739      	str	r1, [r7, #112]	@ 0x70
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	414b      	adcs	r3, r1
 8001d5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	018b      	lsls	r3, r1, #6
 8001d70:	4641      	mov	r1, r8
 8001d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d76:	4641      	mov	r1, r8
 8001d78:	018a      	lsls	r2, r1, #6
 8001d7a:	4641      	mov	r1, r8
 8001d7c:	1889      	adds	r1, r1, r2
 8001d7e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001d80:	4649      	mov	r1, r9
 8001d82:	eb43 0101 	adc.w	r1, r3, r1
 8001d86:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001d94:	4649      	mov	r1, r9
 8001d96:	008b      	lsls	r3, r1, #2
 8001d98:	4641      	mov	r1, r8
 8001d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d9e:	4641      	mov	r1, r8
 8001da0:	008a      	lsls	r2, r1, #2
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	4622      	mov	r2, r4
 8001daa:	189b      	adds	r3, r3, r2
 8001dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dae:	460b      	mov	r3, r1
 8001db0:	462a      	mov	r2, r5
 8001db2:	eb42 0303 	adc.w	r3, r2, r3
 8001db6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	008b      	lsls	r3, r1, #2
 8001dc8:	4641      	mov	r1, r8
 8001dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dce:	4641      	mov	r1, r8
 8001dd0:	008a      	lsls	r2, r1, #2
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4622      	mov	r2, r4
 8001dda:	189b      	adds	r3, r3, r2
 8001ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001de0:	462b      	mov	r3, r5
 8001de2:	460a      	mov	r2, r1
 8001de4:	eb42 0303 	adc.w	r3, r2, r3
 8001de8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dec:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001df4:	f7fe ff28 	bl	8000c48 <__aeabi_ldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e00:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001e04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	17da      	asrs	r2, r3, #31
 8001e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e10:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e14:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	da08      	bge.n	8001e2e <compensate_pressure+0x462>
 8001e1c:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001e20:	1851      	adds	r1, r2, r1
 8001e22:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e24:	f143 0300 	adc.w	r3, r3, #0
 8001e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e2e:	f04f 0000 	mov.w	r0, #0
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	0b50      	lsrs	r0, r2, #13
 8001e38:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e3c:	1359      	asrs	r1, r3, #13
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e46:	4629      	mov	r1, r5
 8001e48:	fb02 f001 	mul.w	r0, r2, r1
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	fb01 f103 	mul.w	r1, r1, r3
 8001e52:	4401      	add	r1, r0
 8001e54:	4620      	mov	r0, r4
 8001e56:	fba0 2302 	umull	r2, r3, r0, r2
 8001e5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001e5e:	4613      	mov	r3, r2
 8001e60:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001e64:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e68:	18cb      	adds	r3, r1, r3
 8001e6a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001e6e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da08      	bge.n	8001e88 <compensate_pressure+0x4bc>
 8001e76:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001e7a:	1851      	adds	r1, r2, r1
 8001e7c:	6539      	str	r1, [r7, #80]	@ 0x50
 8001e7e:	f143 0300 	adc.w	r3, r3, #0
 8001e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	0b50      	lsrs	r0, r2, #13
 8001e92:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e96:	1359      	asrs	r1, r3, #13
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	fb02 f001 	mul.w	r0, r2, r1
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	fb01 f103 	mul.w	r1, r1, r3
 8001eac:	4401      	add	r1, r0
 8001eae:	4620      	mov	r0, r4
 8001eb0:	fba0 2302 	umull	r2, r3, r0, r2
 8001eb4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001eb8:	4613      	mov	r3, r2
 8001eba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001ebe:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001ec2:	18cb      	adds	r3, r1, r3
 8001ec4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001ec8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da08      	bge.n	8001ee2 <compensate_pressure+0x516>
 8001ed0:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001ed4:	1851      	adds	r1, r2, r1
 8001ed6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ed8:	f143 0300 	adc.w	r3, r3, #0
 8001edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ede:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ee2:	f04f 0000 	mov.w	r0, #0
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	0e50      	lsrs	r0, r2, #25
 8001eec:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001ef0:	1659      	asrs	r1, r3, #25
 8001ef2:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001ef6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001efa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	17da      	asrs	r2, r3, #31
 8001f02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f06:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001f0a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001f0e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001f12:	462a      	mov	r2, r5
 8001f14:	fb02 f203 	mul.w	r2, r2, r3
 8001f18:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	441a      	add	r2, r3
 8001f24:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fba3 1301 	umull	r1, r3, r3, r1
 8001f2e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001f32:	460b      	mov	r3, r1
 8001f34:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001f38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001f42:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da07      	bge.n	8001f5a <compensate_pressure+0x58e>
 8001f4a:	4971      	ldr	r1, [pc, #452]	@ (8002110 <compensate_pressure+0x744>)
 8001f4c:	1851      	adds	r1, r2, r1
 8001f4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f50:	f143 0300 	adc.w	r3, r3, #0
 8001f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f5a:	f04f 0000 	mov.w	r0, #0
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	0cd0      	lsrs	r0, r2, #19
 8001f64:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001f68:	14d9      	asrs	r1, r3, #19
 8001f6a:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001f6e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001f72:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001f76:	1884      	adds	r4, r0, r2
 8001f78:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001f7c:	eb41 0303 	adc.w	r3, r1, r3
 8001f80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f84:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001f88:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	1889      	adds	r1, r1, r2
 8001f90:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8001f94:	4629      	mov	r1, r5
 8001f96:	eb43 0101 	adc.w	r1, r3, r1
 8001f9a:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001f9e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da07      	bge.n	8001fb6 <compensate_pressure+0x5ea>
 8001fa6:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001faa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fac:	f143 0300 	adc.w	r3, r3, #0
 8001fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fb2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001fb6:	f04f 0000 	mov.w	r0, #0
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	0a10      	lsrs	r0, r2, #8
 8001fc0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fc4:	1219      	asrs	r1, r3, #8
 8001fc6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001fca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	17da      	asrs	r2, r3, #31
 8001fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001fd6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001fe6:	464c      	mov	r4, r9
 8001fe8:	0123      	lsls	r3, r4, #4
 8001fea:	4644      	mov	r4, r8
 8001fec:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ff0:	4644      	mov	r4, r8
 8001ff2:	0122      	lsls	r2, r4, #4
 8001ff4:	1884      	adds	r4, r0, r2
 8001ff6:	633c      	str	r4, [r7, #48]	@ 0x30
 8001ff8:	eb41 0303 	adc.w	r3, r1, r3
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ffe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002002:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8002006:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 800200a:	0fd9      	lsrs	r1, r3, #31
 800200c:	2000      	movs	r0, #0
 800200e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002010:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002012:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002016:	4621      	mov	r1, r4
 8002018:	1889      	adds	r1, r1, r2
 800201a:	6239      	str	r1, [r7, #32]
 800201c:	4629      	mov	r1, r5
 800201e:	eb43 0101 	adc.w	r1, r3, r1
 8002022:	6279      	str	r1, [r7, #36]	@ 0x24
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002030:	4621      	mov	r1, r4
 8002032:	084a      	lsrs	r2, r1, #1
 8002034:	4629      	mov	r1, r5
 8002036:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800203a:	4629      	mov	r1, r5
 800203c:	104b      	asrs	r3, r1, #1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	1894      	adds	r4, r2, r2
 8002048:	61bc      	str	r4, [r7, #24]
 800204a:	415b      	adcs	r3, r3
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002052:	1814      	adds	r4, r2, r0
 8002054:	613c      	str	r4, [r7, #16]
 8002056:	414b      	adcs	r3, r1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002066:	464c      	mov	r4, r9
 8002068:	0163      	lsls	r3, r4, #5
 800206a:	4644      	mov	r4, r8
 800206c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002070:	4644      	mov	r4, r8
 8002072:	0162      	lsls	r2, r4, #5
 8002074:	4644      	mov	r4, r8
 8002076:	18a4      	adds	r4, r4, r2
 8002078:	60bc      	str	r4, [r7, #8]
 800207a:	464c      	mov	r4, r9
 800207c:	eb43 0404 	adc.w	r4, r3, r4
 8002080:	60fc      	str	r4, [r7, #12]
 8002082:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002086:	4623      	mov	r3, r4
 8002088:	181b      	adds	r3, r3, r0
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800208e:	462b      	mov	r3, r5
 8002090:	eb41 0303 	adc.w	r3, r1, r3
 8002094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002098:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800209c:	2b00      	cmp	r3, #0
 800209e:	da07      	bge.n	80020b0 <compensate_pressure+0x6e4>
 80020a0:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	f143 0300 	adc.w	r3, r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	09d0      	lsrs	r0, r2, #7
 80020ba:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80020be:	11d9      	asrs	r1, r3, #7
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4613      	mov	r3, r2
 80020c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 80020ca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80020ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d204      	bcs.n	80020e0 <compensate_pressure+0x714>
			pressure = pressure_min;
 80020d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020da:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020de:	e00e      	b.n	80020fe <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80020e0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80020e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d908      	bls.n	80020fe <compensate_pressure+0x732>
			pressure = pressure_max;
 80020ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80020f0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020f4:	e003      	b.n	80020fe <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 80020f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020fa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 80020fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 8002102:	4618      	mov	r0, r3
 8002104:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8002108:	46bd      	mov	sp, r7
 800210a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800210e:	bf00      	nop
 8002110:	0007ffff 	.word	0x0007ffff

08002114 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002114:	b480      	push	{r7}
 8002116:	b08b      	sub	sp, #44	@ 0x2c
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 800211e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8002122:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800212c:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	039b      	lsls	r3, r3, #14
 8002134:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800213c:	051b      	lsls	r3, r3, #20
 800213e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002146:	461a      	mov	r2, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	1ad2      	subs	r2, r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800215e:	2b00      	cmp	r3, #0
 8002160:	da02      	bge.n	8002168 <compensate_humidity+0x54>
 8002162:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002166:	337f      	adds	r3, #127	@ 0x7f
 8002168:	13db      	asrs	r3, r3, #15
 800216a:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8002172:	461a      	mov	r2, r3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	da01      	bge.n	8002182 <compensate_humidity+0x6e>
 800217e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002182:	129b      	asrs	r3, r3, #10
 8002184:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	7f1b      	ldrb	r3, [r3, #28]
 800218a:	461a      	mov	r2, r3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	da01      	bge.n	800219a <compensate_humidity+0x86>
 8002196:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800219a:	12db      	asrs	r3, r3, #11
 800219c:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	da01      	bge.n	80021b2 <compensate_humidity+0x9e>
 80021ae:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80021b2:	129b      	asrs	r3, r3, #10
 80021b4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80021b8:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80021c0:	461a      	mov	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da02      	bge.n	80021d6 <compensate_humidity+0xc2>
 80021d0:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80021d4:	333f      	adds	r3, #63	@ 0x3f
 80021d6:	139b      	asrs	r3, r3, #14
 80021d8:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da02      	bge.n	80021f0 <compensate_humidity+0xdc>
 80021ea:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80021ee:	337f      	adds	r3, #127	@ 0x7f
 80021f0:	13db      	asrs	r3, r3, #15
 80021f2:	461a      	mov	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da02      	bge.n	8002200 <compensate_humidity+0xec>
 80021fa:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80021fe:	337f      	adds	r3, #127	@ 0x7f
 8002200:	13db      	asrs	r3, r3, #15
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	da00      	bge.n	800220c <compensate_humidity+0xf8>
 800220a:	337f      	adds	r3, #127	@ 0x7f
 800220c:	11db      	asrs	r3, r3, #7
 800220e:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
 8002214:	461a      	mov	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	da00      	bge.n	8002222 <compensate_humidity+0x10e>
 8002220:	330f      	adds	r3, #15
 8002222:	111b      	asrs	r3, r3, #4
 8002224:	425b      	negs	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002234:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800223c:	bfa8      	it	ge
 800223e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8002242:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da01      	bge.n	800224e <compensate_humidity+0x13a>
 800224a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800224e:	131b      	asrs	r3, r3, #12
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 8002252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	429a      	cmp	r2, r3
 8002258:	d901      	bls.n	800225e <compensate_humidity+0x14a>
		humidity = humidity_max;
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002260:	4618      	mov	r0, r3
 8002262:	372c      	adds	r7, #44	@ 0x2c
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	@ 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002274:	2388      	movs	r3, #136	@ 0x88
 8002276:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002290:	f107 010c 	add.w	r1, r7, #12
 8002294:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	221a      	movs	r2, #26
 800229c:	f7fe fee7 	bl	800106e <bme280_get_regs>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 80022a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11d      	bne.n	80022ea <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f84a 	bl	800234e <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80022ba:	23e1      	movs	r3, #225	@ 0xe1
 80022bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80022c0:	f107 010c 	add.w	r1, r7, #12
 80022c4:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2207      	movs	r2, #7
 80022cc:	f7fe fecf 	bl	800106e <bme280_get_regs>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80022d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f8e2 	bl	80024ae <parse_humidity_calib_data>
		}
	}

	return rslt;
 80022ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3728      	adds	r7, #40	@ 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002304:	2301      	movs	r3, #1
 8002306:	75fb      	strb	r3, [r7, #23]
 8002308:	e016      	b.n	8002338 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	441a      	add	r2, r3
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	440b      	add	r3, r1
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	441a      	add	r2, r3
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4619      	mov	r1, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	440b      	add	r3, r1
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	3301      	adds	r3, #1
 8002336:	75fb      	strb	r3, [r7, #23]
 8002338:	7dfa      	ldrb	r2, [r7, #23]
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3e4      	bcc.n	800230a <interleave_reg_addr+0x14>
	}
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3310      	adds	r3, #16
 800235c:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3301      	adds	r3, #1
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21b      	sxth	r3, r3
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3303      	adds	r3, #3
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	b21a      	sxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3305      	adds	r3, #5
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	b21a      	sxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3307      	adds	r3, #7
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3306      	adds	r3, #6
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3309      	adds	r3, #9
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3308      	adds	r3, #8
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b21a      	sxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	330b      	adds	r3, #11
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	330a      	adds	r3, #10
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	330d      	adds	r3, #13
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b21a      	sxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	330c      	adds	r3, #12
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b21b      	sxth	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b21a      	sxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	330f      	adds	r3, #15
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	b21a      	sxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	330e      	adds	r3, #14
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b21b      	sxth	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b21a      	sxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3311      	adds	r3, #17
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b21a      	sxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3310      	adds	r3, #16
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b21b      	sxth	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b21a      	sxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3313      	adds	r3, #19
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21a      	sxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3312      	adds	r3, #18
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21a      	sxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3315      	adds	r3, #21
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21a      	sxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3314      	adds	r3, #20
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b21a      	sxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3317      	adds	r3, #23
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	b21a      	sxth	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3316      	adds	r3, #22
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b21b      	sxth	r3, r3
 8002490:	4313      	orrs	r3, r2
 8002492:	b21a      	sxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3319      	adds	r3, #25
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	761a      	strb	r2, [r3, #24]

}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b087      	sub	sp, #28
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3310      	adds	r3, #16
 80024bc:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3301      	adds	r3, #1
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3302      	adds	r3, #2
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3303      	adds	r3, #3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80024fe:	8a7a      	ldrh	r2, [r7, #18]
 8002500:	8a3b      	ldrh	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	b21a      	sxth	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3305      	adds	r3, #5
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b25b      	sxtb	r3, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	b29b      	uxth	r3, r3
 8002518:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	b2db      	uxtb	r3, r3
 8002524:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002526:	89fa      	ldrh	r2, [r7, #14]
 8002528:	89bb      	ldrh	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	b21a      	sxth	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3306      	adds	r3, #6
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25a      	sxtb	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	71fb      	strb	r3, [r7, #7]
 8002558:	4613      	mov	r3, r2
 800255a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002560:	79fa      	ldrb	r2, [r7, #7]
 8002562:	79bb      	ldrb	r3, [r7, #6]
 8002564:	4013      	ands	r3, r2
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <null_ptr_check+0x26>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <null_ptr_check+0x26>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <null_ptr_check+0x26>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80025aa:	23ff      	movs	r3, #255	@ 0xff
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e001      	b.n	80025b4 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80025b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80025d0:	230a      	movs	r3, #10
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	1cfb      	adds	r3, r7, #3
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2301      	movs	r3, #1
 80025de:	2200      	movs	r2, #0
 80025e0:	2178      	movs	r1, #120	@ 0x78
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f002 f902 	bl	80047ec <HAL_I2C_Mem_Write>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80025fc:	2064      	movs	r0, #100	@ 0x64
 80025fe:	f001 f9ab 	bl	8003958 <HAL_Delay>
    int status = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8002606:	21ae      	movs	r1, #174	@ 0xae
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ffdb 	bl	80025c4 <ssd1306_WriteCommand>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8002618:	2120      	movs	r1, #32
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffd2 	bl	80025c4 <ssd1306_WriteCommand>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800262a:	2110      	movs	r1, #16
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ffc9 	bl	80025c4 <ssd1306_WriteCommand>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800263c:	21b0      	movs	r1, #176	@ 0xb0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffc0 	bl	80025c4 <ssd1306_WriteCommand>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800264e:	21c8      	movs	r1, #200	@ 0xc8
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ffb7 	bl	80025c4 <ssd1306_WriteCommand>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8002660:	2100      	movs	r1, #0
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffae 	bl	80025c4 <ssd1306_WriteCommand>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8002672:	2110      	movs	r1, #16
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffa5 	bl	80025c4 <ssd1306_WriteCommand>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8002684:	2140      	movs	r1, #64	@ 0x40
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff9c 	bl	80025c4 <ssd1306_WriteCommand>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8002696:	2181      	movs	r1, #129	@ 0x81
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff93 	bl	80025c4 <ssd1306_WriteCommand>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4413      	add	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80026a8:	21ff      	movs	r1, #255	@ 0xff
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff8a 	bl	80025c4 <ssd1306_WriteCommand>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80026ba:	21a1      	movs	r1, #161	@ 0xa1
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff81 	bl	80025c4 <ssd1306_WriteCommand>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80026cc:	21a6      	movs	r1, #166	@ 0xa6
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff78 	bl	80025c4 <ssd1306_WriteCommand>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80026de:	21a8      	movs	r1, #168	@ 0xa8
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff6f 	bl	80025c4 <ssd1306_WriteCommand>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80026f0:	213f      	movs	r1, #63	@ 0x3f
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff66 	bl	80025c4 <ssd1306_WriteCommand>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002702:	21a4      	movs	r1, #164	@ 0xa4
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff5d 	bl	80025c4 <ssd1306_WriteCommand>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8002714:	21d3      	movs	r1, #211	@ 0xd3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ff54 	bl	80025c4 <ssd1306_WriteCommand>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8002726:	2100      	movs	r1, #0
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff4b 	bl	80025c4 <ssd1306_WriteCommand>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8002738:	21d5      	movs	r1, #213	@ 0xd5
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff42 	bl	80025c4 <ssd1306_WriteCommand>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800274a:	21f0      	movs	r1, #240	@ 0xf0
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff39 	bl	80025c4 <ssd1306_WriteCommand>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 800275c:	21d9      	movs	r1, #217	@ 0xd9
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff30 	bl	80025c4 <ssd1306_WriteCommand>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 800276e:	2122      	movs	r1, #34	@ 0x22
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff27 	bl	80025c4 <ssd1306_WriteCommand>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8002780:	21da      	movs	r1, #218	@ 0xda
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ff1e 	bl	80025c4 <ssd1306_WriteCommand>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8002792:	2112      	movs	r1, #18
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff15 	bl	80025c4 <ssd1306_WriteCommand>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80027a4:	21db      	movs	r1, #219	@ 0xdb
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff0c 	bl	80025c4 <ssd1306_WriteCommand>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80027b6:	2120      	movs	r1, #32
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff03 	bl	80025c4 <ssd1306_WriteCommand>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80027c8:	218d      	movs	r1, #141	@ 0x8d
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fefa 	bl	80025c4 <ssd1306_WriteCommand>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80027da:	2114      	movs	r1, #20
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fef1 	bl	80025c4 <ssd1306_WriteCommand>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4413      	add	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 80027ec:	21af      	movs	r1, #175	@ 0xaf
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fee8 	bl	80025c4 <ssd1306_WriteCommand>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <ssd1306_Init+0x214>
        return 1;
 8002804:	2301      	movs	r3, #1
 8002806:	e00f      	b.n	8002828 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002808:	2000      	movs	r0, #0
 800280a:	f000 f813 	bl	8002834 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f834 	bl	800287c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <ssd1306_Init+0x23c>)
 8002816:	2200      	movs	r2, #0
 8002818:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <ssd1306_Init+0x23c>)
 800281c:	2200      	movs	r2, #0
 800281e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <ssd1306_Init+0x23c>)
 8002822:	2201      	movs	r2, #1
 8002824:	715a      	strb	r2, [r3, #5]

    return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200005fc 	.word	0x200005fc

08002834 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e00d      	b.n	8002860 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <ssd1306_Fill+0x1a>
 800284a:	2100      	movs	r1, #0
 800284c:	e000      	b.n	8002850 <ssd1306_Fill+0x1c>
 800284e:	21ff      	movs	r1, #255	@ 0xff
 8002850:	4a09      	ldr	r2, [pc, #36]	@ (8002878 <ssd1306_Fill+0x44>)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4413      	add	r3, r2
 8002856:	460a      	mov	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002866:	d3ed      	bcc.n	8002844 <ssd1306_Fill+0x10>
    }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	200001fc 	.word	0x200001fc

0800287c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af04      	add	r7, sp, #16
 8002882:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e020      	b.n	80028cc <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	3b50      	subs	r3, #80	@ 0x50
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fe96 	bl	80025c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8002898:	2100      	movs	r1, #0
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fe92 	bl	80025c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80028a0:	2110      	movs	r1, #16
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fe8e 	bl	80025c4 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	01db      	lsls	r3, r3, #7
 80028ac:	4a0b      	ldr	r2, [pc, #44]	@ (80028dc <ssd1306_UpdateScreen+0x60>)
 80028ae:	4413      	add	r3, r2
 80028b0:	2264      	movs	r2, #100	@ 0x64
 80028b2:	9202      	str	r2, [sp, #8]
 80028b4:	2280      	movs	r2, #128	@ 0x80
 80028b6:	9201      	str	r2, [sp, #4]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2240      	movs	r2, #64	@ 0x40
 80028be:	2178      	movs	r1, #120	@ 0x78
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f001 ff93 	bl	80047ec <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	3301      	adds	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2b07      	cmp	r3, #7
 80028d0:	d9db      	bls.n	800288a <ssd1306_UpdateScreen+0xe>
    }
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200001fc 	.word	0x200001fc

080028e0 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
 80028ea:	460b      	mov	r3, r1
 80028ec:	71bb      	strb	r3, [r7, #6]
 80028ee:	4613      	mov	r3, r2
 80028f0:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db48      	blt.n	800298c <ssd1306_DrawPixel+0xac>
 80028fa:	79bb      	ldrb	r3, [r7, #6]
 80028fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80028fe:	d845      	bhi.n	800298c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8002900:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <ssd1306_DrawPixel+0xb8>)
 8002902:	791b      	ldrb	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002908:	797b      	ldrb	r3, [r7, #5]
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8002916:	797b      	ldrb	r3, [r7, #5]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d11a      	bne.n	8002952 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	79bb      	ldrb	r3, [r7, #6]
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	b2d8      	uxtb	r0, r3
 8002924:	4603      	mov	r3, r0
 8002926:	01db      	lsls	r3, r3, #7
 8002928:	4413      	add	r3, r2
 800292a:	4a1c      	ldr	r2, [pc, #112]	@ (800299c <ssd1306_DrawPixel+0xbc>)
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	b25a      	sxtb	r2, r3
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	b25b      	sxtb	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b259      	sxtb	r1, r3
 8002942:	79fa      	ldrb	r2, [r7, #7]
 8002944:	4603      	mov	r3, r0
 8002946:	01db      	lsls	r3, r3, #7
 8002948:	4413      	add	r3, r2
 800294a:	b2c9      	uxtb	r1, r1
 800294c:	4a13      	ldr	r2, [pc, #76]	@ (800299c <ssd1306_DrawPixel+0xbc>)
 800294e:	54d1      	strb	r1, [r2, r3]
 8002950:	e01d      	b.n	800298e <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002952:	79fa      	ldrb	r2, [r7, #7]
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	b2d8      	uxtb	r0, r3
 800295a:	4603      	mov	r3, r0
 800295c:	01db      	lsls	r3, r3, #7
 800295e:	4413      	add	r3, r2
 8002960:	4a0e      	ldr	r2, [pc, #56]	@ (800299c <ssd1306_DrawPixel+0xbc>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	b25a      	sxtb	r2, r3
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	b25b      	sxtb	r3, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	b25b      	sxtb	r3, r3
 8002978:	4013      	ands	r3, r2
 800297a:	b259      	sxtb	r1, r3
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	4603      	mov	r3, r0
 8002980:	01db      	lsls	r3, r3, #7
 8002982:	4413      	add	r3, r2
 8002984:	b2c9      	uxtb	r1, r1
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <ssd1306_DrawPixel+0xbc>)
 8002988:	54d1      	strb	r1, [r2, r3]
 800298a:	e000      	b.n	800298e <ssd1306_DrawPixel+0xae>
        return;
 800298c:	bf00      	nop
    }
}
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	200005fc 	.word	0x200005fc
 800299c:	200001fc 	.word	0x200001fc

080029a0 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4604      	mov	r4, r0
 80029a8:	1d38      	adds	r0, r7, #4
 80029aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80029ae:	461a      	mov	r2, r3
 80029b0:	4623      	mov	r3, r4
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	4613      	mov	r3, r2
 80029b6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80029b8:	4b38      	ldr	r3, [pc, #224]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	793b      	ldrb	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80029c4:	dc06      	bgt.n	80029d4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80029c6:	4b35      	ldr	r3, [pc, #212]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 80029c8:	885b      	ldrh	r3, [r3, #2]
 80029ca:	461a      	mov	r2, r3
 80029cc:	797b      	ldrb	r3, [r7, #5]
 80029ce:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80029d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80029d2:	dd01      	ble.n	80029d8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e05c      	b.n	8002a92 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	e04c      	b.n	8002a78 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	3b20      	subs	r3, #32
 80029e4:	7979      	ldrb	r1, [r7, #5]
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	440b      	add	r3, r1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e034      	b.n	8002a68 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d012      	beq.n	8002a34 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002a0e:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	b2d8      	uxtb	r0, r3
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a1e:	885b      	ldrh	r3, [r3, #2]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	7bba      	ldrb	r2, [r7, #14]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7ff ff57 	bl	80028e0 <ssd1306_DrawPixel>
 8002a32:	e016      	b.n	8002a62 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	b2d8      	uxtb	r0, r3
 8002a42:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a44:	885b      	ldrh	r3, [r3, #2]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b2d9      	uxtb	r1, r3
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f7ff ff3f 	bl	80028e0 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	793b      	ldrb	r3, [r7, #4]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d3c5      	bcc.n	80029fe <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	797b      	ldrb	r3, [r7, #5]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d3ad      	bcc.n	80029de <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	793a      	ldrb	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a8e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200005fc 	.word	0x200005fc

08002aa0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	1d38      	adds	r0, r7, #4
 8002aaa:	e880 0006 	stmia.w	r0, {r1, r2}
 8002aae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002ab0:	e012      	b.n	8002ad8 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	7818      	ldrb	r0, [r3, #0]
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	1d3a      	adds	r2, r7, #4
 8002aba:	ca06      	ldmia	r2, {r1, r2}
 8002abc:	f7ff ff70 	bl	80029a0 <ssd1306_WriteChar>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d002      	beq.n	8002ad2 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	e008      	b.n	8002ae4 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e8      	bne.n	8002ab2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	460a      	mov	r2, r1
 8002af6:	71fb      	strb	r3, [r7, #7]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <ssd1306_SetCursor+0x2c>)
 8002b02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002b04:	79bb      	ldrb	r3, [r7, #6]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <ssd1306_SetCursor+0x2c>)
 8002b0a:	805a      	strh	r2, [r3, #2]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	200005fc 	.word	0x200005fc

08002b1c <user_i2c_read>:

struct bme280_dev dev;
struct bme280_data comp_data;
int8_t rslt;

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	603a      	str	r2, [r7, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	71bb      	strb	r3, [r7, #6]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK)
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	1dba      	adds	r2, r7, #6
 8002b3c:	230a      	movs	r3, #10
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2301      	movs	r3, #1
 8002b42:	4811      	ldr	r0, [pc, #68]	@ (8002b88 <user_i2c_read+0x6c>)
 8002b44:	f001 fb22 	bl	800418c <HAL_I2C_Master_Transmit>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <user_i2c_read+0x38>
		return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	e014      	b.n	8002b7e <user_i2c_read+0x62>
	if (HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	b299      	uxth	r1, r3
 8002b62:	88bb      	ldrh	r3, [r7, #4]
 8002b64:	220a      	movs	r2, #10
 8002b66:	9200      	str	r2, [sp, #0]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	4807      	ldr	r0, [pc, #28]	@ (8002b88 <user_i2c_read+0x6c>)
 8002b6c:	f001 fc0c 	bl	8004388 <HAL_I2C_Master_Receive>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <user_i2c_read+0x60>
			!= HAL_OK)
		return -1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e000      	b.n	8002b7e <user_i2c_read+0x62>

	return 0;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000604 	.word	0x20000604

08002b8c <user_delay_ms>:

void user_delay_ms(uint32_t period) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

	HAL_Delay(period);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fedf 	bl	8003958 <HAL_Delay>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	603a      	str	r2, [r7, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	71bb      	strb	r3, [r7, #6]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80bb      	strh	r3, [r7, #4]
	int8_t *buf;
	buf = malloc(len + 1);
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f007 fa52 	bl	800a068 <malloc>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]
	buf[0] = reg_addr;
 8002bc8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, data, len);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	88ba      	ldrh	r2, [r7, #4]
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f008 fa28 	bl	800b02e <memcpy>

	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	b299      	uxth	r1, r3
 8002be6:	88bb      	ldrh	r3, [r7, #4]
 8002be8:	3301      	adds	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	9200      	str	r2, [sp, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4808      	ldr	r0, [pc, #32]	@ (8002c18 <user_i2c_write+0x74>)
 8002bf6:	f001 fac9 	bl	800418c <HAL_I2C_Master_Transmit>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <user_i2c_write+0x62>
	HAL_MAX_DELAY) != HAL_OK)
		return -1;
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
 8002c04:	e003      	b.n	8002c0e <user_i2c_write+0x6a>

	free(buf);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f007 fa36 	bl	800a078 <free>
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000604 	.word	0x20000604

08002c1c <_write>:

// for printf() redirection to USART2
int _write(int file, char *data, int len) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4807      	ldr	r0, [pc, #28]	@ (8002c50 <_write+0x34>)
 8002c34:	f003 faac 	bl	8006190 <HAL_UART_Transmit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	return (status == HAL_OK ? len : 0);
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <_write+0x2a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e000      	b.n	8002c48 <_write+0x2c>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000658 	.word	0x20000658

08002c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c58:	f000 fe3c 	bl	80038d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c5c:	f000 f8d2 	bl	8002e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c60:	f000 f992 	bl	8002f88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c64:	f000 f938 	bl	8002ed8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002c68:	f000 f964 	bl	8002f34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/*----------------------------------------BME280 Setup-------------------------------------------------*/
	/* BME280 Initialization */
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002da0 <main+0x14c>)
 8002c6e:	2276      	movs	r2, #118	@ 0x76
 8002c70:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8002c72:	4b4b      	ldr	r3, [pc, #300]	@ (8002da0 <main+0x14c>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8002c78:	4b49      	ldr	r3, [pc, #292]	@ (8002da0 <main+0x14c>)
 8002c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002da4 <main+0x150>)
 8002c7c:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8002c7e:	4b48      	ldr	r3, [pc, #288]	@ (8002da0 <main+0x14c>)
 8002c80:	4a49      	ldr	r2, [pc, #292]	@ (8002da8 <main+0x154>)
 8002c82:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8002c84:	4b46      	ldr	r3, [pc, #280]	@ (8002da0 <main+0x14c>)
 8002c86:	4a49      	ldr	r2, [pc, #292]	@ (8002dac <main+0x158>)
 8002c88:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev); // Initialize the sensor.
 8002c8a:	4845      	ldr	r0, [pc, #276]	@ (8002da0 <main+0x14c>)
 8002c8c:	f7fe f9a4 	bl	8000fd8 <bme280_init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b46      	ldr	r3, [pc, #280]	@ (8002db0 <main+0x15c>)
 8002c96:	701a      	strb	r2, [r3, #0]
	if (rslt == BME280_OK) {
 8002c98:	4b45      	ldr	r3, [pc, #276]	@ (8002db0 <main+0x15c>)
 8002c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <main+0x56>
	    printf("BME280 Successfully Initialized\r\n");
 8002ca2:	4844      	ldr	r0, [pc, #272]	@ (8002db4 <main+0x160>)
 8002ca4:	f008 f820 	bl	800ace8 <puts>
 8002ca8:	e006      	b.n	8002cb8 <main+0x64>
	} else {
	    printf("Failed to Initialize BME280. Error code: %d\r\n", rslt);
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <main+0x15c>)
 8002cac:	f993 3000 	ldrsb.w	r3, [r3]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4841      	ldr	r0, [pc, #260]	@ (8002db8 <main+0x164>)
 8002cb4:	f007 ffb0 	bl	800ac18 <iprintf>
	}

	/* BME280 Configuration */
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002cb8:	4b39      	ldr	r3, [pc, #228]	@ (8002da0 <main+0x14c>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002cc0:	4b37      	ldr	r3, [pc, #220]	@ (8002da0 <main+0x14c>)
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002cc8:	4b35      	ldr	r3, [pc, #212]	@ (8002da0 <main+0x14c>)
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002cd0:	4b33      	ldr	r3, [pc, #204]	@ (8002da0 <main+0x14c>)
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	rslt = bme280_set_sensor_settings(
 8002cd8:	4931      	ldr	r1, [pc, #196]	@ (8002da0 <main+0x14c>)
 8002cda:	200f      	movs	r0, #15
 8002cdc:	f7fe fa70 	bl	80011c0 <bme280_set_sensor_settings>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b32      	ldr	r3, [pc, #200]	@ (8002db0 <main+0x15c>)
 8002ce6:	701a      	strb	r2, [r3, #0]
			BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL
					| BME280_FILTER_SEL, &dev);
	//rslt = bme280_set_sensor_settings(BME280_ALL_SETTINGS_SEL, &dev); this can also be used in place of above
	if (rslt == BME280_OK) {
 8002ce8:	4b31      	ldr	r3, [pc, #196]	@ (8002db0 <main+0x15c>)
 8002cea:	f993 3000 	ldrsb.w	r3, [r3]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <main+0xa6>
	    printf("BME280 Successfully Configured\r\n");
 8002cf2:	4832      	ldr	r0, [pc, #200]	@ (8002dbc <main+0x168>)
 8002cf4:	f007 fff8 	bl	800ace8 <puts>
 8002cf8:	e006      	b.n	8002d08 <main+0xb4>
	} else {
	    printf("Failed to Configure BME280. Error code: %d\r\n", rslt);
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002db0 <main+0x15c>)
 8002cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8002d00:	4619      	mov	r1, r3
 8002d02:	482f      	ldr	r0, [pc, #188]	@ (8002dc0 <main+0x16c>)
 8002d04:	f007 ff88 	bl	800ac18 <iprintf>
	}
	/* BME280 Mode Setting */
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002d08:	4925      	ldr	r1, [pc, #148]	@ (8002da0 <main+0x14c>)
 8002d0a:	2003      	movs	r0, #3
 8002d0c:	f7fe faad 	bl	800126a <bme280_set_sensor_mode>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b26      	ldr	r3, [pc, #152]	@ (8002db0 <main+0x15c>)
 8002d16:	701a      	strb	r2, [r3, #0]
	dev.delay_ms(40);
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <main+0x14c>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2028      	movs	r0, #40	@ 0x28
 8002d1e:	4798      	blx	r3
	if (rslt == BME280_OK) {
 8002d20:	4b23      	ldr	r3, [pc, #140]	@ (8002db0 <main+0x15c>)
 8002d22:	f993 3000 	ldrsb.w	r3, [r3]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <main+0xde>
	    printf("BME280 Mode Successfully set.\r\n");
 8002d2a:	4826      	ldr	r0, [pc, #152]	@ (8002dc4 <main+0x170>)
 8002d2c:	f007 ffdc 	bl	800ace8 <puts>
 8002d30:	e006      	b.n	8002d40 <main+0xec>
	} else {
	    printf("Failed to set BME280 Mode. Error code: %d\r\n", rslt);
 8002d32:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <main+0x15c>)
 8002d34:	f993 3000 	ldrsb.w	r3, [r3]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4823      	ldr	r0, [pc, #140]	@ (8002dc8 <main+0x174>)
 8002d3c:	f007 ff6c 	bl	800ac18 <iprintf>
	}

	/*-------------------------------------SSD1306 Setup-----------------------------------------------------*/
	ssd1306_Init(&hi2c1);
 8002d40:	4822      	ldr	r0, [pc, #136]	@ (8002dcc <main+0x178>)
 8002d42:	f7ff fc57 	bl	80025f4 <ssd1306_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002d46:	f003 fe23 	bl	8006990 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of i2c1Mutex */
  i2c1MutexHandle = osMutexNew(&i2c1Mutex_attributes);
 8002d4a:	4821      	ldr	r0, [pc, #132]	@ (8002dd0 <main+0x17c>)
 8002d4c:	f003 ff17 	bl	8006b7e <osMutexNew>
 8002d50:	4603      	mov	r3, r0
 8002d52:	4a20      	ldr	r2, [pc, #128]	@ (8002dd4 <main+0x180>)
 8002d54:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of bme280Data */
  bme280DataHandle = osMessageQueueNew (16, sizeof(bme280Data_t), &bme280Data_attributes);
 8002d56:	4a20      	ldr	r2, [pc, #128]	@ (8002dd8 <main+0x184>)
 8002d58:	210c      	movs	r1, #12
 8002d5a:	2010      	movs	r0, #16
 8002d5c:	f004 f81d 	bl	8006d9a <osMessageQueueNew>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4a1e      	ldr	r2, [pc, #120]	@ (8002ddc <main+0x188>)
 8002d64:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002d66:	4a1e      	ldr	r2, [pc, #120]	@ (8002de0 <main+0x18c>)
 8002d68:	2100      	movs	r1, #0
 8002d6a:	481e      	ldr	r0, [pc, #120]	@ (8002de4 <main+0x190>)
 8002d6c:	f003 fe5a 	bl	8006a24 <osThreadNew>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <main+0x194>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* creation of bme280Task */
  bme280TaskHandle = osThreadNew(Startbme280Task, NULL, &bme280Task_attributes);
 8002d76:	4a1d      	ldr	r2, [pc, #116]	@ (8002dec <main+0x198>)
 8002d78:	2100      	movs	r1, #0
 8002d7a:	481d      	ldr	r0, [pc, #116]	@ (8002df0 <main+0x19c>)
 8002d7c:	f003 fe52 	bl	8006a24 <osThreadNew>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4a1c      	ldr	r2, [pc, #112]	@ (8002df4 <main+0x1a0>)
 8002d84:	6013      	str	r3, [r2, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(StartlcdTask, NULL, &lcdTask_attributes);
 8002d86:	4a1c      	ldr	r2, [pc, #112]	@ (8002df8 <main+0x1a4>)
 8002d88:	2100      	movs	r1, #0
 8002d8a:	481c      	ldr	r0, [pc, #112]	@ (8002dfc <main+0x1a8>)
 8002d8c:	f003 fe4a 	bl	8006a24 <osThreadNew>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <main+0x1ac>)
 8002d94:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d96:	f003 fe1f 	bl	80069d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002d9a:	bf00      	nop
 8002d9c:	e7fd      	b.n	8002d9a <main+0x146>
 8002d9e:	bf00      	nop
 8002da0:	200006b4 	.word	0x200006b4
 8002da4:	08002b1d 	.word	0x08002b1d
 8002da8:	08002ba5 	.word	0x08002ba5
 8002dac:	08002b8d 	.word	0x08002b8d
 8002db0:	20000700 	.word	0x20000700
 8002db4:	0800ce68 	.word	0x0800ce68
 8002db8:	0800ce8c 	.word	0x0800ce8c
 8002dbc:	0800cebc 	.word	0x0800cebc
 8002dc0:	0800cedc 	.word	0x0800cedc
 8002dc4:	0800cf0c 	.word	0x0800cf0c
 8002dc8:	0800cf2c 	.word	0x0800cf2c
 8002dcc:	20000604 	.word	0x20000604
 8002dd0:	0800dd78 	.word	0x0800dd78
 8002dd4:	200006b0 	.word	0x200006b0
 8002dd8:	0800dd60 	.word	0x0800dd60
 8002ddc:	200006ac 	.word	0x200006ac
 8002de0:	0800dcf4 	.word	0x0800dcf4
 8002de4:	08003221 	.word	0x08003221
 8002de8:	200006a0 	.word	0x200006a0
 8002dec:	0800dd18 	.word	0x0800dd18
 8002df0:	08003241 	.word	0x08003241
 8002df4:	200006a4 	.word	0x200006a4
 8002df8:	0800dd3c 	.word	0x0800dd3c
 8002dfc:	08003315 	.word	0x08003315
 8002e00:	200006a8 	.word	0x200006a8

08002e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b094      	sub	sp, #80	@ 0x50
 8002e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e0a:	f107 0320 	add.w	r3, r7, #32
 8002e0e:	2230      	movs	r2, #48	@ 0x30
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f008 f87c 	bl	800af10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	4b28      	ldr	r3, [pc, #160]	@ (8002ed0 <SystemClock_Config+0xcc>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	4a27      	ldr	r2, [pc, #156]	@ (8002ed0 <SystemClock_Config+0xcc>)
 8002e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e38:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <SystemClock_Config+0xcc>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e44:	2300      	movs	r3, #0
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	4b22      	ldr	r3, [pc, #136]	@ (8002ed4 <SystemClock_Config+0xd0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <SystemClock_Config+0xd0>)
 8002e4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <SystemClock_Config+0xd0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e60:	2301      	movs	r3, #1
 8002e62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e74:	2304      	movs	r3, #4
 8002e76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 175;
 8002e78:	23af      	movs	r3, #175	@ 0xaf
 8002e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e80:	2307      	movs	r3, #7
 8002e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e84:	f107 0320 	add.w	r3, r7, #32
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 f9c5 	bl	8005218 <HAL_RCC_OscConfig>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e94:	f000 fad4 	bl	8003440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e98:	230f      	movs	r3, #15
 8002e9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ea4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ea8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 fc26 	bl	8005708 <HAL_RCC_ClockConfig>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ec2:	f000 fabd 	bl	8003440 <Error_Handler>
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3750      	adds	r7, #80	@ 0x50
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40007000 	.word	0x40007000

08002ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002ede:	4a13      	ldr	r2, [pc, #76]	@ (8002f2c <MX_I2C1_Init+0x54>)
 8002ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002ee4:	4a12      	ldr	r2, [pc, #72]	@ (8002f30 <MX_I2C1_Init+0x58>)
 8002ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002ef6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f08:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f0e:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f14:	4804      	ldr	r0, [pc, #16]	@ (8002f28 <MX_I2C1_Init+0x50>)
 8002f16:	f000 fff5 	bl	8003f04 <HAL_I2C_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f20:	f000 fa8e 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000604 	.word	0x20000604
 8002f2c:	40005400 	.word	0x40005400
 8002f30:	000186a0 	.word	0x000186a0

08002f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f38:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f3a:	4a12      	ldr	r2, [pc, #72]	@ (8002f84 <MX_USART2_UART_Init+0x50>)
 8002f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f3e:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f6a:	4805      	ldr	r0, [pc, #20]	@ (8002f80 <MX_USART2_UART_Init+0x4c>)
 8002f6c:	f003 f8c0 	bl	80060f0 <HAL_UART_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f76:	f000 fa63 	bl	8003440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000658 	.word	0x20000658
 8002f84:	40004400 	.word	0x40004400

08002f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	@ 0x30
 8002f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8e:	f107 031c 	add.w	r3, r7, #28
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	4b99      	ldr	r3, [pc, #612]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	4a98      	ldr	r2, [pc, #608]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fa8:	f043 0310 	orr.w	r3, r3, #16
 8002fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fae:	4b96      	ldr	r3, [pc, #600]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	4b92      	ldr	r3, [pc, #584]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	4a91      	ldr	r2, [pc, #580]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fca:	4b8f      	ldr	r3, [pc, #572]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b8b      	ldr	r3, [pc, #556]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a8a      	ldr	r2, [pc, #552]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b88      	ldr	r3, [pc, #544]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b84      	ldr	r3, [pc, #528]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a83      	ldr	r2, [pc, #524]	@ (8003208 <MX_GPIO_Init+0x280>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b81      	ldr	r3, [pc, #516]	@ (8003208 <MX_GPIO_Init+0x280>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	4b7d      	ldr	r3, [pc, #500]	@ (8003208 <MX_GPIO_Init+0x280>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	4a7c      	ldr	r2, [pc, #496]	@ (8003208 <MX_GPIO_Init+0x280>)
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	6313      	str	r3, [r2, #48]	@ 0x30
 800301e:	4b7a      	ldr	r3, [pc, #488]	@ (8003208 <MX_GPIO_Init+0x280>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b76      	ldr	r3, [pc, #472]	@ (8003208 <MX_GPIO_Init+0x280>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	4a75      	ldr	r2, [pc, #468]	@ (8003208 <MX_GPIO_Init+0x280>)
 8003034:	f043 0308 	orr.w	r3, r3, #8
 8003038:	6313      	str	r3, [r2, #48]	@ 0x30
 800303a:	4b73      	ldr	r3, [pc, #460]	@ (8003208 <MX_GPIO_Init+0x280>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003046:	2200      	movs	r2, #0
 8003048:	2108      	movs	r1, #8
 800304a:	4870      	ldr	r0, [pc, #448]	@ (800320c <MX_GPIO_Init+0x284>)
 800304c:	f000 ff26 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003050:	2201      	movs	r2, #1
 8003052:	2101      	movs	r1, #1
 8003054:	486e      	ldr	r0, [pc, #440]	@ (8003210 <MX_GPIO_Init+0x288>)
 8003056:	f000 ff21 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 800305a:	2200      	movs	r2, #0
 800305c:	f24f 2110 	movw	r1, #61968	@ 0xf210
 8003060:	486c      	ldr	r0, [pc, #432]	@ (8003214 <MX_GPIO_Init+0x28c>)
 8003062:	f000 ff1b 	bl	8003e9c <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003066:	2308      	movs	r3, #8
 8003068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306a:	2301      	movs	r3, #1
 800306c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003072:	2300      	movs	r3, #0
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	4863      	ldr	r0, [pc, #396]	@ (800320c <MX_GPIO_Init+0x284>)
 800307e:	f000 fd71 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003082:	2301      	movs	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003086:	2301      	movs	r3, #1
 8003088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003092:	f107 031c 	add.w	r3, r7, #28
 8003096:	4619      	mov	r1, r3
 8003098:	485d      	ldr	r0, [pc, #372]	@ (8003210 <MX_GPIO_Init+0x288>)
 800309a:	f000 fd63 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800309e:	2308      	movs	r3, #8
 80030a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ae:	2305      	movs	r3, #5
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	4619      	mov	r1, r3
 80030b8:	4855      	ldr	r0, [pc, #340]	@ (8003210 <MX_GPIO_Init+0x288>)
 80030ba:	f000 fd53 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80030be:	2301      	movs	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80030c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80030cc:	f107 031c 	add.w	r3, r7, #28
 80030d0:	4619      	mov	r1, r3
 80030d2:	4851      	ldr	r0, [pc, #324]	@ (8003218 <MX_GPIO_Init+0x290>)
 80030d4:	f000 fd46 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80030d8:	2310      	movs	r3, #16
 80030da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030e8:	2306      	movs	r3, #6
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	4619      	mov	r1, r3
 80030f2:	4849      	ldr	r0, [pc, #292]	@ (8003218 <MX_GPIO_Init+0x290>)
 80030f4:	f000 fd36 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80030f8:	23e0      	movs	r3, #224	@ 0xe0
 80030fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003108:	2305      	movs	r3, #5
 800310a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	4619      	mov	r1, r3
 8003112:	4841      	ldr	r0, [pc, #260]	@ (8003218 <MX_GPIO_Init+0x290>)
 8003114:	f000 fd26 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003118:	2304      	movs	r3, #4
 800311a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800311c:	2300      	movs	r3, #0
 800311e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003124:	f107 031c 	add.w	r3, r7, #28
 8003128:	4619      	mov	r1, r3
 800312a:	483c      	ldr	r0, [pc, #240]	@ (800321c <MX_GPIO_Init+0x294>)
 800312c:	f000 fd1a 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003130:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313e:	2300      	movs	r3, #0
 8003140:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003142:	2305      	movs	r3, #5
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	4619      	mov	r1, r3
 800314c:	4833      	ldr	r0, [pc, #204]	@ (800321c <MX_GPIO_Init+0x294>)
 800314e:	f000 fd09 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 8003152:	f24f 2310 	movw	r3, #61968	@ 0xf210
 8003156:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003158:	2301      	movs	r3, #1
 800315a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003160:	2300      	movs	r3, #0
 8003162:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	4619      	mov	r1, r3
 800316a:	482a      	ldr	r0, [pc, #168]	@ (8003214 <MX_GPIO_Init+0x28c>)
 800316c:	f000 fcfa 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003170:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003182:	2306      	movs	r3, #6
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003186:	f107 031c 	add.w	r3, r7, #28
 800318a:	4619      	mov	r1, r3
 800318c:	4820      	ldr	r0, [pc, #128]	@ (8003210 <MX_GPIO_Init+0x288>)
 800318e:	f000 fce9 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003192:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80031a0:	f107 031c 	add.w	r3, r7, #28
 80031a4:	4619      	mov	r1, r3
 80031a6:	481c      	ldr	r0, [pc, #112]	@ (8003218 <MX_GPIO_Init+0x290>)
 80031a8:	f000 fcdc 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80031ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80031b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031be:	230a      	movs	r3, #10
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	4619      	mov	r1, r3
 80031c8:	4813      	ldr	r0, [pc, #76]	@ (8003218 <MX_GPIO_Init+0x290>)
 80031ca:	f000 fccb 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80031ce:	2320      	movs	r3, #32
 80031d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80031da:	f107 031c 	add.w	r3, r7, #28
 80031de:	4619      	mov	r1, r3
 80031e0:	480c      	ldr	r0, [pc, #48]	@ (8003214 <MX_GPIO_Init+0x28c>)
 80031e2:	f000 fcbf 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80031e6:	2302      	movs	r3, #2
 80031e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80031ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	4619      	mov	r1, r3
 80031fa:	4804      	ldr	r0, [pc, #16]	@ (800320c <MX_GPIO_Init+0x284>)
 80031fc:	f000 fcb2 	bl	8003b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003200:	bf00      	nop
 8003202:	3730      	adds	r7, #48	@ 0x30
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	40021000 	.word	0x40021000
 8003210:	40020800 	.word	0x40020800
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40020000 	.word	0x40020000
 800321c:	40020400 	.word	0x40020400

08003220 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
 8003228:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800322c:	4803      	ldr	r0, [pc, #12]	@ (800323c <StartDefaultTask+0x1c>)
 800322e:	f000 fe4e 	bl	8003ece <HAL_GPIO_TogglePin>
		osDelay(200);
 8003232:	20c8      	movs	r0, #200	@ 0xc8
 8003234:	f003 fc88 	bl	8006b48 <osDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
 8003238:	bf00      	nop
 800323a:	e7f5      	b.n	8003228 <StartDefaultTask+0x8>
 800323c:	40020c00 	.word	0x40020c00

08003240 <Startbme280Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Startbme280Task */
void Startbme280Task(void *argument)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startbme280Task */
	bme280Data_t sensorData;
	/* Infinite loop */
	for (;;) {

		if (osMutexAcquire(i2c1MutexHandle, osWaitForever) == osOK) {
 8003248:	4b2b      	ldr	r3, [pc, #172]	@ (80032f8 <Startbme280Task+0xb8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	4618      	mov	r0, r3
 8003252:	f003 fd1a 	bl	8006c8a <osMutexAcquire>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f5      	bne.n	8003248 <Startbme280Task+0x8>
			/* BME280 Data Collection */
			rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 800325c:	4a27      	ldr	r2, [pc, #156]	@ (80032fc <Startbme280Task+0xbc>)
 800325e:	4928      	ldr	r1, [pc, #160]	@ (8003300 <Startbme280Task+0xc0>)
 8003260:	2007      	movs	r0, #7
 8003262:	f7fe f87e 	bl	8001362 <bme280_get_sensor_data>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <Startbme280Task+0xc4>)
 800326c:	701a      	strb	r2, [r3, #0]
			osMutexRelease(i2c1MutexHandle); // Release the I2C1 mutex
 800326e:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <Startbme280Task+0xb8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fd54 	bl	8006d20 <osMutexRelease>
			if (rslt == BME280_OK) {
 8003278:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <Startbme280Task+0xc4>)
 800327a:	f993 3000 	ldrsb.w	r3, [r3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d129      	bne.n	80032d6 <Startbme280Task+0x96>
				sensorData.temperature = comp_data.temperature/100.0f; //100.0f is to make at least one operand float type
 8003282:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <Startbme280Task+0xc0>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800328e:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8003308 <Startbme280Task+0xc8>
 8003292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003296:	edc7 7a03 	vstr	s15, [r7, #12]
				sensorData.pressure = comp_data.pressure * (0.00750062 / 100); //1hPa = 0.00750062 mmHg
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <Startbme280Task+0xc0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f930 	bl	8000504 <__aeabi_ui2d>
 80032a4:	a312      	add	r3, pc, #72	@ (adr r3, 80032f0 <Startbme280Task+0xb0>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd f9a5 	bl	80005f8 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	f7fd fc77 	bl	8000ba8 <__aeabi_d2f>
 80032ba:	4603      	mov	r3, r0
 80032bc:	613b      	str	r3, [r7, #16]
				sensorData.humidity = comp_data.humidity/1024.0f; //1024.0f is to make at least one operand float type
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <Startbme280Task+0xc0>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ca:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800330c <Startbme280Task+0xcc>
 80032ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032d2:	edc7 7a05 	vstr	s15, [r7, #20]
			}
			// Send data to the queue
			if (osMessageQueuePut(bme280DataHandle, &sensorData, 0,
 80032d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <Startbme280Task+0xd0>)
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	f107 010c 	add.w	r1, r7, #12
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	2200      	movs	r2, #0
 80032e4:	f003 fdcc 	bl	8006e80 <osMessageQueuePut>
					osWaitForever) != osOK) {
			}
			osDelay(1);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f003 fc2d 	bl	8006b48 <osDelay>
		if (osMutexAcquire(i2c1MutexHandle, osWaitForever) == osOK) {
 80032ee:	e7ab      	b.n	8003248 <Startbme280Task+0x8>
 80032f0:	b4389e86 	.word	0xb4389e86
 80032f4:	3f13a994 	.word	0x3f13a994
 80032f8:	200006b0 	.word	0x200006b0
 80032fc:	200006b4 	.word	0x200006b4
 8003300:	200006f4 	.word	0x200006f4
 8003304:	20000700 	.word	0x20000700
 8003308:	42c80000 	.word	0x42c80000
 800330c:	44800000 	.word	0x44800000
 8003310:	200006ac 	.word	0x200006ac

08003314 <StartlcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartlcdTask */
void StartlcdTask(void *argument)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b090      	sub	sp, #64	@ 0x40
 8003318:	af02      	add	r7, sp, #8
 800331a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartlcdTask */
		bme280Data_t receivedData;
		char buffer[32];
		/* Infinite loop */
		for (;;) {
			if (osMessageQueueGet(bme280DataHandle, &receivedData, NULL,
 800331c:	4b38      	ldr	r3, [pc, #224]	@ (8003400 <StartlcdTask+0xec>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
 8003328:	2200      	movs	r2, #0
 800332a:	f003 fe09 	bl	8006f40 <osMessageQueueGet>
			} else {
				// Handle error: Failed to receive data from queue
			}

			// Clear the display
			ssd1306_Fill(Black);
 800332e:	2000      	movs	r0, #0
 8003330:	f7ff fa80 	bl	8002834 <ssd1306_Fill>

			// Print the received data on the SSD1306 display
			// Write data to local screen buffer
			snprintf(buffer, sizeof(buffer), "Tem:%.2f C",
					receivedData.temperature);
 8003334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
			snprintf(buffer, sizeof(buffer), "Tem:%.2f C",
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd f906 	bl	8000548 <__aeabi_f2d>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	f107 000c 	add.w	r0, r7, #12
 8003344:	e9cd 2300 	strd	r2, r3, [sp]
 8003348:	4a2e      	ldr	r2, [pc, #184]	@ (8003404 <StartlcdTask+0xf0>)
 800334a:	2120      	movs	r1, #32
 800334c:	f007 fcd4 	bl	800acf8 <sniprintf>
			ssd1306_SetCursor(0, 0);
 8003350:	2100      	movs	r1, #0
 8003352:	2000      	movs	r0, #0
 8003354:	f7ff fbca 	bl	8002aec <ssd1306_SetCursor>
			ssd1306_WriteString(buffer, Font_11x18, White);
 8003358:	4a2b      	ldr	r2, [pc, #172]	@ (8003408 <StartlcdTask+0xf4>)
 800335a:	f107 000c 	add.w	r0, r7, #12
 800335e:	2301      	movs	r3, #1
 8003360:	ca06      	ldmia	r2, {r1, r2}
 8003362:	f7ff fb9d 	bl	8002aa0 <ssd1306_WriteString>

			snprintf(buffer, sizeof(buffer), "Hum:%.2f %%",
					receivedData.humidity);
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
			snprintf(buffer, sizeof(buffer), "Hum:%.2f %%",
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f8ed 	bl	8000548 <__aeabi_f2d>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	f107 000c 	add.w	r0, r7, #12
 8003376:	e9cd 2300 	strd	r2, r3, [sp]
 800337a:	4a24      	ldr	r2, [pc, #144]	@ (800340c <StartlcdTask+0xf8>)
 800337c:	2120      	movs	r1, #32
 800337e:	f007 fcbb 	bl	800acf8 <sniprintf>
			ssd1306_SetCursor(0, 18); // Move cursor to the next line
 8003382:	2112      	movs	r1, #18
 8003384:	2000      	movs	r0, #0
 8003386:	f7ff fbb1 	bl	8002aec <ssd1306_SetCursor>
			ssd1306_WriteString(buffer, Font_11x18, White);
 800338a:	4a1f      	ldr	r2, [pc, #124]	@ (8003408 <StartlcdTask+0xf4>)
 800338c:	f107 000c 	add.w	r0, r7, #12
 8003390:	2301      	movs	r3, #1
 8003392:	ca06      	ldmia	r2, {r1, r2}
 8003394:	f7ff fb84 	bl	8002aa0 <ssd1306_WriteString>

			snprintf(buffer, sizeof(buffer), "Prs:%.2f mmHg",
					receivedData.pressure);
 8003398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
			snprintf(buffer, sizeof(buffer), "Prs:%.2f mmHg",
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd f8d4 	bl	8000548 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	f107 000c 	add.w	r0, r7, #12
 80033a8:	e9cd 2300 	strd	r2, r3, [sp]
 80033ac:	4a18      	ldr	r2, [pc, #96]	@ (8003410 <StartlcdTask+0xfc>)
 80033ae:	2120      	movs	r1, #32
 80033b0:	f007 fca2 	bl	800acf8 <sniprintf>
			ssd1306_SetCursor(0, 36); // Move cursor to the next line
 80033b4:	2124      	movs	r1, #36	@ 0x24
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7ff fb98 	bl	8002aec <ssd1306_SetCursor>
			ssd1306_WriteString(buffer, Font_11x18, White);
 80033bc:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <StartlcdTask+0xf4>)
 80033be:	f107 000c 	add.w	r0, r7, #12
 80033c2:	2301      	movs	r3, #1
 80033c4:	ca06      	ldmia	r2, {r1, r2}
 80033c6:	f7ff fb6b 	bl	8002aa0 <ssd1306_WriteString>

			////////////////////------Mutex------------////////////////////////
			if (osMutexAcquire(i2c1MutexHandle, osWaitForever) == osOK) {
 80033ca:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <StartlcdTask+0x100>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f04f 31ff 	mov.w	r1, #4294967295
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 fc59 	bl	8006c8a <osMutexAcquire>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <StartlcdTask+0xda>
				// Update the SSD1306 display
				ssd1306_UpdateScreen(&hi2c1);
 80033de:	480e      	ldr	r0, [pc, #56]	@ (8003418 <StartlcdTask+0x104>)
 80033e0:	f7ff fa4c 	bl	800287c <ssd1306_UpdateScreen>
				// Release the mutex after accessing the I2C1 peripheral
				osMutexRelease(i2c1MutexHandle);
 80033e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <StartlcdTask+0x100>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fc99 	bl	8006d20 <osMutexRelease>
			} else {
				// Handle error: Failed to acquire mutex
			}
			// Release the mutex after accessing the I2C1 peripheral
			osMutexRelease(i2c1MutexHandle);
 80033ee:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <StartlcdTask+0x100>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 fc94 	bl	8006d20 <osMutexRelease>
			////////////////////------Mutex------------////////////////////////

			osDelay(2);
 80033f8:	2002      	movs	r0, #2
 80033fa:	f003 fba5 	bl	8006b48 <osDelay>
			if (osMessageQueueGet(bme280DataHandle, &receivedData, NULL,
 80033fe:	e78d      	b.n	800331c <StartlcdTask+0x8>
 8003400:	200006ac 	.word	0x200006ac
 8003404:	0800cf58 	.word	0x0800cf58
 8003408:	20000000 	.word	0x20000000
 800340c:	0800cf64 	.word	0x0800cf64
 8003410:	0800cf70 	.word	0x0800cf70
 8003414:	200006b0 	.word	0x200006b0
 8003418:	20000604 	.word	0x20000604

0800341c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a04      	ldr	r2, [pc, #16]	@ (800343c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d101      	bne.n	8003432 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800342e:	f000 fa73 	bl	8003918 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40001000 	.word	0x40001000

08003440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003444:	b672      	cpsid	i
}
 8003446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <Error_Handler+0x8>

0800344c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	4b12      	ldr	r3, [pc, #72]	@ (80034a0 <HAL_MspInit+0x54>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	4a11      	ldr	r2, [pc, #68]	@ (80034a0 <HAL_MspInit+0x54>)
 800345c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003460:	6453      	str	r3, [r2, #68]	@ 0x44
 8003462:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <HAL_MspInit+0x54>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <HAL_MspInit+0x54>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <HAL_MspInit+0x54>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	@ 0x40
 800347e:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <HAL_MspInit+0x54>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	210f      	movs	r1, #15
 800348e:	f06f 0001 	mvn.w	r0, #1
 8003492:	f000 fb3d 	bl	8003b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800

080034a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	@ 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a19      	ldr	r2, [pc, #100]	@ (8003528 <HAL_I2C_MspInit+0x84>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d12c      	bne.n	8003520 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	4b18      	ldr	r3, [pc, #96]	@ (800352c <HAL_I2C_MspInit+0x88>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	4a17      	ldr	r2, [pc, #92]	@ (800352c <HAL_I2C_MspInit+0x88>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_I2C_MspInit+0x88>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80034e2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034e8:	2312      	movs	r3, #18
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034f4:	2304      	movs	r3, #4
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	480c      	ldr	r0, [pc, #48]	@ (8003530 <HAL_I2C_MspInit+0x8c>)
 8003500:	f000 fb30 	bl	8003b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	4b08      	ldr	r3, [pc, #32]	@ (800352c <HAL_I2C_MspInit+0x88>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	4a07      	ldr	r2, [pc, #28]	@ (800352c <HAL_I2C_MspInit+0x88>)
 800350e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003512:	6413      	str	r3, [r2, #64]	@ 0x40
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <HAL_I2C_MspInit+0x88>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003520:	bf00      	nop
 8003522:	3728      	adds	r7, #40	@ 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40005400 	.word	0x40005400
 800352c:	40023800 	.word	0x40023800
 8003530:	40020400 	.word	0x40020400

08003534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	@ 0x28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a19      	ldr	r2, [pc, #100]	@ (80035b8 <HAL_UART_MspInit+0x84>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12b      	bne.n	80035ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	4b18      	ldr	r3, [pc, #96]	@ (80035bc <HAL_UART_MspInit+0x88>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <HAL_UART_MspInit+0x88>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003564:	6413      	str	r3, [r2, #64]	@ 0x40
 8003566:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <HAL_UART_MspInit+0x88>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <HAL_UART_MspInit+0x88>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	4a10      	ldr	r2, [pc, #64]	@ (80035bc <HAL_UART_MspInit+0x88>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6313      	str	r3, [r2, #48]	@ 0x30
 8003582:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <HAL_UART_MspInit+0x88>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800358e:	230c      	movs	r3, #12
 8003590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800359e:	2307      	movs	r3, #7
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	4805      	ldr	r0, [pc, #20]	@ (80035c0 <HAL_UART_MspInit+0x8c>)
 80035aa:	f000 fadb 	bl	8003b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ae:	bf00      	nop
 80035b0:	3728      	adds	r7, #40	@ 0x28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40004400 	.word	0x40004400
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40020000 	.word	0x40020000

080035c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08e      	sub	sp, #56	@ 0x38
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	4b33      	ldr	r3, [pc, #204]	@ (80036a8 <HAL_InitTick+0xe4>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	4a32      	ldr	r2, [pc, #200]	@ (80036a8 <HAL_InitTick+0xe4>)
 80035de:	f043 0310 	orr.w	r3, r3, #16
 80035e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e4:	4b30      	ldr	r3, [pc, #192]	@ (80036a8 <HAL_InitTick+0xe4>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035f0:	f107 0210 	add.w	r2, r7, #16
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f002 faa4 	bl	8005b48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800360a:	f002 fa75 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 800360e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003610:	e004      	b.n	800361c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003612:	f002 fa71 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8003616:	4603      	mov	r3, r0
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	4a23      	ldr	r2, [pc, #140]	@ (80036ac <HAL_InitTick+0xe8>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	0c9b      	lsrs	r3, r3, #18
 8003626:	3b01      	subs	r3, #1
 8003628:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800362a:	4b21      	ldr	r3, [pc, #132]	@ (80036b0 <HAL_InitTick+0xec>)
 800362c:	4a21      	ldr	r2, [pc, #132]	@ (80036b4 <HAL_InitTick+0xf0>)
 800362e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003630:	4b1f      	ldr	r3, [pc, #124]	@ (80036b0 <HAL_InitTick+0xec>)
 8003632:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003636:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003638:	4a1d      	ldr	r2, [pc, #116]	@ (80036b0 <HAL_InitTick+0xec>)
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800363e:	4b1c      	ldr	r3, [pc, #112]	@ (80036b0 <HAL_InitTick+0xec>)
 8003640:	2200      	movs	r2, #0
 8003642:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003644:	4b1a      	ldr	r3, [pc, #104]	@ (80036b0 <HAL_InitTick+0xec>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800364a:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_InitTick+0xec>)
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003650:	4817      	ldr	r0, [pc, #92]	@ (80036b0 <HAL_InitTick+0xec>)
 8003652:	f002 faab 	bl	8005bac <HAL_TIM_Base_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800365c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11b      	bne.n	800369c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003664:	4812      	ldr	r0, [pc, #72]	@ (80036b0 <HAL_InitTick+0xec>)
 8003666:	f002 fafb 	bl	8005c60 <HAL_TIM_Base_Start_IT>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003670:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003678:	2036      	movs	r0, #54	@ 0x36
 800367a:	f000 fa65 	bl	8003b48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b0f      	cmp	r3, #15
 8003682:	d808      	bhi.n	8003696 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003684:	2200      	movs	r2, #0
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	2036      	movs	r0, #54	@ 0x36
 800368a:	f000 fa41 	bl	8003b10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800368e:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <HAL_InitTick+0xf4>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e002      	b.n	800369c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800369c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3738      	adds	r7, #56	@ 0x38
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	431bde83 	.word	0x431bde83
 80036b0:	20000704 	.word	0x20000704
 80036b4:	40001000 	.word	0x40001000
 80036b8:	2000000c 	.word	0x2000000c

080036bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <NMI_Handler+0x4>

080036c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <HardFault_Handler+0x4>

080036cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <MemManage_Handler+0x4>

080036d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <BusFault_Handler+0x4>

080036dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <UsageFault_Handler+0x4>

080036e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036f8:	4802      	ldr	r0, [pc, #8]	@ (8003704 <TIM6_DAC_IRQHandler+0x10>)
 80036fa:	f002 fb21 	bl	8005d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000704 	.word	0x20000704

08003708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return 1;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_kill>:

int _kill(int pid, int sig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003722:	f007 fc57 	bl	800afd4 <__errno>
 8003726:	4603      	mov	r3, r0
 8003728:	2216      	movs	r2, #22
 800372a:	601a      	str	r2, [r3, #0]
  return -1;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_exit>:

void _exit (int status)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003740:	f04f 31ff 	mov.w	r1, #4294967295
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ffe7 	bl	8003718 <_kill>
  while (1) {}    /* Make sure we hang here */
 800374a:	bf00      	nop
 800374c:	e7fd      	b.n	800374a <_exit+0x12>

0800374e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e00a      	b.n	8003776 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003760:	f3af 8000 	nop.w
 8003764:	4601      	mov	r1, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	60ba      	str	r2, [r7, #8]
 800376c:	b2ca      	uxtb	r2, r1
 800376e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	3301      	adds	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	dbf0      	blt.n	8003760 <_read+0x12>
  }

  return len;
 800377e:	687b      	ldr	r3, [r7, #4]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037b0:	605a      	str	r2, [r3, #4]
  return 0;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <_isatty>:

int _isatty(int file)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037c8:	2301      	movs	r3, #1
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037f8:	4a14      	ldr	r2, [pc, #80]	@ (800384c <_sbrk+0x5c>)
 80037fa:	4b15      	ldr	r3, [pc, #84]	@ (8003850 <_sbrk+0x60>)
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003804:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <_sbrk+0x64>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <_sbrk+0x64>)
 800380e:	4a12      	ldr	r2, [pc, #72]	@ (8003858 <_sbrk+0x68>)
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003812:	4b10      	ldr	r3, [pc, #64]	@ (8003854 <_sbrk+0x64>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	429a      	cmp	r2, r3
 800381e:	d207      	bcs.n	8003830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003820:	f007 fbd8 	bl	800afd4 <__errno>
 8003824:	4603      	mov	r3, r0
 8003826:	220c      	movs	r2, #12
 8003828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	e009      	b.n	8003844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003830:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <_sbrk+0x64>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003836:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <_sbrk+0x64>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	4a05      	ldr	r2, [pc, #20]	@ (8003854 <_sbrk+0x64>)
 8003840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003842:	68fb      	ldr	r3, [r7, #12]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20020000 	.word	0x20020000
 8003850:	00000400 	.word	0x00000400
 8003854:	2000074c 	.word	0x2000074c
 8003858:	200051f0 	.word	0x200051f0

0800385c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003860:	4b06      	ldr	r3, [pc, #24]	@ (800387c <SystemInit+0x20>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	4a05      	ldr	r2, [pc, #20]	@ (800387c <SystemInit+0x20>)
 8003868:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800386c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003880:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003884:	f7ff ffea 	bl	800385c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003888:	480c      	ldr	r0, [pc, #48]	@ (80038bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800388a:	490d      	ldr	r1, [pc, #52]	@ (80038c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800388c:	4a0d      	ldr	r2, [pc, #52]	@ (80038c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800388e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003890:	e002      	b.n	8003898 <LoopCopyDataInit>

08003892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003896:	3304      	adds	r3, #4

08003898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800389a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800389c:	d3f9      	bcc.n	8003892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800389e:	4a0a      	ldr	r2, [pc, #40]	@ (80038c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038a0:	4c0a      	ldr	r4, [pc, #40]	@ (80038cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038a4:	e001      	b.n	80038aa <LoopFillZerobss>

080038a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a8:	3204      	adds	r2, #4

080038aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038ac:	d3fb      	bcc.n	80038a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038ae:	f007 fb97 	bl	800afe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038b2:	f7ff f9cf 	bl	8002c54 <main>
  bx  lr    
 80038b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80038c4:	0800e120 	.word	0x0800e120
  ldr r2, =_sbss
 80038c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80038cc:	200051f0 	.word	0x200051f0

080038d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038d0:	e7fe      	b.n	80038d0 <ADC_IRQHandler>
	...

080038d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003914 <HAL_Init+0x40>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003914 <HAL_Init+0x40>)
 80038de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_Init+0x40>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <HAL_Init+0x40>)
 80038ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f0:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_Init+0x40>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a07      	ldr	r2, [pc, #28]	@ (8003914 <HAL_Init+0x40>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038fc:	2003      	movs	r0, #3
 80038fe:	f000 f8fc 	bl	8003afa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003902:	200f      	movs	r0, #15
 8003904:	f7ff fe5e 	bl	80035c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003908:	f7ff fda0 	bl	800344c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023c00 	.word	0x40023c00

08003918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800391c:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_IncTick+0x20>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_IncTick+0x24>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
 8003928:	4a04      	ldr	r2, [pc, #16]	@ (800393c <HAL_IncTick+0x24>)
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000010 	.word	0x20000010
 800393c:	20000750 	.word	0x20000750

08003940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return uwTick;
 8003944:	4b03      	ldr	r3, [pc, #12]	@ (8003954 <HAL_GetTick+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000750 	.word	0x20000750

08003958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff ffee 	bl	8003940 <HAL_GetTick>
 8003964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d005      	beq.n	800397e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003972:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <HAL_Delay+0x44>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800397e:	bf00      	nop
 8003980:	f7ff ffde 	bl	8003940 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d8f7      	bhi.n	8003980 <HAL_Delay+0x28>
  {
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000010 	.word	0x20000010

080039a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b0:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039bc:	4013      	ands	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039d2:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	60d3      	str	r3, [r2, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <__NVIC_GetPriorityGrouping+0x18>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 0307 	and.w	r3, r3, #7
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	db0b      	blt.n	8003a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	4907      	ldr	r1, [pc, #28]	@ (8003a3c <__NVIC_EnableIRQ+0x38>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2001      	movs	r0, #1
 8003a26:	fa00 f202 	lsl.w	r2, r0, r2
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000e100 	.word	0xe000e100

08003a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	db0a      	blt.n	8003a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	490c      	ldr	r1, [pc, #48]	@ (8003a8c <__NVIC_SetPriority+0x4c>)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	440b      	add	r3, r1
 8003a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a68:	e00a      	b.n	8003a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4908      	ldr	r1, [pc, #32]	@ (8003a90 <__NVIC_SetPriority+0x50>)
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3b04      	subs	r3, #4
 8003a78:	0112      	lsls	r2, r2, #4
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	761a      	strb	r2, [r3, #24]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	e000e100 	.word	0xe000e100
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	@ 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f1c3 0307 	rsb	r3, r3, #7
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	bf28      	it	cs
 8003ab2:	2304      	movcs	r3, #4
 8003ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d902      	bls.n	8003ac4 <NVIC_EncodePriority+0x30>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3b03      	subs	r3, #3
 8003ac2:	e000      	b.n	8003ac6 <NVIC_EncodePriority+0x32>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003adc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	43d9      	mvns	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	4313      	orrs	r3, r2
         );
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3724      	adds	r7, #36	@ 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ff4c 	bl	80039a0 <__NVIC_SetPriorityGrouping>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b22:	f7ff ff61 	bl	80039e8 <__NVIC_GetPriorityGrouping>
 8003b26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6978      	ldr	r0, [r7, #20]
 8003b2e:	f7ff ffb1 	bl	8003a94 <NVIC_EncodePriority>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff80 	bl	8003a40 <__NVIC_SetPriority>
}
 8003b40:	bf00      	nop
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ff54 	bl	8003a04 <__NVIC_EnableIRQ>
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b089      	sub	sp, #36	@ 0x24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e16b      	b.n	8003e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b80:	2201      	movs	r2, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	f040 815a 	bne.w	8003e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d005      	beq.n	8003bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d130      	bne.n	8003c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bec:	2201      	movs	r2, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 0201 	and.w	r2, r3, #1
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d017      	beq.n	8003c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d123      	bne.n	8003ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	08da      	lsrs	r2, r3, #3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3208      	adds	r2, #8
 8003c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	220f      	movs	r2, #15
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	69b9      	ldr	r1, [r7, #24]
 8003ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0203 	and.w	r2, r3, #3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80b4 	beq.w	8003e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	4b60      	ldr	r3, [pc, #384]	@ (8003e70 <HAL_GPIO_Init+0x30c>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8003e70 <HAL_GPIO_Init+0x30c>)
 8003cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8003e70 <HAL_GPIO_Init+0x30c>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d06:	4a5b      	ldr	r2, [pc, #364]	@ (8003e74 <HAL_GPIO_Init+0x310>)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	220f      	movs	r2, #15
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a52      	ldr	r2, [pc, #328]	@ (8003e78 <HAL_GPIO_Init+0x314>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d02b      	beq.n	8003d8a <HAL_GPIO_Init+0x226>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a51      	ldr	r2, [pc, #324]	@ (8003e7c <HAL_GPIO_Init+0x318>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d025      	beq.n	8003d86 <HAL_GPIO_Init+0x222>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a50      	ldr	r2, [pc, #320]	@ (8003e80 <HAL_GPIO_Init+0x31c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01f      	beq.n	8003d82 <HAL_GPIO_Init+0x21e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a4f      	ldr	r2, [pc, #316]	@ (8003e84 <HAL_GPIO_Init+0x320>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d019      	beq.n	8003d7e <HAL_GPIO_Init+0x21a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003e88 <HAL_GPIO_Init+0x324>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_GPIO_Init+0x216>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a4d      	ldr	r2, [pc, #308]	@ (8003e8c <HAL_GPIO_Init+0x328>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00d      	beq.n	8003d76 <HAL_GPIO_Init+0x212>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003e90 <HAL_GPIO_Init+0x32c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <HAL_GPIO_Init+0x20e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a4b      	ldr	r2, [pc, #300]	@ (8003e94 <HAL_GPIO_Init+0x330>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_GPIO_Init+0x20a>
 8003d6a:	2307      	movs	r3, #7
 8003d6c:	e00e      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d6e:	2308      	movs	r3, #8
 8003d70:	e00c      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d72:	2306      	movs	r3, #6
 8003d74:	e00a      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d76:	2305      	movs	r3, #5
 8003d78:	e008      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	e006      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e004      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e002      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_GPIO_Init+0x228>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	f002 0203 	and.w	r2, r2, #3
 8003d92:	0092      	lsls	r2, r2, #2
 8003d94:	4093      	lsls	r3, r2
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d9c:	4935      	ldr	r1, [pc, #212]	@ (8003e74 <HAL_GPIO_Init+0x310>)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	3302      	adds	r3, #2
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003daa:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dce:	4a32      	ldr	r2, [pc, #200]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dd4:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003df8:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dfe:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e22:	4a1d      	ldr	r2, [pc, #116]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e28:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e4c:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <HAL_GPIO_Init+0x334>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3301      	adds	r3, #1
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	f67f ae90 	bls.w	8003b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	3724      	adds	r7, #36	@ 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40020000 	.word	0x40020000
 8003e7c:	40020400 	.word	0x40020400
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40020c00 	.word	0x40020c00
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40021400 	.word	0x40021400
 8003e90:	40021800 	.word	0x40021800
 8003e94:	40021c00 	.word	0x40021c00
 8003e98:	40013c00 	.word	0x40013c00

08003e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	807b      	strh	r3, [r7, #2]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eac:	787b      	ldrb	r3, [r7, #1]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eb8:	e003      	b.n	8003ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	041a      	lsls	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	619a      	str	r2, [r3, #24]
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ee0:	887a      	ldrh	r2, [r7, #2]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	041a      	lsls	r2, r3, #16
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	43d9      	mvns	r1, r3
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	400b      	ands	r3, r1
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	619a      	str	r2, [r3, #24]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e12b      	b.n	800416e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff faba 	bl	80034a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	@ 0x24
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f68:	f001 fdc6 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8003f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a81      	ldr	r2, [pc, #516]	@ (8004178 <HAL_I2C_Init+0x274>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d807      	bhi.n	8003f88 <HAL_I2C_Init+0x84>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a80      	ldr	r2, [pc, #512]	@ (800417c <HAL_I2C_Init+0x278>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bf94      	ite	ls
 8003f80:	2301      	movls	r3, #1
 8003f82:	2300      	movhi	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e006      	b.n	8003f96 <HAL_I2C_Init+0x92>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8004180 <HAL_I2C_Init+0x27c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bf94      	ite	ls
 8003f90:	2301      	movls	r3, #1
 8003f92:	2300      	movhi	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0e7      	b.n	800416e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a78      	ldr	r2, [pc, #480]	@ (8004184 <HAL_I2C_Init+0x280>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0c9b      	lsrs	r3, r3, #18
 8003fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8004178 <HAL_I2C_Init+0x274>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d802      	bhi.n	8003fd8 <HAL_I2C_Init+0xd4>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	e009      	b.n	8003fec <HAL_I2C_Init+0xe8>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	4a69      	ldr	r2, [pc, #420]	@ (8004188 <HAL_I2C_Init+0x284>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	3301      	adds	r3, #1
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ffe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	495c      	ldr	r1, [pc, #368]	@ (8004178 <HAL_I2C_Init+0x274>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d819      	bhi.n	8004040 <HAL_I2C_Init+0x13c>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e59      	subs	r1, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fbb1 f3f3 	udiv	r3, r1, r3
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004020:	400b      	ands	r3, r1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_I2C_Init+0x138>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e59      	subs	r1, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fbb1 f3f3 	udiv	r3, r1, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	e051      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 800403c:	2304      	movs	r3, #4
 800403e:	e04f      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d111      	bne.n	800406c <HAL_I2C_Init+0x168>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1e58      	subs	r0, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	440b      	add	r3, r1
 8004056:	fbb0 f3f3 	udiv	r3, r0, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e012      	b.n	8004092 <HAL_I2C_Init+0x18e>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1e58      	subs	r0, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Init+0x196>
 8004096:	2301      	movs	r3, #1
 8004098:	e022      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10e      	bne.n	80040c0 <HAL_I2C_Init+0x1bc>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1e58      	subs	r0, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	440b      	add	r3, r1
 80040b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040be:	e00f      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e58      	subs	r0, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	0099      	lsls	r1, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	6809      	ldr	r1, [r1, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800410e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6911      	ldr	r1, [r2, #16]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68d2      	ldr	r2, [r2, #12]
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	000186a0 	.word	0x000186a0
 800417c:	001e847f 	.word	0x001e847f
 8004180:	003d08ff 	.word	0x003d08ff
 8004184:	431bde83 	.word	0x431bde83
 8004188:	10624dd3 	.word	0x10624dd3

0800418c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	460b      	mov	r3, r1
 800419a:	817b      	strh	r3, [r7, #10]
 800419c:	4613      	mov	r3, r2
 800419e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7ff fbce 	bl	8003940 <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	f040 80e0 	bne.w	8004374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2319      	movs	r3, #25
 80041ba:	2201      	movs	r2, #1
 80041bc:	4970      	ldr	r1, [pc, #448]	@ (8004380 <HAL_I2C_Master_Transmit+0x1f4>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fdf4 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0d3      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_I2C_Master_Transmit+0x50>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0cc      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d007      	beq.n	8004202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2221      	movs	r2, #33	@ 0x21
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2210      	movs	r2, #16
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a50      	ldr	r2, [pc, #320]	@ (8004384 <HAL_I2C_Master_Transmit+0x1f8>)
 8004242:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004244:	8979      	ldrh	r1, [r7, #10]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fbc8 	bl	80049e0 <I2C_MasterRequestWrite>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e08d      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004270:	e066      	b.n	8004340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	6a39      	ldr	r1, [r7, #32]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 feb2 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	2b04      	cmp	r3, #4
 8004288:	d107      	bne.n	800429a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e06b      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d11b      	bne.n	8004314 <HAL_I2C_Master_Transmit+0x188>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d017      	beq.n	8004314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6a39      	ldr	r1, [r7, #32]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fea9 	bl	8005070 <I2C_WaitOnBTFFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	2b04      	cmp	r3, #4
 800432a:	d107      	bne.n	800433c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800433a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e01a      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d194      	bne.n	8004272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000

08004388 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08c      	sub	sp, #48	@ 0x30
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
 8004398:	4613      	mov	r3, r2
 800439a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800439c:	f7ff fad0 	bl	8003940 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	f040 8217 	bne.w	80047de <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2319      	movs	r3, #25
 80043b6:	2201      	movs	r2, #1
 80043b8:	497c      	ldr	r1, [pc, #496]	@ (80045ac <HAL_I2C_Master_Receive+0x224>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fcf6 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
 80043c8:	e20a      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_I2C_Master_Receive+0x50>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e203      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d007      	beq.n	80043fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800440c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2222      	movs	r2, #34	@ 0x22
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2210      	movs	r2, #16
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	893a      	ldrh	r2, [r7, #8]
 800442e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a5c      	ldr	r2, [pc, #368]	@ (80045b0 <HAL_I2C_Master_Receive+0x228>)
 800443e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004440:	8979      	ldrh	r1, [r7, #10]
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fb4c 	bl	8004ae4 <I2C_MasterRequestRead>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e1c4      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d113      	bne.n	8004486 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e198      	b.n	80047b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448a:	2b01      	cmp	r3, #1
 800448c:	d11b      	bne.n	80044c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e178      	b.n	80047b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d11b      	bne.n	8004506 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	e158      	b.n	80047b8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800452c:	e144      	b.n	80047b8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004532:	2b03      	cmp	r3, #3
 8004534:	f200 80f1 	bhi.w	800471a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453c:	2b01      	cmp	r3, #1
 800453e:	d123      	bne.n	8004588 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004542:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fddb 	bl	8005100 <I2C_WaitOnRXNEFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e145      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004586:	e117      	b.n	80047b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	2b02      	cmp	r3, #2
 800458e:	d14e      	bne.n	800462e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	2200      	movs	r2, #0
 8004598:	4906      	ldr	r1, [pc, #24]	@ (80045b4 <HAL_I2C_Master_Receive+0x22c>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fc06 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e11a      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
 80045aa:	bf00      	nop
 80045ac:	00100002 	.word	0x00100002
 80045b0:	ffff0000 	.word	0xffff0000
 80045b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800462c:	e0c4      	b.n	80047b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	2200      	movs	r2, #0
 8004636:	496c      	ldr	r1, [pc, #432]	@ (80047e8 <HAL_I2C_Master_Receive+0x460>)
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fbb7 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0cb      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2200      	movs	r2, #0
 8004692:	4955      	ldr	r1, [pc, #340]	@ (80047e8 <HAL_I2C_Master_Receive+0x460>)
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fb89 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e09d      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004718:	e04e      	b.n	80047b8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800471a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fcee 	bl	8005100 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e058      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d124      	bne.n	80047b8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004772:	2b03      	cmp	r3, #3
 8004774:	d107      	bne.n	8004786 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004784:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f aeb6 	bne.w	800452e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3728      	adds	r7, #40	@ 0x28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	00010004 	.word	0x00010004

080047ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	4608      	mov	r0, r1
 80047f6:	4611      	mov	r1, r2
 80047f8:	461a      	mov	r2, r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	817b      	strh	r3, [r7, #10]
 80047fe:	460b      	mov	r3, r1
 8004800:	813b      	strh	r3, [r7, #8]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004806:	f7ff f89b 	bl	8003940 <HAL_GetTick>
 800480a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b20      	cmp	r3, #32
 8004816:	f040 80d9 	bne.w	80049cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2319      	movs	r3, #25
 8004820:	2201      	movs	r2, #1
 8004822:	496d      	ldr	r1, [pc, #436]	@ (80049d8 <HAL_I2C_Mem_Write+0x1ec>)
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fac1 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
 8004832:	e0cc      	b.n	80049ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_I2C_Mem_Write+0x56>
 800483e:	2302      	movs	r3, #2
 8004840:	e0c5      	b.n	80049ce <HAL_I2C_Mem_Write+0x1e2>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d007      	beq.n	8004868 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2221      	movs	r2, #33	@ 0x21
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2240      	movs	r2, #64	@ 0x40
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004898:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a4d      	ldr	r2, [pc, #308]	@ (80049dc <HAL_I2C_Mem_Write+0x1f0>)
 80048a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048aa:	88f8      	ldrh	r0, [r7, #6]
 80048ac:	893a      	ldrh	r2, [r7, #8]
 80048ae:	8979      	ldrh	r1, [r7, #10]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4603      	mov	r3, r0
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f9e0 	bl	8004c80 <I2C_RequestMemoryWrite>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d052      	beq.n	800496c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e081      	b.n	80049ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fb86 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00d      	beq.n	80048f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d107      	bne.n	80048f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e06b      	b.n	80049ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b04      	cmp	r3, #4
 8004932:	d11b      	bne.n	800496c <HAL_I2C_Mem_Write+0x180>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d017      	beq.n	800496c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	781a      	ldrb	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1aa      	bne.n	80048ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fb79 	bl	8005070 <I2C_WaitOnBTFFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00d      	beq.n	80049a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	2b04      	cmp	r3, #4
 800498a:	d107      	bne.n	800499c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800499a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e016      	b.n	80049ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	00100002 	.word	0x00100002
 80049dc:	ffff0000 	.word	0xffff0000

080049e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	460b      	mov	r3, r1
 80049ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d006      	beq.n	8004a0a <I2C_MasterRequestWrite+0x2a>
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d003      	beq.n	8004a0a <I2C_MasterRequestWrite+0x2a>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a08:	d108      	bne.n	8004a1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e00b      	b.n	8004a34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	2b12      	cmp	r3, #18
 8004a22:	d107      	bne.n	8004a34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f9b3 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a5a:	d103      	bne.n	8004a64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e035      	b.n	8004ad4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a70:	d108      	bne.n	8004a84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a80:	611a      	str	r2, [r3, #16]
 8004a82:	e01b      	b.n	8004abc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a84:	897b      	ldrh	r3, [r7, #10]
 8004a86:	11db      	asrs	r3, r3, #7
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	f003 0306 	and.w	r3, r3, #6
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	f063 030f 	orn	r3, r3, #15
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	490e      	ldr	r1, [pc, #56]	@ (8004adc <I2C_MasterRequestWrite+0xfc>)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f9fc 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e010      	b.n	8004ad4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ab2:	897b      	ldrh	r3, [r7, #10]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	4907      	ldr	r1, [pc, #28]	@ (8004ae0 <I2C_MasterRequestWrite+0x100>)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f9ec 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	00010008 	.word	0x00010008
 8004ae0:	00010002 	.word	0x00010002

08004ae4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	460b      	mov	r3, r1
 8004af2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d006      	beq.n	8004b1e <I2C_MasterRequestRead+0x3a>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d003      	beq.n	8004b1e <I2C_MasterRequestRead+0x3a>
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b1c:	d108      	bne.n	8004b30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e00b      	b.n	8004b48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b34:	2b11      	cmp	r3, #17
 8004b36:	d107      	bne.n	8004b48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f929 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00d      	beq.n	8004b7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b6e:	d103      	bne.n	8004b78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e079      	b.n	8004c70 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b84:	d108      	bne.n	8004b98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b86:	897b      	ldrh	r3, [r7, #10]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	611a      	str	r2, [r3, #16]
 8004b96:	e05f      	b.n	8004c58 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b98:	897b      	ldrh	r3, [r7, #10]
 8004b9a:	11db      	asrs	r3, r3, #7
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0306 	and.w	r3, r3, #6
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f063 030f 	orn	r3, r3, #15
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4930      	ldr	r1, [pc, #192]	@ (8004c78 <I2C_MasterRequestRead+0x194>)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f972 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e054      	b.n	8004c70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bc6:	897b      	ldrh	r3, [r7, #10]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4929      	ldr	r1, [pc, #164]	@ (8004c7c <I2C_MasterRequestRead+0x198>)
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f962 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e044      	b.n	8004c70 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f8c7 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c32:	d103      	bne.n	8004c3c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e017      	b.n	8004c70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c40:	897b      	ldrh	r3, [r7, #10]
 8004c42:	11db      	asrs	r3, r3, #7
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f003 0306 	and.w	r3, r3, #6
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f063 030e 	orn	r3, r3, #14
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4907      	ldr	r1, [pc, #28]	@ (8004c7c <I2C_MasterRequestRead+0x198>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f91e 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	00010008 	.word	0x00010008
 8004c7c:	00010002 	.word	0x00010002

08004c80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	817b      	strh	r3, [r7, #10]
 8004c92:	460b      	mov	r3, r1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f878 	bl	8004dac <I2C_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd0:	d103      	bne.n	8004cda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e05f      	b.n	8004d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cde:	897b      	ldrh	r3, [r7, #10]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	492d      	ldr	r1, [pc, #180]	@ (8004da8 <I2C_RequestMemoryWrite+0x128>)
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f8d3 	bl	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e04c      	b.n	8004d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f95e 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d107      	bne.n	8004d42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e02b      	b.n	8004d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d4c:	893b      	ldrh	r3, [r7, #8]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	611a      	str	r2, [r3, #16]
 8004d56:	e021      	b.n	8004d9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d58:	893b      	ldrh	r3, [r7, #8]
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d68:	6a39      	ldr	r1, [r7, #32]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f938 	bl	8004fe0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d107      	bne.n	8004d8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e005      	b.n	8004d9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d92:	893b      	ldrh	r3, [r7, #8]
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	00010002 	.word	0x00010002

08004dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dbc:	e048      	b.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d044      	beq.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fe fdbb 	bl	8003940 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d139      	bne.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	0c1b      	lsrs	r3, r3, #16
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10d      	bne.n	8004e02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	43da      	mvns	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	e00c      	b.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	43da      	mvns	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d116      	bne.n	8004e50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e023      	b.n	8004e98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	0c1b      	lsrs	r3, r3, #16
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d10d      	bne.n	8004e76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	43da      	mvns	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4013      	ands	r3, r2
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	e00c      	b.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	43da      	mvns	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d093      	beq.n	8004dbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eae:	e071      	b.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ebe:	d123      	bne.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ece:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f043 0204 	orr.w	r2, r3, #4
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e067      	b.n	8004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d041      	beq.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f10:	f7fe fd16 	bl	8003940 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d302      	bcc.n	8004f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d136      	bne.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10c      	bne.n	8004f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	43da      	mvns	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	e00b      	b.n	8004f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	43da      	mvns	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d016      	beq.n	8004f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e021      	b.n	8004fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10c      	bne.n	8004fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e00b      	b.n	8004fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	43da      	mvns	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf14      	ite	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	2300      	moveq	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f47f af6d 	bne.w	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fec:	e034      	b.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f8e3 	bl	80051ba <I2C_IsAcknowledgeFailed>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e034      	b.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d028      	beq.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fe fc9b 	bl	8003940 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11d      	bne.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d016      	beq.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	f043 0220 	orr.w	r2, r3, #32
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e007      	b.n	8005068 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005062:	2b80      	cmp	r3, #128	@ 0x80
 8005064:	d1c3      	bne.n	8004fee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800507c:	e034      	b.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f89b 	bl	80051ba <I2C_IsAcknowledgeFailed>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e034      	b.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d028      	beq.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005096:	f7fe fc53 	bl	8003940 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11d      	bne.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d016      	beq.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e007      	b.n	80050f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d1c3      	bne.n	800507e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800510c:	e049      	b.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b10      	cmp	r3, #16
 800511a:	d119      	bne.n	8005150 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0210 	mvn.w	r2, #16
 8005124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e030      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005150:	f7fe fbf6 	bl	8003940 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11d      	bne.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	d016      	beq.n	80051a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e007      	b.n	80051b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b40      	cmp	r3, #64	@ 0x40
 80051ae:	d1ae      	bne.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d0:	d11b      	bne.n	800520a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	f043 0204 	orr.w	r2, r3, #4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e267      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d075      	beq.n	8005322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005236:	4b88      	ldr	r3, [pc, #544]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b04      	cmp	r3, #4
 8005240:	d00c      	beq.n	800525c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b85      	ldr	r3, [pc, #532]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800524a:	2b08      	cmp	r3, #8
 800524c:	d112      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524e:	4b82      	ldr	r3, [pc, #520]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800525a:	d10b      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	4b7e      	ldr	r3, [pc, #504]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05b      	beq.n	8005320 <HAL_RCC_OscConfig+0x108>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d157      	bne.n	8005320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e242      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x74>
 800527e:	4b76      	ldr	r3, [pc, #472]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a75      	ldr	r2, [pc, #468]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e01d      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x98>
 8005296:	4b70      	ldr	r3, [pc, #448]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6f      	ldr	r2, [pc, #444]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 80052b0:	4b69      	ldr	r3, [pc, #420]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a68      	ldr	r2, [pc, #416]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b66      	ldr	r3, [pc, #408]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a65      	ldr	r2, [pc, #404]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fe fb36 	bl	8003940 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fe fb32 	bl	8003940 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	@ 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e207      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0xc0>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fe fb22 	bl	8003940 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005300:	f7fe fb1e 	bl	8003940 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e1f3      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	4b51      	ldr	r3, [pc, #324]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0xe8>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d063      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532e:	4b4a      	ldr	r3, [pc, #296]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533a:	4b47      	ldr	r3, [pc, #284]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005342:	2b08      	cmp	r3, #8
 8005344:	d11c      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005346:	4b44      	ldr	r3, [pc, #272]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d116      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005352:	4b41      	ldr	r3, [pc, #260]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d001      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e1c7      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536a:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4937      	ldr	r1, [pc, #220]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	e03a      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d020      	beq.n	80053ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005388:	4b34      	ldr	r3, [pc, #208]	@ (800545c <HAL_RCC_OscConfig+0x244>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fe fad7 	bl	8003940 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005396:	f7fe fad3 	bl	8003940 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e1a8      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b4:	4b28      	ldr	r3, [pc, #160]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4925      	ldr	r1, [pc, #148]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
 80053c8:	e015      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ca:	4b24      	ldr	r3, [pc, #144]	@ (800545c <HAL_RCC_OscConfig+0x244>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fe fab6 	bl	8003940 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fe fab2 	bl	8003940 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e187      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d036      	beq.n	8005470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540a:	4b15      	ldr	r3, [pc, #84]	@ (8005460 <HAL_RCC_OscConfig+0x248>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fe fa96 	bl	8003940 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005418:	f7fe fa92 	bl	8003940 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e167      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800542c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x200>
 8005436:	e01b      	b.n	8005470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005438:	4b09      	ldr	r3, [pc, #36]	@ (8005460 <HAL_RCC_OscConfig+0x248>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543e:	f7fe fa7f 	bl	8003940 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005444:	e00e      	b.n	8005464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005446:	f7fe fa7b 	bl	8003940 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d907      	bls.n	8005464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e150      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005458:	40023800 	.word	0x40023800
 800545c:	42470000 	.word	0x42470000
 8005460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005464:	4b88      	ldr	r3, [pc, #544]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1ea      	bne.n	8005446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8097 	beq.w	80055ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547e:	2300      	movs	r3, #0
 8005480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005482:	4b81      	ldr	r3, [pc, #516]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10f      	bne.n	80054ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	4b7d      	ldr	r3, [pc, #500]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	4a7c      	ldr	r2, [pc, #496]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	@ 0x40
 800549e:	4b7a      	ldr	r3, [pc, #488]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b77      	ldr	r3, [pc, #476]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ba:	4b74      	ldr	r3, [pc, #464]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a73      	ldr	r2, [pc, #460]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fe fa3b 	bl	8003940 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fe fa37 	bl	8003940 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e10c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	4b6a      	ldr	r3, [pc, #424]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x2ea>
 80054f4:	4b64      	ldr	r3, [pc, #400]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	4a63      	ldr	r2, [pc, #396]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x30c>
 800550a:	4b5f      	ldr	r3, [pc, #380]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550e:	4a5e      	ldr	r2, [pc, #376]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	6713      	str	r3, [r2, #112]	@ 0x70
 8005516:	4b5c      	ldr	r3, [pc, #368]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	4a5b      	ldr	r2, [pc, #364]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	@ 0x70
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005524:	4b58      	ldr	r3, [pc, #352]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005528:	4a57      	ldr	r2, [pc, #348]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005530:	4b55      	ldr	r3, [pc, #340]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005534:	4a54      	ldr	r2, [pc, #336]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005536:	f023 0304 	bic.w	r3, r3, #4
 800553a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d015      	beq.n	8005570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fe f9fc 	bl	8003940 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fe f9f8 	bl	8003940 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0cb      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005562:	4b49      	ldr	r3, [pc, #292]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ee      	beq.n	800554c <HAL_RCC_OscConfig+0x334>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005570:	f7fe f9e6 	bl	8003940 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005576:	e00a      	b.n	800558e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fe f9e2 	bl	8003940 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0b5      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558e:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ee      	bne.n	8005578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d105      	bne.n	80055ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a0:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	4a38      	ldr	r2, [pc, #224]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80a1 	beq.w	80056f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d05c      	beq.n	800567c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d141      	bne.n	800564e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ca:	4b31      	ldr	r3, [pc, #196]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fe f9b6 	bl	8003940 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fe f9b2 	bl	8003940 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e087      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	3b01      	subs	r3, #1
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	491b      	ldr	r1, [pc, #108]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b1b      	ldr	r3, [pc, #108]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fe f98b 	bl	8003940 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562e:	f7fe f987 	bl	8003940 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e05c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005640:	4b11      	ldr	r3, [pc, #68]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x416>
 800564c:	e054      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fe f974 	bl	8003940 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565c:	f7fe f970 	bl	8003940 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e045      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x444>
 800567a:	e03d      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e038      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005688:	40023800 	.word	0x40023800
 800568c:	40007000 	.word	0x40007000
 8005690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <HAL_RCC_OscConfig+0x4ec>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d028      	beq.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d121      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d11a      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d111      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	3b01      	subs	r3, #1
 80056de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cc      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b68      	ldr	r3, [pc, #416]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d90c      	bls.n	8005744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b65      	ldr	r3, [pc, #404]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b63      	ldr	r3, [pc, #396]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0b8      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800575c:	4b59      	ldr	r3, [pc, #356]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a58      	ldr	r2, [pc, #352]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005774:	4b53      	ldr	r3, [pc, #332]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a52      	ldr	r2, [pc, #328]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800577e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b50      	ldr	r3, [pc, #320]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	494d      	ldr	r1, [pc, #308]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d044      	beq.n	8005828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b47      	ldr	r3, [pc, #284]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d119      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c6:	4b3f      	ldr	r3, [pc, #252]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d6:	4b3b      	ldr	r3, [pc, #236]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e067      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b37      	ldr	r3, [pc, #220]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4934      	ldr	r1, [pc, #208]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f8:	f7fe f8a2 	bl	8003940 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fe f89e 	bl	8003940 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e04f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005828:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d20c      	bcs.n	8005850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b22      	ldr	r3, [pc, #136]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e032      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b19      	ldr	r3, [pc, #100]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4916      	ldr	r1, [pc, #88]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800587a:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	490e      	ldr	r1, [pc, #56]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800588e:	f000 f821 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8005892:	4602      	mov	r2, r0
 8005894:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	490a      	ldr	r1, [pc, #40]	@ (80058c8 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	5ccb      	ldrb	r3, [r1, r3]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058aa:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fd fe88 	bl	80035c4 <HAL_InitTick>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023c00 	.word	0x40023c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0800dd88 	.word	0x0800dd88
 80058cc:	20000008 	.word	0x20000008
 80058d0:	2000000c 	.word	0x2000000c

080058d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d8:	b094      	sub	sp, #80	@ 0x50
 80058da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e0:	2300      	movs	r3, #0
 80058e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e4:	2300      	movs	r3, #0
 80058e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ec:	4b79      	ldr	r3, [pc, #484]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d00d      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x40>
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	f200 80e1 	bhi.w	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x34>
 8005902:	2b04      	cmp	r3, #4
 8005904:	d003      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x3a>
 8005906:	e0db      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005908:	4b73      	ldr	r3, [pc, #460]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800590c:	e0db      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800590e:	4b73      	ldr	r3, [pc, #460]	@ (8005adc <HAL_RCC_GetSysClockFreq+0x208>)
 8005910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005912:	e0d8      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005914:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800591c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d063      	beq.n	80059f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	099b      	lsrs	r3, r3, #6
 8005930:	2200      	movs	r2, #0
 8005932:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005934:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593c:	633b      	str	r3, [r7, #48]	@ 0x30
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
 8005942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	f04f 0000 	mov.w	r0, #0
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	0159      	lsls	r1, r3, #5
 8005954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005958:	0150      	lsls	r0, r2, #5
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4621      	mov	r1, r4
 8005960:	1a51      	subs	r1, r2, r1
 8005962:	6139      	str	r1, [r7, #16]
 8005964:	4629      	mov	r1, r5
 8005966:	eb63 0301 	sbc.w	r3, r3, r1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005978:	4659      	mov	r1, fp
 800597a:	018b      	lsls	r3, r1, #6
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005982:	4651      	mov	r1, sl
 8005984:	018a      	lsls	r2, r1, #6
 8005986:	4651      	mov	r1, sl
 8005988:	ebb2 0801 	subs.w	r8, r2, r1
 800598c:	4659      	mov	r1, fp
 800598e:	eb63 0901 	sbc.w	r9, r3, r1
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a6:	4690      	mov	r8, r2
 80059a8:	4699      	mov	r9, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	eb18 0303 	adds.w	r3, r8, r3
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	462b      	mov	r3, r5
 80059b4:	eb49 0303 	adc.w	r3, r9, r3
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059c6:	4629      	mov	r1, r5
 80059c8:	024b      	lsls	r3, r1, #9
 80059ca:	4621      	mov	r1, r4
 80059cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059d0:	4621      	mov	r1, r4
 80059d2:	024a      	lsls	r2, r1, #9
 80059d4:	4610      	mov	r0, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059da:	2200      	movs	r2, #0
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059e4:	f7fb f980 	bl	8000ce8 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f0:	e058      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f2:	4b38      	ldr	r3, [pc, #224]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	2200      	movs	r2, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	4611      	mov	r1, r2
 80059fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	f04f 0000 	mov.w	r0, #0
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	0159      	lsls	r1, r3, #5
 8005a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a1e:	0150      	lsls	r0, r2, #5
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4641      	mov	r1, r8
 8005a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a44:	ebb2 040a 	subs.w	r4, r2, sl
 8005a48:	eb63 050b 	sbc.w	r5, r3, fp
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	00eb      	lsls	r3, r5, #3
 8005a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a5a:	00e2      	lsls	r2, r4, #3
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	4643      	mov	r3, r8
 8005a62:	18e3      	adds	r3, r4, r3
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	464b      	mov	r3, r9
 8005a68:	eb45 0303 	adc.w	r3, r5, r3
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	028b      	lsls	r3, r1, #10
 8005a7e:	4621      	mov	r1, r4
 8005a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a84:	4621      	mov	r1, r4
 8005a86:	028a      	lsls	r2, r1, #10
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	61fa      	str	r2, [r7, #28]
 8005a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a98:	f7fb f926 	bl	8000ce8 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ab4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3750      	adds	r7, #80	@ 0x50
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	007a1200 	.word	0x007a1200

08005ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	@ (8005af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000008 	.word	0x20000008

08005af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005afc:	f7ff fff0 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0a9b      	lsrs	r3, r3, #10
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	@ (8005b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800dd98 	.word	0x0800dd98

08005b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b24:	f7ff ffdc 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	0b5b      	lsrs	r3, r3, #13
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	@ (8005b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40023800 	.word	0x40023800
 8005b44:	0800dd98 	.word	0x0800dd98

08005b48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	220f      	movs	r2, #15
 8005b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b58:	4b12      	ldr	r3, [pc, #72]	@ (8005ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0203 	and.w	r2, r3, #3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	08db      	lsrs	r3, r3, #3
 8005b82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <HAL_RCC_GetClockConfig+0x60>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0207 	and.w	r2, r3, #7
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	601a      	str	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	40023c00 	.word	0x40023c00

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e041      	b.n	8005c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f839 	bl	8005c4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 f9c0 	bl	8005f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e04e      	b.n	8005d16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a23      	ldr	r2, [pc, #140]	@ (8005d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d022      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a19      	ldr	r2, [pc, #100]	@ (8005d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a18      	ldr	r2, [pc, #96]	@ (8005d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d111      	bne.n	8005d04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d010      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d02:	e007      	b.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40001800 	.word	0x40001800

08005d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d020      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01b      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0202 	mvn.w	r2, #2
 8005d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8d2 	bl	8005f34 <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f8c4 	bl	8005f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f8d5 	bl	8005f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d020      	beq.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01b      	beq.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0204 	mvn.w	r2, #4
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f8ac 	bl	8005f34 <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f89e 	bl	8005f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f8af 	bl	8005f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d020      	beq.n	8005e3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01b      	beq.n	8005e3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0208 	mvn.w	r2, #8
 8005e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2204      	movs	r2, #4
 8005e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f886 	bl	8005f34 <HAL_TIM_IC_CaptureCallback>
 8005e28:	e005      	b.n	8005e36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f878 	bl	8005f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f889 	bl	8005f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d020      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01b      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0210 	mvn.w	r2, #16
 8005e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f860 	bl	8005f34 <HAL_TIM_IC_CaptureCallback>
 8005e74:	e005      	b.n	8005e82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f852 	bl	8005f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f863 	bl	8005f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00c      	beq.n	8005eac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0201 	mvn.w	r2, #1
 8005ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fd fab8 	bl	800341c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f906 	bl	80060dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f834 	bl	8005f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0220 	mvn.w	r2, #32
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8d8 	bl	80060c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a46      	ldr	r2, [pc, #280]	@ (800609c <TIM_Base_SetConfig+0x12c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8e:	d00f      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a43      	ldr	r2, [pc, #268]	@ (80060a0 <TIM_Base_SetConfig+0x130>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a42      	ldr	r2, [pc, #264]	@ (80060a4 <TIM_Base_SetConfig+0x134>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a41      	ldr	r2, [pc, #260]	@ (80060a8 <TIM_Base_SetConfig+0x138>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a40      	ldr	r2, [pc, #256]	@ (80060ac <TIM_Base_SetConfig+0x13c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d108      	bne.n	8005fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a35      	ldr	r2, [pc, #212]	@ (800609c <TIM_Base_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d02b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd0:	d027      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a32      	ldr	r2, [pc, #200]	@ (80060a0 <TIM_Base_SetConfig+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d023      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a31      	ldr	r2, [pc, #196]	@ (80060a4 <TIM_Base_SetConfig+0x134>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01f      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a30      	ldr	r2, [pc, #192]	@ (80060a8 <TIM_Base_SetConfig+0x138>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2f      	ldr	r2, [pc, #188]	@ (80060ac <TIM_Base_SetConfig+0x13c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d017      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80060b0 <TIM_Base_SetConfig+0x140>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d013      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80060b4 <TIM_Base_SetConfig+0x144>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00f      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <TIM_Base_SetConfig+0x148>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2b      	ldr	r2, [pc, #172]	@ (80060bc <TIM_Base_SetConfig+0x14c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2a      	ldr	r2, [pc, #168]	@ (80060c0 <TIM_Base_SetConfig+0x150>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a29      	ldr	r2, [pc, #164]	@ (80060c4 <TIM_Base_SetConfig+0x154>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d108      	bne.n	8006034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a10      	ldr	r2, [pc, #64]	@ (800609c <TIM_Base_SetConfig+0x12c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a12      	ldr	r2, [pc, #72]	@ (80060ac <TIM_Base_SetConfig+0x13c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d103      	bne.n	8006070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d105      	bne.n	800608e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	611a      	str	r2, [r3, #16]
  }
}
 800608e:	bf00      	nop
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40010400 	.word	0x40010400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800
 80060bc:	40001800 	.word	0x40001800
 80060c0:	40001c00 	.word	0x40001c00
 80060c4:	40002000 	.word	0x40002000

080060c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e042      	b.n	8006188 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fd fa0c 	bl	8003534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2224      	movs	r2, #36	@ 0x24
 8006120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f973 	bl	8006420 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	@ 0x28
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d175      	bne.n	800629c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_UART_Transmit+0x2c>
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e06e      	b.n	800629e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2221      	movs	r2, #33	@ 0x21
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061ce:	f7fd fbb7 	bl	8003940 <HAL_GetTick>
 80061d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e8:	d108      	bne.n	80061fc <HAL_UART_Transmit+0x6c>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e003      	b.n	8006204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006204:	e02e      	b.n	8006264 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	2180      	movs	r1, #128	@ 0x80
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f848 	bl	80062a6 <UART_WaitOnFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e03a      	b.n	800629e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800623c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	3302      	adds	r3, #2
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e007      	b.n	8006256 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	3301      	adds	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1cb      	bne.n	8006206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	2140      	movs	r1, #64	@ 0x40
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 f814 	bl	80062a6 <UART_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e006      	b.n	800629e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800629c:	2302      	movs	r3, #2
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b6:	e03b      	b.n	8006330 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d037      	beq.n	8006330 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c0:	f7fd fb3e 	bl	8003940 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	6a3a      	ldr	r2, [r7, #32]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d302      	bcc.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e03a      	b.n	8006350 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d023      	beq.n	8006330 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b80      	cmp	r3, #128	@ 0x80
 80062ec:	d020      	beq.n	8006330 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2b40      	cmp	r3, #64	@ 0x40
 80062f2:	d01d      	beq.n	8006330 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d116      	bne.n	8006330 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f81d 	bl	8006358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2208      	movs	r2, #8
 8006322:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e00f      	b.n	8006350 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4013      	ands	r3, r2
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	429a      	cmp	r2, r3
 800633e:	bf0c      	ite	eq
 8006340:	2301      	moveq	r3, #1
 8006342:	2300      	movne	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	429a      	cmp	r2, r3
 800634c:	d0b4      	beq.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b095      	sub	sp, #84	@ 0x54
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	330c      	adds	r3, #12
 800637e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006380:	643a      	str	r2, [r7, #64]	@ 0x40
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e5      	bne.n	8006360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3314      	adds	r3, #20
 800639a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3314      	adds	r3, #20
 80063b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e5      	bne.n	8006394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d119      	bne.n	8006404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	60bb      	str	r3, [r7, #8]
   return(result);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f023 0310 	bic.w	r3, r3, #16
 80063e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063f0:	61ba      	str	r2, [r7, #24]
 80063f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6979      	ldr	r1, [r7, #20]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	613b      	str	r3, [r7, #16]
   return(result);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e5      	bne.n	80063d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006412:	bf00      	nop
 8006414:	3754      	adds	r7, #84	@ 0x54
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006424:	b0c0      	sub	sp, #256	@ 0x100
 8006426:	af00      	add	r7, sp, #0
 8006428:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643c:	68d9      	ldr	r1, [r3, #12]
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	ea40 0301 	orr.w	r3, r0, r1
 8006448:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	431a      	orrs	r2, r3
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	431a      	orrs	r2, r3
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006478:	f021 010c 	bic.w	r1, r1, #12
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006486:	430b      	orrs	r3, r1
 8006488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649a:	6999      	ldr	r1, [r3, #24]
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	ea40 0301 	orr.w	r3, r0, r1
 80064a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b8f      	ldr	r3, [pc, #572]	@ (80066ec <UART_SetConfig+0x2cc>)
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d005      	beq.n	80064c0 <UART_SetConfig+0xa0>
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b8d      	ldr	r3, [pc, #564]	@ (80066f0 <UART_SetConfig+0x2d0>)
 80064bc:	429a      	cmp	r2, r3
 80064be:	d104      	bne.n	80064ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064c0:	f7ff fb2e 	bl	8005b20 <HAL_RCC_GetPCLK2Freq>
 80064c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064c8:	e003      	b.n	80064d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ca:	f7ff fb15 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 80064ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064dc:	f040 810c 	bne.w	80066f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064f2:	4622      	mov	r2, r4
 80064f4:	462b      	mov	r3, r5
 80064f6:	1891      	adds	r1, r2, r2
 80064f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064fa:	415b      	adcs	r3, r3
 80064fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006502:	4621      	mov	r1, r4
 8006504:	eb12 0801 	adds.w	r8, r2, r1
 8006508:	4629      	mov	r1, r5
 800650a:	eb43 0901 	adc.w	r9, r3, r1
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800651a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800651e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006522:	4690      	mov	r8, r2
 8006524:	4699      	mov	r9, r3
 8006526:	4623      	mov	r3, r4
 8006528:	eb18 0303 	adds.w	r3, r8, r3
 800652c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006530:	462b      	mov	r3, r5
 8006532:	eb49 0303 	adc.w	r3, r9, r3
 8006536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006546:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800654a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800654e:	460b      	mov	r3, r1
 8006550:	18db      	adds	r3, r3, r3
 8006552:	653b      	str	r3, [r7, #80]	@ 0x50
 8006554:	4613      	mov	r3, r2
 8006556:	eb42 0303 	adc.w	r3, r2, r3
 800655a:	657b      	str	r3, [r7, #84]	@ 0x54
 800655c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006560:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006564:	f7fa fbc0 	bl	8000ce8 <__aeabi_uldivmod>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4b61      	ldr	r3, [pc, #388]	@ (80066f4 <UART_SetConfig+0x2d4>)
 800656e:	fba3 2302 	umull	r2, r3, r3, r2
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	011c      	lsls	r4, r3, #4
 8006576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800657a:	2200      	movs	r2, #0
 800657c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006580:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006584:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006588:	4642      	mov	r2, r8
 800658a:	464b      	mov	r3, r9
 800658c:	1891      	adds	r1, r2, r2
 800658e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006590:	415b      	adcs	r3, r3
 8006592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006594:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006598:	4641      	mov	r1, r8
 800659a:	eb12 0a01 	adds.w	sl, r2, r1
 800659e:	4649      	mov	r1, r9
 80065a0:	eb43 0b01 	adc.w	fp, r3, r1
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065b8:	4692      	mov	sl, r2
 80065ba:	469b      	mov	fp, r3
 80065bc:	4643      	mov	r3, r8
 80065be:	eb1a 0303 	adds.w	r3, sl, r3
 80065c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065c6:	464b      	mov	r3, r9
 80065c8:	eb4b 0303 	adc.w	r3, fp, r3
 80065cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065e4:	460b      	mov	r3, r1
 80065e6:	18db      	adds	r3, r3, r3
 80065e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ea:	4613      	mov	r3, r2
 80065ec:	eb42 0303 	adc.w	r3, r2, r3
 80065f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065fa:	f7fa fb75 	bl	8000ce8 <__aeabi_uldivmod>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4611      	mov	r1, r2
 8006604:	4b3b      	ldr	r3, [pc, #236]	@ (80066f4 <UART_SetConfig+0x2d4>)
 8006606:	fba3 2301 	umull	r2, r3, r3, r1
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2264      	movs	r2, #100	@ 0x64
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	1acb      	subs	r3, r1, r3
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800661a:	4b36      	ldr	r3, [pc, #216]	@ (80066f4 <UART_SetConfig+0x2d4>)
 800661c:	fba3 2302 	umull	r2, r3, r3, r2
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006628:	441c      	add	r4, r3
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800662e:	2200      	movs	r2, #0
 8006630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006634:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006638:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800663c:	4642      	mov	r2, r8
 800663e:	464b      	mov	r3, r9
 8006640:	1891      	adds	r1, r2, r2
 8006642:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006644:	415b      	adcs	r3, r3
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800664c:	4641      	mov	r1, r8
 800664e:	1851      	adds	r1, r2, r1
 8006650:	6339      	str	r1, [r7, #48]	@ 0x30
 8006652:	4649      	mov	r1, r9
 8006654:	414b      	adcs	r3, r1
 8006656:	637b      	str	r3, [r7, #52]	@ 0x34
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006664:	4659      	mov	r1, fp
 8006666:	00cb      	lsls	r3, r1, #3
 8006668:	4651      	mov	r1, sl
 800666a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666e:	4651      	mov	r1, sl
 8006670:	00ca      	lsls	r2, r1, #3
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	4603      	mov	r3, r0
 8006678:	4642      	mov	r2, r8
 800667a:	189b      	adds	r3, r3, r2
 800667c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006680:	464b      	mov	r3, r9
 8006682:	460a      	mov	r2, r1
 8006684:	eb42 0303 	adc.w	r3, r2, r3
 8006688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006698:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800669c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066a0:	460b      	mov	r3, r1
 80066a2:	18db      	adds	r3, r3, r3
 80066a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066a6:	4613      	mov	r3, r2
 80066a8:	eb42 0303 	adc.w	r3, r2, r3
 80066ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066b6:	f7fa fb17 	bl	8000ce8 <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <UART_SetConfig+0x2d4>)
 80066c0:	fba3 1302 	umull	r1, r3, r3, r2
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	2164      	movs	r1, #100	@ 0x64
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	3332      	adds	r3, #50	@ 0x32
 80066d2:	4a08      	ldr	r2, [pc, #32]	@ (80066f4 <UART_SetConfig+0x2d4>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	f003 0207 	and.w	r2, r3, #7
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4422      	add	r2, r4
 80066e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066e8:	e106      	b.n	80068f8 <UART_SetConfig+0x4d8>
 80066ea:	bf00      	nop
 80066ec:	40011000 	.word	0x40011000
 80066f0:	40011400 	.word	0x40011400
 80066f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006702:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006706:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800670a:	4642      	mov	r2, r8
 800670c:	464b      	mov	r3, r9
 800670e:	1891      	adds	r1, r2, r2
 8006710:	6239      	str	r1, [r7, #32]
 8006712:	415b      	adcs	r3, r3
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
 8006716:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800671a:	4641      	mov	r1, r8
 800671c:	1854      	adds	r4, r2, r1
 800671e:	4649      	mov	r1, r9
 8006720:	eb43 0501 	adc.w	r5, r3, r1
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	00eb      	lsls	r3, r5, #3
 800672e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006732:	00e2      	lsls	r2, r4, #3
 8006734:	4614      	mov	r4, r2
 8006736:	461d      	mov	r5, r3
 8006738:	4643      	mov	r3, r8
 800673a:	18e3      	adds	r3, r4, r3
 800673c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006740:	464b      	mov	r3, r9
 8006742:	eb45 0303 	adc.w	r3, r5, r3
 8006746:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800674a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006756:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006766:	4629      	mov	r1, r5
 8006768:	008b      	lsls	r3, r1, #2
 800676a:	4621      	mov	r1, r4
 800676c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006770:	4621      	mov	r1, r4
 8006772:	008a      	lsls	r2, r1, #2
 8006774:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006778:	f7fa fab6 	bl	8000ce8 <__aeabi_uldivmod>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4b60      	ldr	r3, [pc, #384]	@ (8006904 <UART_SetConfig+0x4e4>)
 8006782:	fba3 2302 	umull	r2, r3, r3, r2
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	011c      	lsls	r4, r3, #4
 800678a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800678e:	2200      	movs	r2, #0
 8006790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006794:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006798:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	1891      	adds	r1, r2, r2
 80067a2:	61b9      	str	r1, [r7, #24]
 80067a4:	415b      	adcs	r3, r3
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067ac:	4641      	mov	r1, r8
 80067ae:	1851      	adds	r1, r2, r1
 80067b0:	6139      	str	r1, [r7, #16]
 80067b2:	4649      	mov	r1, r9
 80067b4:	414b      	adcs	r3, r1
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067c4:	4659      	mov	r1, fp
 80067c6:	00cb      	lsls	r3, r1, #3
 80067c8:	4651      	mov	r1, sl
 80067ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ce:	4651      	mov	r1, sl
 80067d0:	00ca      	lsls	r2, r1, #3
 80067d2:	4610      	mov	r0, r2
 80067d4:	4619      	mov	r1, r3
 80067d6:	4603      	mov	r3, r0
 80067d8:	4642      	mov	r2, r8
 80067da:	189b      	adds	r3, r3, r2
 80067dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067e0:	464b      	mov	r3, r9
 80067e2:	460a      	mov	r2, r1
 80067e4:	eb42 0303 	adc.w	r3, r2, r3
 80067e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006804:	4649      	mov	r1, r9
 8006806:	008b      	lsls	r3, r1, #2
 8006808:	4641      	mov	r1, r8
 800680a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680e:	4641      	mov	r1, r8
 8006810:	008a      	lsls	r2, r1, #2
 8006812:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006816:	f7fa fa67 	bl	8000ce8 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4611      	mov	r1, r2
 8006820:	4b38      	ldr	r3, [pc, #224]	@ (8006904 <UART_SetConfig+0x4e4>)
 8006822:	fba3 2301 	umull	r2, r3, r3, r1
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	2264      	movs	r2, #100	@ 0x64
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	1acb      	subs	r3, r1, r3
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	3332      	adds	r3, #50	@ 0x32
 8006834:	4a33      	ldr	r2, [pc, #204]	@ (8006904 <UART_SetConfig+0x4e4>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006840:	441c      	add	r4, r3
 8006842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006846:	2200      	movs	r2, #0
 8006848:	673b      	str	r3, [r7, #112]	@ 0x70
 800684a:	677a      	str	r2, [r7, #116]	@ 0x74
 800684c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006850:	4642      	mov	r2, r8
 8006852:	464b      	mov	r3, r9
 8006854:	1891      	adds	r1, r2, r2
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	415b      	adcs	r3, r3
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006860:	4641      	mov	r1, r8
 8006862:	1851      	adds	r1, r2, r1
 8006864:	6039      	str	r1, [r7, #0]
 8006866:	4649      	mov	r1, r9
 8006868:	414b      	adcs	r3, r1
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006878:	4659      	mov	r1, fp
 800687a:	00cb      	lsls	r3, r1, #3
 800687c:	4651      	mov	r1, sl
 800687e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006882:	4651      	mov	r1, sl
 8006884:	00ca      	lsls	r2, r1, #3
 8006886:	4610      	mov	r0, r2
 8006888:	4619      	mov	r1, r3
 800688a:	4603      	mov	r3, r0
 800688c:	4642      	mov	r2, r8
 800688e:	189b      	adds	r3, r3, r2
 8006890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006892:	464b      	mov	r3, r9
 8006894:	460a      	mov	r2, r1
 8006896:	eb42 0303 	adc.w	r3, r2, r3
 800689a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80068a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068b4:	4649      	mov	r1, r9
 80068b6:	008b      	lsls	r3, r1, #2
 80068b8:	4641      	mov	r1, r8
 80068ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068be:	4641      	mov	r1, r8
 80068c0:	008a      	lsls	r2, r1, #2
 80068c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068c6:	f7fa fa0f 	bl	8000ce8 <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <UART_SetConfig+0x4e4>)
 80068d0:	fba3 1302 	umull	r1, r3, r3, r2
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	2164      	movs	r1, #100	@ 0x64
 80068d8:	fb01 f303 	mul.w	r3, r1, r3
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	3332      	adds	r3, #50	@ 0x32
 80068e2:	4a08      	ldr	r2, [pc, #32]	@ (8006904 <UART_SetConfig+0x4e4>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	f003 020f 	and.w	r2, r3, #15
 80068ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4422      	add	r2, r4
 80068f6:	609a      	str	r2, [r3, #8]
}
 80068f8:	bf00      	nop
 80068fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068fe:	46bd      	mov	sp, r7
 8006900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006904:	51eb851f 	.word	0x51eb851f

08006908 <__NVIC_SetPriority>:
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	6039      	str	r1, [r7, #0]
 8006912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006918:	2b00      	cmp	r3, #0
 800691a:	db0a      	blt.n	8006932 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	b2da      	uxtb	r2, r3
 8006920:	490c      	ldr	r1, [pc, #48]	@ (8006954 <__NVIC_SetPriority+0x4c>)
 8006922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006926:	0112      	lsls	r2, r2, #4
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	440b      	add	r3, r1
 800692c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006930:	e00a      	b.n	8006948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	4908      	ldr	r1, [pc, #32]	@ (8006958 <__NVIC_SetPriority+0x50>)
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	3b04      	subs	r3, #4
 8006940:	0112      	lsls	r2, r2, #4
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	440b      	add	r3, r1
 8006946:	761a      	strb	r2, [r3, #24]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	e000e100 	.word	0xe000e100
 8006958:	e000ed00 	.word	0xe000ed00

0800695c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006960:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <SysTick_Handler+0x1c>)
 8006962:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006964:	f002 fa04 	bl	8008d70 <xTaskGetSchedulerState>
 8006968:	4603      	mov	r3, r0
 800696a:	2b01      	cmp	r3, #1
 800696c:	d001      	beq.n	8006972 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800696e:	f003 f8fb 	bl	8009b68 <xPortSysTickHandler>
  }
}
 8006972:	bf00      	nop
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	e000e010 	.word	0xe000e010

0800697c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006980:	2100      	movs	r1, #0
 8006982:	f06f 0004 	mvn.w	r0, #4
 8006986:	f7ff ffbf 	bl	8006908 <__NVIC_SetPriority>
#endif
}
 800698a:	bf00      	nop
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006996:	f3ef 8305 	mrs	r3, IPSR
 800699a:	603b      	str	r3, [r7, #0]
  return(result);
 800699c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80069a2:	f06f 0305 	mvn.w	r3, #5
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	e00c      	b.n	80069c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069aa:	4b0a      	ldr	r3, [pc, #40]	@ (80069d4 <osKernelInitialize+0x44>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069b2:	4b08      	ldr	r3, [pc, #32]	@ (80069d4 <osKernelInitialize+0x44>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	e002      	b.n	80069c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069c4:	687b      	ldr	r3, [r7, #4]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000754 	.word	0x20000754

080069d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069de:	f3ef 8305 	mrs	r3, IPSR
 80069e2:	603b      	str	r3, [r7, #0]
  return(result);
 80069e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80069ea:	f06f 0305 	mvn.w	r3, #5
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	e010      	b.n	8006a14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <osKernelStart+0x48>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d109      	bne.n	8006a0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069fa:	f7ff ffbf 	bl	800697c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069fe:	4b08      	ldr	r3, [pc, #32]	@ (8006a20 <osKernelStart+0x48>)
 8006a00:	2202      	movs	r2, #2
 8006a02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a04:	f001 fd56 	bl	80084b4 <vTaskStartScheduler>
      stat = osOK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	e002      	b.n	8006a14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a14:	687b      	ldr	r3, [r7, #4]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000754 	.word	0x20000754

08006a24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08e      	sub	sp, #56	@ 0x38
 8006a28:	af04      	add	r7, sp, #16
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a34:	f3ef 8305 	mrs	r3, IPSR
 8006a38:	617b      	str	r3, [r7, #20]
  return(result);
 8006a3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d17e      	bne.n	8006b3e <osThreadNew+0x11a>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d07b      	beq.n	8006b3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a46:	2380      	movs	r3, #128	@ 0x80
 8006a48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a4a:	2318      	movs	r3, #24
 8006a4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006a52:	f04f 33ff 	mov.w	r3, #4294967295
 8006a56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d045      	beq.n	8006aea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <osThreadNew+0x48>
        name = attr->name;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <osThreadNew+0x6e>
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2b38      	cmp	r3, #56	@ 0x38
 8006a84:	d805      	bhi.n	8006a92 <osThreadNew+0x6e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <osThreadNew+0x72>
        return (NULL);
 8006a92:	2300      	movs	r3, #0
 8006a94:	e054      	b.n	8006b40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	089b      	lsrs	r3, r3, #2
 8006aa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <osThreadNew+0xa8>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2b5b      	cmp	r3, #91	@ 0x5b
 8006ab4:	d90a      	bls.n	8006acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d006      	beq.n	8006acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <osThreadNew+0xa8>
        mem = 1;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	e010      	b.n	8006aee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10c      	bne.n	8006aee <osThreadNew+0xca>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d108      	bne.n	8006aee <osThreadNew+0xca>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <osThreadNew+0xca>
          mem = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	e001      	b.n	8006aee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d110      	bne.n	8006b16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006afc:	9202      	str	r2, [sp, #8]
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6a3a      	ldr	r2, [r7, #32]
 8006b08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f001 faf6 	bl	80080fc <xTaskCreateStatic>
 8006b10:	4603      	mov	r3, r0
 8006b12:	613b      	str	r3, [r7, #16]
 8006b14:	e013      	b.n	8006b3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d110      	bne.n	8006b3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	f107 0310 	add.w	r3, r7, #16
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f001 fb44 	bl	80081bc <xTaskCreate>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d001      	beq.n	8006b3e <osThreadNew+0x11a>
            hTask = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b3e:	693b      	ldr	r3, [r7, #16]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3728      	adds	r7, #40	@ 0x28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b50:	f3ef 8305 	mrs	r3, IPSR
 8006b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <osDelay+0x1c>
    stat = osErrorISR;
 8006b5c:	f06f 0305 	mvn.w	r3, #5
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e007      	b.n	8006b74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 fc6a 	bl	8008448 <vTaskDelay>
    }
  }

  return (stat);
 8006b74:	68fb      	ldr	r3, [r7, #12]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b088      	sub	sp, #32
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b8a:	f3ef 8305 	mrs	r3, IPSR
 8006b8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b90:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d174      	bne.n	8006c80 <osMutexNew+0x102>
    if (attr != NULL) {
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	e001      	b.n	8006ba8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <osMutexNew+0x3a>
      rmtx = 1U;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	e001      	b.n	8006bbc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f003 0308 	and.w	r3, r3, #8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d15c      	bne.n	8006c80 <osMutexNew+0x102>
      mem = -1;
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d015      	beq.n	8006bfe <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d006      	beq.n	8006be8 <osMutexNew+0x6a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b4f      	cmp	r3, #79	@ 0x4f
 8006be0:	d902      	bls.n	8006be8 <osMutexNew+0x6a>
          mem = 1;
 8006be2:	2301      	movs	r3, #1
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	e00c      	b.n	8006c02 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d108      	bne.n	8006c02 <osMutexNew+0x84>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d104      	bne.n	8006c02 <osMutexNew+0x84>
            mem = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	e001      	b.n	8006c02 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d112      	bne.n	8006c2e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	4619      	mov	r1, r3
 8006c14:	2004      	movs	r0, #4
 8006c16:	f000 fc50 	bl	80074ba <xQueueCreateMutexStatic>
 8006c1a:	61f8      	str	r0, [r7, #28]
 8006c1c:	e016      	b.n	8006c4c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	4619      	mov	r1, r3
 8006c24:	2001      	movs	r0, #1
 8006c26:	f000 fc48 	bl	80074ba <xQueueCreateMutexStatic>
 8006c2a:	61f8      	str	r0, [r7, #28]
 8006c2c:	e00e      	b.n	8006c4c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10b      	bne.n	8006c4c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006c3a:	2004      	movs	r0, #4
 8006c3c:	f000 fc25 	bl	800748a <xQueueCreateMutex>
 8006c40:	61f8      	str	r0, [r7, #28]
 8006c42:	e003      	b.n	8006c4c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006c44:	2001      	movs	r0, #1
 8006c46:	f000 fc20 	bl	800748a <xQueueCreateMutex>
 8006c4a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00c      	beq.n	8006c6c <osMutexNew+0xee>
        if (attr != NULL) {
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <osMutexNew+0xe2>
          name = attr->name;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	e001      	b.n	8006c64 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006c64:	68f9      	ldr	r1, [r7, #12]
 8006c66:	69f8      	ldr	r0, [r7, #28]
 8006c68:	f001 f9ea 	bl	8008040 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d006      	beq.n	8006c80 <osMutexNew+0x102>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006c80:	69fb      	ldr	r3, [r7, #28]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3720      	adds	r7, #32
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b086      	sub	sp, #24
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca8:	f3ef 8305 	mrs	r3, IPSR
 8006cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006cb4:	f06f 0305 	mvn.w	r3, #5
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e02c      	b.n	8006d16 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d103      	bne.n	8006cca <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006cc2:	f06f 0303 	mvn.w	r3, #3
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e025      	b.n	8006d16 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d011      	beq.n	8006cf4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6938      	ldr	r0, [r7, #16]
 8006cd4:	f000 fc41 	bl	800755a <xQueueTakeMutexRecursive>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d01b      	beq.n	8006d16 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006ce4:	f06f 0301 	mvn.w	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	e014      	b.n	8006d16 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006cec:	f06f 0302 	mvn.w	r3, #2
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	e010      	b.n	8006d16 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6938      	ldr	r0, [r7, #16]
 8006cf8:	f000 fee8 	bl	8007acc <xQueueSemaphoreTake>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d009      	beq.n	8006d16 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006d08:	f06f 0301 	mvn.w	r3, #1
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	e002      	b.n	8006d16 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006d10:	f06f 0302 	mvn.w	r3, #2
 8006d14:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006d16:	697b      	ldr	r3, [r7, #20]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d3c:	f3ef 8305 	mrs	r3, IPSR
 8006d40:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d42:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006d48:	f06f 0305 	mvn.w	r3, #5
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	e01f      	b.n	8006d90 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006d56:	f06f 0303 	mvn.w	r3, #3
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e018      	b.n	8006d90 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006d64:	6938      	ldr	r0, [r7, #16]
 8006d66:	f000 fbc3 	bl	80074f0 <xQueueGiveMutexRecursive>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d00f      	beq.n	8006d90 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006d70:	f06f 0302 	mvn.w	r3, #2
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e00b      	b.n	8006d90 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f000 fc22 	bl	80075c8 <xQueueGenericSend>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d002      	beq.n	8006d90 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006d8a:	f06f 0302 	mvn.w	r3, #2
 8006d8e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006d90:	697b      	ldr	r3, [r7, #20]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b08a      	sub	sp, #40	@ 0x28
 8006d9e:	af02      	add	r7, sp, #8
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006daa:	f3ef 8305 	mrs	r3, IPSR
 8006dae:	613b      	str	r3, [r7, #16]
  return(result);
 8006db0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d15f      	bne.n	8006e76 <osMessageQueueNew+0xdc>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d05c      	beq.n	8006e76 <osMessageQueueNew+0xdc>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d059      	beq.n	8006e76 <osMessageQueueNew+0xdc>
    mem = -1;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d029      	beq.n	8006e22 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d012      	beq.n	8006dfc <osMessageQueueNew+0x62>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b4f      	cmp	r3, #79	@ 0x4f
 8006ddc:	d90e      	bls.n	8006dfc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695a      	ldr	r2, [r3, #20]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	fb01 f303 	mul.w	r3, r1, r3
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d302      	bcc.n	8006dfc <osMessageQueueNew+0x62>
        mem = 1;
 8006df6:	2301      	movs	r3, #1
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	e014      	b.n	8006e26 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d110      	bne.n	8006e26 <osMessageQueueNew+0x8c>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10c      	bne.n	8006e26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <osMessageQueueNew+0x8c>
          mem = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	e001      	b.n	8006e26 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d10b      	bne.n	8006e44 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2100      	movs	r1, #0
 8006e36:	9100      	str	r1, [sp, #0]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fa30 	bl	80072a0 <xQueueGenericCreateStatic>
 8006e40:	61f8      	str	r0, [r7, #28]
 8006e42:	e008      	b.n	8006e56 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 faa3 	bl	800739a <xQueueGenericCreate>
 8006e54:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00c      	beq.n	8006e76 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <osMessageQueueNew+0xd0>
        name = attr->name;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	e001      	b.n	8006e6e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e6e:	6979      	ldr	r1, [r7, #20]
 8006e70:	69f8      	ldr	r0, [r7, #28]
 8006e72:	f001 f8e5 	bl	8008040 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006e76:	69fb      	ldr	r3, [r7, #28]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e98:	f3ef 8305 	mrs	r3, IPSR
 8006e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8006e9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d028      	beq.n	8006ef6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d005      	beq.n	8006eb6 <osMessageQueuePut+0x36>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <osMessageQueuePut+0x36>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006eb6:	f06f 0303 	mvn.w	r3, #3
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	e038      	b.n	8006f30 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ec2:	f107 0210 	add.w	r2, r7, #16
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	69b8      	ldr	r0, [r7, #24]
 8006ecc:	f000 fc7e 	bl	80077cc <xQueueGenericSendFromISR>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d003      	beq.n	8006ede <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006ed6:	f06f 0302 	mvn.w	r3, #2
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	e028      	b.n	8006f30 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d025      	beq.n	8006f30 <osMessageQueuePut+0xb0>
 8006ee4:	4b15      	ldr	r3, [pc, #84]	@ (8006f3c <osMessageQueuePut+0xbc>)
 8006ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	e01c      	b.n	8006f30 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <osMessageQueuePut+0x82>
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006f02:	f06f 0303 	mvn.w	r3, #3
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	e012      	b.n	8006f30 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	69b8      	ldr	r0, [r7, #24]
 8006f12:	f000 fb59 	bl	80075c8 <xQueueGenericSend>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d009      	beq.n	8006f30 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006f22:	f06f 0301 	mvn.w	r3, #1
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	e002      	b.n	8006f30 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006f2a:	f06f 0302 	mvn.w	r3, #2
 8006f2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f30:	69fb      	ldr	r3, [r7, #28]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	e000ed04 	.word	0xe000ed04

08006f40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f56:	f3ef 8305 	mrs	r3, IPSR
 8006f5a:	617b      	str	r3, [r7, #20]
  return(result);
 8006f5c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d028      	beq.n	8006fb4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <osMessageQueueGet+0x34>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <osMessageQueueGet+0x34>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006f74:	f06f 0303 	mvn.w	r3, #3
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	e037      	b.n	8006fec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f80:	f107 0310 	add.w	r3, r7, #16
 8006f84:	461a      	mov	r2, r3
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	69b8      	ldr	r0, [r7, #24]
 8006f8a:	f000 feaf 	bl	8007cec <xQueueReceiveFromISR>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d003      	beq.n	8006f9c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006f94:	f06f 0302 	mvn.w	r3, #2
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	e027      	b.n	8006fec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d024      	beq.n	8006fec <osMessageQueueGet+0xac>
 8006fa2:	4b15      	ldr	r3, [pc, #84]	@ (8006ff8 <osMessageQueueGet+0xb8>)
 8006fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	e01b      	b.n	8006fec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <osMessageQueueGet+0x80>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d103      	bne.n	8006fc8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006fc0:	f06f 0303 	mvn.w	r3, #3
 8006fc4:	61fb      	str	r3, [r7, #28]
 8006fc6:	e011      	b.n	8006fec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	69b8      	ldr	r0, [r7, #24]
 8006fce:	f000 fc9b 	bl	8007908 <xQueueReceive>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d009      	beq.n	8006fec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006fde:	f06f 0301 	mvn.w	r3, #1
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	e002      	b.n	8006fec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006fe6:	f06f 0302 	mvn.w	r3, #2
 8006fea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006fec:	69fb      	ldr	r3, [r7, #28]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3720      	adds	r7, #32
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	e000ed04 	.word	0xe000ed04

08006ffc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4a07      	ldr	r2, [pc, #28]	@ (8007028 <vApplicationGetIdleTaskMemory+0x2c>)
 800700c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4a06      	ldr	r2, [pc, #24]	@ (800702c <vApplicationGetIdleTaskMemory+0x30>)
 8007012:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2280      	movs	r2, #128	@ 0x80
 8007018:	601a      	str	r2, [r3, #0]
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000758 	.word	0x20000758
 800702c:	200007b4 	.word	0x200007b4

08007030 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a07      	ldr	r2, [pc, #28]	@ (800705c <vApplicationGetTimerTaskMemory+0x2c>)
 8007040:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4a06      	ldr	r2, [pc, #24]	@ (8007060 <vApplicationGetTimerTaskMemory+0x30>)
 8007046:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800704e:	601a      	str	r2, [r3, #0]
}
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	200009b4 	.word	0x200009b4
 8007060:	20000a10 	.word	0x20000a10

08007064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f103 0208 	add.w	r2, r3, #8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f04f 32ff 	mov.w	r2, #4294967295
 800707c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f103 0208 	add.w	r2, r3, #8
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f103 0208 	add.w	r2, r3, #8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
}
 80070fa:	bf00      	nop
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d103      	bne.n	8007126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e00c      	b.n	8007140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3308      	adds	r3, #8
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e002      	b.n	8007134 <vListInsert+0x2e>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	429a      	cmp	r2, r3
 800713e:	d2f6      	bcs.n	800712e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	601a      	str	r2, [r3, #0]
}
 800716c:	bf00      	nop
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6892      	ldr	r2, [r2, #8]
 800718e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6852      	ldr	r2, [r2, #4]
 8007198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d103      	bne.n	80071ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	1e5a      	subs	r2, r3, #1
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10b      	bne.n	80071f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071f8:	f002 fc26 	bl	8009a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007204:	68f9      	ldr	r1, [r7, #12]
 8007206:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	441a      	add	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007228:	3b01      	subs	r3, #1
 800722a:	68f9      	ldr	r1, [r7, #12]
 800722c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	441a      	add	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	22ff      	movs	r2, #255	@ 0xff
 800723c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	22ff      	movs	r2, #255	@ 0xff
 8007244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d114      	bne.n	8007278 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01a      	beq.n	800728c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3310      	adds	r3, #16
 800725a:	4618      	mov	r0, r3
 800725c:	f001 fbb8 	bl	80089d0 <xTaskRemoveFromEventList>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d012      	beq.n	800728c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007266:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <xQueueGenericReset+0xd0>)
 8007268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	e009      	b.n	800728c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3310      	adds	r3, #16
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fef1 	bl	8007064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3324      	adds	r3, #36	@ 0x24
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff feec 	bl	8007064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800728c:	f002 fc0e 	bl	8009aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007290:	2301      	movs	r3, #1
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08e      	sub	sp, #56	@ 0x38
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80072c6:	bf00      	nop
 80072c8:	bf00      	nop
 80072ca:	e7fd      	b.n	80072c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10b      	bne.n	80072ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <xQueueGenericCreateStatic+0x56>
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <xQueueGenericCreateStatic+0x5a>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <xQueueGenericCreateStatic+0x5c>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	623b      	str	r3, [r7, #32]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <xQueueGenericCreateStatic+0x84>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <xQueueGenericCreateStatic+0x88>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <xQueueGenericCreateStatic+0x8a>
 8007328:	2300      	movs	r3, #0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	61fb      	str	r3, [r7, #28]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007346:	2350      	movs	r3, #80	@ 0x50
 8007348:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b50      	cmp	r3, #80	@ 0x50
 800734e:	d00b      	beq.n	8007368 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	61bb      	str	r3, [r7, #24]
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007368:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800736e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00d      	beq.n	8007390 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800737c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	4613      	mov	r3, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f840 	bl	8007410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007392:	4618      	mov	r0, r3
 8007394:	3730      	adds	r7, #48	@ 0x30
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800739a:	b580      	push	{r7, lr}
 800739c:	b08a      	sub	sp, #40	@ 0x28
 800739e:	af02      	add	r7, sp, #8
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	4613      	mov	r3, r2
 80073a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10b      	bne.n	80073c6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	613b      	str	r3, [r7, #16]
}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop
 80073c4:	e7fd      	b.n	80073c2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	fb02 f303 	mul.w	r3, r2, r3
 80073ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	3350      	adds	r3, #80	@ 0x50
 80073d4:	4618      	mov	r0, r3
 80073d6:	f002 fc59 	bl	8009c8c <pvPortMalloc>
 80073da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d011      	beq.n	8007406 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	3350      	adds	r3, #80	@ 0x50
 80073ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073f4:	79fa      	ldrb	r2, [r7, #7]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f805 	bl	8007410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007406:	69bb      	ldr	r3, [r7, #24]
	}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e002      	b.n	8007432 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800743e:	2101      	movs	r1, #1
 8007440:	69b8      	ldr	r0, [r7, #24]
 8007442:	f7ff fec3 	bl	80071cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007476:	2300      	movs	r3, #0
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8a3 	bl	80075c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800748a:	b580      	push	{r7, lr}
 800748c:	b086      	sub	sp, #24
 800748e:	af00      	add	r7, sp, #0
 8007490:	4603      	mov	r3, r0
 8007492:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007494:	2301      	movs	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	2300      	movs	r3, #0
 800749a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	461a      	mov	r2, r3
 80074a0:	6939      	ldr	r1, [r7, #16]
 80074a2:	6978      	ldr	r0, [r7, #20]
 80074a4:	f7ff ff79 	bl	800739a <xQueueGenericCreate>
 80074a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff ffd3 	bl	8007456 <prvInitialiseMutex>

		return xNewQueue;
 80074b0:	68fb      	ldr	r3, [r7, #12]
	}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b088      	sub	sp, #32
 80074be:	af02      	add	r7, sp, #8
 80074c0:	4603      	mov	r3, r0
 80074c2:	6039      	str	r1, [r7, #0]
 80074c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074c6:	2301      	movs	r3, #1
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2200      	movs	r2, #0
 80074d6:	6939      	ldr	r1, [r7, #16]
 80074d8:	6978      	ldr	r0, [r7, #20]
 80074da:	f7ff fee1 	bl	80072a0 <xQueueGenericCreateStatic>
 80074de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f7ff ffb8 	bl	8007456 <prvInitialiseMutex>

		return xNewQueue;
 80074e6:	68fb      	ldr	r3, [r7, #12]
	}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10b      	bne.n	800751a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	60fb      	str	r3, [r7, #12]
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	e7fd      	b.n	8007516 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	689c      	ldr	r4, [r3, #8]
 800751e:	f001 fc17 	bl	8008d50 <xTaskGetCurrentTaskHandle>
 8007522:	4603      	mov	r3, r0
 8007524:	429c      	cmp	r4, r3
 8007526:	d111      	bne.n	800754c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	1e5a      	subs	r2, r3, #1
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800753a:	2300      	movs	r3, #0
 800753c:	2200      	movs	r2, #0
 800753e:	2100      	movs	r1, #0
 8007540:	6938      	ldr	r0, [r7, #16]
 8007542:	f000 f841 	bl	80075c8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007546:	2301      	movs	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	e001      	b.n	8007550 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007550:	697b      	ldr	r3, [r7, #20]
	}
 8007552:	4618      	mov	r0, r3
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	bd90      	pop	{r4, r7, pc}

0800755a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800755a:	b590      	push	{r4, r7, lr}
 800755c:	b087      	sub	sp, #28
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	60fb      	str	r3, [r7, #12]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	689c      	ldr	r4, [r3, #8]
 800758a:	f001 fbe1 	bl	8008d50 <xTaskGetCurrentTaskHandle>
 800758e:	4603      	mov	r3, r0
 8007590:	429c      	cmp	r4, r3
 8007592:	d107      	bne.n	80075a4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800759e:	2301      	movs	r3, #1
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	e00c      	b.n	80075be <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6938      	ldr	r0, [r7, #16]
 80075a8:	f000 fa90 	bl	8007acc <xQueueSemaphoreTake>
 80075ac:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80075be:	697b      	ldr	r3, [r7, #20]
	}
 80075c0:	4618      	mov	r0, r3
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd90      	pop	{r4, r7, pc}

080075c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08e      	sub	sp, #56	@ 0x38
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075d6:	2300      	movs	r3, #0
 80075d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <xQueueGenericSend+0x34>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <xQueueGenericSend+0x42>
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <xQueueGenericSend+0x46>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <xQueueGenericSend+0x48>
 800760e:	2300      	movs	r3, #0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10b      	bne.n	800762c <xQueueGenericSend+0x64>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d103      	bne.n	800763a <xQueueGenericSend+0x72>
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <xQueueGenericSend+0x76>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <xQueueGenericSend+0x78>
 800763e:	2300      	movs	r3, #0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10b      	bne.n	800765c <xQueueGenericSend+0x94>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	623b      	str	r3, [r7, #32]
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	e7fd      	b.n	8007658 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800765c:	f001 fb88 	bl	8008d70 <xTaskGetSchedulerState>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <xQueueGenericSend+0xa4>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <xQueueGenericSend+0xa8>
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <xQueueGenericSend+0xaa>
 8007670:	2300      	movs	r3, #0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <xQueueGenericSend+0xc6>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	61fb      	str	r3, [r7, #28]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800768e:	f002 f9db 	bl	8009a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769a:	429a      	cmp	r2, r3
 800769c:	d302      	bcc.n	80076a4 <xQueueGenericSend+0xdc>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d129      	bne.n	80076f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076aa:	f000 fbb9 	bl	8007e20 <prvCopyDataToQueue>
 80076ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d010      	beq.n	80076da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	3324      	adds	r3, #36	@ 0x24
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 f987 	bl	80089d0 <xTaskRemoveFromEventList>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d013      	beq.n	80076f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076c8:	4b3f      	ldr	r3, [pc, #252]	@ (80077c8 <xQueueGenericSend+0x200>)
 80076ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	e00a      	b.n	80076f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076e0:	4b39      	ldr	r3, [pc, #228]	@ (80077c8 <xQueueGenericSend+0x200>)
 80076e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076f0:	f002 f9dc 	bl	8009aac <vPortExitCritical>
				return pdPASS;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e063      	b.n	80077c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d103      	bne.n	8007706 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076fe:	f002 f9d5 	bl	8009aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007702:	2300      	movs	r3, #0
 8007704:	e05c      	b.n	80077c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800770c:	f107 0314 	add.w	r3, r7, #20
 8007710:	4618      	mov	r0, r3
 8007712:	f001 f9c1 	bl	8008a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800771a:	f002 f9c7 	bl	8009aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800771e:	f000 ff31 	bl	8008584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007722:	f002 f991 	bl	8009a48 <vPortEnterCritical>
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800772c:	b25b      	sxtb	r3, r3
 800772e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007732:	d103      	bne.n	800773c <xQueueGenericSend+0x174>
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007742:	b25b      	sxtb	r3, r3
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007748:	d103      	bne.n	8007752 <xQueueGenericSend+0x18a>
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007752:	f002 f9ab 	bl	8009aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007756:	1d3a      	adds	r2, r7, #4
 8007758:	f107 0314 	add.w	r3, r7, #20
 800775c:	4611      	mov	r1, r2
 800775e:	4618      	mov	r0, r3
 8007760:	f001 f9b0 	bl	8008ac4 <xTaskCheckForTimeOut>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d124      	bne.n	80077b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800776a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800776c:	f000 fc50 	bl	8008010 <prvIsQueueFull>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d018      	beq.n	80077a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	3310      	adds	r3, #16
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f001 f8d4 	bl	800892c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007786:	f000 fbdb 	bl	8007f40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800778a:	f000 ff09 	bl	80085a0 <xTaskResumeAll>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	f47f af7c 	bne.w	800768e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007796:	4b0c      	ldr	r3, [pc, #48]	@ (80077c8 <xQueueGenericSend+0x200>)
 8007798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	e772      	b.n	800768e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077aa:	f000 fbc9 	bl	8007f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077ae:	f000 fef7 	bl	80085a0 <xTaskResumeAll>
 80077b2:	e76c      	b.n	800768e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077b6:	f000 fbc3 	bl	8007f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077ba:	f000 fef1 	bl	80085a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3738      	adds	r7, #56	@ 0x38
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b090      	sub	sp, #64	@ 0x40
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d103      	bne.n	800780a <xQueueGenericSendFromISR+0x3e>
 8007802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <xQueueGenericSendFromISR+0x42>
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <xQueueGenericSendFromISR+0x44>
 800780e:	2300      	movs	r3, #0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007826:	bf00      	nop
 8007828:	bf00      	nop
 800782a:	e7fd      	b.n	8007828 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d103      	bne.n	800783a <xQueueGenericSendFromISR+0x6e>
 8007832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <xQueueGenericSendFromISR+0x72>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <xQueueGenericSendFromISR+0x74>
 800783e:	2300      	movs	r3, #0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	623b      	str	r3, [r7, #32]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800785c:	f002 f9d4 	bl	8009c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007860:	f3ef 8211 	mrs	r2, BASEPRI
 8007864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	61fa      	str	r2, [r7, #28]
 8007876:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007878:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800787a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007884:	429a      	cmp	r2, r3
 8007886:	d302      	bcc.n	800788e <xQueueGenericSendFromISR+0xc2>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d12f      	bne.n	80078ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800788e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007894:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078a4:	f000 fabc 	bl	8007e20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d112      	bne.n	80078d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d016      	beq.n	80078e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	3324      	adds	r3, #36	@ 0x24
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 f886 	bl	80089d0 <xTaskRemoveFromEventList>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00e      	beq.n	80078e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	e007      	b.n	80078e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80078dc:	3301      	adds	r3, #1
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	b25a      	sxtb	r2, r3
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80078e8:	2301      	movs	r3, #1
 80078ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80078ec:	e001      	b.n	80078f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007900:	4618      	mov	r0, r3
 8007902:	3740      	adds	r7, #64	@ 0x40
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	@ 0x30
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007914:	2300      	movs	r3, #0
 8007916:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <xQueueReceive+0x32>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	623b      	str	r3, [r7, #32]
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	e7fd      	b.n	8007936 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d103      	bne.n	8007948 <xQueueReceive+0x40>
 8007940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <xQueueReceive+0x44>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <xQueueReceive+0x46>
 800794c:	2300      	movs	r3, #0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <xQueueReceive+0x62>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	61fb      	str	r3, [r7, #28]
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800796a:	f001 fa01 	bl	8008d70 <xTaskGetSchedulerState>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <xQueueReceive+0x72>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <xQueueReceive+0x76>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <xQueueReceive+0x78>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10b      	bne.n	800799c <xQueueReceive+0x94>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	61bb      	str	r3, [r7, #24]
}
 8007996:	bf00      	nop
 8007998:	bf00      	nop
 800799a:	e7fd      	b.n	8007998 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800799c:	f002 f854 	bl	8009a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01f      	beq.n	80079ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079ac:	68b9      	ldr	r1, [r7, #8]
 80079ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079b0:	f000 faa0 	bl	8007ef4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b6:	1e5a      	subs	r2, r3, #1
 80079b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00f      	beq.n	80079e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	3310      	adds	r3, #16
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 f801 	bl	80089d0 <xTaskRemoveFromEventList>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d007      	beq.n	80079e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079d4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ac8 <xQueueReceive+0x1c0>)
 80079d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079e4:	f002 f862 	bl	8009aac <vPortExitCritical>
				return pdPASS;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e069      	b.n	8007ac0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079f2:	f002 f85b 	bl	8009aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e062      	b.n	8007ac0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a00:	f107 0310 	add.w	r3, r7, #16
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 f847 	bl	8008a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a0e:	f002 f84d 	bl	8009aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a12:	f000 fdb7 	bl	8008584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a16:	f002 f817 	bl	8009a48 <vPortEnterCritical>
 8007a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a20:	b25b      	sxtb	r3, r3
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d103      	bne.n	8007a30 <xQueueReceive+0x128>
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a36:	b25b      	sxtb	r3, r3
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3c:	d103      	bne.n	8007a46 <xQueueReceive+0x13e>
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a46:	f002 f831 	bl	8009aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a4a:	1d3a      	adds	r2, r7, #4
 8007a4c:	f107 0310 	add.w	r3, r7, #16
 8007a50:	4611      	mov	r1, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 f836 	bl	8008ac4 <xTaskCheckForTimeOut>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d123      	bne.n	8007aa6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a60:	f000 fac0 	bl	8007fe4 <prvIsQueueEmpty>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d017      	beq.n	8007a9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	3324      	adds	r3, #36	@ 0x24
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4611      	mov	r1, r2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 ff5a 	bl	800892c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a7a:	f000 fa61 	bl	8007f40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a7e:	f000 fd8f 	bl	80085a0 <xTaskResumeAll>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d189      	bne.n	800799c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a88:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac8 <xQueueReceive+0x1c0>)
 8007a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	e780      	b.n	800799c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a9c:	f000 fa50 	bl	8007f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aa0:	f000 fd7e 	bl	80085a0 <xTaskResumeAll>
 8007aa4:	e77a      	b.n	800799c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007aa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aa8:	f000 fa4a 	bl	8007f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aac:	f000 fd78 	bl	80085a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ab2:	f000 fa97 	bl	8007fe4 <prvIsQueueEmpty>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f43f af6f 	beq.w	800799c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007abe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3730      	adds	r7, #48	@ 0x30
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08e      	sub	sp, #56	@ 0x38
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	623b      	str	r3, [r7, #32]
}
 8007afa:	bf00      	nop
 8007afc:	bf00      	nop
 8007afe:	e7fd      	b.n	8007afc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	61fb      	str	r3, [r7, #28]
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b20:	f001 f926 	bl	8008d70 <xTaskGetSchedulerState>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <xQueueSemaphoreTake+0x64>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <xQueueSemaphoreTake+0x68>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <xQueueSemaphoreTake+0x6a>
 8007b34:	2300      	movs	r3, #0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10b      	bne.n	8007b52 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	61bb      	str	r3, [r7, #24]
}
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	e7fd      	b.n	8007b4e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b52:	f001 ff79 	bl	8009a48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d024      	beq.n	8007bac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b64:	1e5a      	subs	r2, r3, #1
 8007b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b72:	f001 fa77 	bl	8009064 <pvTaskIncrementMutexHeldCount>
 8007b76:	4602      	mov	r2, r0
 8007b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00f      	beq.n	8007ba4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	3310      	adds	r3, #16
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 ff21 	bl	80089d0 <xTaskRemoveFromEventList>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b94:	4b54      	ldr	r3, [pc, #336]	@ (8007ce8 <xQueueSemaphoreTake+0x21c>)
 8007b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ba4:	f001 ff82 	bl	8009aac <vPortExitCritical>
				return pdPASS;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e098      	b.n	8007cde <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d112      	bne.n	8007bd8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	617b      	str	r3, [r7, #20]
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	e7fd      	b.n	8007bcc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007bd0:	f001 ff6c 	bl	8009aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e082      	b.n	8007cde <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bde:	f107 030c 	add.w	r3, r7, #12
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 ff58 	bl	8008a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bec:	f001 ff5e 	bl	8009aac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bf0:	f000 fcc8 	bl	8008584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bf4:	f001 ff28 	bl	8009a48 <vPortEnterCritical>
 8007bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bfe:	b25b      	sxtb	r3, r3
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d103      	bne.n	8007c0e <xQueueSemaphoreTake+0x142>
 8007c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c14:	b25b      	sxtb	r3, r3
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1a:	d103      	bne.n	8007c24 <xQueueSemaphoreTake+0x158>
 8007c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c24:	f001 ff42 	bl	8009aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c28:	463a      	mov	r2, r7
 8007c2a:	f107 030c 	add.w	r3, r7, #12
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 ff47 	bl	8008ac4 <xTaskCheckForTimeOut>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d132      	bne.n	8007ca2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c3e:	f000 f9d1 	bl	8007fe4 <prvIsQueueEmpty>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d026      	beq.n	8007c96 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d109      	bne.n	8007c64 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007c50:	f001 fefa 	bl	8009a48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f8a7 	bl	8008dac <xTaskPriorityInherit>
 8007c5e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007c60:	f001 ff24 	bl	8009aac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c66:	3324      	adds	r3, #36	@ 0x24
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fe5d 	bl	800892c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c74:	f000 f964 	bl	8007f40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c78:	f000 fc92 	bl	80085a0 <xTaskResumeAll>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f47f af67 	bne.w	8007b52 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007c84:	4b18      	ldr	r3, [pc, #96]	@ (8007ce8 <xQueueSemaphoreTake+0x21c>)
 8007c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	e75d      	b.n	8007b52 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c98:	f000 f952 	bl	8007f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c9c:	f000 fc80 	bl	80085a0 <xTaskResumeAll>
 8007ca0:	e757      	b.n	8007b52 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ca2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ca4:	f000 f94c 	bl	8007f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ca8:	f000 fc7a 	bl	80085a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cae:	f000 f999 	bl	8007fe4 <prvIsQueueEmpty>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f43f af4c 	beq.w	8007b52 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00d      	beq.n	8007cdc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007cc0:	f001 fec2 	bl	8009a48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007cc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cc6:	f000 f893 	bl	8007df0 <prvGetDisinheritPriorityAfterTimeout>
 8007cca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 f942 	bl	8008f5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007cd8:	f001 fee8 	bl	8009aac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3738      	adds	r7, #56	@ 0x38
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08e      	sub	sp, #56	@ 0x38
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10b      	bne.n	8007d1a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	623b      	str	r3, [r7, #32]
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	e7fd      	b.n	8007d16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <xQueueReceiveFromISR+0x3c>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <xQueueReceiveFromISR+0x40>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <xQueueReceiveFromISR+0x42>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	61fb      	str	r3, [r7, #28]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d4a:	f001 ff5d 	bl	8009c08 <vPortValidateInterruptPriority>
	__asm volatile
 8007d4e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	61ba      	str	r2, [r7, #24]
 8007d64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d02f      	beq.n	8007dd6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d84:	f000 f8b6 	bl	8007ef4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8a:	1e5a      	subs	r2, r3, #1
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007d90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d98:	d112      	bne.n	8007dc0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d016      	beq.n	8007dd0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	3310      	adds	r3, #16
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fe12 	bl	80089d0 <xTaskRemoveFromEventList>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00e      	beq.n	8007dd0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	e007      	b.n	8007dd0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	b25a      	sxtb	r2, r3
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd4:	e001      	b.n	8007dda <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ddc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f383 8811 	msr	BASEPRI, r3
}
 8007de4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3738      	adds	r7, #56	@ 0x38
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d006      	beq.n	8007e0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e001      	b.n	8007e12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e12:	68fb      	ldr	r3, [r7, #12]
	}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10d      	bne.n	8007e5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d14d      	bne.n	8007ee2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 f816 	bl	8008e7c <xTaskPriorityDisinherit>
 8007e50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	e043      	b.n	8007ee2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d119      	bne.n	8007e94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6858      	ldr	r0, [r3, #4]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	f003 f8df 	bl	800b02e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e78:	441a      	add	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d32b      	bcc.n	8007ee2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	605a      	str	r2, [r3, #4]
 8007e92:	e026      	b.n	8007ee2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	68d8      	ldr	r0, [r3, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	f003 f8c5 	bl	800b02e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eac:	425b      	negs	r3, r3
 8007eae:	441a      	add	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d207      	bcs.n	8007ed0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec8:	425b      	negs	r3, r3
 8007eca:	441a      	add	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d105      	bne.n	8007ee2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007eea:	697b      	ldr	r3, [r7, #20]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0e:	441a      	add	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d303      	bcc.n	8007f28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68d9      	ldr	r1, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f30:	461a      	mov	r2, r3
 8007f32:	6838      	ldr	r0, [r7, #0]
 8007f34:	f003 f87b 	bl	800b02e <memcpy>
	}
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f48:	f001 fd7e 	bl	8009a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f54:	e011      	b.n	8007f7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d012      	beq.n	8007f84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3324      	adds	r3, #36	@ 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fd34 	bl	80089d0 <xTaskRemoveFromEventList>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f6e:	f000 fe0d 	bl	8008b8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dce9      	bgt.n	8007f56 <prvUnlockQueue+0x16>
 8007f82:	e000      	b.n	8007f86 <prvUnlockQueue+0x46>
					break;
 8007f84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	22ff      	movs	r2, #255	@ 0xff
 8007f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f8e:	f001 fd8d 	bl	8009aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f92:	f001 fd59 	bl	8009a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f9e:	e011      	b.n	8007fc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d012      	beq.n	8007fce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3310      	adds	r3, #16
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fd0f 	bl	80089d0 <xTaskRemoveFromEventList>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fb8:	f000 fde8 	bl	8008b8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dce9      	bgt.n	8007fa0 <prvUnlockQueue+0x60>
 8007fcc:	e000      	b.n	8007fd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	22ff      	movs	r2, #255	@ 0xff
 8007fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007fd8:	f001 fd68 	bl	8009aac <vPortExitCritical>
}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fec:	f001 fd2c 	bl	8009a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d102      	bne.n	8007ffe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	e001      	b.n	8008002 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008002:	f001 fd53 	bl	8009aac <vPortExitCritical>

	return xReturn;
 8008006:	68fb      	ldr	r3, [r7, #12]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008018:	f001 fd16 	bl	8009a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008024:	429a      	cmp	r2, r3
 8008026:	d102      	bne.n	800802e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008028:	2301      	movs	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	e001      	b.n	8008032 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008032:	f001 fd3b 	bl	8009aac <vPortExitCritical>

	return xReturn;
 8008036:	68fb      	ldr	r3, [r7, #12]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e014      	b.n	800807a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008050:	4a0f      	ldr	r2, [pc, #60]	@ (8008090 <vQueueAddToRegistry+0x50>)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10b      	bne.n	8008074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800805c:	490c      	ldr	r1, [pc, #48]	@ (8008090 <vQueueAddToRegistry+0x50>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008066:	4a0a      	ldr	r2, [pc, #40]	@ (8008090 <vQueueAddToRegistry+0x50>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	4413      	add	r3, r2
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008072:	e006      	b.n	8008082 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3301      	adds	r3, #1
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b07      	cmp	r3, #7
 800807e:	d9e7      	bls.n	8008050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000e10 	.word	0x20000e10

08008094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080a4:	f001 fcd0 	bl	8009a48 <vPortEnterCritical>
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d103      	bne.n	80080be <vQueueWaitForMessageRestricted+0x2a>
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080c4:	b25b      	sxtb	r3, r3
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d103      	bne.n	80080d4 <vQueueWaitForMessageRestricted+0x40>
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080d4:	f001 fcea 	bl	8009aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	3324      	adds	r3, #36	@ 0x24
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fc45 	bl	8008978 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f7ff ff26 	bl	8007f40 <prvUnlockQueue>
	}
 80080f4:	bf00      	nop
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08e      	sub	sp, #56	@ 0x38
 8008100:	af04      	add	r7, sp, #16
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800810a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	623b      	str	r3, [r7, #32]
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10b      	bne.n	8008146 <xTaskCreateStatic+0x4a>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	61fb      	str	r3, [r7, #28]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008146:	235c      	movs	r3, #92	@ 0x5c
 8008148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b5c      	cmp	r3, #92	@ 0x5c
 800814e:	d00b      	beq.n	8008168 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61bb      	str	r3, [r7, #24]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008168:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01e      	beq.n	80081ae <xTaskCreateStatic+0xb2>
 8008170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01b      	beq.n	80081ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008178:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800817e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	2202      	movs	r2, #2
 8008184:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008188:	2300      	movs	r3, #0
 800818a:	9303      	str	r3, [sp, #12]
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	9302      	str	r3, [sp, #8]
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 f850 	bl	8008246 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80081a8:	f000 f8de 	bl	8008368 <prvAddNewTaskToReadyList>
 80081ac:	e001      	b.n	80081b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081b2:	697b      	ldr	r3, [r7, #20]
	}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3728      	adds	r7, #40	@ 0x28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08c      	sub	sp, #48	@ 0x30
 80081c0:	af04      	add	r7, sp, #16
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fd5b 	bl	8009c8c <pvPortMalloc>
 80081d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00e      	beq.n	80081fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081de:	205c      	movs	r0, #92	@ 0x5c
 80081e0:	f001 fd54 	bl	8009c8c <pvPortMalloc>
 80081e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80081f2:	e005      	b.n	8008200 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081f4:	6978      	ldr	r0, [r7, #20]
 80081f6:	f001 fe17 	bl	8009e28 <vPortFree>
 80081fa:	e001      	b.n	8008200 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d017      	beq.n	8008236 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800820e:	88fa      	ldrh	r2, [r7, #6]
 8008210:	2300      	movs	r3, #0
 8008212:	9303      	str	r3, [sp, #12]
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	9302      	str	r3, [sp, #8]
 8008218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f80e 	bl	8008246 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800822a:	69f8      	ldr	r0, [r7, #28]
 800822c:	f000 f89c 	bl	8008368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008230:	2301      	movs	r3, #1
 8008232:	61bb      	str	r3, [r7, #24]
 8008234:	e002      	b.n	800823c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008236:	f04f 33ff 	mov.w	r3, #4294967295
 800823a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800823c:	69bb      	ldr	r3, [r7, #24]
	}
 800823e:	4618      	mov	r0, r3
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b088      	sub	sp, #32
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008256:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	461a      	mov	r2, r3
 800825e:	21a5      	movs	r1, #165	@ 0xa5
 8008260:	f002 fe56 	bl	800af10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800826e:	3b01      	subs	r3, #1
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f023 0307 	bic.w	r3, r3, #7
 800827c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f003 0307 	and.w	r3, r3, #7
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	617b      	str	r3, [r7, #20]
}
 800829a:	bf00      	nop
 800829c:	bf00      	nop
 800829e:	e7fd      	b.n	800829c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01f      	beq.n	80082e6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082a6:	2300      	movs	r3, #0
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	e012      	b.n	80082d2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	4413      	add	r3, r2
 80082b2:	7819      	ldrb	r1, [r3, #0]
 80082b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	3334      	adds	r3, #52	@ 0x34
 80082bc:	460a      	mov	r2, r1
 80082be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d006      	beq.n	80082da <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	3301      	adds	r3, #1
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	2b0f      	cmp	r3, #15
 80082d6:	d9e9      	bls.n	80082ac <prvInitialiseNewTask+0x66>
 80082d8:	e000      	b.n	80082dc <prvInitialiseNewTask+0x96>
			{
				break;
 80082da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082e4:	e003      	b.n	80082ee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f0:	2b37      	cmp	r3, #55	@ 0x37
 80082f2:	d901      	bls.n	80082f8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082f4:	2337      	movs	r3, #55	@ 0x37
 80082f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008302:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008306:	2200      	movs	r2, #0
 8008308:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	3304      	adds	r3, #4
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fec8 	bl	80070a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008316:	3318      	adds	r3, #24
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fec3 	bl	80070a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008322:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008326:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008332:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	2200      	movs	r2, #0
 8008338:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	68f9      	ldr	r1, [r7, #12]
 8008346:	69b8      	ldr	r0, [r7, #24]
 8008348:	f001 fa4e 	bl	80097e8 <pxPortInitialiseStack>
 800834c:	4602      	mov	r2, r0
 800834e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008350:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800835c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800835e:	bf00      	nop
 8008360:	3720      	adds	r7, #32
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008370:	f001 fb6a 	bl	8009a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008374:	4b2d      	ldr	r3, [pc, #180]	@ (800842c <prvAddNewTaskToReadyList+0xc4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a2c      	ldr	r2, [pc, #176]	@ (800842c <prvAddNewTaskToReadyList+0xc4>)
 800837c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800837e:	4b2c      	ldr	r3, [pc, #176]	@ (8008430 <prvAddNewTaskToReadyList+0xc8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008386:	4a2a      	ldr	r2, [pc, #168]	@ (8008430 <prvAddNewTaskToReadyList+0xc8>)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800838c:	4b27      	ldr	r3, [pc, #156]	@ (800842c <prvAddNewTaskToReadyList+0xc4>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d110      	bne.n	80083b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008394:	f000 fc1e 	bl	8008bd4 <prvInitialiseTaskLists>
 8008398:	e00d      	b.n	80083b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800839a:	4b26      	ldr	r3, [pc, #152]	@ (8008434 <prvAddNewTaskToReadyList+0xcc>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083a2:	4b23      	ldr	r3, [pc, #140]	@ (8008430 <prvAddNewTaskToReadyList+0xc8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d802      	bhi.n	80083b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008430 <prvAddNewTaskToReadyList+0xc8>)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083b6:	4b20      	ldr	r3, [pc, #128]	@ (8008438 <prvAddNewTaskToReadyList+0xd0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3301      	adds	r3, #1
 80083bc:	4a1e      	ldr	r2, [pc, #120]	@ (8008438 <prvAddNewTaskToReadyList+0xd0>)
 80083be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008438 <prvAddNewTaskToReadyList+0xd0>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083cc:	4b1b      	ldr	r3, [pc, #108]	@ (800843c <prvAddNewTaskToReadyList+0xd4>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d903      	bls.n	80083dc <prvAddNewTaskToReadyList+0x74>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d8:	4a18      	ldr	r2, [pc, #96]	@ (800843c <prvAddNewTaskToReadyList+0xd4>)
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4a15      	ldr	r2, [pc, #84]	@ (8008440 <prvAddNewTaskToReadyList+0xd8>)
 80083ea:	441a      	add	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4619      	mov	r1, r3
 80083f2:	4610      	mov	r0, r2
 80083f4:	f7fe fe63 	bl	80070be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083f8:	f001 fb58 	bl	8009aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <prvAddNewTaskToReadyList+0xcc>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00e      	beq.n	8008422 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008404:	4b0a      	ldr	r3, [pc, #40]	@ (8008430 <prvAddNewTaskToReadyList+0xc8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840e:	429a      	cmp	r2, r3
 8008410:	d207      	bcs.n	8008422 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008412:	4b0c      	ldr	r3, [pc, #48]	@ (8008444 <prvAddNewTaskToReadyList+0xdc>)
 8008414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20001324 	.word	0x20001324
 8008430:	20000e50 	.word	0x20000e50
 8008434:	20001330 	.word	0x20001330
 8008438:	20001340 	.word	0x20001340
 800843c:	2000132c 	.word	0x2000132c
 8008440:	20000e54 	.word	0x20000e54
 8008444:	e000ed04 	.word	0xe000ed04

08008448 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d018      	beq.n	800848c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800845a:	4b14      	ldr	r3, [pc, #80]	@ (80084ac <vTaskDelay+0x64>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00b      	beq.n	800847a <vTaskDelay+0x32>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	60bb      	str	r3, [r7, #8]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800847a:	f000 f883 	bl	8008584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800847e:	2100      	movs	r1, #0
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fe03 	bl	800908c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008486:	f000 f88b 	bl	80085a0 <xTaskResumeAll>
 800848a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d107      	bne.n	80084a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008492:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <vTaskDelay+0x68>)
 8008494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	2000134c 	.word	0x2000134c
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	@ 0x28
 80084b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084c2:	463a      	mov	r2, r7
 80084c4:	1d39      	adds	r1, r7, #4
 80084c6:	f107 0308 	add.w	r3, r7, #8
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fd96 	bl	8006ffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	9202      	str	r2, [sp, #8]
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	2300      	movs	r3, #0
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	2300      	movs	r3, #0
 80084e0:	460a      	mov	r2, r1
 80084e2:	4922      	ldr	r1, [pc, #136]	@ (800856c <vTaskStartScheduler+0xb8>)
 80084e4:	4822      	ldr	r0, [pc, #136]	@ (8008570 <vTaskStartScheduler+0xbc>)
 80084e6:	f7ff fe09 	bl	80080fc <xTaskCreateStatic>
 80084ea:	4603      	mov	r3, r0
 80084ec:	4a21      	ldr	r2, [pc, #132]	@ (8008574 <vTaskStartScheduler+0xc0>)
 80084ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084f0:	4b20      	ldr	r3, [pc, #128]	@ (8008574 <vTaskStartScheduler+0xc0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084f8:	2301      	movs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	e001      	b.n	8008502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084fe:	2300      	movs	r3, #0
 8008500:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d102      	bne.n	800850e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008508:	f000 fe14 	bl	8009134 <xTimerCreateTimerTask>
 800850c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d116      	bne.n	8008542 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	613b      	str	r3, [r7, #16]
}
 8008526:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008528:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <vTaskStartScheduler+0xc4>)
 800852a:	f04f 32ff 	mov.w	r2, #4294967295
 800852e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008530:	4b12      	ldr	r3, [pc, #72]	@ (800857c <vTaskStartScheduler+0xc8>)
 8008532:	2201      	movs	r2, #1
 8008534:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008536:	4b12      	ldr	r3, [pc, #72]	@ (8008580 <vTaskStartScheduler+0xcc>)
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800853c:	f001 f9e0 	bl	8009900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008540:	e00f      	b.n	8008562 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008548:	d10b      	bne.n	8008562 <vTaskStartScheduler+0xae>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	60fb      	str	r3, [r7, #12]
}
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	e7fd      	b.n	800855e <vTaskStartScheduler+0xaa>
}
 8008562:	bf00      	nop
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	0800cf80 	.word	0x0800cf80
 8008570:	08008ba5 	.word	0x08008ba5
 8008574:	20001348 	.word	0x20001348
 8008578:	20001344 	.word	0x20001344
 800857c:	20001330 	.word	0x20001330
 8008580:	20001328 	.word	0x20001328

08008584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008588:	4b04      	ldr	r3, [pc, #16]	@ (800859c <vTaskSuspendAll+0x18>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	4a03      	ldr	r2, [pc, #12]	@ (800859c <vTaskSuspendAll+0x18>)
 8008590:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008592:	bf00      	nop
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	2000134c 	.word	0x2000134c

080085a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085ae:	4b42      	ldr	r3, [pc, #264]	@ (80086b8 <xTaskResumeAll+0x118>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10b      	bne.n	80085ce <xTaskResumeAll+0x2e>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	603b      	str	r3, [r7, #0]
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085ce:	f001 fa3b 	bl	8009a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085d2:	4b39      	ldr	r3, [pc, #228]	@ (80086b8 <xTaskResumeAll+0x118>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	4a37      	ldr	r2, [pc, #220]	@ (80086b8 <xTaskResumeAll+0x118>)
 80085da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085dc:	4b36      	ldr	r3, [pc, #216]	@ (80086b8 <xTaskResumeAll+0x118>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d162      	bne.n	80086aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085e4:	4b35      	ldr	r3, [pc, #212]	@ (80086bc <xTaskResumeAll+0x11c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d05e      	beq.n	80086aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ec:	e02f      	b.n	800864e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ee:	4b34      	ldr	r3, [pc, #208]	@ (80086c0 <xTaskResumeAll+0x120>)
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3318      	adds	r3, #24
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fdbc 	bl	8007178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3304      	adds	r3, #4
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fdb7 	bl	8007178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860e:	4b2d      	ldr	r3, [pc, #180]	@ (80086c4 <xTaskResumeAll+0x124>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d903      	bls.n	800861e <xTaskResumeAll+0x7e>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <xTaskResumeAll+0x124>)
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4a27      	ldr	r2, [pc, #156]	@ (80086c8 <xTaskResumeAll+0x128>)
 800862c:	441a      	add	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3304      	adds	r3, #4
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f7fe fd42 	bl	80070be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863e:	4b23      	ldr	r3, [pc, #140]	@ (80086cc <xTaskResumeAll+0x12c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008644:	429a      	cmp	r2, r3
 8008646:	d302      	bcc.n	800864e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008648:	4b21      	ldr	r3, [pc, #132]	@ (80086d0 <xTaskResumeAll+0x130>)
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800864e:	4b1c      	ldr	r3, [pc, #112]	@ (80086c0 <xTaskResumeAll+0x120>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1cb      	bne.n	80085ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800865c:	f000 fb58 	bl	8008d10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008660:	4b1c      	ldr	r3, [pc, #112]	@ (80086d4 <xTaskResumeAll+0x134>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d010      	beq.n	800868e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800866c:	f000 f846 	bl	80086fc <xTaskIncrementTick>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008676:	4b16      	ldr	r3, [pc, #88]	@ (80086d0 <xTaskResumeAll+0x130>)
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3b01      	subs	r3, #1
 8008680:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f1      	bne.n	800866c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008688:	4b12      	ldr	r3, [pc, #72]	@ (80086d4 <xTaskResumeAll+0x134>)
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800868e:	4b10      	ldr	r3, [pc, #64]	@ (80086d0 <xTaskResumeAll+0x130>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008696:	2301      	movs	r3, #1
 8008698:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800869a:	4b0f      	ldr	r3, [pc, #60]	@ (80086d8 <xTaskResumeAll+0x138>)
 800869c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086aa:	f001 f9ff 	bl	8009aac <vPortExitCritical>

	return xAlreadyYielded;
 80086ae:	68bb      	ldr	r3, [r7, #8]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	2000134c 	.word	0x2000134c
 80086bc:	20001324 	.word	0x20001324
 80086c0:	200012e4 	.word	0x200012e4
 80086c4:	2000132c 	.word	0x2000132c
 80086c8:	20000e54 	.word	0x20000e54
 80086cc:	20000e50 	.word	0x20000e50
 80086d0:	20001338 	.word	0x20001338
 80086d4:	20001334 	.word	0x20001334
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086e2:	4b05      	ldr	r3, [pc, #20]	@ (80086f8 <xTaskGetTickCount+0x1c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086e8:	687b      	ldr	r3, [r7, #4]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20001328 	.word	0x20001328

080086fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008706:	4b4f      	ldr	r3, [pc, #316]	@ (8008844 <xTaskIncrementTick+0x148>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f040 8090 	bne.w	8008830 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008710:	4b4d      	ldr	r3, [pc, #308]	@ (8008848 <xTaskIncrementTick+0x14c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3301      	adds	r3, #1
 8008716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008718:	4a4b      	ldr	r2, [pc, #300]	@ (8008848 <xTaskIncrementTick+0x14c>)
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d121      	bne.n	8008768 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008724:	4b49      	ldr	r3, [pc, #292]	@ (800884c <xTaskIncrementTick+0x150>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <xTaskIncrementTick+0x4a>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	603b      	str	r3, [r7, #0]
}
 8008740:	bf00      	nop
 8008742:	bf00      	nop
 8008744:	e7fd      	b.n	8008742 <xTaskIncrementTick+0x46>
 8008746:	4b41      	ldr	r3, [pc, #260]	@ (800884c <xTaskIncrementTick+0x150>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	4b40      	ldr	r3, [pc, #256]	@ (8008850 <xTaskIncrementTick+0x154>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a3e      	ldr	r2, [pc, #248]	@ (800884c <xTaskIncrementTick+0x150>)
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	4a3e      	ldr	r2, [pc, #248]	@ (8008850 <xTaskIncrementTick+0x154>)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	4b3e      	ldr	r3, [pc, #248]	@ (8008854 <xTaskIncrementTick+0x158>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	4a3c      	ldr	r2, [pc, #240]	@ (8008854 <xTaskIncrementTick+0x158>)
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	f000 fad4 	bl	8008d10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008768:	4b3b      	ldr	r3, [pc, #236]	@ (8008858 <xTaskIncrementTick+0x15c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	429a      	cmp	r2, r3
 8008770:	d349      	bcc.n	8008806 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008772:	4b36      	ldr	r3, [pc, #216]	@ (800884c <xTaskIncrementTick+0x150>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d104      	bne.n	8008786 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800877c:	4b36      	ldr	r3, [pc, #216]	@ (8008858 <xTaskIncrementTick+0x15c>)
 800877e:	f04f 32ff 	mov.w	r2, #4294967295
 8008782:	601a      	str	r2, [r3, #0]
					break;
 8008784:	e03f      	b.n	8008806 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008786:	4b31      	ldr	r3, [pc, #196]	@ (800884c <xTaskIncrementTick+0x150>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d203      	bcs.n	80087a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800879e:	4a2e      	ldr	r2, [pc, #184]	@ (8008858 <xTaskIncrementTick+0x15c>)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087a4:	e02f      	b.n	8008806 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	3304      	adds	r3, #4
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fce4 	bl	8007178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3318      	adds	r3, #24
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe fcdb 	bl	8007178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c6:	4b25      	ldr	r3, [pc, #148]	@ (800885c <xTaskIncrementTick+0x160>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d903      	bls.n	80087d6 <xTaskIncrementTick+0xda>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d2:	4a22      	ldr	r2, [pc, #136]	@ (800885c <xTaskIncrementTick+0x160>)
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008860 <xTaskIncrementTick+0x164>)
 80087e4:	441a      	add	r2, r3
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	3304      	adds	r3, #4
 80087ea:	4619      	mov	r1, r3
 80087ec:	4610      	mov	r0, r2
 80087ee:	f7fe fc66 	bl	80070be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008864 <xTaskIncrementTick+0x168>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d3b8      	bcc.n	8008772 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008800:	2301      	movs	r3, #1
 8008802:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008804:	e7b5      	b.n	8008772 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008806:	4b17      	ldr	r3, [pc, #92]	@ (8008864 <xTaskIncrementTick+0x168>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880c:	4914      	ldr	r1, [pc, #80]	@ (8008860 <xTaskIncrementTick+0x164>)
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d901      	bls.n	8008822 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800881e:	2301      	movs	r3, #1
 8008820:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008822:	4b11      	ldr	r3, [pc, #68]	@ (8008868 <xTaskIncrementTick+0x16c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d007      	beq.n	800883a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800882a:	2301      	movs	r3, #1
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	e004      	b.n	800883a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008830:	4b0e      	ldr	r3, [pc, #56]	@ (800886c <xTaskIncrementTick+0x170>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3301      	adds	r3, #1
 8008836:	4a0d      	ldr	r2, [pc, #52]	@ (800886c <xTaskIncrementTick+0x170>)
 8008838:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800883a:	697b      	ldr	r3, [r7, #20]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	2000134c 	.word	0x2000134c
 8008848:	20001328 	.word	0x20001328
 800884c:	200012dc 	.word	0x200012dc
 8008850:	200012e0 	.word	0x200012e0
 8008854:	2000133c 	.word	0x2000133c
 8008858:	20001344 	.word	0x20001344
 800885c:	2000132c 	.word	0x2000132c
 8008860:	20000e54 	.word	0x20000e54
 8008864:	20000e50 	.word	0x20000e50
 8008868:	20001338 	.word	0x20001338
 800886c:	20001334 	.word	0x20001334

08008870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008876:	4b28      	ldr	r3, [pc, #160]	@ (8008918 <vTaskSwitchContext+0xa8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800887e:	4b27      	ldr	r3, [pc, #156]	@ (800891c <vTaskSwitchContext+0xac>)
 8008880:	2201      	movs	r2, #1
 8008882:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008884:	e042      	b.n	800890c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008886:	4b25      	ldr	r3, [pc, #148]	@ (800891c <vTaskSwitchContext+0xac>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800888c:	4b24      	ldr	r3, [pc, #144]	@ (8008920 <vTaskSwitchContext+0xb0>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	e011      	b.n	80088b8 <vTaskSwitchContext+0x48>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	607b      	str	r3, [r7, #4]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <vTaskSwitchContext+0x3e>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	491a      	ldr	r1, [pc, #104]	@ (8008924 <vTaskSwitchContext+0xb4>)
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0e3      	beq.n	8008894 <vTaskSwitchContext+0x24>
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4a13      	ldr	r2, [pc, #76]	@ (8008924 <vTaskSwitchContext+0xb4>)
 80088d8:	4413      	add	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	605a      	str	r2, [r3, #4]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	3308      	adds	r3, #8
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d104      	bne.n	80088fc <vTaskSwitchContext+0x8c>
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	605a      	str	r2, [r3, #4]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	4a09      	ldr	r2, [pc, #36]	@ (8008928 <vTaskSwitchContext+0xb8>)
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	4a06      	ldr	r2, [pc, #24]	@ (8008920 <vTaskSwitchContext+0xb0>)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6013      	str	r3, [r2, #0]
}
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	2000134c 	.word	0x2000134c
 800891c:	20001338 	.word	0x20001338
 8008920:	2000132c 	.word	0x2000132c
 8008924:	20000e54 	.word	0x20000e54
 8008928:	20000e50 	.word	0x20000e50

0800892c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10b      	bne.n	8008954 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	60fb      	str	r3, [r7, #12]
}
 800894e:	bf00      	nop
 8008950:	bf00      	nop
 8008952:	e7fd      	b.n	8008950 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008954:	4b07      	ldr	r3, [pc, #28]	@ (8008974 <vTaskPlaceOnEventList+0x48>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3318      	adds	r3, #24
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7fe fbd2 	bl	8007106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008962:	2101      	movs	r1, #1
 8008964:	6838      	ldr	r0, [r7, #0]
 8008966:	f000 fb91 	bl	800908c <prvAddCurrentTaskToDelayedList>
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000e50 	.word	0x20000e50

08008978 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10b      	bne.n	80089a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	617b      	str	r3, [r7, #20]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a2:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <vTaskPlaceOnEventListRestricted+0x54>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3318      	adds	r3, #24
 80089a8:	4619      	mov	r1, r3
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7fe fb87 	bl	80070be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80089b6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	68b8      	ldr	r0, [r7, #8]
 80089c0:	f000 fb64 	bl	800908c <prvAddCurrentTaskToDelayedList>
	}
 80089c4:	bf00      	nop
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20000e50 	.word	0x20000e50

080089d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10b      	bne.n	80089fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60fb      	str	r3, [r7, #12]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	3318      	adds	r3, #24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe fbb8 	bl	8007178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a08:	4b1d      	ldr	r3, [pc, #116]	@ (8008a80 <xTaskRemoveFromEventList+0xb0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d11d      	bne.n	8008a4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fe fbaf 	bl	8007178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1e:	4b19      	ldr	r3, [pc, #100]	@ (8008a84 <xTaskRemoveFromEventList+0xb4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d903      	bls.n	8008a2e <xTaskRemoveFromEventList+0x5e>
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2a:	4a16      	ldr	r2, [pc, #88]	@ (8008a84 <xTaskRemoveFromEventList+0xb4>)
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4a13      	ldr	r2, [pc, #76]	@ (8008a88 <xTaskRemoveFromEventList+0xb8>)
 8008a3c:	441a      	add	r2, r3
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3304      	adds	r3, #4
 8008a42:	4619      	mov	r1, r3
 8008a44:	4610      	mov	r0, r2
 8008a46:	f7fe fb3a 	bl	80070be <vListInsertEnd>
 8008a4a:	e005      	b.n	8008a58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	3318      	adds	r3, #24
 8008a50:	4619      	mov	r1, r3
 8008a52:	480e      	ldr	r0, [pc, #56]	@ (8008a8c <xTaskRemoveFromEventList+0xbc>)
 8008a54:	f7fe fb33 	bl	80070be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a90 <xTaskRemoveFromEventList+0xc0>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d905      	bls.n	8008a72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a66:	2301      	movs	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a94 <xTaskRemoveFromEventList+0xc4>)
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	e001      	b.n	8008a76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a76:	697b      	ldr	r3, [r7, #20]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	2000134c 	.word	0x2000134c
 8008a84:	2000132c 	.word	0x2000132c
 8008a88:	20000e54 	.word	0x20000e54
 8008a8c:	200012e4 	.word	0x200012e4
 8008a90:	20000e50 	.word	0x20000e50
 8008a94:	20001338 	.word	0x20001338

08008a98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aa0:	4b06      	ldr	r3, [pc, #24]	@ (8008abc <vTaskInternalSetTimeOutState+0x24>)
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008aa8:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <vTaskInternalSetTimeOutState+0x28>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	605a      	str	r2, [r3, #4]
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	2000133c 	.word	0x2000133c
 8008ac0:	20001328 	.word	0x20001328

08008ac4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10b      	bne.n	8008aec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	613b      	str	r3, [r7, #16]
}
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
 8008aea:	e7fd      	b.n	8008ae8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10b      	bne.n	8008b0a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	60fb      	str	r3, [r7, #12]
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	e7fd      	b.n	8008b06 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b0a:	f000 ff9d 	bl	8009a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b84 <xTaskCheckForTimeOut+0xc0>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d102      	bne.n	8008b2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61fb      	str	r3, [r7, #28]
 8008b2c:	e023      	b.n	8008b76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4b15      	ldr	r3, [pc, #84]	@ (8008b88 <xTaskCheckForTimeOut+0xc4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d007      	beq.n	8008b4a <xTaskCheckForTimeOut+0x86>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d302      	bcc.n	8008b4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b44:	2301      	movs	r3, #1
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	e015      	b.n	8008b76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d20b      	bcs.n	8008b6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff ff99 	bl	8008a98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61fb      	str	r3, [r7, #28]
 8008b6a:	e004      	b.n	8008b76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b72:	2301      	movs	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b76:	f000 ff99 	bl	8009aac <vPortExitCritical>

	return xReturn;
 8008b7a:	69fb      	ldr	r3, [r7, #28]
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20001328 	.word	0x20001328
 8008b88:	2000133c 	.word	0x2000133c

08008b8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b90:	4b03      	ldr	r3, [pc, #12]	@ (8008ba0 <vTaskMissedYield+0x14>)
 8008b92:	2201      	movs	r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
}
 8008b96:	bf00      	nop
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20001338 	.word	0x20001338

08008ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bac:	f000 f852 	bl	8008c54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bb0:	4b06      	ldr	r3, [pc, #24]	@ (8008bcc <prvIdleTask+0x28>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d9f9      	bls.n	8008bac <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bb8:	4b05      	ldr	r3, [pc, #20]	@ (8008bd0 <prvIdleTask+0x2c>)
 8008bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bc8:	e7f0      	b.n	8008bac <prvIdleTask+0x8>
 8008bca:	bf00      	nop
 8008bcc:	20000e54 	.word	0x20000e54
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bda:	2300      	movs	r3, #0
 8008bdc:	607b      	str	r3, [r7, #4]
 8008bde:	e00c      	b.n	8008bfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4a12      	ldr	r2, [pc, #72]	@ (8008c34 <prvInitialiseTaskLists+0x60>)
 8008bec:	4413      	add	r3, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fa38 	bl	8007064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	607b      	str	r3, [r7, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b37      	cmp	r3, #55	@ 0x37
 8008bfe:	d9ef      	bls.n	8008be0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c00:	480d      	ldr	r0, [pc, #52]	@ (8008c38 <prvInitialiseTaskLists+0x64>)
 8008c02:	f7fe fa2f 	bl	8007064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c06:	480d      	ldr	r0, [pc, #52]	@ (8008c3c <prvInitialiseTaskLists+0x68>)
 8008c08:	f7fe fa2c 	bl	8007064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c0c:	480c      	ldr	r0, [pc, #48]	@ (8008c40 <prvInitialiseTaskLists+0x6c>)
 8008c0e:	f7fe fa29 	bl	8007064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c12:	480c      	ldr	r0, [pc, #48]	@ (8008c44 <prvInitialiseTaskLists+0x70>)
 8008c14:	f7fe fa26 	bl	8007064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c18:	480b      	ldr	r0, [pc, #44]	@ (8008c48 <prvInitialiseTaskLists+0x74>)
 8008c1a:	f7fe fa23 	bl	8007064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c4c <prvInitialiseTaskLists+0x78>)
 8008c20:	4a05      	ldr	r2, [pc, #20]	@ (8008c38 <prvInitialiseTaskLists+0x64>)
 8008c22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c24:	4b0a      	ldr	r3, [pc, #40]	@ (8008c50 <prvInitialiseTaskLists+0x7c>)
 8008c26:	4a05      	ldr	r2, [pc, #20]	@ (8008c3c <prvInitialiseTaskLists+0x68>)
 8008c28:	601a      	str	r2, [r3, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000e54 	.word	0x20000e54
 8008c38:	200012b4 	.word	0x200012b4
 8008c3c:	200012c8 	.word	0x200012c8
 8008c40:	200012e4 	.word	0x200012e4
 8008c44:	200012f8 	.word	0x200012f8
 8008c48:	20001310 	.word	0x20001310
 8008c4c:	200012dc 	.word	0x200012dc
 8008c50:	200012e0 	.word	0x200012e0

08008c54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c5a:	e019      	b.n	8008c90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c5c:	f000 fef4 	bl	8009a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c60:	4b10      	ldr	r3, [pc, #64]	@ (8008ca4 <prvCheckTasksWaitingTermination+0x50>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fe fa83 	bl	8007178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca8 <prvCheckTasksWaitingTermination+0x54>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	4a0b      	ldr	r2, [pc, #44]	@ (8008ca8 <prvCheckTasksWaitingTermination+0x54>)
 8008c7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008cac <prvCheckTasksWaitingTermination+0x58>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	4a0a      	ldr	r2, [pc, #40]	@ (8008cac <prvCheckTasksWaitingTermination+0x58>)
 8008c84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c86:	f000 ff11 	bl	8009aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f810 	bl	8008cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c90:	4b06      	ldr	r3, [pc, #24]	@ (8008cac <prvCheckTasksWaitingTermination+0x58>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e1      	bne.n	8008c5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200012f8 	.word	0x200012f8
 8008ca8:	20001324 	.word	0x20001324
 8008cac:	2000130c 	.word	0x2000130c

08008cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d108      	bne.n	8008cd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 f8ae 	bl	8009e28 <vPortFree>
				vPortFree( pxTCB );
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 f8ab 	bl	8009e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cd2:	e019      	b.n	8008d08 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d103      	bne.n	8008ce6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 f8a2 	bl	8009e28 <vPortFree>
	}
 8008ce4:	e010      	b.n	8008d08 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d00b      	beq.n	8008d08 <prvDeleteTCB+0x58>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60fb      	str	r3, [r7, #12]
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	e7fd      	b.n	8008d04 <prvDeleteTCB+0x54>
	}
 8008d08:	bf00      	nop
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d16:	4b0c      	ldr	r3, [pc, #48]	@ (8008d48 <prvResetNextTaskUnblockTime+0x38>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d20:	4b0a      	ldr	r3, [pc, #40]	@ (8008d4c <prvResetNextTaskUnblockTime+0x3c>)
 8008d22:	f04f 32ff 	mov.w	r2, #4294967295
 8008d26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d28:	e008      	b.n	8008d3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2a:	4b07      	ldr	r3, [pc, #28]	@ (8008d48 <prvResetNextTaskUnblockTime+0x38>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	4a04      	ldr	r2, [pc, #16]	@ (8008d4c <prvResetNextTaskUnblockTime+0x3c>)
 8008d3a:	6013      	str	r3, [r2, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	200012dc 	.word	0x200012dc
 8008d4c:	20001344 	.word	0x20001344

08008d50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008d56:	4b05      	ldr	r3, [pc, #20]	@ (8008d6c <xTaskGetCurrentTaskHandle+0x1c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008d5c:	687b      	ldr	r3, [r7, #4]
	}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	20000e50 	.word	0x20000e50

08008d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d76:	4b0b      	ldr	r3, [pc, #44]	@ (8008da4 <xTaskGetSchedulerState+0x34>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	607b      	str	r3, [r7, #4]
 8008d82:	e008      	b.n	8008d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d84:	4b08      	ldr	r3, [pc, #32]	@ (8008da8 <xTaskGetSchedulerState+0x38>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	607b      	str	r3, [r7, #4]
 8008d90:	e001      	b.n	8008d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d92:	2300      	movs	r3, #0
 8008d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d96:	687b      	ldr	r3, [r7, #4]
	}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	20001330 	.word	0x20001330
 8008da8:	2000134c 	.word	0x2000134c

08008dac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d051      	beq.n	8008e66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8008e70 <xTaskPriorityInherit+0xc4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d241      	bcs.n	8008e54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	db06      	blt.n	8008de6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd8:	4b25      	ldr	r3, [pc, #148]	@ (8008e70 <xTaskPriorityInherit+0xc4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dde:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6959      	ldr	r1, [r3, #20]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4a1f      	ldr	r2, [pc, #124]	@ (8008e74 <xTaskPriorityInherit+0xc8>)
 8008df8:	4413      	add	r3, r2
 8008dfa:	4299      	cmp	r1, r3
 8008dfc:	d122      	bne.n	8008e44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe f9b8 	bl	8007178 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e08:	4b19      	ldr	r3, [pc, #100]	@ (8008e70 <xTaskPriorityInherit+0xc4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e16:	4b18      	ldr	r3, [pc, #96]	@ (8008e78 <xTaskPriorityInherit+0xcc>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d903      	bls.n	8008e26 <xTaskPriorityInherit+0x7a>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e22:	4a15      	ldr	r2, [pc, #84]	@ (8008e78 <xTaskPriorityInherit+0xcc>)
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4a10      	ldr	r2, [pc, #64]	@ (8008e74 <xTaskPriorityInherit+0xc8>)
 8008e34:	441a      	add	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	f7fe f93e 	bl	80070be <vListInsertEnd>
 8008e42:	e004      	b.n	8008e4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e44:	4b0a      	ldr	r3, [pc, #40]	@ (8008e70 <xTaskPriorityInherit+0xc4>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e008      	b.n	8008e66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e58:	4b05      	ldr	r3, [pc, #20]	@ (8008e70 <xTaskPriorityInherit+0xc4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d201      	bcs.n	8008e66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e62:	2301      	movs	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e66:	68fb      	ldr	r3, [r7, #12]
	}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	20000e50 	.word	0x20000e50
 8008e74:	20000e54 	.word	0x20000e54
 8008e78:	2000132c 	.word	0x2000132c

08008e7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d058      	beq.n	8008f44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e92:	4b2f      	ldr	r3, [pc, #188]	@ (8008f50 <xTaskPriorityDisinherit+0xd4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d00b      	beq.n	8008eb4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	60fb      	str	r3, [r7, #12]
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	e7fd      	b.n	8008eb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10b      	bne.n	8008ed4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	60bb      	str	r3, [r7, #8]
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	e7fd      	b.n	8008ed0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed8:	1e5a      	subs	r2, r3, #1
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d02c      	beq.n	8008f44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d128      	bne.n	8008f44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe f93e 	bl	8007178 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f14:	4b0f      	ldr	r3, [pc, #60]	@ (8008f54 <xTaskPriorityDisinherit+0xd8>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d903      	bls.n	8008f24 <xTaskPriorityDisinherit+0xa8>
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f20:	4a0c      	ldr	r2, [pc, #48]	@ (8008f54 <xTaskPriorityDisinherit+0xd8>)
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4a09      	ldr	r2, [pc, #36]	@ (8008f58 <xTaskPriorityDisinherit+0xdc>)
 8008f32:	441a      	add	r2, r3
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f7fe f8bf 	bl	80070be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f40:	2301      	movs	r3, #1
 8008f42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f44:	697b      	ldr	r3, [r7, #20]
	}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000e50 	.word	0x20000e50
 8008f54:	2000132c 	.word	0x2000132c
 8008f58:	20000e54 	.word	0x20000e54

08008f5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d06c      	beq.n	800904e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10b      	bne.n	8008f94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60fb      	str	r3, [r7, #12]
}
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	e7fd      	b.n	8008f90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d902      	bls.n	8008fa4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	61fb      	str	r3, [r7, #28]
 8008fa2:	e002      	b.n	8008faa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fa8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d04c      	beq.n	800904e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d147      	bne.n	800904e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008fbe:	4b26      	ldr	r3, [pc, #152]	@ (8009058 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d10b      	bne.n	8008fe0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	60bb      	str	r3, [r7, #8]
}
 8008fda:	bf00      	nop
 8008fdc:	bf00      	nop
 8008fde:	e7fd      	b.n	8008fdc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	db04      	blt.n	8008ffe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	6959      	ldr	r1, [r3, #20]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4a13      	ldr	r2, [pc, #76]	@ (800905c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800900e:	4413      	add	r3, r2
 8009010:	4299      	cmp	r1, r3
 8009012:	d11c      	bne.n	800904e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	3304      	adds	r3, #4
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe f8ad 	bl	8007178 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009022:	4b0f      	ldr	r3, [pc, #60]	@ (8009060 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d903      	bls.n	8009032 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902e:	4a0c      	ldr	r2, [pc, #48]	@ (8009060 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4a07      	ldr	r2, [pc, #28]	@ (800905c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009040:	441a      	add	r2, r3
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	3304      	adds	r3, #4
 8009046:	4619      	mov	r1, r3
 8009048:	4610      	mov	r0, r2
 800904a:	f7fe f838 	bl	80070be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800904e:	bf00      	nop
 8009050:	3720      	adds	r7, #32
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20000e50 	.word	0x20000e50
 800905c:	20000e54 	.word	0x20000e54
 8009060:	2000132c 	.word	0x2000132c

08009064 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009064:	b480      	push	{r7}
 8009066:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009068:	4b07      	ldr	r3, [pc, #28]	@ (8009088 <pvTaskIncrementMutexHeldCount+0x24>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d004      	beq.n	800907a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009070:	4b05      	ldr	r3, [pc, #20]	@ (8009088 <pvTaskIncrementMutexHeldCount+0x24>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009076:	3201      	adds	r2, #1
 8009078:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800907a:	4b03      	ldr	r3, [pc, #12]	@ (8009088 <pvTaskIncrementMutexHeldCount+0x24>)
 800907c:	681b      	ldr	r3, [r3, #0]
	}
 800907e:	4618      	mov	r0, r3
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	20000e50 	.word	0x20000e50

0800908c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009096:	4b21      	ldr	r3, [pc, #132]	@ (800911c <prvAddCurrentTaskToDelayedList+0x90>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800909c:	4b20      	ldr	r3, [pc, #128]	@ (8009120 <prvAddCurrentTaskToDelayedList+0x94>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe f868 	bl	8007178 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ae:	d10a      	bne.n	80090c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d007      	beq.n	80090c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009120 <prvAddCurrentTaskToDelayedList+0x94>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4619      	mov	r1, r3
 80090be:	4819      	ldr	r0, [pc, #100]	@ (8009124 <prvAddCurrentTaskToDelayedList+0x98>)
 80090c0:	f7fd fffd 	bl	80070be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090c4:	e026      	b.n	8009114 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090c6:	68fa      	ldr	r2, [r7, #12]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4413      	add	r3, r2
 80090cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090ce:	4b14      	ldr	r3, [pc, #80]	@ (8009120 <prvAddCurrentTaskToDelayedList+0x94>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d209      	bcs.n	80090f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090de:	4b12      	ldr	r3, [pc, #72]	@ (8009128 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009120 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4619      	mov	r1, r3
 80090ea:	4610      	mov	r0, r2
 80090ec:	f7fe f80b 	bl	8007106 <vListInsert>
}
 80090f0:	e010      	b.n	8009114 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090f2:	4b0e      	ldr	r3, [pc, #56]	@ (800912c <prvAddCurrentTaskToDelayedList+0xa0>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <prvAddCurrentTaskToDelayedList+0x94>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7fe f801 	bl	8007106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009104:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	429a      	cmp	r2, r3
 800910c:	d202      	bcs.n	8009114 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800910e:	4a08      	ldr	r2, [pc, #32]	@ (8009130 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	6013      	str	r3, [r2, #0]
}
 8009114:	bf00      	nop
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20001328 	.word	0x20001328
 8009120:	20000e50 	.word	0x20000e50
 8009124:	20001310 	.word	0x20001310
 8009128:	200012e0 	.word	0x200012e0
 800912c:	200012dc 	.word	0x200012dc
 8009130:	20001344 	.word	0x20001344

08009134 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08a      	sub	sp, #40	@ 0x28
 8009138:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800913a:	2300      	movs	r3, #0
 800913c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800913e:	f000 fb13 	bl	8009768 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009142:	4b1d      	ldr	r3, [pc, #116]	@ (80091b8 <xTimerCreateTimerTask+0x84>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d021      	beq.n	800918e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800914e:	2300      	movs	r3, #0
 8009150:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009152:	1d3a      	adds	r2, r7, #4
 8009154:	f107 0108 	add.w	r1, r7, #8
 8009158:	f107 030c 	add.w	r3, r7, #12
 800915c:	4618      	mov	r0, r3
 800915e:	f7fd ff67 	bl	8007030 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	9202      	str	r2, [sp, #8]
 800916a:	9301      	str	r3, [sp, #4]
 800916c:	2302      	movs	r3, #2
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	2300      	movs	r3, #0
 8009172:	460a      	mov	r2, r1
 8009174:	4911      	ldr	r1, [pc, #68]	@ (80091bc <xTimerCreateTimerTask+0x88>)
 8009176:	4812      	ldr	r0, [pc, #72]	@ (80091c0 <xTimerCreateTimerTask+0x8c>)
 8009178:	f7fe ffc0 	bl	80080fc <xTaskCreateStatic>
 800917c:	4603      	mov	r3, r0
 800917e:	4a11      	ldr	r2, [pc, #68]	@ (80091c4 <xTimerCreateTimerTask+0x90>)
 8009180:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009182:	4b10      	ldr	r3, [pc, #64]	@ (80091c4 <xTimerCreateTimerTask+0x90>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800918a:	2301      	movs	r3, #1
 800918c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10b      	bne.n	80091ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	613b      	str	r3, [r7, #16]
}
 80091a6:	bf00      	nop
 80091a8:	bf00      	nop
 80091aa:	e7fd      	b.n	80091a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091ac:	697b      	ldr	r3, [r7, #20]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20001380 	.word	0x20001380
 80091bc:	0800cf88 	.word	0x0800cf88
 80091c0:	08009301 	.word	0x08009301
 80091c4:	20001384 	.word	0x20001384

080091c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	@ 0x28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10b      	bne.n	80091f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	623b      	str	r3, [r7, #32]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091f8:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <xTimerGenericCommand+0x98>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d02a      	beq.n	8009256 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b05      	cmp	r3, #5
 8009210:	dc18      	bgt.n	8009244 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009212:	f7ff fdad 	bl	8008d70 <xTaskGetSchedulerState>
 8009216:	4603      	mov	r3, r0
 8009218:	2b02      	cmp	r3, #2
 800921a:	d109      	bne.n	8009230 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800921c:	4b10      	ldr	r3, [pc, #64]	@ (8009260 <xTimerGenericCommand+0x98>)
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	f107 0110 	add.w	r1, r7, #16
 8009224:	2300      	movs	r3, #0
 8009226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009228:	f7fe f9ce 	bl	80075c8 <xQueueGenericSend>
 800922c:	6278      	str	r0, [r7, #36]	@ 0x24
 800922e:	e012      	b.n	8009256 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009230:	4b0b      	ldr	r3, [pc, #44]	@ (8009260 <xTimerGenericCommand+0x98>)
 8009232:	6818      	ldr	r0, [r3, #0]
 8009234:	f107 0110 	add.w	r1, r7, #16
 8009238:	2300      	movs	r3, #0
 800923a:	2200      	movs	r2, #0
 800923c:	f7fe f9c4 	bl	80075c8 <xQueueGenericSend>
 8009240:	6278      	str	r0, [r7, #36]	@ 0x24
 8009242:	e008      	b.n	8009256 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009244:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <xTimerGenericCommand+0x98>)
 8009246:	6818      	ldr	r0, [r3, #0]
 8009248:	f107 0110 	add.w	r1, r7, #16
 800924c:	2300      	movs	r3, #0
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	f7fe fabc 	bl	80077cc <xQueueGenericSendFromISR>
 8009254:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009258:	4618      	mov	r0, r3
 800925a:	3728      	adds	r7, #40	@ 0x28
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20001380 	.word	0x20001380

08009264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af02      	add	r7, sp, #8
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800926e:	4b23      	ldr	r3, [pc, #140]	@ (80092fc <prvProcessExpiredTimer+0x98>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	3304      	adds	r3, #4
 800927c:	4618      	mov	r0, r3
 800927e:	f7fd ff7b 	bl	8007178 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d023      	beq.n	80092d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	699a      	ldr	r2, [r3, #24]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	18d1      	adds	r1, r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	6978      	ldr	r0, [r7, #20]
 800929e:	f000 f8d5 	bl	800944c <prvInsertTimerInActiveList>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d020      	beq.n	80092ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092a8:	2300      	movs	r3, #0
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	2300      	movs	r3, #0
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	2100      	movs	r1, #0
 80092b2:	6978      	ldr	r0, [r7, #20]
 80092b4:	f7ff ff88 	bl	80091c8 <xTimerGenericCommand>
 80092b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d114      	bne.n	80092ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	60fb      	str	r3, [r7, #12]
}
 80092d2:	bf00      	nop
 80092d4:	bf00      	nop
 80092d6:	e7fd      	b.n	80092d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092de:	f023 0301 	bic.w	r3, r3, #1
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	6978      	ldr	r0, [r7, #20]
 80092f0:	4798      	blx	r3
}
 80092f2:	bf00      	nop
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20001378 	.word	0x20001378

08009300 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f859 	bl	80093c4 <prvGetNextExpireTime>
 8009312:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4619      	mov	r1, r3
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f805 	bl	8009328 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800931e:	f000 f8d7 	bl	80094d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009322:	bf00      	nop
 8009324:	e7f0      	b.n	8009308 <prvTimerTask+0x8>
	...

08009328 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009332:	f7ff f927 	bl	8008584 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009336:	f107 0308 	add.w	r3, r7, #8
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f866 	bl	800940c <prvSampleTimeNow>
 8009340:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d130      	bne.n	80093aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10a      	bne.n	8009364 <prvProcessTimerOrBlockTask+0x3c>
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	429a      	cmp	r2, r3
 8009354:	d806      	bhi.n	8009364 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009356:	f7ff f923 	bl	80085a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7ff ff81 	bl	8009264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009362:	e024      	b.n	80093ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d008      	beq.n	800937c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800936a:	4b13      	ldr	r3, [pc, #76]	@ (80093b8 <prvProcessTimerOrBlockTask+0x90>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <prvProcessTimerOrBlockTask+0x50>
 8009374:	2301      	movs	r3, #1
 8009376:	e000      	b.n	800937a <prvProcessTimerOrBlockTask+0x52>
 8009378:	2300      	movs	r3, #0
 800937a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800937c:	4b0f      	ldr	r3, [pc, #60]	@ (80093bc <prvProcessTimerOrBlockTask+0x94>)
 800937e:	6818      	ldr	r0, [r3, #0]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	4619      	mov	r1, r3
 800938a:	f7fe fe83 	bl	8008094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800938e:	f7ff f907 	bl	80085a0 <xTaskResumeAll>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009398:	4b09      	ldr	r3, [pc, #36]	@ (80093c0 <prvProcessTimerOrBlockTask+0x98>)
 800939a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	f3bf 8f6f 	isb	sy
}
 80093a8:	e001      	b.n	80093ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093aa:	f7ff f8f9 	bl	80085a0 <xTaskResumeAll>
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	2000137c 	.word	0x2000137c
 80093bc:	20001380 	.word	0x20001380
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009408 <prvGetNextExpireTime+0x44>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <prvGetNextExpireTime+0x16>
 80093d6:	2201      	movs	r2, #1
 80093d8:	e000      	b.n	80093dc <prvGetNextExpireTime+0x18>
 80093da:	2200      	movs	r2, #0
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d105      	bne.n	80093f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093e8:	4b07      	ldr	r3, [pc, #28]	@ (8009408 <prvGetNextExpireTime+0x44>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	e001      	b.n	80093f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093f8:	68fb      	ldr	r3, [r7, #12]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	20001378 	.word	0x20001378

0800940c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009414:	f7ff f962 	bl	80086dc <xTaskGetTickCount>
 8009418:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800941a:	4b0b      	ldr	r3, [pc, #44]	@ (8009448 <prvSampleTimeNow+0x3c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	429a      	cmp	r2, r3
 8009422:	d205      	bcs.n	8009430 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009424:	f000 f93a 	bl	800969c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	e002      	b.n	8009436 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009436:	4a04      	ldr	r2, [pc, #16]	@ (8009448 <prvSampleTimeNow+0x3c>)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800943c:	68fb      	ldr	r3, [r7, #12]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20001388 	.word	0x20001388

0800944c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	429a      	cmp	r2, r3
 8009470:	d812      	bhi.n	8009498 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	1ad2      	subs	r2, r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	429a      	cmp	r2, r3
 800947e:	d302      	bcc.n	8009486 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	e01b      	b.n	80094be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009486:	4b10      	ldr	r3, [pc, #64]	@ (80094c8 <prvInsertTimerInActiveList+0x7c>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3304      	adds	r3, #4
 800948e:	4619      	mov	r1, r3
 8009490:	4610      	mov	r0, r2
 8009492:	f7fd fe38 	bl	8007106 <vListInsert>
 8009496:	e012      	b.n	80094be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	429a      	cmp	r2, r3
 800949e:	d206      	bcs.n	80094ae <prvInsertTimerInActiveList+0x62>
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d302      	bcc.n	80094ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	e007      	b.n	80094be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094ae:	4b07      	ldr	r3, [pc, #28]	@ (80094cc <prvInsertTimerInActiveList+0x80>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	4610      	mov	r0, r2
 80094ba:	f7fd fe24 	bl	8007106 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094be:	697b      	ldr	r3, [r7, #20]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	2000137c 	.word	0x2000137c
 80094cc:	20001378 	.word	0x20001378

080094d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08e      	sub	sp, #56	@ 0x38
 80094d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094d6:	e0ce      	b.n	8009676 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	da19      	bge.n	8009512 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094de:	1d3b      	adds	r3, r7, #4
 80094e0:	3304      	adds	r3, #4
 80094e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10b      	bne.n	8009502 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	61fb      	str	r3, [r7, #28]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009508:	6850      	ldr	r0, [r2, #4]
 800950a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800950c:	6892      	ldr	r2, [r2, #8]
 800950e:	4611      	mov	r1, r2
 8009510:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f2c0 80ae 	blt.w	8009676 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800951e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009528:	3304      	adds	r3, #4
 800952a:	4618      	mov	r0, r3
 800952c:	f7fd fe24 	bl	8007178 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009530:	463b      	mov	r3, r7
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff ff6a 	bl	800940c <prvSampleTimeNow>
 8009538:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b09      	cmp	r3, #9
 800953e:	f200 8097 	bhi.w	8009670 <prvProcessReceivedCommands+0x1a0>
 8009542:	a201      	add	r2, pc, #4	@ (adr r2, 8009548 <prvProcessReceivedCommands+0x78>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	08009571 	.word	0x08009571
 800954c:	08009571 	.word	0x08009571
 8009550:	08009571 	.word	0x08009571
 8009554:	080095e7 	.word	0x080095e7
 8009558:	080095fb 	.word	0x080095fb
 800955c:	08009647 	.word	0x08009647
 8009560:	08009571 	.word	0x08009571
 8009564:	08009571 	.word	0x08009571
 8009568:	080095e7 	.word	0x080095e7
 800956c:	080095fb 	.word	0x080095fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009572:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009576:	f043 0301 	orr.w	r3, r3, #1
 800957a:	b2da      	uxtb	r2, r3
 800957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	18d1      	adds	r1, r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800958e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009590:	f7ff ff5c 	bl	800944c <prvInsertTimerInActiveList>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d06c      	beq.n	8009674 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d061      	beq.n	8009674 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	441a      	add	r2, r3
 80095b8:	2300      	movs	r3, #0
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	2300      	movs	r3, #0
 80095be:	2100      	movs	r1, #0
 80095c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095c2:	f7ff fe01 	bl	80091c8 <xTimerGenericCommand>
 80095c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d152      	bne.n	8009674 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	61bb      	str	r3, [r7, #24]
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	e7fd      	b.n	80095e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095ec:	f023 0301 	bic.w	r3, r3, #1
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80095f8:	e03d      	b.n	8009676 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009600:	f043 0301 	orr.w	r3, r3, #1
 8009604:	b2da      	uxtb	r2, r3
 8009606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009608:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009610:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10b      	bne.n	8009632 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	617b      	str	r3, [r7, #20]
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	e7fd      	b.n	800962e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	18d1      	adds	r1, r2, r3
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800963e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009640:	f7ff ff04 	bl	800944c <prvInsertTimerInActiveList>
					break;
 8009644:	e017      	b.n	8009676 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800964c:	f003 0302 	and.w	r3, r3, #2
 8009650:	2b00      	cmp	r3, #0
 8009652:	d103      	bne.n	800965c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009656:	f000 fbe7 	bl	8009e28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800965a:	e00c      	b.n	8009676 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009662:	f023 0301 	bic.w	r3, r3, #1
 8009666:	b2da      	uxtb	r2, r3
 8009668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800966e:	e002      	b.n	8009676 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009670:	bf00      	nop
 8009672:	e000      	b.n	8009676 <prvProcessReceivedCommands+0x1a6>
					break;
 8009674:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009676:	4b08      	ldr	r3, [pc, #32]	@ (8009698 <prvProcessReceivedCommands+0x1c8>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	1d39      	adds	r1, r7, #4
 800967c:	2200      	movs	r2, #0
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe f942 	bl	8007908 <xQueueReceive>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	f47f af26 	bne.w	80094d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800968c:	bf00      	nop
 800968e:	bf00      	nop
 8009690:	3730      	adds	r7, #48	@ 0x30
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20001380 	.word	0x20001380

0800969c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096a2:	e049      	b.n	8009738 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009760 <prvSwitchTimerLists+0xc4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009760 <prvSwitchTimerLists+0xc4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fd fd5b 	bl	8007178 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d02f      	beq.n	8009738 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	4413      	add	r3, r2
 80096e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d90e      	bls.n	8009708 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009760 <prvSwitchTimerLists+0xc4>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3304      	adds	r3, #4
 80096fe:	4619      	mov	r1, r3
 8009700:	4610      	mov	r0, r2
 8009702:	f7fd fd00 	bl	8007106 <vListInsert>
 8009706:	e017      	b.n	8009738 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009708:	2300      	movs	r3, #0
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	2300      	movs	r3, #0
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	2100      	movs	r1, #0
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7ff fd58 	bl	80091c8 <xTimerGenericCommand>
 8009718:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10b      	bne.n	8009738 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	603b      	str	r3, [r7, #0]
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009738:	4b09      	ldr	r3, [pc, #36]	@ (8009760 <prvSwitchTimerLists+0xc4>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1b0      	bne.n	80096a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009742:	4b07      	ldr	r3, [pc, #28]	@ (8009760 <prvSwitchTimerLists+0xc4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009748:	4b06      	ldr	r3, [pc, #24]	@ (8009764 <prvSwitchTimerLists+0xc8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a04      	ldr	r2, [pc, #16]	@ (8009760 <prvSwitchTimerLists+0xc4>)
 800974e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009750:	4a04      	ldr	r2, [pc, #16]	@ (8009764 <prvSwitchTimerLists+0xc8>)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	6013      	str	r3, [r2, #0]
}
 8009756:	bf00      	nop
 8009758:	3718      	adds	r7, #24
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20001378 	.word	0x20001378
 8009764:	2000137c 	.word	0x2000137c

08009768 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800976e:	f000 f96b 	bl	8009a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009772:	4b15      	ldr	r3, [pc, #84]	@ (80097c8 <prvCheckForValidListAndQueue+0x60>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d120      	bne.n	80097bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800977a:	4814      	ldr	r0, [pc, #80]	@ (80097cc <prvCheckForValidListAndQueue+0x64>)
 800977c:	f7fd fc72 	bl	8007064 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009780:	4813      	ldr	r0, [pc, #76]	@ (80097d0 <prvCheckForValidListAndQueue+0x68>)
 8009782:	f7fd fc6f 	bl	8007064 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009786:	4b13      	ldr	r3, [pc, #76]	@ (80097d4 <prvCheckForValidListAndQueue+0x6c>)
 8009788:	4a10      	ldr	r2, [pc, #64]	@ (80097cc <prvCheckForValidListAndQueue+0x64>)
 800978a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800978c:	4b12      	ldr	r3, [pc, #72]	@ (80097d8 <prvCheckForValidListAndQueue+0x70>)
 800978e:	4a10      	ldr	r2, [pc, #64]	@ (80097d0 <prvCheckForValidListAndQueue+0x68>)
 8009790:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009792:	2300      	movs	r3, #0
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	4b11      	ldr	r3, [pc, #68]	@ (80097dc <prvCheckForValidListAndQueue+0x74>)
 8009798:	4a11      	ldr	r2, [pc, #68]	@ (80097e0 <prvCheckForValidListAndQueue+0x78>)
 800979a:	2110      	movs	r1, #16
 800979c:	200a      	movs	r0, #10
 800979e:	f7fd fd7f 	bl	80072a0 <xQueueGenericCreateStatic>
 80097a2:	4603      	mov	r3, r0
 80097a4:	4a08      	ldr	r2, [pc, #32]	@ (80097c8 <prvCheckForValidListAndQueue+0x60>)
 80097a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097a8:	4b07      	ldr	r3, [pc, #28]	@ (80097c8 <prvCheckForValidListAndQueue+0x60>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097b0:	4b05      	ldr	r3, [pc, #20]	@ (80097c8 <prvCheckForValidListAndQueue+0x60>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	490b      	ldr	r1, [pc, #44]	@ (80097e4 <prvCheckForValidListAndQueue+0x7c>)
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fc42 	bl	8008040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097bc:	f000 f976 	bl	8009aac <vPortExitCritical>
}
 80097c0:	bf00      	nop
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20001380 	.word	0x20001380
 80097cc:	20001350 	.word	0x20001350
 80097d0:	20001364 	.word	0x20001364
 80097d4:	20001378 	.word	0x20001378
 80097d8:	2000137c 	.word	0x2000137c
 80097dc:	2000142c 	.word	0x2000142c
 80097e0:	2000138c 	.word	0x2000138c
 80097e4:	0800cf90 	.word	0x0800cf90

080097e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3b04      	subs	r3, #4
 80097f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3b04      	subs	r3, #4
 8009806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f023 0201 	bic.w	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3b04      	subs	r3, #4
 8009816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009818:	4a0c      	ldr	r2, [pc, #48]	@ (800984c <pxPortInitialiseStack+0x64>)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3b14      	subs	r3, #20
 8009822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b04      	subs	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f06f 0202 	mvn.w	r2, #2
 8009836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3b20      	subs	r3, #32
 800983c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800983e:	68fb      	ldr	r3, [r7, #12]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	08009851 	.word	0x08009851

08009850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800985a:	4b13      	ldr	r3, [pc, #76]	@ (80098a8 <prvTaskExitError+0x58>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009862:	d00b      	beq.n	800987c <prvTaskExitError+0x2c>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	60fb      	str	r3, [r7, #12]
}
 8009876:	bf00      	nop
 8009878:	bf00      	nop
 800987a:	e7fd      	b.n	8009878 <prvTaskExitError+0x28>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	60bb      	str	r3, [r7, #8]
}
 800988e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009890:	bf00      	nop
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d0fc      	beq.n	8009892 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	20000014 	.word	0x20000014
 80098ac:	00000000 	.word	0x00000000

080098b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098b0:	4b07      	ldr	r3, [pc, #28]	@ (80098d0 <pxCurrentTCBConst2>)
 80098b2:	6819      	ldr	r1, [r3, #0]
 80098b4:	6808      	ldr	r0, [r1, #0]
 80098b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ba:	f380 8809 	msr	PSP, r0
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f04f 0000 	mov.w	r0, #0
 80098c6:	f380 8811 	msr	BASEPRI, r0
 80098ca:	4770      	bx	lr
 80098cc:	f3af 8000 	nop.w

080098d0 <pxCurrentTCBConst2>:
 80098d0:	20000e50 	.word	0x20000e50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop

080098d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098d8:	4808      	ldr	r0, [pc, #32]	@ (80098fc <prvPortStartFirstTask+0x24>)
 80098da:	6800      	ldr	r0, [r0, #0]
 80098dc:	6800      	ldr	r0, [r0, #0]
 80098de:	f380 8808 	msr	MSP, r0
 80098e2:	f04f 0000 	mov.w	r0, #0
 80098e6:	f380 8814 	msr	CONTROL, r0
 80098ea:	b662      	cpsie	i
 80098ec:	b661      	cpsie	f
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	df00      	svc	0
 80098f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098fa:	bf00      	nop
 80098fc:	e000ed08 	.word	0xe000ed08

08009900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009906:	4b47      	ldr	r3, [pc, #284]	@ (8009a24 <xPortStartScheduler+0x124>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a47      	ldr	r2, [pc, #284]	@ (8009a28 <xPortStartScheduler+0x128>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d10b      	bne.n	8009928 <xPortStartScheduler+0x28>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	613b      	str	r3, [r7, #16]
}
 8009922:	bf00      	nop
 8009924:	bf00      	nop
 8009926:	e7fd      	b.n	8009924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009928:	4b3e      	ldr	r3, [pc, #248]	@ (8009a24 <xPortStartScheduler+0x124>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a2c <xPortStartScheduler+0x12c>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d10b      	bne.n	800994a <xPortStartScheduler+0x4a>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	60fb      	str	r3, [r7, #12]
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop
 8009948:	e7fd      	b.n	8009946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800994a:	4b39      	ldr	r3, [pc, #228]	@ (8009a30 <xPortStartScheduler+0x130>)
 800994c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	22ff      	movs	r2, #255	@ 0xff
 800995a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	b2db      	uxtb	r3, r3
 8009968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800996c:	b2da      	uxtb	r2, r3
 800996e:	4b31      	ldr	r3, [pc, #196]	@ (8009a34 <xPortStartScheduler+0x134>)
 8009970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009972:	4b31      	ldr	r3, [pc, #196]	@ (8009a38 <xPortStartScheduler+0x138>)
 8009974:	2207      	movs	r2, #7
 8009976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009978:	e009      	b.n	800998e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800997a:	4b2f      	ldr	r3, [pc, #188]	@ (8009a38 <xPortStartScheduler+0x138>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3b01      	subs	r3, #1
 8009980:	4a2d      	ldr	r2, [pc, #180]	@ (8009a38 <xPortStartScheduler+0x138>)
 8009982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	b2db      	uxtb	r3, r3
 800998c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800998e:	78fb      	ldrb	r3, [r7, #3]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009996:	2b80      	cmp	r3, #128	@ 0x80
 8009998:	d0ef      	beq.n	800997a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800999a:	4b27      	ldr	r3, [pc, #156]	@ (8009a38 <xPortStartScheduler+0x138>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f1c3 0307 	rsb	r3, r3, #7
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d00b      	beq.n	80099be <xPortStartScheduler+0xbe>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	60bb      	str	r3, [r7, #8]
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	e7fd      	b.n	80099ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099be:	4b1e      	ldr	r3, [pc, #120]	@ (8009a38 <xPortStartScheduler+0x138>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	021b      	lsls	r3, r3, #8
 80099c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a38 <xPortStartScheduler+0x138>)
 80099c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a38 <xPortStartScheduler+0x138>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80099d0:	4a19      	ldr	r2, [pc, #100]	@ (8009a38 <xPortStartScheduler+0x138>)
 80099d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099dc:	4b17      	ldr	r3, [pc, #92]	@ (8009a3c <xPortStartScheduler+0x13c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a16      	ldr	r2, [pc, #88]	@ (8009a3c <xPortStartScheduler+0x13c>)
 80099e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80099e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099e8:	4b14      	ldr	r3, [pc, #80]	@ (8009a3c <xPortStartScheduler+0x13c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a13      	ldr	r2, [pc, #76]	@ (8009a3c <xPortStartScheduler+0x13c>)
 80099ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80099f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099f4:	f000 f8da 	bl	8009bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099f8:	4b11      	ldr	r3, [pc, #68]	@ (8009a40 <xPortStartScheduler+0x140>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099fe:	f000 f8f9 	bl	8009bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a02:	4b10      	ldr	r3, [pc, #64]	@ (8009a44 <xPortStartScheduler+0x144>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a0f      	ldr	r2, [pc, #60]	@ (8009a44 <xPortStartScheduler+0x144>)
 8009a08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a0e:	f7ff ff63 	bl	80098d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a12:	f7fe ff2d 	bl	8008870 <vTaskSwitchContext>
	prvTaskExitError();
 8009a16:	f7ff ff1b 	bl	8009850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	e000ed00 	.word	0xe000ed00
 8009a28:	410fc271 	.word	0x410fc271
 8009a2c:	410fc270 	.word	0x410fc270
 8009a30:	e000e400 	.word	0xe000e400
 8009a34:	2000147c 	.word	0x2000147c
 8009a38:	20001480 	.word	0x20001480
 8009a3c:	e000ed20 	.word	0xe000ed20
 8009a40:	20000014 	.word	0x20000014
 8009a44:	e000ef34 	.word	0xe000ef34

08009a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	607b      	str	r3, [r7, #4]
}
 8009a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a62:	4b10      	ldr	r3, [pc, #64]	@ (8009aa4 <vPortEnterCritical+0x5c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3301      	adds	r3, #1
 8009a68:	4a0e      	ldr	r2, [pc, #56]	@ (8009aa4 <vPortEnterCritical+0x5c>)
 8009a6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa4 <vPortEnterCritical+0x5c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d110      	bne.n	8009a96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a74:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa8 <vPortEnterCritical+0x60>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00b      	beq.n	8009a96 <vPortEnterCritical+0x4e>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	603b      	str	r3, [r7, #0]
}
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	e7fd      	b.n	8009a92 <vPortEnterCritical+0x4a>
	}
}
 8009a96:	bf00      	nop
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	20000014 	.word	0x20000014
 8009aa8:	e000ed04 	.word	0xe000ed04

08009aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ab2:	4b12      	ldr	r3, [pc, #72]	@ (8009afc <vPortExitCritical+0x50>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10b      	bne.n	8009ad2 <vPortExitCritical+0x26>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	607b      	str	r3, [r7, #4]
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	e7fd      	b.n	8009ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8009afc <vPortExitCritical+0x50>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	4a08      	ldr	r2, [pc, #32]	@ (8009afc <vPortExitCritical+0x50>)
 8009ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009adc:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <vPortExitCritical+0x50>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d105      	bne.n	8009af0 <vPortExitCritical+0x44>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	f383 8811 	msr	BASEPRI, r3
}
 8009aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20000014 	.word	0x20000014

08009b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b00:	f3ef 8009 	mrs	r0, PSP
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	4b15      	ldr	r3, [pc, #84]	@ (8009b60 <pxCurrentTCBConst>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	f01e 0f10 	tst.w	lr, #16
 8009b10:	bf08      	it	eq
 8009b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1a:	6010      	str	r0, [r2, #0]
 8009b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b24:	f380 8811 	msr	BASEPRI, r0
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f7fe fe9e 	bl	8008870 <vTaskSwitchContext>
 8009b34:	f04f 0000 	mov.w	r0, #0
 8009b38:	f380 8811 	msr	BASEPRI, r0
 8009b3c:	bc09      	pop	{r0, r3}
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	6808      	ldr	r0, [r1, #0]
 8009b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b46:	f01e 0f10 	tst.w	lr, #16
 8009b4a:	bf08      	it	eq
 8009b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b50:	f380 8809 	msr	PSP, r0
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	f3af 8000 	nop.w

08009b60 <pxCurrentTCBConst>:
 8009b60:	20000e50 	.word	0x20000e50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop

08009b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	607b      	str	r3, [r7, #4]
}
 8009b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b82:	f7fe fdbb 	bl	80086fc <xTaskIncrementTick>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b8c:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <xPortSysTickHandler+0x40>)
 8009b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	2300      	movs	r3, #0
 8009b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	f383 8811 	msr	BASEPRI, r3
}
 8009b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bac:	b480      	push	{r7}
 8009bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8009be0 <vPortSetupTimerInterrupt+0x34>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009be4 <vPortSetupTimerInterrupt+0x38>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009be8 <vPortSetupTimerInterrupt+0x3c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8009bec <vPortSetupTimerInterrupt+0x40>)
 8009bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc6:	099b      	lsrs	r3, r3, #6
 8009bc8:	4a09      	ldr	r2, [pc, #36]	@ (8009bf0 <vPortSetupTimerInterrupt+0x44>)
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bce:	4b04      	ldr	r3, [pc, #16]	@ (8009be0 <vPortSetupTimerInterrupt+0x34>)
 8009bd0:	2207      	movs	r2, #7
 8009bd2:	601a      	str	r2, [r3, #0]
}
 8009bd4:	bf00      	nop
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	e000e010 	.word	0xe000e010
 8009be4:	e000e018 	.word	0xe000e018
 8009be8:	20000008 	.word	0x20000008
 8009bec:	10624dd3 	.word	0x10624dd3
 8009bf0:	e000e014 	.word	0xe000e014

08009bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c04 <vPortEnableVFP+0x10>
 8009bf8:	6801      	ldr	r1, [r0, #0]
 8009bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009bfe:	6001      	str	r1, [r0, #0]
 8009c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c02:	bf00      	nop
 8009c04:	e000ed88 	.word	0xe000ed88

08009c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c0e:	f3ef 8305 	mrs	r3, IPSR
 8009c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b0f      	cmp	r3, #15
 8009c18:	d915      	bls.n	8009c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c1a:	4a18      	ldr	r2, [pc, #96]	@ (8009c7c <vPortValidateInterruptPriority+0x74>)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c24:	4b16      	ldr	r3, [pc, #88]	@ (8009c80 <vPortValidateInterruptPriority+0x78>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	7afa      	ldrb	r2, [r7, #11]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d20b      	bcs.n	8009c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	607b      	str	r3, [r7, #4]
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	e7fd      	b.n	8009c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c46:	4b0f      	ldr	r3, [pc, #60]	@ (8009c84 <vPortValidateInterruptPriority+0x7c>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c88 <vPortValidateInterruptPriority+0x80>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d90b      	bls.n	8009c6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	603b      	str	r3, [r7, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <vPortValidateInterruptPriority+0x62>
	}
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	e000e3f0 	.word	0xe000e3f0
 8009c80:	2000147c 	.word	0x2000147c
 8009c84:	e000ed0c 	.word	0xe000ed0c
 8009c88:	20001480 	.word	0x20001480

08009c8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08a      	sub	sp, #40	@ 0x28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c98:	f7fe fc74 	bl	8008584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8009e10 <pvPortMalloc+0x184>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ca4:	f000 f924 	bl	8009ef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8009e14 <pvPortMalloc+0x188>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4013      	ands	r3, r2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f040 8095 	bne.w	8009de0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d01e      	beq.n	8009cfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d015      	beq.n	8009cfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f023 0307 	bic.w	r3, r3, #7
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f003 0307 	and.w	r3, r3, #7
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00b      	beq.n	8009cfa <pvPortMalloc+0x6e>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	617b      	str	r3, [r7, #20]
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	e7fd      	b.n	8009cf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d06f      	beq.n	8009de0 <pvPortMalloc+0x154>
 8009d00:	4b45      	ldr	r3, [pc, #276]	@ (8009e18 <pvPortMalloc+0x18c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d86a      	bhi.n	8009de0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d0a:	4b44      	ldr	r3, [pc, #272]	@ (8009e1c <pvPortMalloc+0x190>)
 8009d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d0e:	4b43      	ldr	r3, [pc, #268]	@ (8009e1c <pvPortMalloc+0x190>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d14:	e004      	b.n	8009d20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d903      	bls.n	8009d32 <pvPortMalloc+0xa6>
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1f1      	bne.n	8009d16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d32:	4b37      	ldr	r3, [pc, #220]	@ (8009e10 <pvPortMalloc+0x184>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d051      	beq.n	8009de0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2208      	movs	r2, #8
 8009d42:	4413      	add	r3, r2
 8009d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	1ad2      	subs	r2, r2, r3
 8009d56:	2308      	movs	r3, #8
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d920      	bls.n	8009da0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4413      	add	r3, r2
 8009d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00b      	beq.n	8009d88 <pvPortMalloc+0xfc>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	613b      	str	r3, [r7, #16]
}
 8009d82:	bf00      	nop
 8009d84:	bf00      	nop
 8009d86:	e7fd      	b.n	8009d84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d9a:	69b8      	ldr	r0, [r7, #24]
 8009d9c:	f000 f90a 	bl	8009fb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009da0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e18 <pvPortMalloc+0x18c>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	4a1b      	ldr	r2, [pc, #108]	@ (8009e18 <pvPortMalloc+0x18c>)
 8009dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dae:	4b1a      	ldr	r3, [pc, #104]	@ (8009e18 <pvPortMalloc+0x18c>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e20 <pvPortMalloc+0x194>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d203      	bcs.n	8009dc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009dba:	4b17      	ldr	r3, [pc, #92]	@ (8009e18 <pvPortMalloc+0x18c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a18      	ldr	r2, [pc, #96]	@ (8009e20 <pvPortMalloc+0x194>)
 8009dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	4b13      	ldr	r3, [pc, #76]	@ (8009e14 <pvPortMalloc+0x188>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009dd6:	4b13      	ldr	r3, [pc, #76]	@ (8009e24 <pvPortMalloc+0x198>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	4a11      	ldr	r2, [pc, #68]	@ (8009e24 <pvPortMalloc+0x198>)
 8009dde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009de0:	f7fe fbde 	bl	80085a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00b      	beq.n	8009e06 <pvPortMalloc+0x17a>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	60fb      	str	r3, [r7, #12]
}
 8009e00:	bf00      	nop
 8009e02:	bf00      	nop
 8009e04:	e7fd      	b.n	8009e02 <pvPortMalloc+0x176>
	return pvReturn;
 8009e06:	69fb      	ldr	r3, [r7, #28]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3728      	adds	r7, #40	@ 0x28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	2000508c 	.word	0x2000508c
 8009e14:	200050a0 	.word	0x200050a0
 8009e18:	20005090 	.word	0x20005090
 8009e1c:	20005084 	.word	0x20005084
 8009e20:	20005094 	.word	0x20005094
 8009e24:	20005098 	.word	0x20005098

08009e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d04f      	beq.n	8009eda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e3a:	2308      	movs	r3, #8
 8009e3c:	425b      	negs	r3, r3
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4413      	add	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	4b25      	ldr	r3, [pc, #148]	@ (8009ee4 <vPortFree+0xbc>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4013      	ands	r3, r2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10b      	bne.n	8009e6e <vPortFree+0x46>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	60fb      	str	r3, [r7, #12]
}
 8009e68:	bf00      	nop
 8009e6a:	bf00      	nop
 8009e6c:	e7fd      	b.n	8009e6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <vPortFree+0x66>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	60bb      	str	r3, [r7, #8]
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	e7fd      	b.n	8009e8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	4b14      	ldr	r3, [pc, #80]	@ (8009ee4 <vPortFree+0xbc>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4013      	ands	r3, r2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01e      	beq.n	8009eda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d11a      	bne.n	8009eda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee4 <vPortFree+0xbc>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	43db      	mvns	r3, r3
 8009eae:	401a      	ands	r2, r3
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009eb4:	f7fe fb66 	bl	8008584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee8 <vPortFree+0xc0>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	4a09      	ldr	r2, [pc, #36]	@ (8009ee8 <vPortFree+0xc0>)
 8009ec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ec6:	6938      	ldr	r0, [r7, #16]
 8009ec8:	f000 f874 	bl	8009fb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ecc:	4b07      	ldr	r3, [pc, #28]	@ (8009eec <vPortFree+0xc4>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	4a06      	ldr	r2, [pc, #24]	@ (8009eec <vPortFree+0xc4>)
 8009ed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ed6:	f7fe fb63 	bl	80085a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009eda:	bf00      	nop
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	200050a0 	.word	0x200050a0
 8009ee8:	20005090 	.word	0x20005090
 8009eec:	2000509c 	.word	0x2000509c

08009ef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ef6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009efa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009efc:	4b27      	ldr	r3, [pc, #156]	@ (8009f9c <prvHeapInit+0xac>)
 8009efe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00c      	beq.n	8009f24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3307      	adds	r3, #7
 8009f0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 0307 	bic.w	r3, r3, #7
 8009f16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009f9c <prvHeapInit+0xac>)
 8009f20:	4413      	add	r3, r2
 8009f22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f28:	4a1d      	ldr	r2, [pc, #116]	@ (8009fa0 <prvHeapInit+0xb0>)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8009fa0 <prvHeapInit+0xb0>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	4413      	add	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f3c:	2208      	movs	r2, #8
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	1a9b      	subs	r3, r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4a15      	ldr	r2, [pc, #84]	@ (8009fa4 <prvHeapInit+0xb4>)
 8009f50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f52:	4b14      	ldr	r3, [pc, #80]	@ (8009fa4 <prvHeapInit+0xb4>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2200      	movs	r2, #0
 8009f58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f5a:	4b12      	ldr	r3, [pc, #72]	@ (8009fa4 <prvHeapInit+0xb4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	1ad2      	subs	r2, r2, r3
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f70:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa4 <prvHeapInit+0xb4>)
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8009fa8 <prvHeapInit+0xb8>)
 8009f7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	4a09      	ldr	r2, [pc, #36]	@ (8009fac <prvHeapInit+0xbc>)
 8009f86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f88:	4b09      	ldr	r3, [pc, #36]	@ (8009fb0 <prvHeapInit+0xc0>)
 8009f8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f8e:	601a      	str	r2, [r3, #0]
}
 8009f90:	bf00      	nop
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	20001484 	.word	0x20001484
 8009fa0:	20005084 	.word	0x20005084
 8009fa4:	2000508c 	.word	0x2000508c
 8009fa8:	20005094 	.word	0x20005094
 8009fac:	20005090 	.word	0x20005090
 8009fb0:	200050a0 	.word	0x200050a0

08009fb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fbc:	4b28      	ldr	r3, [pc, #160]	@ (800a060 <prvInsertBlockIntoFreeList+0xac>)
 8009fbe:	60fb      	str	r3, [r7, #12]
 8009fc0:	e002      	b.n	8009fc8 <prvInsertBlockIntoFreeList+0x14>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d8f7      	bhi.n	8009fc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4413      	add	r3, r2
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d108      	bne.n	8009ff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	441a      	add	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	441a      	add	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d118      	bne.n	800a03c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	4b15      	ldr	r3, [pc, #84]	@ (800a064 <prvInsertBlockIntoFreeList+0xb0>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d00d      	beq.n	800a032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	441a      	add	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	e008      	b.n	800a044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a032:	4b0c      	ldr	r3, [pc, #48]	@ (800a064 <prvInsertBlockIntoFreeList+0xb0>)
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	e003      	b.n	800a044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d002      	beq.n	800a052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a052:	bf00      	nop
 800a054:	3714      	adds	r7, #20
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	20005084 	.word	0x20005084
 800a064:	2000508c 	.word	0x2000508c

0800a068 <malloc>:
 800a068:	4b02      	ldr	r3, [pc, #8]	@ (800a074 <malloc+0xc>)
 800a06a:	4601      	mov	r1, r0
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f000 b82d 	b.w	800a0cc <_malloc_r>
 800a072:	bf00      	nop
 800a074:	20000024 	.word	0x20000024

0800a078 <free>:
 800a078:	4b02      	ldr	r3, [pc, #8]	@ (800a084 <free+0xc>)
 800a07a:	4601      	mov	r1, r0
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	f001 be33 	b.w	800bce8 <_free_r>
 800a082:	bf00      	nop
 800a084:	20000024 	.word	0x20000024

0800a088 <sbrk_aligned>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	4e0f      	ldr	r6, [pc, #60]	@ (800a0c8 <sbrk_aligned+0x40>)
 800a08c:	460c      	mov	r4, r1
 800a08e:	6831      	ldr	r1, [r6, #0]
 800a090:	4605      	mov	r5, r0
 800a092:	b911      	cbnz	r1, 800a09a <sbrk_aligned+0x12>
 800a094:	f000 ff7c 	bl	800af90 <_sbrk_r>
 800a098:	6030      	str	r0, [r6, #0]
 800a09a:	4621      	mov	r1, r4
 800a09c:	4628      	mov	r0, r5
 800a09e:	f000 ff77 	bl	800af90 <_sbrk_r>
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	d103      	bne.n	800a0ae <sbrk_aligned+0x26>
 800a0a6:	f04f 34ff 	mov.w	r4, #4294967295
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	bd70      	pop	{r4, r5, r6, pc}
 800a0ae:	1cc4      	adds	r4, r0, #3
 800a0b0:	f024 0403 	bic.w	r4, r4, #3
 800a0b4:	42a0      	cmp	r0, r4
 800a0b6:	d0f8      	beq.n	800a0aa <sbrk_aligned+0x22>
 800a0b8:	1a21      	subs	r1, r4, r0
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f000 ff68 	bl	800af90 <_sbrk_r>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d1f2      	bne.n	800a0aa <sbrk_aligned+0x22>
 800a0c4:	e7ef      	b.n	800a0a6 <sbrk_aligned+0x1e>
 800a0c6:	bf00      	nop
 800a0c8:	200050a4 	.word	0x200050a4

0800a0cc <_malloc_r>:
 800a0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d0:	1ccd      	adds	r5, r1, #3
 800a0d2:	f025 0503 	bic.w	r5, r5, #3
 800a0d6:	3508      	adds	r5, #8
 800a0d8:	2d0c      	cmp	r5, #12
 800a0da:	bf38      	it	cc
 800a0dc:	250c      	movcc	r5, #12
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	db01      	blt.n	800a0e8 <_malloc_r+0x1c>
 800a0e4:	42a9      	cmp	r1, r5
 800a0e6:	d904      	bls.n	800a0f2 <_malloc_r+0x26>
 800a0e8:	230c      	movs	r3, #12
 800a0ea:	6033      	str	r3, [r6, #0]
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1c8 <_malloc_r+0xfc>
 800a0f6:	f000 f869 	bl	800a1cc <__malloc_lock>
 800a0fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a0fe:	461c      	mov	r4, r3
 800a100:	bb44      	cbnz	r4, 800a154 <_malloc_r+0x88>
 800a102:	4629      	mov	r1, r5
 800a104:	4630      	mov	r0, r6
 800a106:	f7ff ffbf 	bl	800a088 <sbrk_aligned>
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	4604      	mov	r4, r0
 800a10e:	d158      	bne.n	800a1c2 <_malloc_r+0xf6>
 800a110:	f8d8 4000 	ldr.w	r4, [r8]
 800a114:	4627      	mov	r7, r4
 800a116:	2f00      	cmp	r7, #0
 800a118:	d143      	bne.n	800a1a2 <_malloc_r+0xd6>
 800a11a:	2c00      	cmp	r4, #0
 800a11c:	d04b      	beq.n	800a1b6 <_malloc_r+0xea>
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	4639      	mov	r1, r7
 800a122:	4630      	mov	r0, r6
 800a124:	eb04 0903 	add.w	r9, r4, r3
 800a128:	f000 ff32 	bl	800af90 <_sbrk_r>
 800a12c:	4581      	cmp	r9, r0
 800a12e:	d142      	bne.n	800a1b6 <_malloc_r+0xea>
 800a130:	6821      	ldr	r1, [r4, #0]
 800a132:	1a6d      	subs	r5, r5, r1
 800a134:	4629      	mov	r1, r5
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ffa6 	bl	800a088 <sbrk_aligned>
 800a13c:	3001      	adds	r0, #1
 800a13e:	d03a      	beq.n	800a1b6 <_malloc_r+0xea>
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	442b      	add	r3, r5
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	f8d8 3000 	ldr.w	r3, [r8]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	bb62      	cbnz	r2, 800a1a8 <_malloc_r+0xdc>
 800a14e:	f8c8 7000 	str.w	r7, [r8]
 800a152:	e00f      	b.n	800a174 <_malloc_r+0xa8>
 800a154:	6822      	ldr	r2, [r4, #0]
 800a156:	1b52      	subs	r2, r2, r5
 800a158:	d420      	bmi.n	800a19c <_malloc_r+0xd0>
 800a15a:	2a0b      	cmp	r2, #11
 800a15c:	d917      	bls.n	800a18e <_malloc_r+0xc2>
 800a15e:	1961      	adds	r1, r4, r5
 800a160:	42a3      	cmp	r3, r4
 800a162:	6025      	str	r5, [r4, #0]
 800a164:	bf18      	it	ne
 800a166:	6059      	strne	r1, [r3, #4]
 800a168:	6863      	ldr	r3, [r4, #4]
 800a16a:	bf08      	it	eq
 800a16c:	f8c8 1000 	streq.w	r1, [r8]
 800a170:	5162      	str	r2, [r4, r5]
 800a172:	604b      	str	r3, [r1, #4]
 800a174:	4630      	mov	r0, r6
 800a176:	f000 f82f 	bl	800a1d8 <__malloc_unlock>
 800a17a:	f104 000b 	add.w	r0, r4, #11
 800a17e:	1d23      	adds	r3, r4, #4
 800a180:	f020 0007 	bic.w	r0, r0, #7
 800a184:	1ac2      	subs	r2, r0, r3
 800a186:	bf1c      	itt	ne
 800a188:	1a1b      	subne	r3, r3, r0
 800a18a:	50a3      	strne	r3, [r4, r2]
 800a18c:	e7af      	b.n	800a0ee <_malloc_r+0x22>
 800a18e:	6862      	ldr	r2, [r4, #4]
 800a190:	42a3      	cmp	r3, r4
 800a192:	bf0c      	ite	eq
 800a194:	f8c8 2000 	streq.w	r2, [r8]
 800a198:	605a      	strne	r2, [r3, #4]
 800a19a:	e7eb      	b.n	800a174 <_malloc_r+0xa8>
 800a19c:	4623      	mov	r3, r4
 800a19e:	6864      	ldr	r4, [r4, #4]
 800a1a0:	e7ae      	b.n	800a100 <_malloc_r+0x34>
 800a1a2:	463c      	mov	r4, r7
 800a1a4:	687f      	ldr	r7, [r7, #4]
 800a1a6:	e7b6      	b.n	800a116 <_malloc_r+0x4a>
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	d1fb      	bne.n	800a1a8 <_malloc_r+0xdc>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	6053      	str	r3, [r2, #4]
 800a1b4:	e7de      	b.n	800a174 <_malloc_r+0xa8>
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	6033      	str	r3, [r6, #0]
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f000 f80c 	bl	800a1d8 <__malloc_unlock>
 800a1c0:	e794      	b.n	800a0ec <_malloc_r+0x20>
 800a1c2:	6005      	str	r5, [r0, #0]
 800a1c4:	e7d6      	b.n	800a174 <_malloc_r+0xa8>
 800a1c6:	bf00      	nop
 800a1c8:	200050a8 	.word	0x200050a8

0800a1cc <__malloc_lock>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	@ (800a1d4 <__malloc_lock+0x8>)
 800a1ce:	f000 bf2c 	b.w	800b02a <__retarget_lock_acquire_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	200051ec 	.word	0x200051ec

0800a1d8 <__malloc_unlock>:
 800a1d8:	4801      	ldr	r0, [pc, #4]	@ (800a1e0 <__malloc_unlock+0x8>)
 800a1da:	f000 bf27 	b.w	800b02c <__retarget_lock_release_recursive>
 800a1de:	bf00      	nop
 800a1e0:	200051ec 	.word	0x200051ec

0800a1e4 <__cvt>:
 800a1e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e8:	ec57 6b10 	vmov	r6, r7, d0
 800a1ec:	2f00      	cmp	r7, #0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	bfbb      	ittet	lt
 800a1f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a1fa:	461f      	movlt	r7, r3
 800a1fc:	2300      	movge	r3, #0
 800a1fe:	232d      	movlt	r3, #45	@ 0x2d
 800a200:	700b      	strb	r3, [r1, #0]
 800a202:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a204:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a208:	4691      	mov	r9, r2
 800a20a:	f023 0820 	bic.w	r8, r3, #32
 800a20e:	bfbc      	itt	lt
 800a210:	4632      	movlt	r2, r6
 800a212:	4616      	movlt	r6, r2
 800a214:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a218:	d005      	beq.n	800a226 <__cvt+0x42>
 800a21a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a21e:	d100      	bne.n	800a222 <__cvt+0x3e>
 800a220:	3401      	adds	r4, #1
 800a222:	2102      	movs	r1, #2
 800a224:	e000      	b.n	800a228 <__cvt+0x44>
 800a226:	2103      	movs	r1, #3
 800a228:	ab03      	add	r3, sp, #12
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	ab02      	add	r3, sp, #8
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	ec47 6b10 	vmov	d0, r6, r7
 800a234:	4653      	mov	r3, sl
 800a236:	4622      	mov	r2, r4
 800a238:	f000 ff92 	bl	800b160 <_dtoa_r>
 800a23c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a240:	4605      	mov	r5, r0
 800a242:	d119      	bne.n	800a278 <__cvt+0x94>
 800a244:	f019 0f01 	tst.w	r9, #1
 800a248:	d00e      	beq.n	800a268 <__cvt+0x84>
 800a24a:	eb00 0904 	add.w	r9, r0, r4
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	4630      	mov	r0, r6
 800a254:	4639      	mov	r1, r7
 800a256:	f7f6 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800a25a:	b108      	cbz	r0, 800a260 <__cvt+0x7c>
 800a25c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a260:	2230      	movs	r2, #48	@ 0x30
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	454b      	cmp	r3, r9
 800a266:	d31e      	bcc.n	800a2a6 <__cvt+0xc2>
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a26c:	1b5b      	subs	r3, r3, r5
 800a26e:	4628      	mov	r0, r5
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	b004      	add	sp, #16
 800a274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a278:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a27c:	eb00 0904 	add.w	r9, r0, r4
 800a280:	d1e5      	bne.n	800a24e <__cvt+0x6a>
 800a282:	7803      	ldrb	r3, [r0, #0]
 800a284:	2b30      	cmp	r3, #48	@ 0x30
 800a286:	d10a      	bne.n	800a29e <__cvt+0xba>
 800a288:	2200      	movs	r2, #0
 800a28a:	2300      	movs	r3, #0
 800a28c:	4630      	mov	r0, r6
 800a28e:	4639      	mov	r1, r7
 800a290:	f7f6 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a294:	b918      	cbnz	r0, 800a29e <__cvt+0xba>
 800a296:	f1c4 0401 	rsb	r4, r4, #1
 800a29a:	f8ca 4000 	str.w	r4, [sl]
 800a29e:	f8da 3000 	ldr.w	r3, [sl]
 800a2a2:	4499      	add	r9, r3
 800a2a4:	e7d3      	b.n	800a24e <__cvt+0x6a>
 800a2a6:	1c59      	adds	r1, r3, #1
 800a2a8:	9103      	str	r1, [sp, #12]
 800a2aa:	701a      	strb	r2, [r3, #0]
 800a2ac:	e7d9      	b.n	800a262 <__cvt+0x7e>

0800a2ae <__exponent>:
 800a2ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2b0:	2900      	cmp	r1, #0
 800a2b2:	bfba      	itte	lt
 800a2b4:	4249      	neglt	r1, r1
 800a2b6:	232d      	movlt	r3, #45	@ 0x2d
 800a2b8:	232b      	movge	r3, #43	@ 0x2b
 800a2ba:	2909      	cmp	r1, #9
 800a2bc:	7002      	strb	r2, [r0, #0]
 800a2be:	7043      	strb	r3, [r0, #1]
 800a2c0:	dd29      	ble.n	800a316 <__exponent+0x68>
 800a2c2:	f10d 0307 	add.w	r3, sp, #7
 800a2c6:	461d      	mov	r5, r3
 800a2c8:	270a      	movs	r7, #10
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	fbb1 f6f7 	udiv	r6, r1, r7
 800a2d0:	fb07 1416 	mls	r4, r7, r6, r1
 800a2d4:	3430      	adds	r4, #48	@ 0x30
 800a2d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a2da:	460c      	mov	r4, r1
 800a2dc:	2c63      	cmp	r4, #99	@ 0x63
 800a2de:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	dcf1      	bgt.n	800a2ca <__exponent+0x1c>
 800a2e6:	3130      	adds	r1, #48	@ 0x30
 800a2e8:	1e94      	subs	r4, r2, #2
 800a2ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a2ee:	1c41      	adds	r1, r0, #1
 800a2f0:	4623      	mov	r3, r4
 800a2f2:	42ab      	cmp	r3, r5
 800a2f4:	d30a      	bcc.n	800a30c <__exponent+0x5e>
 800a2f6:	f10d 0309 	add.w	r3, sp, #9
 800a2fa:	1a9b      	subs	r3, r3, r2
 800a2fc:	42ac      	cmp	r4, r5
 800a2fe:	bf88      	it	hi
 800a300:	2300      	movhi	r3, #0
 800a302:	3302      	adds	r3, #2
 800a304:	4403      	add	r3, r0
 800a306:	1a18      	subs	r0, r3, r0
 800a308:	b003      	add	sp, #12
 800a30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a30c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a310:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a314:	e7ed      	b.n	800a2f2 <__exponent+0x44>
 800a316:	2330      	movs	r3, #48	@ 0x30
 800a318:	3130      	adds	r1, #48	@ 0x30
 800a31a:	7083      	strb	r3, [r0, #2]
 800a31c:	70c1      	strb	r1, [r0, #3]
 800a31e:	1d03      	adds	r3, r0, #4
 800a320:	e7f1      	b.n	800a306 <__exponent+0x58>
	...

0800a324 <_printf_float>:
 800a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a328:	b08d      	sub	sp, #52	@ 0x34
 800a32a:	460c      	mov	r4, r1
 800a32c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a330:	4616      	mov	r6, r2
 800a332:	461f      	mov	r7, r3
 800a334:	4605      	mov	r5, r0
 800a336:	f000 fdf3 	bl	800af20 <_localeconv_r>
 800a33a:	6803      	ldr	r3, [r0, #0]
 800a33c:	9304      	str	r3, [sp, #16]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7f5 ff96 	bl	8000270 <strlen>
 800a344:	2300      	movs	r3, #0
 800a346:	930a      	str	r3, [sp, #40]	@ 0x28
 800a348:	f8d8 3000 	ldr.w	r3, [r8]
 800a34c:	9005      	str	r0, [sp, #20]
 800a34e:	3307      	adds	r3, #7
 800a350:	f023 0307 	bic.w	r3, r3, #7
 800a354:	f103 0208 	add.w	r2, r3, #8
 800a358:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a35c:	f8d4 b000 	ldr.w	fp, [r4]
 800a360:	f8c8 2000 	str.w	r2, [r8]
 800a364:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a368:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a36c:	9307      	str	r3, [sp, #28]
 800a36e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a372:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a37a:	4b9c      	ldr	r3, [pc, #624]	@ (800a5ec <_printf_float+0x2c8>)
 800a37c:	f04f 32ff 	mov.w	r2, #4294967295
 800a380:	f7f6 fbd4 	bl	8000b2c <__aeabi_dcmpun>
 800a384:	bb70      	cbnz	r0, 800a3e4 <_printf_float+0xc0>
 800a386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a38a:	4b98      	ldr	r3, [pc, #608]	@ (800a5ec <_printf_float+0x2c8>)
 800a38c:	f04f 32ff 	mov.w	r2, #4294967295
 800a390:	f7f6 fbae 	bl	8000af0 <__aeabi_dcmple>
 800a394:	bb30      	cbnz	r0, 800a3e4 <_printf_float+0xc0>
 800a396:	2200      	movs	r2, #0
 800a398:	2300      	movs	r3, #0
 800a39a:	4640      	mov	r0, r8
 800a39c:	4649      	mov	r1, r9
 800a39e:	f7f6 fb9d 	bl	8000adc <__aeabi_dcmplt>
 800a3a2:	b110      	cbz	r0, 800a3aa <_printf_float+0x86>
 800a3a4:	232d      	movs	r3, #45	@ 0x2d
 800a3a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3aa:	4a91      	ldr	r2, [pc, #580]	@ (800a5f0 <_printf_float+0x2cc>)
 800a3ac:	4b91      	ldr	r3, [pc, #580]	@ (800a5f4 <_printf_float+0x2d0>)
 800a3ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a3b2:	bf94      	ite	ls
 800a3b4:	4690      	movls	r8, r2
 800a3b6:	4698      	movhi	r8, r3
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	f02b 0304 	bic.w	r3, fp, #4
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	f04f 0900 	mov.w	r9, #0
 800a3c6:	9700      	str	r7, [sp, #0]
 800a3c8:	4633      	mov	r3, r6
 800a3ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f000 f9d2 	bl	800a778 <_printf_common>
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f040 808d 	bne.w	800a4f4 <_printf_float+0x1d0>
 800a3da:	f04f 30ff 	mov.w	r0, #4294967295
 800a3de:	b00d      	add	sp, #52	@ 0x34
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	f7f6 fb9e 	bl	8000b2c <__aeabi_dcmpun>
 800a3f0:	b140      	cbz	r0, 800a404 <_printf_float+0xe0>
 800a3f2:	464b      	mov	r3, r9
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	bfbc      	itt	lt
 800a3f8:	232d      	movlt	r3, #45	@ 0x2d
 800a3fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a3fe:	4a7e      	ldr	r2, [pc, #504]	@ (800a5f8 <_printf_float+0x2d4>)
 800a400:	4b7e      	ldr	r3, [pc, #504]	@ (800a5fc <_printf_float+0x2d8>)
 800a402:	e7d4      	b.n	800a3ae <_printf_float+0x8a>
 800a404:	6863      	ldr	r3, [r4, #4]
 800a406:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a40a:	9206      	str	r2, [sp, #24]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	d13b      	bne.n	800a488 <_printf_float+0x164>
 800a410:	2306      	movs	r3, #6
 800a412:	6063      	str	r3, [r4, #4]
 800a414:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a418:	2300      	movs	r3, #0
 800a41a:	6022      	str	r2, [r4, #0]
 800a41c:	9303      	str	r3, [sp, #12]
 800a41e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a420:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a424:	ab09      	add	r3, sp, #36	@ 0x24
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	6861      	ldr	r1, [r4, #4]
 800a42a:	ec49 8b10 	vmov	d0, r8, r9
 800a42e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a432:	4628      	mov	r0, r5
 800a434:	f7ff fed6 	bl	800a1e4 <__cvt>
 800a438:	9b06      	ldr	r3, [sp, #24]
 800a43a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a43c:	2b47      	cmp	r3, #71	@ 0x47
 800a43e:	4680      	mov	r8, r0
 800a440:	d129      	bne.n	800a496 <_printf_float+0x172>
 800a442:	1cc8      	adds	r0, r1, #3
 800a444:	db02      	blt.n	800a44c <_printf_float+0x128>
 800a446:	6863      	ldr	r3, [r4, #4]
 800a448:	4299      	cmp	r1, r3
 800a44a:	dd41      	ble.n	800a4d0 <_printf_float+0x1ac>
 800a44c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a450:	fa5f fa8a 	uxtb.w	sl, sl
 800a454:	3901      	subs	r1, #1
 800a456:	4652      	mov	r2, sl
 800a458:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a45c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a45e:	f7ff ff26 	bl	800a2ae <__exponent>
 800a462:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a464:	1813      	adds	r3, r2, r0
 800a466:	2a01      	cmp	r2, #1
 800a468:	4681      	mov	r9, r0
 800a46a:	6123      	str	r3, [r4, #16]
 800a46c:	dc02      	bgt.n	800a474 <_printf_float+0x150>
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	07d2      	lsls	r2, r2, #31
 800a472:	d501      	bpl.n	800a478 <_printf_float+0x154>
 800a474:	3301      	adds	r3, #1
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0a2      	beq.n	800a3c6 <_printf_float+0xa2>
 800a480:	232d      	movs	r3, #45	@ 0x2d
 800a482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a486:	e79e      	b.n	800a3c6 <_printf_float+0xa2>
 800a488:	9a06      	ldr	r2, [sp, #24]
 800a48a:	2a47      	cmp	r2, #71	@ 0x47
 800a48c:	d1c2      	bne.n	800a414 <_printf_float+0xf0>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1c0      	bne.n	800a414 <_printf_float+0xf0>
 800a492:	2301      	movs	r3, #1
 800a494:	e7bd      	b.n	800a412 <_printf_float+0xee>
 800a496:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a49a:	d9db      	bls.n	800a454 <_printf_float+0x130>
 800a49c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a4a0:	d118      	bne.n	800a4d4 <_printf_float+0x1b0>
 800a4a2:	2900      	cmp	r1, #0
 800a4a4:	6863      	ldr	r3, [r4, #4]
 800a4a6:	dd0b      	ble.n	800a4c0 <_printf_float+0x19c>
 800a4a8:	6121      	str	r1, [r4, #16]
 800a4aa:	b913      	cbnz	r3, 800a4b2 <_printf_float+0x18e>
 800a4ac:	6822      	ldr	r2, [r4, #0]
 800a4ae:	07d0      	lsls	r0, r2, #31
 800a4b0:	d502      	bpl.n	800a4b8 <_printf_float+0x194>
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	440b      	add	r3, r1
 800a4b6:	6123      	str	r3, [r4, #16]
 800a4b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a4ba:	f04f 0900 	mov.w	r9, #0
 800a4be:	e7db      	b.n	800a478 <_printf_float+0x154>
 800a4c0:	b913      	cbnz	r3, 800a4c8 <_printf_float+0x1a4>
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	07d2      	lsls	r2, r2, #31
 800a4c6:	d501      	bpl.n	800a4cc <_printf_float+0x1a8>
 800a4c8:	3302      	adds	r3, #2
 800a4ca:	e7f4      	b.n	800a4b6 <_printf_float+0x192>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e7f2      	b.n	800a4b6 <_printf_float+0x192>
 800a4d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d6:	4299      	cmp	r1, r3
 800a4d8:	db05      	blt.n	800a4e6 <_printf_float+0x1c2>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	6121      	str	r1, [r4, #16]
 800a4de:	07d8      	lsls	r0, r3, #31
 800a4e0:	d5ea      	bpl.n	800a4b8 <_printf_float+0x194>
 800a4e2:	1c4b      	adds	r3, r1, #1
 800a4e4:	e7e7      	b.n	800a4b6 <_printf_float+0x192>
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	bfd4      	ite	le
 800a4ea:	f1c1 0202 	rsble	r2, r1, #2
 800a4ee:	2201      	movgt	r2, #1
 800a4f0:	4413      	add	r3, r2
 800a4f2:	e7e0      	b.n	800a4b6 <_printf_float+0x192>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	055a      	lsls	r2, r3, #21
 800a4f8:	d407      	bmi.n	800a50a <_printf_float+0x1e6>
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	4631      	mov	r1, r6
 800a500:	4628      	mov	r0, r5
 800a502:	47b8      	blx	r7
 800a504:	3001      	adds	r0, #1
 800a506:	d12b      	bne.n	800a560 <_printf_float+0x23c>
 800a508:	e767      	b.n	800a3da <_printf_float+0xb6>
 800a50a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a50e:	f240 80dd 	bls.w	800a6cc <_printf_float+0x3a8>
 800a512:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a516:	2200      	movs	r2, #0
 800a518:	2300      	movs	r3, #0
 800a51a:	f7f6 fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d033      	beq.n	800a58a <_printf_float+0x266>
 800a522:	4a37      	ldr	r2, [pc, #220]	@ (800a600 <_printf_float+0x2dc>)
 800a524:	2301      	movs	r3, #1
 800a526:	4631      	mov	r1, r6
 800a528:	4628      	mov	r0, r5
 800a52a:	47b8      	blx	r7
 800a52c:	3001      	adds	r0, #1
 800a52e:	f43f af54 	beq.w	800a3da <_printf_float+0xb6>
 800a532:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a536:	4543      	cmp	r3, r8
 800a538:	db02      	blt.n	800a540 <_printf_float+0x21c>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	07d8      	lsls	r0, r3, #31
 800a53e:	d50f      	bpl.n	800a560 <_printf_float+0x23c>
 800a540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a544:	4631      	mov	r1, r6
 800a546:	4628      	mov	r0, r5
 800a548:	47b8      	blx	r7
 800a54a:	3001      	adds	r0, #1
 800a54c:	f43f af45 	beq.w	800a3da <_printf_float+0xb6>
 800a550:	f04f 0900 	mov.w	r9, #0
 800a554:	f108 38ff 	add.w	r8, r8, #4294967295
 800a558:	f104 0a1a 	add.w	sl, r4, #26
 800a55c:	45c8      	cmp	r8, r9
 800a55e:	dc09      	bgt.n	800a574 <_printf_float+0x250>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	079b      	lsls	r3, r3, #30
 800a564:	f100 8103 	bmi.w	800a76e <_printf_float+0x44a>
 800a568:	68e0      	ldr	r0, [r4, #12]
 800a56a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a56c:	4298      	cmp	r0, r3
 800a56e:	bfb8      	it	lt
 800a570:	4618      	movlt	r0, r3
 800a572:	e734      	b.n	800a3de <_printf_float+0xba>
 800a574:	2301      	movs	r3, #1
 800a576:	4652      	mov	r2, sl
 800a578:	4631      	mov	r1, r6
 800a57a:	4628      	mov	r0, r5
 800a57c:	47b8      	blx	r7
 800a57e:	3001      	adds	r0, #1
 800a580:	f43f af2b 	beq.w	800a3da <_printf_float+0xb6>
 800a584:	f109 0901 	add.w	r9, r9, #1
 800a588:	e7e8      	b.n	800a55c <_printf_float+0x238>
 800a58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	dc39      	bgt.n	800a604 <_printf_float+0x2e0>
 800a590:	4a1b      	ldr	r2, [pc, #108]	@ (800a600 <_printf_float+0x2dc>)
 800a592:	2301      	movs	r3, #1
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f af1d 	beq.w	800a3da <_printf_float+0xb6>
 800a5a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a5a4:	ea59 0303 	orrs.w	r3, r9, r3
 800a5a8:	d102      	bne.n	800a5b0 <_printf_float+0x28c>
 800a5aa:	6823      	ldr	r3, [r4, #0]
 800a5ac:	07d9      	lsls	r1, r3, #31
 800a5ae:	d5d7      	bpl.n	800a560 <_printf_float+0x23c>
 800a5b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5b4:	4631      	mov	r1, r6
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	47b8      	blx	r7
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	f43f af0d 	beq.w	800a3da <_printf_float+0xb6>
 800a5c0:	f04f 0a00 	mov.w	sl, #0
 800a5c4:	f104 0b1a 	add.w	fp, r4, #26
 800a5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ca:	425b      	negs	r3, r3
 800a5cc:	4553      	cmp	r3, sl
 800a5ce:	dc01      	bgt.n	800a5d4 <_printf_float+0x2b0>
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	e793      	b.n	800a4fc <_printf_float+0x1d8>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	465a      	mov	r2, fp
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f43f aefb 	beq.w	800a3da <_printf_float+0xb6>
 800a5e4:	f10a 0a01 	add.w	sl, sl, #1
 800a5e8:	e7ee      	b.n	800a5c8 <_printf_float+0x2a4>
 800a5ea:	bf00      	nop
 800a5ec:	7fefffff 	.word	0x7fefffff
 800a5f0:	0800dda0 	.word	0x0800dda0
 800a5f4:	0800dda4 	.word	0x0800dda4
 800a5f8:	0800dda8 	.word	0x0800dda8
 800a5fc:	0800ddac 	.word	0x0800ddac
 800a600:	0800ddb0 	.word	0x0800ddb0
 800a604:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a606:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a60a:	4553      	cmp	r3, sl
 800a60c:	bfa8      	it	ge
 800a60e:	4653      	movge	r3, sl
 800a610:	2b00      	cmp	r3, #0
 800a612:	4699      	mov	r9, r3
 800a614:	dc36      	bgt.n	800a684 <_printf_float+0x360>
 800a616:	f04f 0b00 	mov.w	fp, #0
 800a61a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a61e:	f104 021a 	add.w	r2, r4, #26
 800a622:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a624:	9306      	str	r3, [sp, #24]
 800a626:	eba3 0309 	sub.w	r3, r3, r9
 800a62a:	455b      	cmp	r3, fp
 800a62c:	dc31      	bgt.n	800a692 <_printf_float+0x36e>
 800a62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a630:	459a      	cmp	sl, r3
 800a632:	dc3a      	bgt.n	800a6aa <_printf_float+0x386>
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	07da      	lsls	r2, r3, #31
 800a638:	d437      	bmi.n	800a6aa <_printf_float+0x386>
 800a63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a63c:	ebaa 0903 	sub.w	r9, sl, r3
 800a640:	9b06      	ldr	r3, [sp, #24]
 800a642:	ebaa 0303 	sub.w	r3, sl, r3
 800a646:	4599      	cmp	r9, r3
 800a648:	bfa8      	it	ge
 800a64a:	4699      	movge	r9, r3
 800a64c:	f1b9 0f00 	cmp.w	r9, #0
 800a650:	dc33      	bgt.n	800a6ba <_printf_float+0x396>
 800a652:	f04f 0800 	mov.w	r8, #0
 800a656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a65a:	f104 0b1a 	add.w	fp, r4, #26
 800a65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a660:	ebaa 0303 	sub.w	r3, sl, r3
 800a664:	eba3 0309 	sub.w	r3, r3, r9
 800a668:	4543      	cmp	r3, r8
 800a66a:	f77f af79 	ble.w	800a560 <_printf_float+0x23c>
 800a66e:	2301      	movs	r3, #1
 800a670:	465a      	mov	r2, fp
 800a672:	4631      	mov	r1, r6
 800a674:	4628      	mov	r0, r5
 800a676:	47b8      	blx	r7
 800a678:	3001      	adds	r0, #1
 800a67a:	f43f aeae 	beq.w	800a3da <_printf_float+0xb6>
 800a67e:	f108 0801 	add.w	r8, r8, #1
 800a682:	e7ec      	b.n	800a65e <_printf_float+0x33a>
 800a684:	4642      	mov	r2, r8
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	d1c2      	bne.n	800a616 <_printf_float+0x2f2>
 800a690:	e6a3      	b.n	800a3da <_printf_float+0xb6>
 800a692:	2301      	movs	r3, #1
 800a694:	4631      	mov	r1, r6
 800a696:	4628      	mov	r0, r5
 800a698:	9206      	str	r2, [sp, #24]
 800a69a:	47b8      	blx	r7
 800a69c:	3001      	adds	r0, #1
 800a69e:	f43f ae9c 	beq.w	800a3da <_printf_float+0xb6>
 800a6a2:	9a06      	ldr	r2, [sp, #24]
 800a6a4:	f10b 0b01 	add.w	fp, fp, #1
 800a6a8:	e7bb      	b.n	800a622 <_printf_float+0x2fe>
 800a6aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d1c0      	bne.n	800a63a <_printf_float+0x316>
 800a6b8:	e68f      	b.n	800a3da <_printf_float+0xb6>
 800a6ba:	9a06      	ldr	r2, [sp, #24]
 800a6bc:	464b      	mov	r3, r9
 800a6be:	4442      	add	r2, r8
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	47b8      	blx	r7
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d1c3      	bne.n	800a652 <_printf_float+0x32e>
 800a6ca:	e686      	b.n	800a3da <_printf_float+0xb6>
 800a6cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6d0:	f1ba 0f01 	cmp.w	sl, #1
 800a6d4:	dc01      	bgt.n	800a6da <_printf_float+0x3b6>
 800a6d6:	07db      	lsls	r3, r3, #31
 800a6d8:	d536      	bpl.n	800a748 <_printf_float+0x424>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4642      	mov	r2, r8
 800a6de:	4631      	mov	r1, r6
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	47b8      	blx	r7
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	f43f ae78 	beq.w	800a3da <_printf_float+0xb6>
 800a6ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	f43f ae70 	beq.w	800a3da <_printf_float+0xb6>
 800a6fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a6fe:	2200      	movs	r2, #0
 800a700:	2300      	movs	r3, #0
 800a702:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a706:	f7f6 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800a70a:	b9c0      	cbnz	r0, 800a73e <_printf_float+0x41a>
 800a70c:	4653      	mov	r3, sl
 800a70e:	f108 0201 	add.w	r2, r8, #1
 800a712:	4631      	mov	r1, r6
 800a714:	4628      	mov	r0, r5
 800a716:	47b8      	blx	r7
 800a718:	3001      	adds	r0, #1
 800a71a:	d10c      	bne.n	800a736 <_printf_float+0x412>
 800a71c:	e65d      	b.n	800a3da <_printf_float+0xb6>
 800a71e:	2301      	movs	r3, #1
 800a720:	465a      	mov	r2, fp
 800a722:	4631      	mov	r1, r6
 800a724:	4628      	mov	r0, r5
 800a726:	47b8      	blx	r7
 800a728:	3001      	adds	r0, #1
 800a72a:	f43f ae56 	beq.w	800a3da <_printf_float+0xb6>
 800a72e:	f108 0801 	add.w	r8, r8, #1
 800a732:	45d0      	cmp	r8, sl
 800a734:	dbf3      	blt.n	800a71e <_printf_float+0x3fa>
 800a736:	464b      	mov	r3, r9
 800a738:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a73c:	e6df      	b.n	800a4fe <_printf_float+0x1da>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	f104 0b1a 	add.w	fp, r4, #26
 800a746:	e7f4      	b.n	800a732 <_printf_float+0x40e>
 800a748:	2301      	movs	r3, #1
 800a74a:	4642      	mov	r2, r8
 800a74c:	e7e1      	b.n	800a712 <_printf_float+0x3ee>
 800a74e:	2301      	movs	r3, #1
 800a750:	464a      	mov	r2, r9
 800a752:	4631      	mov	r1, r6
 800a754:	4628      	mov	r0, r5
 800a756:	47b8      	blx	r7
 800a758:	3001      	adds	r0, #1
 800a75a:	f43f ae3e 	beq.w	800a3da <_printf_float+0xb6>
 800a75e:	f108 0801 	add.w	r8, r8, #1
 800a762:	68e3      	ldr	r3, [r4, #12]
 800a764:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a766:	1a5b      	subs	r3, r3, r1
 800a768:	4543      	cmp	r3, r8
 800a76a:	dcf0      	bgt.n	800a74e <_printf_float+0x42a>
 800a76c:	e6fc      	b.n	800a568 <_printf_float+0x244>
 800a76e:	f04f 0800 	mov.w	r8, #0
 800a772:	f104 0919 	add.w	r9, r4, #25
 800a776:	e7f4      	b.n	800a762 <_printf_float+0x43e>

0800a778 <_printf_common>:
 800a778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a77c:	4616      	mov	r6, r2
 800a77e:	4698      	mov	r8, r3
 800a780:	688a      	ldr	r2, [r1, #8]
 800a782:	690b      	ldr	r3, [r1, #16]
 800a784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a788:	4293      	cmp	r3, r2
 800a78a:	bfb8      	it	lt
 800a78c:	4613      	movlt	r3, r2
 800a78e:	6033      	str	r3, [r6, #0]
 800a790:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a794:	4607      	mov	r7, r0
 800a796:	460c      	mov	r4, r1
 800a798:	b10a      	cbz	r2, 800a79e <_printf_common+0x26>
 800a79a:	3301      	adds	r3, #1
 800a79c:	6033      	str	r3, [r6, #0]
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	0699      	lsls	r1, r3, #26
 800a7a2:	bf42      	ittt	mi
 800a7a4:	6833      	ldrmi	r3, [r6, #0]
 800a7a6:	3302      	addmi	r3, #2
 800a7a8:	6033      	strmi	r3, [r6, #0]
 800a7aa:	6825      	ldr	r5, [r4, #0]
 800a7ac:	f015 0506 	ands.w	r5, r5, #6
 800a7b0:	d106      	bne.n	800a7c0 <_printf_common+0x48>
 800a7b2:	f104 0a19 	add.w	sl, r4, #25
 800a7b6:	68e3      	ldr	r3, [r4, #12]
 800a7b8:	6832      	ldr	r2, [r6, #0]
 800a7ba:	1a9b      	subs	r3, r3, r2
 800a7bc:	42ab      	cmp	r3, r5
 800a7be:	dc26      	bgt.n	800a80e <_printf_common+0x96>
 800a7c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a7c4:	6822      	ldr	r2, [r4, #0]
 800a7c6:	3b00      	subs	r3, #0
 800a7c8:	bf18      	it	ne
 800a7ca:	2301      	movne	r3, #1
 800a7cc:	0692      	lsls	r2, r2, #26
 800a7ce:	d42b      	bmi.n	800a828 <_printf_common+0xb0>
 800a7d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a7d4:	4641      	mov	r1, r8
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	47c8      	blx	r9
 800a7da:	3001      	adds	r0, #1
 800a7dc:	d01e      	beq.n	800a81c <_printf_common+0xa4>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	6922      	ldr	r2, [r4, #16]
 800a7e2:	f003 0306 	and.w	r3, r3, #6
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	bf02      	ittt	eq
 800a7ea:	68e5      	ldreq	r5, [r4, #12]
 800a7ec:	6833      	ldreq	r3, [r6, #0]
 800a7ee:	1aed      	subeq	r5, r5, r3
 800a7f0:	68a3      	ldr	r3, [r4, #8]
 800a7f2:	bf0c      	ite	eq
 800a7f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7f8:	2500      	movne	r5, #0
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	bfc4      	itt	gt
 800a7fe:	1a9b      	subgt	r3, r3, r2
 800a800:	18ed      	addgt	r5, r5, r3
 800a802:	2600      	movs	r6, #0
 800a804:	341a      	adds	r4, #26
 800a806:	42b5      	cmp	r5, r6
 800a808:	d11a      	bne.n	800a840 <_printf_common+0xc8>
 800a80a:	2000      	movs	r0, #0
 800a80c:	e008      	b.n	800a820 <_printf_common+0xa8>
 800a80e:	2301      	movs	r3, #1
 800a810:	4652      	mov	r2, sl
 800a812:	4641      	mov	r1, r8
 800a814:	4638      	mov	r0, r7
 800a816:	47c8      	blx	r9
 800a818:	3001      	adds	r0, #1
 800a81a:	d103      	bne.n	800a824 <_printf_common+0xac>
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295
 800a820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a824:	3501      	adds	r5, #1
 800a826:	e7c6      	b.n	800a7b6 <_printf_common+0x3e>
 800a828:	18e1      	adds	r1, r4, r3
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	2030      	movs	r0, #48	@ 0x30
 800a82e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a832:	4422      	add	r2, r4
 800a834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a83c:	3302      	adds	r3, #2
 800a83e:	e7c7      	b.n	800a7d0 <_printf_common+0x58>
 800a840:	2301      	movs	r3, #1
 800a842:	4622      	mov	r2, r4
 800a844:	4641      	mov	r1, r8
 800a846:	4638      	mov	r0, r7
 800a848:	47c8      	blx	r9
 800a84a:	3001      	adds	r0, #1
 800a84c:	d0e6      	beq.n	800a81c <_printf_common+0xa4>
 800a84e:	3601      	adds	r6, #1
 800a850:	e7d9      	b.n	800a806 <_printf_common+0x8e>
	...

0800a854 <_printf_i>:
 800a854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a858:	7e0f      	ldrb	r7, [r1, #24]
 800a85a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a85c:	2f78      	cmp	r7, #120	@ 0x78
 800a85e:	4691      	mov	r9, r2
 800a860:	4680      	mov	r8, r0
 800a862:	460c      	mov	r4, r1
 800a864:	469a      	mov	sl, r3
 800a866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a86a:	d807      	bhi.n	800a87c <_printf_i+0x28>
 800a86c:	2f62      	cmp	r7, #98	@ 0x62
 800a86e:	d80a      	bhi.n	800a886 <_printf_i+0x32>
 800a870:	2f00      	cmp	r7, #0
 800a872:	f000 80d2 	beq.w	800aa1a <_printf_i+0x1c6>
 800a876:	2f58      	cmp	r7, #88	@ 0x58
 800a878:	f000 80b9 	beq.w	800a9ee <_printf_i+0x19a>
 800a87c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a884:	e03a      	b.n	800a8fc <_printf_i+0xa8>
 800a886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a88a:	2b15      	cmp	r3, #21
 800a88c:	d8f6      	bhi.n	800a87c <_printf_i+0x28>
 800a88e:	a101      	add	r1, pc, #4	@ (adr r1, 800a894 <_printf_i+0x40>)
 800a890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a894:	0800a8ed 	.word	0x0800a8ed
 800a898:	0800a901 	.word	0x0800a901
 800a89c:	0800a87d 	.word	0x0800a87d
 800a8a0:	0800a87d 	.word	0x0800a87d
 800a8a4:	0800a87d 	.word	0x0800a87d
 800a8a8:	0800a87d 	.word	0x0800a87d
 800a8ac:	0800a901 	.word	0x0800a901
 800a8b0:	0800a87d 	.word	0x0800a87d
 800a8b4:	0800a87d 	.word	0x0800a87d
 800a8b8:	0800a87d 	.word	0x0800a87d
 800a8bc:	0800a87d 	.word	0x0800a87d
 800a8c0:	0800aa01 	.word	0x0800aa01
 800a8c4:	0800a92b 	.word	0x0800a92b
 800a8c8:	0800a9bb 	.word	0x0800a9bb
 800a8cc:	0800a87d 	.word	0x0800a87d
 800a8d0:	0800a87d 	.word	0x0800a87d
 800a8d4:	0800aa23 	.word	0x0800aa23
 800a8d8:	0800a87d 	.word	0x0800a87d
 800a8dc:	0800a92b 	.word	0x0800a92b
 800a8e0:	0800a87d 	.word	0x0800a87d
 800a8e4:	0800a87d 	.word	0x0800a87d
 800a8e8:	0800a9c3 	.word	0x0800a9c3
 800a8ec:	6833      	ldr	r3, [r6, #0]
 800a8ee:	1d1a      	adds	r2, r3, #4
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6032      	str	r2, [r6, #0]
 800a8f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e09d      	b.n	800aa3c <_printf_i+0x1e8>
 800a900:	6833      	ldr	r3, [r6, #0]
 800a902:	6820      	ldr	r0, [r4, #0]
 800a904:	1d19      	adds	r1, r3, #4
 800a906:	6031      	str	r1, [r6, #0]
 800a908:	0606      	lsls	r6, r0, #24
 800a90a:	d501      	bpl.n	800a910 <_printf_i+0xbc>
 800a90c:	681d      	ldr	r5, [r3, #0]
 800a90e:	e003      	b.n	800a918 <_printf_i+0xc4>
 800a910:	0645      	lsls	r5, r0, #25
 800a912:	d5fb      	bpl.n	800a90c <_printf_i+0xb8>
 800a914:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a918:	2d00      	cmp	r5, #0
 800a91a:	da03      	bge.n	800a924 <_printf_i+0xd0>
 800a91c:	232d      	movs	r3, #45	@ 0x2d
 800a91e:	426d      	negs	r5, r5
 800a920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a924:	4859      	ldr	r0, [pc, #356]	@ (800aa8c <_printf_i+0x238>)
 800a926:	230a      	movs	r3, #10
 800a928:	e011      	b.n	800a94e <_printf_i+0xfa>
 800a92a:	6821      	ldr	r1, [r4, #0]
 800a92c:	6833      	ldr	r3, [r6, #0]
 800a92e:	0608      	lsls	r0, r1, #24
 800a930:	f853 5b04 	ldr.w	r5, [r3], #4
 800a934:	d402      	bmi.n	800a93c <_printf_i+0xe8>
 800a936:	0649      	lsls	r1, r1, #25
 800a938:	bf48      	it	mi
 800a93a:	b2ad      	uxthmi	r5, r5
 800a93c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a93e:	4853      	ldr	r0, [pc, #332]	@ (800aa8c <_printf_i+0x238>)
 800a940:	6033      	str	r3, [r6, #0]
 800a942:	bf14      	ite	ne
 800a944:	230a      	movne	r3, #10
 800a946:	2308      	moveq	r3, #8
 800a948:	2100      	movs	r1, #0
 800a94a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a94e:	6866      	ldr	r6, [r4, #4]
 800a950:	60a6      	str	r6, [r4, #8]
 800a952:	2e00      	cmp	r6, #0
 800a954:	bfa2      	ittt	ge
 800a956:	6821      	ldrge	r1, [r4, #0]
 800a958:	f021 0104 	bicge.w	r1, r1, #4
 800a95c:	6021      	strge	r1, [r4, #0]
 800a95e:	b90d      	cbnz	r5, 800a964 <_printf_i+0x110>
 800a960:	2e00      	cmp	r6, #0
 800a962:	d04b      	beq.n	800a9fc <_printf_i+0x1a8>
 800a964:	4616      	mov	r6, r2
 800a966:	fbb5 f1f3 	udiv	r1, r5, r3
 800a96a:	fb03 5711 	mls	r7, r3, r1, r5
 800a96e:	5dc7      	ldrb	r7, [r0, r7]
 800a970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a974:	462f      	mov	r7, r5
 800a976:	42bb      	cmp	r3, r7
 800a978:	460d      	mov	r5, r1
 800a97a:	d9f4      	bls.n	800a966 <_printf_i+0x112>
 800a97c:	2b08      	cmp	r3, #8
 800a97e:	d10b      	bne.n	800a998 <_printf_i+0x144>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	07df      	lsls	r7, r3, #31
 800a984:	d508      	bpl.n	800a998 <_printf_i+0x144>
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	6861      	ldr	r1, [r4, #4]
 800a98a:	4299      	cmp	r1, r3
 800a98c:	bfde      	ittt	le
 800a98e:	2330      	movle	r3, #48	@ 0x30
 800a990:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a994:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a998:	1b92      	subs	r2, r2, r6
 800a99a:	6122      	str	r2, [r4, #16]
 800a99c:	f8cd a000 	str.w	sl, [sp]
 800a9a0:	464b      	mov	r3, r9
 800a9a2:	aa03      	add	r2, sp, #12
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	f7ff fee6 	bl	800a778 <_printf_common>
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	d14a      	bne.n	800aa46 <_printf_i+0x1f2>
 800a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b4:	b004      	add	sp, #16
 800a9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	f043 0320 	orr.w	r3, r3, #32
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	4833      	ldr	r0, [pc, #204]	@ (800aa90 <_printf_i+0x23c>)
 800a9c4:	2778      	movs	r7, #120	@ 0x78
 800a9c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	6831      	ldr	r1, [r6, #0]
 800a9ce:	061f      	lsls	r7, r3, #24
 800a9d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a9d4:	d402      	bmi.n	800a9dc <_printf_i+0x188>
 800a9d6:	065f      	lsls	r7, r3, #25
 800a9d8:	bf48      	it	mi
 800a9da:	b2ad      	uxthmi	r5, r5
 800a9dc:	6031      	str	r1, [r6, #0]
 800a9de:	07d9      	lsls	r1, r3, #31
 800a9e0:	bf44      	itt	mi
 800a9e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a9e6:	6023      	strmi	r3, [r4, #0]
 800a9e8:	b11d      	cbz	r5, 800a9f2 <_printf_i+0x19e>
 800a9ea:	2310      	movs	r3, #16
 800a9ec:	e7ac      	b.n	800a948 <_printf_i+0xf4>
 800a9ee:	4827      	ldr	r0, [pc, #156]	@ (800aa8c <_printf_i+0x238>)
 800a9f0:	e7e9      	b.n	800a9c6 <_printf_i+0x172>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	f023 0320 	bic.w	r3, r3, #32
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	e7f6      	b.n	800a9ea <_printf_i+0x196>
 800a9fc:	4616      	mov	r6, r2
 800a9fe:	e7bd      	b.n	800a97c <_printf_i+0x128>
 800aa00:	6833      	ldr	r3, [r6, #0]
 800aa02:	6825      	ldr	r5, [r4, #0]
 800aa04:	6961      	ldr	r1, [r4, #20]
 800aa06:	1d18      	adds	r0, r3, #4
 800aa08:	6030      	str	r0, [r6, #0]
 800aa0a:	062e      	lsls	r6, r5, #24
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	d501      	bpl.n	800aa14 <_printf_i+0x1c0>
 800aa10:	6019      	str	r1, [r3, #0]
 800aa12:	e002      	b.n	800aa1a <_printf_i+0x1c6>
 800aa14:	0668      	lsls	r0, r5, #25
 800aa16:	d5fb      	bpl.n	800aa10 <_printf_i+0x1bc>
 800aa18:	8019      	strh	r1, [r3, #0]
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	6123      	str	r3, [r4, #16]
 800aa1e:	4616      	mov	r6, r2
 800aa20:	e7bc      	b.n	800a99c <_printf_i+0x148>
 800aa22:	6833      	ldr	r3, [r6, #0]
 800aa24:	1d1a      	adds	r2, r3, #4
 800aa26:	6032      	str	r2, [r6, #0]
 800aa28:	681e      	ldr	r6, [r3, #0]
 800aa2a:	6862      	ldr	r2, [r4, #4]
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f7f5 fbce 	bl	80001d0 <memchr>
 800aa34:	b108      	cbz	r0, 800aa3a <_printf_i+0x1e6>
 800aa36:	1b80      	subs	r0, r0, r6
 800aa38:	6060      	str	r0, [r4, #4]
 800aa3a:	6863      	ldr	r3, [r4, #4]
 800aa3c:	6123      	str	r3, [r4, #16]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa44:	e7aa      	b.n	800a99c <_printf_i+0x148>
 800aa46:	6923      	ldr	r3, [r4, #16]
 800aa48:	4632      	mov	r2, r6
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	4640      	mov	r0, r8
 800aa4e:	47d0      	blx	sl
 800aa50:	3001      	adds	r0, #1
 800aa52:	d0ad      	beq.n	800a9b0 <_printf_i+0x15c>
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	079b      	lsls	r3, r3, #30
 800aa58:	d413      	bmi.n	800aa82 <_printf_i+0x22e>
 800aa5a:	68e0      	ldr	r0, [r4, #12]
 800aa5c:	9b03      	ldr	r3, [sp, #12]
 800aa5e:	4298      	cmp	r0, r3
 800aa60:	bfb8      	it	lt
 800aa62:	4618      	movlt	r0, r3
 800aa64:	e7a6      	b.n	800a9b4 <_printf_i+0x160>
 800aa66:	2301      	movs	r3, #1
 800aa68:	4632      	mov	r2, r6
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	47d0      	blx	sl
 800aa70:	3001      	adds	r0, #1
 800aa72:	d09d      	beq.n	800a9b0 <_printf_i+0x15c>
 800aa74:	3501      	adds	r5, #1
 800aa76:	68e3      	ldr	r3, [r4, #12]
 800aa78:	9903      	ldr	r1, [sp, #12]
 800aa7a:	1a5b      	subs	r3, r3, r1
 800aa7c:	42ab      	cmp	r3, r5
 800aa7e:	dcf2      	bgt.n	800aa66 <_printf_i+0x212>
 800aa80:	e7eb      	b.n	800aa5a <_printf_i+0x206>
 800aa82:	2500      	movs	r5, #0
 800aa84:	f104 0619 	add.w	r6, r4, #25
 800aa88:	e7f5      	b.n	800aa76 <_printf_i+0x222>
 800aa8a:	bf00      	nop
 800aa8c:	0800ddb2 	.word	0x0800ddb2
 800aa90:	0800ddc3 	.word	0x0800ddc3

0800aa94 <std>:
 800aa94:	2300      	movs	r3, #0
 800aa96:	b510      	push	{r4, lr}
 800aa98:	4604      	mov	r4, r0
 800aa9a:	e9c0 3300 	strd	r3, r3, [r0]
 800aa9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaa2:	6083      	str	r3, [r0, #8]
 800aaa4:	8181      	strh	r1, [r0, #12]
 800aaa6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aaa8:	81c2      	strh	r2, [r0, #14]
 800aaaa:	6183      	str	r3, [r0, #24]
 800aaac:	4619      	mov	r1, r3
 800aaae:	2208      	movs	r2, #8
 800aab0:	305c      	adds	r0, #92	@ 0x5c
 800aab2:	f000 fa2d 	bl	800af10 <memset>
 800aab6:	4b0d      	ldr	r3, [pc, #52]	@ (800aaec <std+0x58>)
 800aab8:	6263      	str	r3, [r4, #36]	@ 0x24
 800aaba:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf0 <std+0x5c>)
 800aabc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aabe:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf4 <std+0x60>)
 800aac0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aac2:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf8 <std+0x64>)
 800aac4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aac6:	4b0d      	ldr	r3, [pc, #52]	@ (800aafc <std+0x68>)
 800aac8:	6224      	str	r4, [r4, #32]
 800aaca:	429c      	cmp	r4, r3
 800aacc:	d006      	beq.n	800aadc <std+0x48>
 800aace:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aad2:	4294      	cmp	r4, r2
 800aad4:	d002      	beq.n	800aadc <std+0x48>
 800aad6:	33d0      	adds	r3, #208	@ 0xd0
 800aad8:	429c      	cmp	r4, r3
 800aada:	d105      	bne.n	800aae8 <std+0x54>
 800aadc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aae4:	f000 baa0 	b.w	800b028 <__retarget_lock_init_recursive>
 800aae8:	bd10      	pop	{r4, pc}
 800aaea:	bf00      	nop
 800aaec:	0800ad61 	.word	0x0800ad61
 800aaf0:	0800ad83 	.word	0x0800ad83
 800aaf4:	0800adbb 	.word	0x0800adbb
 800aaf8:	0800addf 	.word	0x0800addf
 800aafc:	200050ac 	.word	0x200050ac

0800ab00 <stdio_exit_handler>:
 800ab00:	4a02      	ldr	r2, [pc, #8]	@ (800ab0c <stdio_exit_handler+0xc>)
 800ab02:	4903      	ldr	r1, [pc, #12]	@ (800ab10 <stdio_exit_handler+0x10>)
 800ab04:	4803      	ldr	r0, [pc, #12]	@ (800ab14 <stdio_exit_handler+0x14>)
 800ab06:	f000 b869 	b.w	800abdc <_fwalk_sglue>
 800ab0a:	bf00      	nop
 800ab0c:	20000018 	.word	0x20000018
 800ab10:	0800cabd 	.word	0x0800cabd
 800ab14:	20000028 	.word	0x20000028

0800ab18 <cleanup_stdio>:
 800ab18:	6841      	ldr	r1, [r0, #4]
 800ab1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab4c <cleanup_stdio+0x34>)
 800ab1c:	4299      	cmp	r1, r3
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	4604      	mov	r4, r0
 800ab22:	d001      	beq.n	800ab28 <cleanup_stdio+0x10>
 800ab24:	f001 ffca 	bl	800cabc <_fflush_r>
 800ab28:	68a1      	ldr	r1, [r4, #8]
 800ab2a:	4b09      	ldr	r3, [pc, #36]	@ (800ab50 <cleanup_stdio+0x38>)
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	d002      	beq.n	800ab36 <cleanup_stdio+0x1e>
 800ab30:	4620      	mov	r0, r4
 800ab32:	f001 ffc3 	bl	800cabc <_fflush_r>
 800ab36:	68e1      	ldr	r1, [r4, #12]
 800ab38:	4b06      	ldr	r3, [pc, #24]	@ (800ab54 <cleanup_stdio+0x3c>)
 800ab3a:	4299      	cmp	r1, r3
 800ab3c:	d004      	beq.n	800ab48 <cleanup_stdio+0x30>
 800ab3e:	4620      	mov	r0, r4
 800ab40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab44:	f001 bfba 	b.w	800cabc <_fflush_r>
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	bf00      	nop
 800ab4c:	200050ac 	.word	0x200050ac
 800ab50:	20005114 	.word	0x20005114
 800ab54:	2000517c 	.word	0x2000517c

0800ab58 <global_stdio_init.part.0>:
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab88 <global_stdio_init.part.0+0x30>)
 800ab5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ab8c <global_stdio_init.part.0+0x34>)
 800ab5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ab90 <global_stdio_init.part.0+0x38>)
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	4620      	mov	r0, r4
 800ab64:	2200      	movs	r2, #0
 800ab66:	2104      	movs	r1, #4
 800ab68:	f7ff ff94 	bl	800aa94 <std>
 800ab6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab70:	2201      	movs	r2, #1
 800ab72:	2109      	movs	r1, #9
 800ab74:	f7ff ff8e 	bl	800aa94 <std>
 800ab78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab82:	2112      	movs	r1, #18
 800ab84:	f7ff bf86 	b.w	800aa94 <std>
 800ab88:	200051e4 	.word	0x200051e4
 800ab8c:	200050ac 	.word	0x200050ac
 800ab90:	0800ab01 	.word	0x0800ab01

0800ab94 <__sfp_lock_acquire>:
 800ab94:	4801      	ldr	r0, [pc, #4]	@ (800ab9c <__sfp_lock_acquire+0x8>)
 800ab96:	f000 ba48 	b.w	800b02a <__retarget_lock_acquire_recursive>
 800ab9a:	bf00      	nop
 800ab9c:	200051ed 	.word	0x200051ed

0800aba0 <__sfp_lock_release>:
 800aba0:	4801      	ldr	r0, [pc, #4]	@ (800aba8 <__sfp_lock_release+0x8>)
 800aba2:	f000 ba43 	b.w	800b02c <__retarget_lock_release_recursive>
 800aba6:	bf00      	nop
 800aba8:	200051ed 	.word	0x200051ed

0800abac <__sinit>:
 800abac:	b510      	push	{r4, lr}
 800abae:	4604      	mov	r4, r0
 800abb0:	f7ff fff0 	bl	800ab94 <__sfp_lock_acquire>
 800abb4:	6a23      	ldr	r3, [r4, #32]
 800abb6:	b11b      	cbz	r3, 800abc0 <__sinit+0x14>
 800abb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abbc:	f7ff bff0 	b.w	800aba0 <__sfp_lock_release>
 800abc0:	4b04      	ldr	r3, [pc, #16]	@ (800abd4 <__sinit+0x28>)
 800abc2:	6223      	str	r3, [r4, #32]
 800abc4:	4b04      	ldr	r3, [pc, #16]	@ (800abd8 <__sinit+0x2c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1f5      	bne.n	800abb8 <__sinit+0xc>
 800abcc:	f7ff ffc4 	bl	800ab58 <global_stdio_init.part.0>
 800abd0:	e7f2      	b.n	800abb8 <__sinit+0xc>
 800abd2:	bf00      	nop
 800abd4:	0800ab19 	.word	0x0800ab19
 800abd8:	200051e4 	.word	0x200051e4

0800abdc <_fwalk_sglue>:
 800abdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe0:	4607      	mov	r7, r0
 800abe2:	4688      	mov	r8, r1
 800abe4:	4614      	mov	r4, r2
 800abe6:	2600      	movs	r6, #0
 800abe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abec:	f1b9 0901 	subs.w	r9, r9, #1
 800abf0:	d505      	bpl.n	800abfe <_fwalk_sglue+0x22>
 800abf2:	6824      	ldr	r4, [r4, #0]
 800abf4:	2c00      	cmp	r4, #0
 800abf6:	d1f7      	bne.n	800abe8 <_fwalk_sglue+0xc>
 800abf8:	4630      	mov	r0, r6
 800abfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d907      	bls.n	800ac14 <_fwalk_sglue+0x38>
 800ac04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	d003      	beq.n	800ac14 <_fwalk_sglue+0x38>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4638      	mov	r0, r7
 800ac10:	47c0      	blx	r8
 800ac12:	4306      	orrs	r6, r0
 800ac14:	3568      	adds	r5, #104	@ 0x68
 800ac16:	e7e9      	b.n	800abec <_fwalk_sglue+0x10>

0800ac18 <iprintf>:
 800ac18:	b40f      	push	{r0, r1, r2, r3}
 800ac1a:	b507      	push	{r0, r1, r2, lr}
 800ac1c:	4906      	ldr	r1, [pc, #24]	@ (800ac38 <iprintf+0x20>)
 800ac1e:	ab04      	add	r3, sp, #16
 800ac20:	6808      	ldr	r0, [r1, #0]
 800ac22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac26:	6881      	ldr	r1, [r0, #8]
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	f001 fdab 	bl	800c784 <_vfiprintf_r>
 800ac2e:	b003      	add	sp, #12
 800ac30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac34:	b004      	add	sp, #16
 800ac36:	4770      	bx	lr
 800ac38:	20000024 	.word	0x20000024

0800ac3c <_puts_r>:
 800ac3c:	6a03      	ldr	r3, [r0, #32]
 800ac3e:	b570      	push	{r4, r5, r6, lr}
 800ac40:	6884      	ldr	r4, [r0, #8]
 800ac42:	4605      	mov	r5, r0
 800ac44:	460e      	mov	r6, r1
 800ac46:	b90b      	cbnz	r3, 800ac4c <_puts_r+0x10>
 800ac48:	f7ff ffb0 	bl	800abac <__sinit>
 800ac4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac4e:	07db      	lsls	r3, r3, #31
 800ac50:	d405      	bmi.n	800ac5e <_puts_r+0x22>
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	0598      	lsls	r0, r3, #22
 800ac56:	d402      	bmi.n	800ac5e <_puts_r+0x22>
 800ac58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac5a:	f000 f9e6 	bl	800b02a <__retarget_lock_acquire_recursive>
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	0719      	lsls	r1, r3, #28
 800ac62:	d502      	bpl.n	800ac6a <_puts_r+0x2e>
 800ac64:	6923      	ldr	r3, [r4, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d135      	bne.n	800acd6 <_puts_r+0x9a>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f000 f8f9 	bl	800ae64 <__swsetup_r>
 800ac72:	b380      	cbz	r0, 800acd6 <_puts_r+0x9a>
 800ac74:	f04f 35ff 	mov.w	r5, #4294967295
 800ac78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac7a:	07da      	lsls	r2, r3, #31
 800ac7c:	d405      	bmi.n	800ac8a <_puts_r+0x4e>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	059b      	lsls	r3, r3, #22
 800ac82:	d402      	bmi.n	800ac8a <_puts_r+0x4e>
 800ac84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac86:	f000 f9d1 	bl	800b02c <__retarget_lock_release_recursive>
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	bd70      	pop	{r4, r5, r6, pc}
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da04      	bge.n	800ac9c <_puts_r+0x60>
 800ac92:	69a2      	ldr	r2, [r4, #24]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	dc17      	bgt.n	800acc8 <_puts_r+0x8c>
 800ac98:	290a      	cmp	r1, #10
 800ac9a:	d015      	beq.n	800acc8 <_puts_r+0x8c>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	1c5a      	adds	r2, r3, #1
 800aca0:	6022      	str	r2, [r4, #0]
 800aca2:	7019      	strb	r1, [r3, #0]
 800aca4:	68a3      	ldr	r3, [r4, #8]
 800aca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800acaa:	3b01      	subs	r3, #1
 800acac:	60a3      	str	r3, [r4, #8]
 800acae:	2900      	cmp	r1, #0
 800acb0:	d1ed      	bne.n	800ac8e <_puts_r+0x52>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	da11      	bge.n	800acda <_puts_r+0x9e>
 800acb6:	4622      	mov	r2, r4
 800acb8:	210a      	movs	r1, #10
 800acba:	4628      	mov	r0, r5
 800acbc:	f000 f893 	bl	800ade6 <__swbuf_r>
 800acc0:	3001      	adds	r0, #1
 800acc2:	d0d7      	beq.n	800ac74 <_puts_r+0x38>
 800acc4:	250a      	movs	r5, #10
 800acc6:	e7d7      	b.n	800ac78 <_puts_r+0x3c>
 800acc8:	4622      	mov	r2, r4
 800acca:	4628      	mov	r0, r5
 800accc:	f000 f88b 	bl	800ade6 <__swbuf_r>
 800acd0:	3001      	adds	r0, #1
 800acd2:	d1e7      	bne.n	800aca4 <_puts_r+0x68>
 800acd4:	e7ce      	b.n	800ac74 <_puts_r+0x38>
 800acd6:	3e01      	subs	r6, #1
 800acd8:	e7e4      	b.n	800aca4 <_puts_r+0x68>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	1c5a      	adds	r2, r3, #1
 800acde:	6022      	str	r2, [r4, #0]
 800ace0:	220a      	movs	r2, #10
 800ace2:	701a      	strb	r2, [r3, #0]
 800ace4:	e7ee      	b.n	800acc4 <_puts_r+0x88>
	...

0800ace8 <puts>:
 800ace8:	4b02      	ldr	r3, [pc, #8]	@ (800acf4 <puts+0xc>)
 800acea:	4601      	mov	r1, r0
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f7ff bfa5 	b.w	800ac3c <_puts_r>
 800acf2:	bf00      	nop
 800acf4:	20000024 	.word	0x20000024

0800acf8 <sniprintf>:
 800acf8:	b40c      	push	{r2, r3}
 800acfa:	b530      	push	{r4, r5, lr}
 800acfc:	4b17      	ldr	r3, [pc, #92]	@ (800ad5c <sniprintf+0x64>)
 800acfe:	1e0c      	subs	r4, r1, #0
 800ad00:	681d      	ldr	r5, [r3, #0]
 800ad02:	b09d      	sub	sp, #116	@ 0x74
 800ad04:	da08      	bge.n	800ad18 <sniprintf+0x20>
 800ad06:	238b      	movs	r3, #139	@ 0x8b
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0e:	b01d      	add	sp, #116	@ 0x74
 800ad10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad14:	b002      	add	sp, #8
 800ad16:	4770      	bx	lr
 800ad18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ad1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad20:	bf14      	ite	ne
 800ad22:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad26:	4623      	moveq	r3, r4
 800ad28:	9304      	str	r3, [sp, #16]
 800ad2a:	9307      	str	r3, [sp, #28]
 800ad2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad30:	9002      	str	r0, [sp, #8]
 800ad32:	9006      	str	r0, [sp, #24]
 800ad34:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ad3a:	ab21      	add	r3, sp, #132	@ 0x84
 800ad3c:	a902      	add	r1, sp, #8
 800ad3e:	4628      	mov	r0, r5
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	f001 fbf9 	bl	800c538 <_svfiprintf_r>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	bfbc      	itt	lt
 800ad4a:	238b      	movlt	r3, #139	@ 0x8b
 800ad4c:	602b      	strlt	r3, [r5, #0]
 800ad4e:	2c00      	cmp	r4, #0
 800ad50:	d0dd      	beq.n	800ad0e <sniprintf+0x16>
 800ad52:	9b02      	ldr	r3, [sp, #8]
 800ad54:	2200      	movs	r2, #0
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	e7d9      	b.n	800ad0e <sniprintf+0x16>
 800ad5a:	bf00      	nop
 800ad5c:	20000024 	.word	0x20000024

0800ad60 <__sread>:
 800ad60:	b510      	push	{r4, lr}
 800ad62:	460c      	mov	r4, r1
 800ad64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad68:	f000 f900 	bl	800af6c <_read_r>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	bfab      	itete	ge
 800ad70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad72:	89a3      	ldrhlt	r3, [r4, #12]
 800ad74:	181b      	addge	r3, r3, r0
 800ad76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad7a:	bfac      	ite	ge
 800ad7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad7e:	81a3      	strhlt	r3, [r4, #12]
 800ad80:	bd10      	pop	{r4, pc}

0800ad82 <__swrite>:
 800ad82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad86:	461f      	mov	r7, r3
 800ad88:	898b      	ldrh	r3, [r1, #12]
 800ad8a:	05db      	lsls	r3, r3, #23
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	460c      	mov	r4, r1
 800ad90:	4616      	mov	r6, r2
 800ad92:	d505      	bpl.n	800ada0 <__swrite+0x1e>
 800ad94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad98:	2302      	movs	r3, #2
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f000 f8d4 	bl	800af48 <_lseek_r>
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adaa:	81a3      	strh	r3, [r4, #12]
 800adac:	4632      	mov	r2, r6
 800adae:	463b      	mov	r3, r7
 800adb0:	4628      	mov	r0, r5
 800adb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb6:	f000 b8fb 	b.w	800afb0 <_write_r>

0800adba <__sseek>:
 800adba:	b510      	push	{r4, lr}
 800adbc:	460c      	mov	r4, r1
 800adbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc2:	f000 f8c1 	bl	800af48 <_lseek_r>
 800adc6:	1c43      	adds	r3, r0, #1
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	bf15      	itete	ne
 800adcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800add2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800add6:	81a3      	strheq	r3, [r4, #12]
 800add8:	bf18      	it	ne
 800adda:	81a3      	strhne	r3, [r4, #12]
 800addc:	bd10      	pop	{r4, pc}

0800adde <__sclose>:
 800adde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade2:	f000 b8a1 	b.w	800af28 <_close_r>

0800ade6 <__swbuf_r>:
 800ade6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade8:	460e      	mov	r6, r1
 800adea:	4614      	mov	r4, r2
 800adec:	4605      	mov	r5, r0
 800adee:	b118      	cbz	r0, 800adf8 <__swbuf_r+0x12>
 800adf0:	6a03      	ldr	r3, [r0, #32]
 800adf2:	b90b      	cbnz	r3, 800adf8 <__swbuf_r+0x12>
 800adf4:	f7ff feda 	bl	800abac <__sinit>
 800adf8:	69a3      	ldr	r3, [r4, #24]
 800adfa:	60a3      	str	r3, [r4, #8]
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	071a      	lsls	r2, r3, #28
 800ae00:	d501      	bpl.n	800ae06 <__swbuf_r+0x20>
 800ae02:	6923      	ldr	r3, [r4, #16]
 800ae04:	b943      	cbnz	r3, 800ae18 <__swbuf_r+0x32>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 f82b 	bl	800ae64 <__swsetup_r>
 800ae0e:	b118      	cbz	r0, 800ae18 <__swbuf_r+0x32>
 800ae10:	f04f 37ff 	mov.w	r7, #4294967295
 800ae14:	4638      	mov	r0, r7
 800ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	6922      	ldr	r2, [r4, #16]
 800ae1c:	1a98      	subs	r0, r3, r2
 800ae1e:	6963      	ldr	r3, [r4, #20]
 800ae20:	b2f6      	uxtb	r6, r6
 800ae22:	4283      	cmp	r3, r0
 800ae24:	4637      	mov	r7, r6
 800ae26:	dc05      	bgt.n	800ae34 <__swbuf_r+0x4e>
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f001 fe46 	bl	800cabc <_fflush_r>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d1ed      	bne.n	800ae10 <__swbuf_r+0x2a>
 800ae34:	68a3      	ldr	r3, [r4, #8]
 800ae36:	3b01      	subs	r3, #1
 800ae38:	60a3      	str	r3, [r4, #8]
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	1c5a      	adds	r2, r3, #1
 800ae3e:	6022      	str	r2, [r4, #0]
 800ae40:	701e      	strb	r6, [r3, #0]
 800ae42:	6962      	ldr	r2, [r4, #20]
 800ae44:	1c43      	adds	r3, r0, #1
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d004      	beq.n	800ae54 <__swbuf_r+0x6e>
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	07db      	lsls	r3, r3, #31
 800ae4e:	d5e1      	bpl.n	800ae14 <__swbuf_r+0x2e>
 800ae50:	2e0a      	cmp	r6, #10
 800ae52:	d1df      	bne.n	800ae14 <__swbuf_r+0x2e>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	f001 fe30 	bl	800cabc <_fflush_r>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0d9      	beq.n	800ae14 <__swbuf_r+0x2e>
 800ae60:	e7d6      	b.n	800ae10 <__swbuf_r+0x2a>
	...

0800ae64 <__swsetup_r>:
 800ae64:	b538      	push	{r3, r4, r5, lr}
 800ae66:	4b29      	ldr	r3, [pc, #164]	@ (800af0c <__swsetup_r+0xa8>)
 800ae68:	4605      	mov	r5, r0
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	b118      	cbz	r0, 800ae78 <__swsetup_r+0x14>
 800ae70:	6a03      	ldr	r3, [r0, #32]
 800ae72:	b90b      	cbnz	r3, 800ae78 <__swsetup_r+0x14>
 800ae74:	f7ff fe9a 	bl	800abac <__sinit>
 800ae78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7c:	0719      	lsls	r1, r3, #28
 800ae7e:	d422      	bmi.n	800aec6 <__swsetup_r+0x62>
 800ae80:	06da      	lsls	r2, r3, #27
 800ae82:	d407      	bmi.n	800ae94 <__swsetup_r+0x30>
 800ae84:	2209      	movs	r2, #9
 800ae86:	602a      	str	r2, [r5, #0]
 800ae88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae92:	e033      	b.n	800aefc <__swsetup_r+0x98>
 800ae94:	0758      	lsls	r0, r3, #29
 800ae96:	d512      	bpl.n	800aebe <__swsetup_r+0x5a>
 800ae98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae9a:	b141      	cbz	r1, 800aeae <__swsetup_r+0x4a>
 800ae9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aea0:	4299      	cmp	r1, r3
 800aea2:	d002      	beq.n	800aeaa <__swsetup_r+0x46>
 800aea4:	4628      	mov	r0, r5
 800aea6:	f000 ff1f 	bl	800bce8 <_free_r>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6363      	str	r3, [r4, #52]	@ 0x34
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aeb4:	81a3      	strh	r3, [r4, #12]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6063      	str	r3, [r4, #4]
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f043 0308 	orr.w	r3, r3, #8
 800aec4:	81a3      	strh	r3, [r4, #12]
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	b94b      	cbnz	r3, 800aede <__swsetup_r+0x7a>
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aed4:	d003      	beq.n	800aede <__swsetup_r+0x7a>
 800aed6:	4621      	mov	r1, r4
 800aed8:	4628      	mov	r0, r5
 800aeda:	f001 fe3d 	bl	800cb58 <__smakebuf_r>
 800aede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aee2:	f013 0201 	ands.w	r2, r3, #1
 800aee6:	d00a      	beq.n	800aefe <__swsetup_r+0x9a>
 800aee8:	2200      	movs	r2, #0
 800aeea:	60a2      	str	r2, [r4, #8]
 800aeec:	6962      	ldr	r2, [r4, #20]
 800aeee:	4252      	negs	r2, r2
 800aef0:	61a2      	str	r2, [r4, #24]
 800aef2:	6922      	ldr	r2, [r4, #16]
 800aef4:	b942      	cbnz	r2, 800af08 <__swsetup_r+0xa4>
 800aef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aefa:	d1c5      	bne.n	800ae88 <__swsetup_r+0x24>
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	0799      	lsls	r1, r3, #30
 800af00:	bf58      	it	pl
 800af02:	6962      	ldrpl	r2, [r4, #20]
 800af04:	60a2      	str	r2, [r4, #8]
 800af06:	e7f4      	b.n	800aef2 <__swsetup_r+0x8e>
 800af08:	2000      	movs	r0, #0
 800af0a:	e7f7      	b.n	800aefc <__swsetup_r+0x98>
 800af0c:	20000024 	.word	0x20000024

0800af10 <memset>:
 800af10:	4402      	add	r2, r0
 800af12:	4603      	mov	r3, r0
 800af14:	4293      	cmp	r3, r2
 800af16:	d100      	bne.n	800af1a <memset+0xa>
 800af18:	4770      	bx	lr
 800af1a:	f803 1b01 	strb.w	r1, [r3], #1
 800af1e:	e7f9      	b.n	800af14 <memset+0x4>

0800af20 <_localeconv_r>:
 800af20:	4800      	ldr	r0, [pc, #0]	@ (800af24 <_localeconv_r+0x4>)
 800af22:	4770      	bx	lr
 800af24:	20000164 	.word	0x20000164

0800af28 <_close_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d06      	ldr	r5, [pc, #24]	@ (800af44 <_close_r+0x1c>)
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	602b      	str	r3, [r5, #0]
 800af34:	f7f8 fc28 	bl	8003788 <_close>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d102      	bne.n	800af42 <_close_r+0x1a>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	b103      	cbz	r3, 800af42 <_close_r+0x1a>
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	200051e8 	.word	0x200051e8

0800af48 <_lseek_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d07      	ldr	r5, [pc, #28]	@ (800af68 <_lseek_r+0x20>)
 800af4c:	4604      	mov	r4, r0
 800af4e:	4608      	mov	r0, r1
 800af50:	4611      	mov	r1, r2
 800af52:	2200      	movs	r2, #0
 800af54:	602a      	str	r2, [r5, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	f7f8 fc3d 	bl	80037d6 <_lseek>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_lseek_r+0x1e>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b103      	cbz	r3, 800af66 <_lseek_r+0x1e>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	200051e8 	.word	0x200051e8

0800af6c <_read_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	4d07      	ldr	r5, [pc, #28]	@ (800af8c <_read_r+0x20>)
 800af70:	4604      	mov	r4, r0
 800af72:	4608      	mov	r0, r1
 800af74:	4611      	mov	r1, r2
 800af76:	2200      	movs	r2, #0
 800af78:	602a      	str	r2, [r5, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f7f8 fbe7 	bl	800374e <_read>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d102      	bne.n	800af8a <_read_r+0x1e>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	b103      	cbz	r3, 800af8a <_read_r+0x1e>
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	200051e8 	.word	0x200051e8

0800af90 <_sbrk_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d06      	ldr	r5, [pc, #24]	@ (800afac <_sbrk_r+0x1c>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7f8 fc28 	bl	80037f0 <_sbrk>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_sbrk_r+0x1a>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_sbrk_r+0x1a>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	200051e8 	.word	0x200051e8

0800afb0 <_write_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d07      	ldr	r5, [pc, #28]	@ (800afd0 <_write_r+0x20>)
 800afb4:	4604      	mov	r4, r0
 800afb6:	4608      	mov	r0, r1
 800afb8:	4611      	mov	r1, r2
 800afba:	2200      	movs	r2, #0
 800afbc:	602a      	str	r2, [r5, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	f7f7 fe2c 	bl	8002c1c <_write>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d102      	bne.n	800afce <_write_r+0x1e>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	b103      	cbz	r3, 800afce <_write_r+0x1e>
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	200051e8 	.word	0x200051e8

0800afd4 <__errno>:
 800afd4:	4b01      	ldr	r3, [pc, #4]	@ (800afdc <__errno+0x8>)
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20000024 	.word	0x20000024

0800afe0 <__libc_init_array>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	4d0d      	ldr	r5, [pc, #52]	@ (800b018 <__libc_init_array+0x38>)
 800afe4:	4c0d      	ldr	r4, [pc, #52]	@ (800b01c <__libc_init_array+0x3c>)
 800afe6:	1b64      	subs	r4, r4, r5
 800afe8:	10a4      	asrs	r4, r4, #2
 800afea:	2600      	movs	r6, #0
 800afec:	42a6      	cmp	r6, r4
 800afee:	d109      	bne.n	800b004 <__libc_init_array+0x24>
 800aff0:	4d0b      	ldr	r5, [pc, #44]	@ (800b020 <__libc_init_array+0x40>)
 800aff2:	4c0c      	ldr	r4, [pc, #48]	@ (800b024 <__libc_init_array+0x44>)
 800aff4:	f001 ff0e 	bl	800ce14 <_init>
 800aff8:	1b64      	subs	r4, r4, r5
 800affa:	10a4      	asrs	r4, r4, #2
 800affc:	2600      	movs	r6, #0
 800affe:	42a6      	cmp	r6, r4
 800b000:	d105      	bne.n	800b00e <__libc_init_array+0x2e>
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	f855 3b04 	ldr.w	r3, [r5], #4
 800b008:	4798      	blx	r3
 800b00a:	3601      	adds	r6, #1
 800b00c:	e7ee      	b.n	800afec <__libc_init_array+0xc>
 800b00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b012:	4798      	blx	r3
 800b014:	3601      	adds	r6, #1
 800b016:	e7f2      	b.n	800affe <__libc_init_array+0x1e>
 800b018:	0800e118 	.word	0x0800e118
 800b01c:	0800e118 	.word	0x0800e118
 800b020:	0800e118 	.word	0x0800e118
 800b024:	0800e11c 	.word	0x0800e11c

0800b028 <__retarget_lock_init_recursive>:
 800b028:	4770      	bx	lr

0800b02a <__retarget_lock_acquire_recursive>:
 800b02a:	4770      	bx	lr

0800b02c <__retarget_lock_release_recursive>:
 800b02c:	4770      	bx	lr

0800b02e <memcpy>:
 800b02e:	440a      	add	r2, r1
 800b030:	4291      	cmp	r1, r2
 800b032:	f100 33ff 	add.w	r3, r0, #4294967295
 800b036:	d100      	bne.n	800b03a <memcpy+0xc>
 800b038:	4770      	bx	lr
 800b03a:	b510      	push	{r4, lr}
 800b03c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b040:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b044:	4291      	cmp	r1, r2
 800b046:	d1f9      	bne.n	800b03c <memcpy+0xe>
 800b048:	bd10      	pop	{r4, pc}

0800b04a <quorem>:
 800b04a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04e:	6903      	ldr	r3, [r0, #16]
 800b050:	690c      	ldr	r4, [r1, #16]
 800b052:	42a3      	cmp	r3, r4
 800b054:	4607      	mov	r7, r0
 800b056:	db7e      	blt.n	800b156 <quorem+0x10c>
 800b058:	3c01      	subs	r4, #1
 800b05a:	f101 0814 	add.w	r8, r1, #20
 800b05e:	00a3      	lsls	r3, r4, #2
 800b060:	f100 0514 	add.w	r5, r0, #20
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b06a:	9301      	str	r3, [sp, #4]
 800b06c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b070:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b074:	3301      	adds	r3, #1
 800b076:	429a      	cmp	r2, r3
 800b078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b07c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b080:	d32e      	bcc.n	800b0e0 <quorem+0x96>
 800b082:	f04f 0a00 	mov.w	sl, #0
 800b086:	46c4      	mov	ip, r8
 800b088:	46ae      	mov	lr, r5
 800b08a:	46d3      	mov	fp, sl
 800b08c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b090:	b298      	uxth	r0, r3
 800b092:	fb06 a000 	mla	r0, r6, r0, sl
 800b096:	0c02      	lsrs	r2, r0, #16
 800b098:	0c1b      	lsrs	r3, r3, #16
 800b09a:	fb06 2303 	mla	r3, r6, r3, r2
 800b09e:	f8de 2000 	ldr.w	r2, [lr]
 800b0a2:	b280      	uxth	r0, r0
 800b0a4:	b292      	uxth	r2, r2
 800b0a6:	1a12      	subs	r2, r2, r0
 800b0a8:	445a      	add	r2, fp
 800b0aa:	f8de 0000 	ldr.w	r0, [lr]
 800b0ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b0b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b0bc:	b292      	uxth	r2, r2
 800b0be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0c2:	45e1      	cmp	r9, ip
 800b0c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b0c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0cc:	d2de      	bcs.n	800b08c <quorem+0x42>
 800b0ce:	9b00      	ldr	r3, [sp, #0]
 800b0d0:	58eb      	ldr	r3, [r5, r3]
 800b0d2:	b92b      	cbnz	r3, 800b0e0 <quorem+0x96>
 800b0d4:	9b01      	ldr	r3, [sp, #4]
 800b0d6:	3b04      	subs	r3, #4
 800b0d8:	429d      	cmp	r5, r3
 800b0da:	461a      	mov	r2, r3
 800b0dc:	d32f      	bcc.n	800b13e <quorem+0xf4>
 800b0de:	613c      	str	r4, [r7, #16]
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f001 f8c5 	bl	800c270 <__mcmp>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	db25      	blt.n	800b136 <quorem+0xec>
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0f2:	f8d1 c000 	ldr.w	ip, [r1]
 800b0f6:	fa1f fe82 	uxth.w	lr, r2
 800b0fa:	fa1f f38c 	uxth.w	r3, ip
 800b0fe:	eba3 030e 	sub.w	r3, r3, lr
 800b102:	4403      	add	r3, r0
 800b104:	0c12      	lsrs	r2, r2, #16
 800b106:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b10a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b10e:	b29b      	uxth	r3, r3
 800b110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b114:	45c1      	cmp	r9, r8
 800b116:	f841 3b04 	str.w	r3, [r1], #4
 800b11a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b11e:	d2e6      	bcs.n	800b0ee <quorem+0xa4>
 800b120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b124:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b128:	b922      	cbnz	r2, 800b134 <quorem+0xea>
 800b12a:	3b04      	subs	r3, #4
 800b12c:	429d      	cmp	r5, r3
 800b12e:	461a      	mov	r2, r3
 800b130:	d30b      	bcc.n	800b14a <quorem+0x100>
 800b132:	613c      	str	r4, [r7, #16]
 800b134:	3601      	adds	r6, #1
 800b136:	4630      	mov	r0, r6
 800b138:	b003      	add	sp, #12
 800b13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13e:	6812      	ldr	r2, [r2, #0]
 800b140:	3b04      	subs	r3, #4
 800b142:	2a00      	cmp	r2, #0
 800b144:	d1cb      	bne.n	800b0de <quorem+0x94>
 800b146:	3c01      	subs	r4, #1
 800b148:	e7c6      	b.n	800b0d8 <quorem+0x8e>
 800b14a:	6812      	ldr	r2, [r2, #0]
 800b14c:	3b04      	subs	r3, #4
 800b14e:	2a00      	cmp	r2, #0
 800b150:	d1ef      	bne.n	800b132 <quorem+0xe8>
 800b152:	3c01      	subs	r4, #1
 800b154:	e7ea      	b.n	800b12c <quorem+0xe2>
 800b156:	2000      	movs	r0, #0
 800b158:	e7ee      	b.n	800b138 <quorem+0xee>
 800b15a:	0000      	movs	r0, r0
 800b15c:	0000      	movs	r0, r0
	...

0800b160 <_dtoa_r>:
 800b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	69c7      	ldr	r7, [r0, #28]
 800b166:	b099      	sub	sp, #100	@ 0x64
 800b168:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b16c:	ec55 4b10 	vmov	r4, r5, d0
 800b170:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b172:	9109      	str	r1, [sp, #36]	@ 0x24
 800b174:	4683      	mov	fp, r0
 800b176:	920e      	str	r2, [sp, #56]	@ 0x38
 800b178:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b17a:	b97f      	cbnz	r7, 800b19c <_dtoa_r+0x3c>
 800b17c:	2010      	movs	r0, #16
 800b17e:	f7fe ff73 	bl	800a068 <malloc>
 800b182:	4602      	mov	r2, r0
 800b184:	f8cb 001c 	str.w	r0, [fp, #28]
 800b188:	b920      	cbnz	r0, 800b194 <_dtoa_r+0x34>
 800b18a:	4ba7      	ldr	r3, [pc, #668]	@ (800b428 <_dtoa_r+0x2c8>)
 800b18c:	21ef      	movs	r1, #239	@ 0xef
 800b18e:	48a7      	ldr	r0, [pc, #668]	@ (800b42c <_dtoa_r+0x2cc>)
 800b190:	f001 fd5a 	bl	800cc48 <__assert_func>
 800b194:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b198:	6007      	str	r7, [r0, #0]
 800b19a:	60c7      	str	r7, [r0, #12]
 800b19c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1a0:	6819      	ldr	r1, [r3, #0]
 800b1a2:	b159      	cbz	r1, 800b1bc <_dtoa_r+0x5c>
 800b1a4:	685a      	ldr	r2, [r3, #4]
 800b1a6:	604a      	str	r2, [r1, #4]
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	4093      	lsls	r3, r2
 800b1ac:	608b      	str	r3, [r1, #8]
 800b1ae:	4658      	mov	r0, fp
 800b1b0:	f000 fe24 	bl	800bdfc <_Bfree>
 800b1b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	1e2b      	subs	r3, r5, #0
 800b1be:	bfb9      	ittee	lt
 800b1c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1c4:	9303      	strlt	r3, [sp, #12]
 800b1c6:	2300      	movge	r3, #0
 800b1c8:	6033      	strge	r3, [r6, #0]
 800b1ca:	9f03      	ldr	r7, [sp, #12]
 800b1cc:	4b98      	ldr	r3, [pc, #608]	@ (800b430 <_dtoa_r+0x2d0>)
 800b1ce:	bfbc      	itt	lt
 800b1d0:	2201      	movlt	r2, #1
 800b1d2:	6032      	strlt	r2, [r6, #0]
 800b1d4:	43bb      	bics	r3, r7
 800b1d6:	d112      	bne.n	800b1fe <_dtoa_r+0x9e>
 800b1d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1e4:	4323      	orrs	r3, r4
 800b1e6:	f000 854d 	beq.w	800bc84 <_dtoa_r+0xb24>
 800b1ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b444 <_dtoa_r+0x2e4>
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 854f 	beq.w	800bc94 <_dtoa_r+0xb34>
 800b1f6:	f10a 0303 	add.w	r3, sl, #3
 800b1fa:	f000 bd49 	b.w	800bc90 <_dtoa_r+0xb30>
 800b1fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b202:	2200      	movs	r2, #0
 800b204:	ec51 0b17 	vmov	r0, r1, d7
 800b208:	2300      	movs	r3, #0
 800b20a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b20e:	f7f5 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b212:	4680      	mov	r8, r0
 800b214:	b158      	cbz	r0, 800b22e <_dtoa_r+0xce>
 800b216:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b218:	2301      	movs	r3, #1
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b21e:	b113      	cbz	r3, 800b226 <_dtoa_r+0xc6>
 800b220:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b222:	4b84      	ldr	r3, [pc, #528]	@ (800b434 <_dtoa_r+0x2d4>)
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b448 <_dtoa_r+0x2e8>
 800b22a:	f000 bd33 	b.w	800bc94 <_dtoa_r+0xb34>
 800b22e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b232:	aa16      	add	r2, sp, #88	@ 0x58
 800b234:	a917      	add	r1, sp, #92	@ 0x5c
 800b236:	4658      	mov	r0, fp
 800b238:	f001 f8ca 	bl	800c3d0 <__d2b>
 800b23c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b240:	4681      	mov	r9, r0
 800b242:	2e00      	cmp	r6, #0
 800b244:	d077      	beq.n	800b336 <_dtoa_r+0x1d6>
 800b246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b248:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b254:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b258:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b25c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b260:	4619      	mov	r1, r3
 800b262:	2200      	movs	r2, #0
 800b264:	4b74      	ldr	r3, [pc, #464]	@ (800b438 <_dtoa_r+0x2d8>)
 800b266:	f7f5 f80f 	bl	8000288 <__aeabi_dsub>
 800b26a:	a369      	add	r3, pc, #420	@ (adr r3, 800b410 <_dtoa_r+0x2b0>)
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	f7f5 f9c2 	bl	80005f8 <__aeabi_dmul>
 800b274:	a368      	add	r3, pc, #416	@ (adr r3, 800b418 <_dtoa_r+0x2b8>)
 800b276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27a:	f7f5 f807 	bl	800028c <__adddf3>
 800b27e:	4604      	mov	r4, r0
 800b280:	4630      	mov	r0, r6
 800b282:	460d      	mov	r5, r1
 800b284:	f7f5 f94e 	bl	8000524 <__aeabi_i2d>
 800b288:	a365      	add	r3, pc, #404	@ (adr r3, 800b420 <_dtoa_r+0x2c0>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f5 f9b3 	bl	80005f8 <__aeabi_dmul>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4620      	mov	r0, r4
 800b298:	4629      	mov	r1, r5
 800b29a:	f7f4 fff7 	bl	800028c <__adddf3>
 800b29e:	4604      	mov	r4, r0
 800b2a0:	460d      	mov	r5, r1
 800b2a2:	f7f5 fc59 	bl	8000b58 <__aeabi_d2iz>
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f7f5 fc14 	bl	8000adc <__aeabi_dcmplt>
 800b2b4:	b140      	cbz	r0, 800b2c8 <_dtoa_r+0x168>
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f7f5 f934 	bl	8000524 <__aeabi_i2d>
 800b2bc:	4622      	mov	r2, r4
 800b2be:	462b      	mov	r3, r5
 800b2c0:	f7f5 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2c4:	b900      	cbnz	r0, 800b2c8 <_dtoa_r+0x168>
 800b2c6:	3f01      	subs	r7, #1
 800b2c8:	2f16      	cmp	r7, #22
 800b2ca:	d851      	bhi.n	800b370 <_dtoa_r+0x210>
 800b2cc:	4b5b      	ldr	r3, [pc, #364]	@ (800b43c <_dtoa_r+0x2dc>)
 800b2ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2da:	f7f5 fbff 	bl	8000adc <__aeabi_dcmplt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d048      	beq.n	800b374 <_dtoa_r+0x214>
 800b2e2:	3f01      	subs	r7, #1
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b2ea:	1b9b      	subs	r3, r3, r6
 800b2ec:	1e5a      	subs	r2, r3, #1
 800b2ee:	bf44      	itt	mi
 800b2f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b2f4:	2300      	movmi	r3, #0
 800b2f6:	9208      	str	r2, [sp, #32]
 800b2f8:	bf54      	ite	pl
 800b2fa:	f04f 0800 	movpl.w	r8, #0
 800b2fe:	9308      	strmi	r3, [sp, #32]
 800b300:	2f00      	cmp	r7, #0
 800b302:	db39      	blt.n	800b378 <_dtoa_r+0x218>
 800b304:	9b08      	ldr	r3, [sp, #32]
 800b306:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b308:	443b      	add	r3, r7
 800b30a:	9308      	str	r3, [sp, #32]
 800b30c:	2300      	movs	r3, #0
 800b30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b312:	2b09      	cmp	r3, #9
 800b314:	d864      	bhi.n	800b3e0 <_dtoa_r+0x280>
 800b316:	2b05      	cmp	r3, #5
 800b318:	bfc4      	itt	gt
 800b31a:	3b04      	subgt	r3, #4
 800b31c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	f1a3 0302 	sub.w	r3, r3, #2
 800b324:	bfcc      	ite	gt
 800b326:	2400      	movgt	r4, #0
 800b328:	2401      	movle	r4, #1
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d863      	bhi.n	800b3f6 <_dtoa_r+0x296>
 800b32e:	e8df f003 	tbb	[pc, r3]
 800b332:	372a      	.short	0x372a
 800b334:	5535      	.short	0x5535
 800b336:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b33a:	441e      	add	r6, r3
 800b33c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b340:	2b20      	cmp	r3, #32
 800b342:	bfc1      	itttt	gt
 800b344:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b348:	409f      	lslgt	r7, r3
 800b34a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b34e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b352:	bfd6      	itet	le
 800b354:	f1c3 0320 	rsble	r3, r3, #32
 800b358:	ea47 0003 	orrgt.w	r0, r7, r3
 800b35c:	fa04 f003 	lslle.w	r0, r4, r3
 800b360:	f7f5 f8d0 	bl	8000504 <__aeabi_ui2d>
 800b364:	2201      	movs	r2, #1
 800b366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b36a:	3e01      	subs	r6, #1
 800b36c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b36e:	e777      	b.n	800b260 <_dtoa_r+0x100>
 800b370:	2301      	movs	r3, #1
 800b372:	e7b8      	b.n	800b2e6 <_dtoa_r+0x186>
 800b374:	9012      	str	r0, [sp, #72]	@ 0x48
 800b376:	e7b7      	b.n	800b2e8 <_dtoa_r+0x188>
 800b378:	427b      	negs	r3, r7
 800b37a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b37c:	2300      	movs	r3, #0
 800b37e:	eba8 0807 	sub.w	r8, r8, r7
 800b382:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b384:	e7c4      	b.n	800b310 <_dtoa_r+0x1b0>
 800b386:	2300      	movs	r3, #0
 800b388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b38a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dc35      	bgt.n	800b3fc <_dtoa_r+0x29c>
 800b390:	2301      	movs	r3, #1
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	9307      	str	r3, [sp, #28]
 800b396:	461a      	mov	r2, r3
 800b398:	920e      	str	r2, [sp, #56]	@ 0x38
 800b39a:	e00b      	b.n	800b3b4 <_dtoa_r+0x254>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e7f3      	b.n	800b388 <_dtoa_r+0x228>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3a6:	18fb      	adds	r3, r7, r3
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	9307      	str	r3, [sp, #28]
 800b3b0:	bfb8      	it	lt
 800b3b2:	2301      	movlt	r3, #1
 800b3b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	2204      	movs	r2, #4
 800b3bc:	f102 0514 	add.w	r5, r2, #20
 800b3c0:	429d      	cmp	r5, r3
 800b3c2:	d91f      	bls.n	800b404 <_dtoa_r+0x2a4>
 800b3c4:	6041      	str	r1, [r0, #4]
 800b3c6:	4658      	mov	r0, fp
 800b3c8:	f000 fcd8 	bl	800bd7c <_Balloc>
 800b3cc:	4682      	mov	sl, r0
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d13c      	bne.n	800b44c <_dtoa_r+0x2ec>
 800b3d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b440 <_dtoa_r+0x2e0>)
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3da:	e6d8      	b.n	800b18e <_dtoa_r+0x2e>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e7e0      	b.n	800b3a2 <_dtoa_r+0x242>
 800b3e0:	2401      	movs	r4, #1
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	9307      	str	r3, [sp, #28]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	2312      	movs	r3, #18
 800b3f4:	e7d0      	b.n	800b398 <_dtoa_r+0x238>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3fa:	e7f5      	b.n	800b3e8 <_dtoa_r+0x288>
 800b3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	9307      	str	r3, [sp, #28]
 800b402:	e7d7      	b.n	800b3b4 <_dtoa_r+0x254>
 800b404:	3101      	adds	r1, #1
 800b406:	0052      	lsls	r2, r2, #1
 800b408:	e7d8      	b.n	800b3bc <_dtoa_r+0x25c>
 800b40a:	bf00      	nop
 800b40c:	f3af 8000 	nop.w
 800b410:	636f4361 	.word	0x636f4361
 800b414:	3fd287a7 	.word	0x3fd287a7
 800b418:	8b60c8b3 	.word	0x8b60c8b3
 800b41c:	3fc68a28 	.word	0x3fc68a28
 800b420:	509f79fb 	.word	0x509f79fb
 800b424:	3fd34413 	.word	0x3fd34413
 800b428:	0800dde1 	.word	0x0800dde1
 800b42c:	0800ddf8 	.word	0x0800ddf8
 800b430:	7ff00000 	.word	0x7ff00000
 800b434:	0800ddb1 	.word	0x0800ddb1
 800b438:	3ff80000 	.word	0x3ff80000
 800b43c:	0800def0 	.word	0x0800def0
 800b440:	0800de50 	.word	0x0800de50
 800b444:	0800dddd 	.word	0x0800dddd
 800b448:	0800ddb0 	.word	0x0800ddb0
 800b44c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b450:	6018      	str	r0, [r3, #0]
 800b452:	9b07      	ldr	r3, [sp, #28]
 800b454:	2b0e      	cmp	r3, #14
 800b456:	f200 80a4 	bhi.w	800b5a2 <_dtoa_r+0x442>
 800b45a:	2c00      	cmp	r4, #0
 800b45c:	f000 80a1 	beq.w	800b5a2 <_dtoa_r+0x442>
 800b460:	2f00      	cmp	r7, #0
 800b462:	dd33      	ble.n	800b4cc <_dtoa_r+0x36c>
 800b464:	4bad      	ldr	r3, [pc, #692]	@ (800b71c <_dtoa_r+0x5bc>)
 800b466:	f007 020f 	and.w	r2, r7, #15
 800b46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b46e:	ed93 7b00 	vldr	d7, [r3]
 800b472:	05f8      	lsls	r0, r7, #23
 800b474:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b478:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b47c:	d516      	bpl.n	800b4ac <_dtoa_r+0x34c>
 800b47e:	4ba8      	ldr	r3, [pc, #672]	@ (800b720 <_dtoa_r+0x5c0>)
 800b480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b488:	f7f5 f9e0 	bl	800084c <__aeabi_ddiv>
 800b48c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b490:	f004 040f 	and.w	r4, r4, #15
 800b494:	2603      	movs	r6, #3
 800b496:	4da2      	ldr	r5, [pc, #648]	@ (800b720 <_dtoa_r+0x5c0>)
 800b498:	b954      	cbnz	r4, 800b4b0 <_dtoa_r+0x350>
 800b49a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a2:	f7f5 f9d3 	bl	800084c <__aeabi_ddiv>
 800b4a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4aa:	e028      	b.n	800b4fe <_dtoa_r+0x39e>
 800b4ac:	2602      	movs	r6, #2
 800b4ae:	e7f2      	b.n	800b496 <_dtoa_r+0x336>
 800b4b0:	07e1      	lsls	r1, r4, #31
 800b4b2:	d508      	bpl.n	800b4c6 <_dtoa_r+0x366>
 800b4b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4bc:	f7f5 f89c 	bl	80005f8 <__aeabi_dmul>
 800b4c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4c4:	3601      	adds	r6, #1
 800b4c6:	1064      	asrs	r4, r4, #1
 800b4c8:	3508      	adds	r5, #8
 800b4ca:	e7e5      	b.n	800b498 <_dtoa_r+0x338>
 800b4cc:	f000 80d2 	beq.w	800b674 <_dtoa_r+0x514>
 800b4d0:	427c      	negs	r4, r7
 800b4d2:	4b92      	ldr	r3, [pc, #584]	@ (800b71c <_dtoa_r+0x5bc>)
 800b4d4:	4d92      	ldr	r5, [pc, #584]	@ (800b720 <_dtoa_r+0x5c0>)
 800b4d6:	f004 020f 	and.w	r2, r4, #15
 800b4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4e6:	f7f5 f887 	bl	80005f8 <__aeabi_dmul>
 800b4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4ee:	1124      	asrs	r4, r4, #4
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2602      	movs	r6, #2
 800b4f4:	2c00      	cmp	r4, #0
 800b4f6:	f040 80b2 	bne.w	800b65e <_dtoa_r+0x4fe>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1d3      	bne.n	800b4a6 <_dtoa_r+0x346>
 800b4fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b500:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 80b7 	beq.w	800b678 <_dtoa_r+0x518>
 800b50a:	4b86      	ldr	r3, [pc, #536]	@ (800b724 <_dtoa_r+0x5c4>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	4620      	mov	r0, r4
 800b510:	4629      	mov	r1, r5
 800b512:	f7f5 fae3 	bl	8000adc <__aeabi_dcmplt>
 800b516:	2800      	cmp	r0, #0
 800b518:	f000 80ae 	beq.w	800b678 <_dtoa_r+0x518>
 800b51c:	9b07      	ldr	r3, [sp, #28]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 80aa 	beq.w	800b678 <_dtoa_r+0x518>
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	dd37      	ble.n	800b59a <_dtoa_r+0x43a>
 800b52a:	1e7b      	subs	r3, r7, #1
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	4620      	mov	r0, r4
 800b530:	4b7d      	ldr	r3, [pc, #500]	@ (800b728 <_dtoa_r+0x5c8>)
 800b532:	2200      	movs	r2, #0
 800b534:	4629      	mov	r1, r5
 800b536:	f7f5 f85f 	bl	80005f8 <__aeabi_dmul>
 800b53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b53e:	9c00      	ldr	r4, [sp, #0]
 800b540:	3601      	adds	r6, #1
 800b542:	4630      	mov	r0, r6
 800b544:	f7f4 ffee 	bl	8000524 <__aeabi_i2d>
 800b548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b54c:	f7f5 f854 	bl	80005f8 <__aeabi_dmul>
 800b550:	4b76      	ldr	r3, [pc, #472]	@ (800b72c <_dtoa_r+0x5cc>)
 800b552:	2200      	movs	r2, #0
 800b554:	f7f4 fe9a 	bl	800028c <__adddf3>
 800b558:	4605      	mov	r5, r0
 800b55a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b55e:	2c00      	cmp	r4, #0
 800b560:	f040 808d 	bne.w	800b67e <_dtoa_r+0x51e>
 800b564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b568:	4b71      	ldr	r3, [pc, #452]	@ (800b730 <_dtoa_r+0x5d0>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	f7f4 fe8c 	bl	8000288 <__aeabi_dsub>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b578:	462a      	mov	r2, r5
 800b57a:	4633      	mov	r3, r6
 800b57c:	f7f5 facc 	bl	8000b18 <__aeabi_dcmpgt>
 800b580:	2800      	cmp	r0, #0
 800b582:	f040 828b 	bne.w	800ba9c <_dtoa_r+0x93c>
 800b586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b58a:	462a      	mov	r2, r5
 800b58c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b590:	f7f5 faa4 	bl	8000adc <__aeabi_dcmplt>
 800b594:	2800      	cmp	r0, #0
 800b596:	f040 8128 	bne.w	800b7ea <_dtoa_r+0x68a>
 800b59a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b59e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b5a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f2c0 815a 	blt.w	800b85e <_dtoa_r+0x6fe>
 800b5aa:	2f0e      	cmp	r7, #14
 800b5ac:	f300 8157 	bgt.w	800b85e <_dtoa_r+0x6fe>
 800b5b0:	4b5a      	ldr	r3, [pc, #360]	@ (800b71c <_dtoa_r+0x5bc>)
 800b5b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5b6:	ed93 7b00 	vldr	d7, [r3]
 800b5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	ed8d 7b00 	vstr	d7, [sp]
 800b5c2:	da03      	bge.n	800b5cc <_dtoa_r+0x46c>
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f340 8101 	ble.w	800b7ce <_dtoa_r+0x66e>
 800b5cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5d0:	4656      	mov	r6, sl
 800b5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7f5 f937 	bl	800084c <__aeabi_ddiv>
 800b5de:	f7f5 fabb 	bl	8000b58 <__aeabi_d2iz>
 800b5e2:	4680      	mov	r8, r0
 800b5e4:	f7f4 ff9e 	bl	8000524 <__aeabi_i2d>
 800b5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5ec:	f7f5 f804 	bl	80005f8 <__aeabi_dmul>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b5fc:	f7f4 fe44 	bl	8000288 <__aeabi_dsub>
 800b600:	f806 4b01 	strb.w	r4, [r6], #1
 800b604:	9d07      	ldr	r5, [sp, #28]
 800b606:	eba6 040a 	sub.w	r4, r6, sl
 800b60a:	42a5      	cmp	r5, r4
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	f040 8117 	bne.w	800b842 <_dtoa_r+0x6e2>
 800b614:	f7f4 fe3a 	bl	800028c <__adddf3>
 800b618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b61c:	4604      	mov	r4, r0
 800b61e:	460d      	mov	r5, r1
 800b620:	f7f5 fa7a 	bl	8000b18 <__aeabi_dcmpgt>
 800b624:	2800      	cmp	r0, #0
 800b626:	f040 80f9 	bne.w	800b81c <_dtoa_r+0x6bc>
 800b62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b62e:	4620      	mov	r0, r4
 800b630:	4629      	mov	r1, r5
 800b632:	f7f5 fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 800b636:	b118      	cbz	r0, 800b640 <_dtoa_r+0x4e0>
 800b638:	f018 0f01 	tst.w	r8, #1
 800b63c:	f040 80ee 	bne.w	800b81c <_dtoa_r+0x6bc>
 800b640:	4649      	mov	r1, r9
 800b642:	4658      	mov	r0, fp
 800b644:	f000 fbda 	bl	800bdfc <_Bfree>
 800b648:	2300      	movs	r3, #0
 800b64a:	7033      	strb	r3, [r6, #0]
 800b64c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b64e:	3701      	adds	r7, #1
 800b650:	601f      	str	r7, [r3, #0]
 800b652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 831d 	beq.w	800bc94 <_dtoa_r+0xb34>
 800b65a:	601e      	str	r6, [r3, #0]
 800b65c:	e31a      	b.n	800bc94 <_dtoa_r+0xb34>
 800b65e:	07e2      	lsls	r2, r4, #31
 800b660:	d505      	bpl.n	800b66e <_dtoa_r+0x50e>
 800b662:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b666:	f7f4 ffc7 	bl	80005f8 <__aeabi_dmul>
 800b66a:	3601      	adds	r6, #1
 800b66c:	2301      	movs	r3, #1
 800b66e:	1064      	asrs	r4, r4, #1
 800b670:	3508      	adds	r5, #8
 800b672:	e73f      	b.n	800b4f4 <_dtoa_r+0x394>
 800b674:	2602      	movs	r6, #2
 800b676:	e742      	b.n	800b4fe <_dtoa_r+0x39e>
 800b678:	9c07      	ldr	r4, [sp, #28]
 800b67a:	9704      	str	r7, [sp, #16]
 800b67c:	e761      	b.n	800b542 <_dtoa_r+0x3e2>
 800b67e:	4b27      	ldr	r3, [pc, #156]	@ (800b71c <_dtoa_r+0x5bc>)
 800b680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b686:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b68a:	4454      	add	r4, sl
 800b68c:	2900      	cmp	r1, #0
 800b68e:	d053      	beq.n	800b738 <_dtoa_r+0x5d8>
 800b690:	4928      	ldr	r1, [pc, #160]	@ (800b734 <_dtoa_r+0x5d4>)
 800b692:	2000      	movs	r0, #0
 800b694:	f7f5 f8da 	bl	800084c <__aeabi_ddiv>
 800b698:	4633      	mov	r3, r6
 800b69a:	462a      	mov	r2, r5
 800b69c:	f7f4 fdf4 	bl	8000288 <__aeabi_dsub>
 800b6a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6a4:	4656      	mov	r6, sl
 800b6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6aa:	f7f5 fa55 	bl	8000b58 <__aeabi_d2iz>
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	f7f4 ff38 	bl	8000524 <__aeabi_i2d>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6bc:	f7f4 fde4 	bl	8000288 <__aeabi_dsub>
 800b6c0:	3530      	adds	r5, #48	@ 0x30
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6ca:	f806 5b01 	strb.w	r5, [r6], #1
 800b6ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6d2:	f7f5 fa03 	bl	8000adc <__aeabi_dcmplt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d171      	bne.n	800b7be <_dtoa_r+0x65e>
 800b6da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6de:	4911      	ldr	r1, [pc, #68]	@ (800b724 <_dtoa_r+0x5c4>)
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	f7f4 fdd1 	bl	8000288 <__aeabi_dsub>
 800b6e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6ea:	f7f5 f9f7 	bl	8000adc <__aeabi_dcmplt>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	f040 8095 	bne.w	800b81e <_dtoa_r+0x6be>
 800b6f4:	42a6      	cmp	r6, r4
 800b6f6:	f43f af50 	beq.w	800b59a <_dtoa_r+0x43a>
 800b6fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b728 <_dtoa_r+0x5c8>)
 800b700:	2200      	movs	r2, #0
 800b702:	f7f4 ff79 	bl	80005f8 <__aeabi_dmul>
 800b706:	4b08      	ldr	r3, [pc, #32]	@ (800b728 <_dtoa_r+0x5c8>)
 800b708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b70c:	2200      	movs	r2, #0
 800b70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b712:	f7f4 ff71 	bl	80005f8 <__aeabi_dmul>
 800b716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b71a:	e7c4      	b.n	800b6a6 <_dtoa_r+0x546>
 800b71c:	0800def0 	.word	0x0800def0
 800b720:	0800dec8 	.word	0x0800dec8
 800b724:	3ff00000 	.word	0x3ff00000
 800b728:	40240000 	.word	0x40240000
 800b72c:	401c0000 	.word	0x401c0000
 800b730:	40140000 	.word	0x40140000
 800b734:	3fe00000 	.word	0x3fe00000
 800b738:	4631      	mov	r1, r6
 800b73a:	4628      	mov	r0, r5
 800b73c:	f7f4 ff5c 	bl	80005f8 <__aeabi_dmul>
 800b740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b744:	9415      	str	r4, [sp, #84]	@ 0x54
 800b746:	4656      	mov	r6, sl
 800b748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b74c:	f7f5 fa04 	bl	8000b58 <__aeabi_d2iz>
 800b750:	4605      	mov	r5, r0
 800b752:	f7f4 fee7 	bl	8000524 <__aeabi_i2d>
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75e:	f7f4 fd93 	bl	8000288 <__aeabi_dsub>
 800b762:	3530      	adds	r5, #48	@ 0x30
 800b764:	f806 5b01 	strb.w	r5, [r6], #1
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	42a6      	cmp	r6, r4
 800b76e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b772:	f04f 0200 	mov.w	r2, #0
 800b776:	d124      	bne.n	800b7c2 <_dtoa_r+0x662>
 800b778:	4bac      	ldr	r3, [pc, #688]	@ (800ba2c <_dtoa_r+0x8cc>)
 800b77a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b77e:	f7f4 fd85 	bl	800028c <__adddf3>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b78a:	f7f5 f9c5 	bl	8000b18 <__aeabi_dcmpgt>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d145      	bne.n	800b81e <_dtoa_r+0x6be>
 800b792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b796:	49a5      	ldr	r1, [pc, #660]	@ (800ba2c <_dtoa_r+0x8cc>)
 800b798:	2000      	movs	r0, #0
 800b79a:	f7f4 fd75 	bl	8000288 <__aeabi_dsub>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a6:	f7f5 f999 	bl	8000adc <__aeabi_dcmplt>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	f43f aef5 	beq.w	800b59a <_dtoa_r+0x43a>
 800b7b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b7b2:	1e73      	subs	r3, r6, #1
 800b7b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7ba:	2b30      	cmp	r3, #48	@ 0x30
 800b7bc:	d0f8      	beq.n	800b7b0 <_dtoa_r+0x650>
 800b7be:	9f04      	ldr	r7, [sp, #16]
 800b7c0:	e73e      	b.n	800b640 <_dtoa_r+0x4e0>
 800b7c2:	4b9b      	ldr	r3, [pc, #620]	@ (800ba30 <_dtoa_r+0x8d0>)
 800b7c4:	f7f4 ff18 	bl	80005f8 <__aeabi_dmul>
 800b7c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7cc:	e7bc      	b.n	800b748 <_dtoa_r+0x5e8>
 800b7ce:	d10c      	bne.n	800b7ea <_dtoa_r+0x68a>
 800b7d0:	4b98      	ldr	r3, [pc, #608]	@ (800ba34 <_dtoa_r+0x8d4>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7d8:	f7f4 ff0e 	bl	80005f8 <__aeabi_dmul>
 800b7dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7e0:	f7f5 f990 	bl	8000b04 <__aeabi_dcmpge>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	f000 8157 	beq.w	800ba98 <_dtoa_r+0x938>
 800b7ea:	2400      	movs	r4, #0
 800b7ec:	4625      	mov	r5, r4
 800b7ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7f0:	43db      	mvns	r3, r3
 800b7f2:	9304      	str	r3, [sp, #16]
 800b7f4:	4656      	mov	r6, sl
 800b7f6:	2700      	movs	r7, #0
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	4658      	mov	r0, fp
 800b7fc:	f000 fafe 	bl	800bdfc <_Bfree>
 800b800:	2d00      	cmp	r5, #0
 800b802:	d0dc      	beq.n	800b7be <_dtoa_r+0x65e>
 800b804:	b12f      	cbz	r7, 800b812 <_dtoa_r+0x6b2>
 800b806:	42af      	cmp	r7, r5
 800b808:	d003      	beq.n	800b812 <_dtoa_r+0x6b2>
 800b80a:	4639      	mov	r1, r7
 800b80c:	4658      	mov	r0, fp
 800b80e:	f000 faf5 	bl	800bdfc <_Bfree>
 800b812:	4629      	mov	r1, r5
 800b814:	4658      	mov	r0, fp
 800b816:	f000 faf1 	bl	800bdfc <_Bfree>
 800b81a:	e7d0      	b.n	800b7be <_dtoa_r+0x65e>
 800b81c:	9704      	str	r7, [sp, #16]
 800b81e:	4633      	mov	r3, r6
 800b820:	461e      	mov	r6, r3
 800b822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b826:	2a39      	cmp	r2, #57	@ 0x39
 800b828:	d107      	bne.n	800b83a <_dtoa_r+0x6da>
 800b82a:	459a      	cmp	sl, r3
 800b82c:	d1f8      	bne.n	800b820 <_dtoa_r+0x6c0>
 800b82e:	9a04      	ldr	r2, [sp, #16]
 800b830:	3201      	adds	r2, #1
 800b832:	9204      	str	r2, [sp, #16]
 800b834:	2230      	movs	r2, #48	@ 0x30
 800b836:	f88a 2000 	strb.w	r2, [sl]
 800b83a:	781a      	ldrb	r2, [r3, #0]
 800b83c:	3201      	adds	r2, #1
 800b83e:	701a      	strb	r2, [r3, #0]
 800b840:	e7bd      	b.n	800b7be <_dtoa_r+0x65e>
 800b842:	4b7b      	ldr	r3, [pc, #492]	@ (800ba30 <_dtoa_r+0x8d0>)
 800b844:	2200      	movs	r2, #0
 800b846:	f7f4 fed7 	bl	80005f8 <__aeabi_dmul>
 800b84a:	2200      	movs	r2, #0
 800b84c:	2300      	movs	r3, #0
 800b84e:	4604      	mov	r4, r0
 800b850:	460d      	mov	r5, r1
 800b852:	f7f5 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 800b856:	2800      	cmp	r0, #0
 800b858:	f43f aebb 	beq.w	800b5d2 <_dtoa_r+0x472>
 800b85c:	e6f0      	b.n	800b640 <_dtoa_r+0x4e0>
 800b85e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b860:	2a00      	cmp	r2, #0
 800b862:	f000 80db 	beq.w	800ba1c <_dtoa_r+0x8bc>
 800b866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b868:	2a01      	cmp	r2, #1
 800b86a:	f300 80bf 	bgt.w	800b9ec <_dtoa_r+0x88c>
 800b86e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b870:	2a00      	cmp	r2, #0
 800b872:	f000 80b7 	beq.w	800b9e4 <_dtoa_r+0x884>
 800b876:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b87a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b87c:	4646      	mov	r6, r8
 800b87e:	9a08      	ldr	r2, [sp, #32]
 800b880:	2101      	movs	r1, #1
 800b882:	441a      	add	r2, r3
 800b884:	4658      	mov	r0, fp
 800b886:	4498      	add	r8, r3
 800b888:	9208      	str	r2, [sp, #32]
 800b88a:	f000 fb6b 	bl	800bf64 <__i2b>
 800b88e:	4605      	mov	r5, r0
 800b890:	b15e      	cbz	r6, 800b8aa <_dtoa_r+0x74a>
 800b892:	9b08      	ldr	r3, [sp, #32]
 800b894:	2b00      	cmp	r3, #0
 800b896:	dd08      	ble.n	800b8aa <_dtoa_r+0x74a>
 800b898:	42b3      	cmp	r3, r6
 800b89a:	9a08      	ldr	r2, [sp, #32]
 800b89c:	bfa8      	it	ge
 800b89e:	4633      	movge	r3, r6
 800b8a0:	eba8 0803 	sub.w	r8, r8, r3
 800b8a4:	1af6      	subs	r6, r6, r3
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	9308      	str	r3, [sp, #32]
 800b8aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ac:	b1f3      	cbz	r3, 800b8ec <_dtoa_r+0x78c>
 800b8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 80b7 	beq.w	800ba24 <_dtoa_r+0x8c4>
 800b8b6:	b18c      	cbz	r4, 800b8dc <_dtoa_r+0x77c>
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	4658      	mov	r0, fp
 800b8be:	f000 fc11 	bl	800c0e4 <__pow5mult>
 800b8c2:	464a      	mov	r2, r9
 800b8c4:	4601      	mov	r1, r0
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	4658      	mov	r0, fp
 800b8ca:	f000 fb61 	bl	800bf90 <__multiply>
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	9004      	str	r0, [sp, #16]
 800b8d2:	4658      	mov	r0, fp
 800b8d4:	f000 fa92 	bl	800bdfc <_Bfree>
 800b8d8:	9b04      	ldr	r3, [sp, #16]
 800b8da:	4699      	mov	r9, r3
 800b8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8de:	1b1a      	subs	r2, r3, r4
 800b8e0:	d004      	beq.n	800b8ec <_dtoa_r+0x78c>
 800b8e2:	4649      	mov	r1, r9
 800b8e4:	4658      	mov	r0, fp
 800b8e6:	f000 fbfd 	bl	800c0e4 <__pow5mult>
 800b8ea:	4681      	mov	r9, r0
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	4658      	mov	r0, fp
 800b8f0:	f000 fb38 	bl	800bf64 <__i2b>
 800b8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 81cf 	beq.w	800bc9c <_dtoa_r+0xb3c>
 800b8fe:	461a      	mov	r2, r3
 800b900:	4601      	mov	r1, r0
 800b902:	4658      	mov	r0, fp
 800b904:	f000 fbee 	bl	800c0e4 <__pow5mult>
 800b908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	4604      	mov	r4, r0
 800b90e:	f300 8095 	bgt.w	800ba3c <_dtoa_r+0x8dc>
 800b912:	9b02      	ldr	r3, [sp, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f040 8087 	bne.w	800ba28 <_dtoa_r+0x8c8>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b920:	2b00      	cmp	r3, #0
 800b922:	f040 8089 	bne.w	800ba38 <_dtoa_r+0x8d8>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b92c:	0d1b      	lsrs	r3, r3, #20
 800b92e:	051b      	lsls	r3, r3, #20
 800b930:	b12b      	cbz	r3, 800b93e <_dtoa_r+0x7de>
 800b932:	9b08      	ldr	r3, [sp, #32]
 800b934:	3301      	adds	r3, #1
 800b936:	9308      	str	r3, [sp, #32]
 800b938:	f108 0801 	add.w	r8, r8, #1
 800b93c:	2301      	movs	r3, #1
 800b93e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 81b0 	beq.w	800bca8 <_dtoa_r+0xb48>
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b94e:	6918      	ldr	r0, [r3, #16]
 800b950:	f000 fabc 	bl	800becc <__hi0bits>
 800b954:	f1c0 0020 	rsb	r0, r0, #32
 800b958:	9b08      	ldr	r3, [sp, #32]
 800b95a:	4418      	add	r0, r3
 800b95c:	f010 001f 	ands.w	r0, r0, #31
 800b960:	d077      	beq.n	800ba52 <_dtoa_r+0x8f2>
 800b962:	f1c0 0320 	rsb	r3, r0, #32
 800b966:	2b04      	cmp	r3, #4
 800b968:	dd6b      	ble.n	800ba42 <_dtoa_r+0x8e2>
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	f1c0 001c 	rsb	r0, r0, #28
 800b970:	4403      	add	r3, r0
 800b972:	4480      	add	r8, r0
 800b974:	4406      	add	r6, r0
 800b976:	9308      	str	r3, [sp, #32]
 800b978:	f1b8 0f00 	cmp.w	r8, #0
 800b97c:	dd05      	ble.n	800b98a <_dtoa_r+0x82a>
 800b97e:	4649      	mov	r1, r9
 800b980:	4642      	mov	r2, r8
 800b982:	4658      	mov	r0, fp
 800b984:	f000 fc08 	bl	800c198 <__lshift>
 800b988:	4681      	mov	r9, r0
 800b98a:	9b08      	ldr	r3, [sp, #32]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	dd05      	ble.n	800b99c <_dtoa_r+0x83c>
 800b990:	4621      	mov	r1, r4
 800b992:	461a      	mov	r2, r3
 800b994:	4658      	mov	r0, fp
 800b996:	f000 fbff 	bl	800c198 <__lshift>
 800b99a:	4604      	mov	r4, r0
 800b99c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d059      	beq.n	800ba56 <_dtoa_r+0x8f6>
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4648      	mov	r0, r9
 800b9a6:	f000 fc63 	bl	800c270 <__mcmp>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	da53      	bge.n	800ba56 <_dtoa_r+0x8f6>
 800b9ae:	1e7b      	subs	r3, r7, #1
 800b9b0:	9304      	str	r3, [sp, #16]
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	220a      	movs	r2, #10
 800b9b8:	4658      	mov	r0, fp
 800b9ba:	f000 fa41 	bl	800be40 <__multadd>
 800b9be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9c0:	4681      	mov	r9, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 8172 	beq.w	800bcac <_dtoa_r+0xb4c>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	220a      	movs	r2, #10
 800b9ce:	4658      	mov	r0, fp
 800b9d0:	f000 fa36 	bl	800be40 <__multadd>
 800b9d4:	9b00      	ldr	r3, [sp, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	4605      	mov	r5, r0
 800b9da:	dc67      	bgt.n	800baac <_dtoa_r+0x94c>
 800b9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	dc41      	bgt.n	800ba66 <_dtoa_r+0x906>
 800b9e2:	e063      	b.n	800baac <_dtoa_r+0x94c>
 800b9e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b9ea:	e746      	b.n	800b87a <_dtoa_r+0x71a>
 800b9ec:	9b07      	ldr	r3, [sp, #28]
 800b9ee:	1e5c      	subs	r4, r3, #1
 800b9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9f2:	42a3      	cmp	r3, r4
 800b9f4:	bfbf      	itttt	lt
 800b9f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b9f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b9fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b9fc:	1ae3      	sublt	r3, r4, r3
 800b9fe:	bfb4      	ite	lt
 800ba00:	18d2      	addlt	r2, r2, r3
 800ba02:	1b1c      	subge	r4, r3, r4
 800ba04:	9b07      	ldr	r3, [sp, #28]
 800ba06:	bfbc      	itt	lt
 800ba08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba0a:	2400      	movlt	r4, #0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bfb5      	itete	lt
 800ba10:	eba8 0603 	sublt.w	r6, r8, r3
 800ba14:	9b07      	ldrge	r3, [sp, #28]
 800ba16:	2300      	movlt	r3, #0
 800ba18:	4646      	movge	r6, r8
 800ba1a:	e730      	b.n	800b87e <_dtoa_r+0x71e>
 800ba1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba20:	4646      	mov	r6, r8
 800ba22:	e735      	b.n	800b890 <_dtoa_r+0x730>
 800ba24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba26:	e75c      	b.n	800b8e2 <_dtoa_r+0x782>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e788      	b.n	800b93e <_dtoa_r+0x7de>
 800ba2c:	3fe00000 	.word	0x3fe00000
 800ba30:	40240000 	.word	0x40240000
 800ba34:	40140000 	.word	0x40140000
 800ba38:	9b02      	ldr	r3, [sp, #8]
 800ba3a:	e780      	b.n	800b93e <_dtoa_r+0x7de>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba40:	e782      	b.n	800b948 <_dtoa_r+0x7e8>
 800ba42:	d099      	beq.n	800b978 <_dtoa_r+0x818>
 800ba44:	9a08      	ldr	r2, [sp, #32]
 800ba46:	331c      	adds	r3, #28
 800ba48:	441a      	add	r2, r3
 800ba4a:	4498      	add	r8, r3
 800ba4c:	441e      	add	r6, r3
 800ba4e:	9208      	str	r2, [sp, #32]
 800ba50:	e792      	b.n	800b978 <_dtoa_r+0x818>
 800ba52:	4603      	mov	r3, r0
 800ba54:	e7f6      	b.n	800ba44 <_dtoa_r+0x8e4>
 800ba56:	9b07      	ldr	r3, [sp, #28]
 800ba58:	9704      	str	r7, [sp, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	dc20      	bgt.n	800baa0 <_dtoa_r+0x940>
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	dd1e      	ble.n	800baa4 <_dtoa_r+0x944>
 800ba66:	9b00      	ldr	r3, [sp, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f47f aec0 	bne.w	800b7ee <_dtoa_r+0x68e>
 800ba6e:	4621      	mov	r1, r4
 800ba70:	2205      	movs	r2, #5
 800ba72:	4658      	mov	r0, fp
 800ba74:	f000 f9e4 	bl	800be40 <__multadd>
 800ba78:	4601      	mov	r1, r0
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4648      	mov	r0, r9
 800ba7e:	f000 fbf7 	bl	800c270 <__mcmp>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f77f aeb3 	ble.w	800b7ee <_dtoa_r+0x68e>
 800ba88:	4656      	mov	r6, sl
 800ba8a:	2331      	movs	r3, #49	@ 0x31
 800ba8c:	f806 3b01 	strb.w	r3, [r6], #1
 800ba90:	9b04      	ldr	r3, [sp, #16]
 800ba92:	3301      	adds	r3, #1
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	e6ae      	b.n	800b7f6 <_dtoa_r+0x696>
 800ba98:	9c07      	ldr	r4, [sp, #28]
 800ba9a:	9704      	str	r7, [sp, #16]
 800ba9c:	4625      	mov	r5, r4
 800ba9e:	e7f3      	b.n	800ba88 <_dtoa_r+0x928>
 800baa0:	9b07      	ldr	r3, [sp, #28]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 8104 	beq.w	800bcb4 <_dtoa_r+0xb54>
 800baac:	2e00      	cmp	r6, #0
 800baae:	dd05      	ble.n	800babc <_dtoa_r+0x95c>
 800bab0:	4629      	mov	r1, r5
 800bab2:	4632      	mov	r2, r6
 800bab4:	4658      	mov	r0, fp
 800bab6:	f000 fb6f 	bl	800c198 <__lshift>
 800baba:	4605      	mov	r5, r0
 800babc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d05a      	beq.n	800bb78 <_dtoa_r+0xa18>
 800bac2:	6869      	ldr	r1, [r5, #4]
 800bac4:	4658      	mov	r0, fp
 800bac6:	f000 f959 	bl	800bd7c <_Balloc>
 800baca:	4606      	mov	r6, r0
 800bacc:	b928      	cbnz	r0, 800bada <_dtoa_r+0x97a>
 800bace:	4b84      	ldr	r3, [pc, #528]	@ (800bce0 <_dtoa_r+0xb80>)
 800bad0:	4602      	mov	r2, r0
 800bad2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bad6:	f7ff bb5a 	b.w	800b18e <_dtoa_r+0x2e>
 800bada:	692a      	ldr	r2, [r5, #16]
 800badc:	3202      	adds	r2, #2
 800bade:	0092      	lsls	r2, r2, #2
 800bae0:	f105 010c 	add.w	r1, r5, #12
 800bae4:	300c      	adds	r0, #12
 800bae6:	f7ff faa2 	bl	800b02e <memcpy>
 800baea:	2201      	movs	r2, #1
 800baec:	4631      	mov	r1, r6
 800baee:	4658      	mov	r0, fp
 800baf0:	f000 fb52 	bl	800c198 <__lshift>
 800baf4:	f10a 0301 	add.w	r3, sl, #1
 800baf8:	9307      	str	r3, [sp, #28]
 800bafa:	9b00      	ldr	r3, [sp, #0]
 800bafc:	4453      	add	r3, sl
 800bafe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	f003 0301 	and.w	r3, r3, #1
 800bb06:	462f      	mov	r7, r5
 800bb08:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	9b07      	ldr	r3, [sp, #28]
 800bb0e:	4621      	mov	r1, r4
 800bb10:	3b01      	subs	r3, #1
 800bb12:	4648      	mov	r0, r9
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	f7ff fa98 	bl	800b04a <quorem>
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	9002      	str	r0, [sp, #8]
 800bb1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb22:	4648      	mov	r0, r9
 800bb24:	f000 fba4 	bl	800c270 <__mcmp>
 800bb28:	462a      	mov	r2, r5
 800bb2a:	9008      	str	r0, [sp, #32]
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	4658      	mov	r0, fp
 800bb30:	f000 fbba 	bl	800c2a8 <__mdiff>
 800bb34:	68c2      	ldr	r2, [r0, #12]
 800bb36:	4606      	mov	r6, r0
 800bb38:	bb02      	cbnz	r2, 800bb7c <_dtoa_r+0xa1c>
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	4648      	mov	r0, r9
 800bb3e:	f000 fb97 	bl	800c270 <__mcmp>
 800bb42:	4602      	mov	r2, r0
 800bb44:	4631      	mov	r1, r6
 800bb46:	4658      	mov	r0, fp
 800bb48:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb4a:	f000 f957 	bl	800bdfc <_Bfree>
 800bb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb52:	9e07      	ldr	r6, [sp, #28]
 800bb54:	ea43 0102 	orr.w	r1, r3, r2
 800bb58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb5a:	4319      	orrs	r1, r3
 800bb5c:	d110      	bne.n	800bb80 <_dtoa_r+0xa20>
 800bb5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb62:	d029      	beq.n	800bbb8 <_dtoa_r+0xa58>
 800bb64:	9b08      	ldr	r3, [sp, #32]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	dd02      	ble.n	800bb70 <_dtoa_r+0xa10>
 800bb6a:	9b02      	ldr	r3, [sp, #8]
 800bb6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bb70:	9b00      	ldr	r3, [sp, #0]
 800bb72:	f883 8000 	strb.w	r8, [r3]
 800bb76:	e63f      	b.n	800b7f8 <_dtoa_r+0x698>
 800bb78:	4628      	mov	r0, r5
 800bb7a:	e7bb      	b.n	800baf4 <_dtoa_r+0x994>
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	e7e1      	b.n	800bb44 <_dtoa_r+0x9e4>
 800bb80:	9b08      	ldr	r3, [sp, #32]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	db04      	blt.n	800bb90 <_dtoa_r+0xa30>
 800bb86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb88:	430b      	orrs	r3, r1
 800bb8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	d120      	bne.n	800bbd2 <_dtoa_r+0xa72>
 800bb90:	2a00      	cmp	r2, #0
 800bb92:	dded      	ble.n	800bb70 <_dtoa_r+0xa10>
 800bb94:	4649      	mov	r1, r9
 800bb96:	2201      	movs	r2, #1
 800bb98:	4658      	mov	r0, fp
 800bb9a:	f000 fafd 	bl	800c198 <__lshift>
 800bb9e:	4621      	mov	r1, r4
 800bba0:	4681      	mov	r9, r0
 800bba2:	f000 fb65 	bl	800c270 <__mcmp>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	dc03      	bgt.n	800bbb2 <_dtoa_r+0xa52>
 800bbaa:	d1e1      	bne.n	800bb70 <_dtoa_r+0xa10>
 800bbac:	f018 0f01 	tst.w	r8, #1
 800bbb0:	d0de      	beq.n	800bb70 <_dtoa_r+0xa10>
 800bbb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbb6:	d1d8      	bne.n	800bb6a <_dtoa_r+0xa0a>
 800bbb8:	9a00      	ldr	r2, [sp, #0]
 800bbba:	2339      	movs	r3, #57	@ 0x39
 800bbbc:	7013      	strb	r3, [r2, #0]
 800bbbe:	4633      	mov	r3, r6
 800bbc0:	461e      	mov	r6, r3
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bbc8:	2a39      	cmp	r2, #57	@ 0x39
 800bbca:	d052      	beq.n	800bc72 <_dtoa_r+0xb12>
 800bbcc:	3201      	adds	r2, #1
 800bbce:	701a      	strb	r2, [r3, #0]
 800bbd0:	e612      	b.n	800b7f8 <_dtoa_r+0x698>
 800bbd2:	2a00      	cmp	r2, #0
 800bbd4:	dd07      	ble.n	800bbe6 <_dtoa_r+0xa86>
 800bbd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbda:	d0ed      	beq.n	800bbb8 <_dtoa_r+0xa58>
 800bbdc:	9a00      	ldr	r2, [sp, #0]
 800bbde:	f108 0301 	add.w	r3, r8, #1
 800bbe2:	7013      	strb	r3, [r2, #0]
 800bbe4:	e608      	b.n	800b7f8 <_dtoa_r+0x698>
 800bbe6:	9b07      	ldr	r3, [sp, #28]
 800bbe8:	9a07      	ldr	r2, [sp, #28]
 800bbea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bbee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d028      	beq.n	800bc46 <_dtoa_r+0xae6>
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	220a      	movs	r2, #10
 800bbfa:	4658      	mov	r0, fp
 800bbfc:	f000 f920 	bl	800be40 <__multadd>
 800bc00:	42af      	cmp	r7, r5
 800bc02:	4681      	mov	r9, r0
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	f04f 020a 	mov.w	r2, #10
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	4658      	mov	r0, fp
 800bc10:	d107      	bne.n	800bc22 <_dtoa_r+0xac2>
 800bc12:	f000 f915 	bl	800be40 <__multadd>
 800bc16:	4607      	mov	r7, r0
 800bc18:	4605      	mov	r5, r0
 800bc1a:	9b07      	ldr	r3, [sp, #28]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	9307      	str	r3, [sp, #28]
 800bc20:	e774      	b.n	800bb0c <_dtoa_r+0x9ac>
 800bc22:	f000 f90d 	bl	800be40 <__multadd>
 800bc26:	4629      	mov	r1, r5
 800bc28:	4607      	mov	r7, r0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	220a      	movs	r2, #10
 800bc2e:	4658      	mov	r0, fp
 800bc30:	f000 f906 	bl	800be40 <__multadd>
 800bc34:	4605      	mov	r5, r0
 800bc36:	e7f0      	b.n	800bc1a <_dtoa_r+0xaba>
 800bc38:	9b00      	ldr	r3, [sp, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bfcc      	ite	gt
 800bc3e:	461e      	movgt	r6, r3
 800bc40:	2601      	movle	r6, #1
 800bc42:	4456      	add	r6, sl
 800bc44:	2700      	movs	r7, #0
 800bc46:	4649      	mov	r1, r9
 800bc48:	2201      	movs	r2, #1
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f000 faa4 	bl	800c198 <__lshift>
 800bc50:	4621      	mov	r1, r4
 800bc52:	4681      	mov	r9, r0
 800bc54:	f000 fb0c 	bl	800c270 <__mcmp>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	dcb0      	bgt.n	800bbbe <_dtoa_r+0xa5e>
 800bc5c:	d102      	bne.n	800bc64 <_dtoa_r+0xb04>
 800bc5e:	f018 0f01 	tst.w	r8, #1
 800bc62:	d1ac      	bne.n	800bbbe <_dtoa_r+0xa5e>
 800bc64:	4633      	mov	r3, r6
 800bc66:	461e      	mov	r6, r3
 800bc68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc6c:	2a30      	cmp	r2, #48	@ 0x30
 800bc6e:	d0fa      	beq.n	800bc66 <_dtoa_r+0xb06>
 800bc70:	e5c2      	b.n	800b7f8 <_dtoa_r+0x698>
 800bc72:	459a      	cmp	sl, r3
 800bc74:	d1a4      	bne.n	800bbc0 <_dtoa_r+0xa60>
 800bc76:	9b04      	ldr	r3, [sp, #16]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	2331      	movs	r3, #49	@ 0x31
 800bc7e:	f88a 3000 	strb.w	r3, [sl]
 800bc82:	e5b9      	b.n	800b7f8 <_dtoa_r+0x698>
 800bc84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bce4 <_dtoa_r+0xb84>
 800bc8a:	b11b      	cbz	r3, 800bc94 <_dtoa_r+0xb34>
 800bc8c:	f10a 0308 	add.w	r3, sl, #8
 800bc90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	4650      	mov	r0, sl
 800bc96:	b019      	add	sp, #100	@ 0x64
 800bc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	f77f ae37 	ble.w	800b912 <_dtoa_r+0x7b2>
 800bca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bca8:	2001      	movs	r0, #1
 800bcaa:	e655      	b.n	800b958 <_dtoa_r+0x7f8>
 800bcac:	9b00      	ldr	r3, [sp, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f77f aed6 	ble.w	800ba60 <_dtoa_r+0x900>
 800bcb4:	4656      	mov	r6, sl
 800bcb6:	4621      	mov	r1, r4
 800bcb8:	4648      	mov	r0, r9
 800bcba:	f7ff f9c6 	bl	800b04a <quorem>
 800bcbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcc2:	f806 8b01 	strb.w	r8, [r6], #1
 800bcc6:	9b00      	ldr	r3, [sp, #0]
 800bcc8:	eba6 020a 	sub.w	r2, r6, sl
 800bccc:	4293      	cmp	r3, r2
 800bcce:	ddb3      	ble.n	800bc38 <_dtoa_r+0xad8>
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	220a      	movs	r2, #10
 800bcd6:	4658      	mov	r0, fp
 800bcd8:	f000 f8b2 	bl	800be40 <__multadd>
 800bcdc:	4681      	mov	r9, r0
 800bcde:	e7ea      	b.n	800bcb6 <_dtoa_r+0xb56>
 800bce0:	0800de50 	.word	0x0800de50
 800bce4:	0800ddd4 	.word	0x0800ddd4

0800bce8 <_free_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4605      	mov	r5, r0
 800bcec:	2900      	cmp	r1, #0
 800bcee:	d041      	beq.n	800bd74 <_free_r+0x8c>
 800bcf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcf4:	1f0c      	subs	r4, r1, #4
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	bfb8      	it	lt
 800bcfa:	18e4      	addlt	r4, r4, r3
 800bcfc:	f7fe fa66 	bl	800a1cc <__malloc_lock>
 800bd00:	4a1d      	ldr	r2, [pc, #116]	@ (800bd78 <_free_r+0x90>)
 800bd02:	6813      	ldr	r3, [r2, #0]
 800bd04:	b933      	cbnz	r3, 800bd14 <_free_r+0x2c>
 800bd06:	6063      	str	r3, [r4, #4]
 800bd08:	6014      	str	r4, [r2, #0]
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd10:	f7fe ba62 	b.w	800a1d8 <__malloc_unlock>
 800bd14:	42a3      	cmp	r3, r4
 800bd16:	d908      	bls.n	800bd2a <_free_r+0x42>
 800bd18:	6820      	ldr	r0, [r4, #0]
 800bd1a:	1821      	adds	r1, r4, r0
 800bd1c:	428b      	cmp	r3, r1
 800bd1e:	bf01      	itttt	eq
 800bd20:	6819      	ldreq	r1, [r3, #0]
 800bd22:	685b      	ldreq	r3, [r3, #4]
 800bd24:	1809      	addeq	r1, r1, r0
 800bd26:	6021      	streq	r1, [r4, #0]
 800bd28:	e7ed      	b.n	800bd06 <_free_r+0x1e>
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	b10b      	cbz	r3, 800bd34 <_free_r+0x4c>
 800bd30:	42a3      	cmp	r3, r4
 800bd32:	d9fa      	bls.n	800bd2a <_free_r+0x42>
 800bd34:	6811      	ldr	r1, [r2, #0]
 800bd36:	1850      	adds	r0, r2, r1
 800bd38:	42a0      	cmp	r0, r4
 800bd3a:	d10b      	bne.n	800bd54 <_free_r+0x6c>
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	4401      	add	r1, r0
 800bd40:	1850      	adds	r0, r2, r1
 800bd42:	4283      	cmp	r3, r0
 800bd44:	6011      	str	r1, [r2, #0]
 800bd46:	d1e0      	bne.n	800bd0a <_free_r+0x22>
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	6053      	str	r3, [r2, #4]
 800bd4e:	4408      	add	r0, r1
 800bd50:	6010      	str	r0, [r2, #0]
 800bd52:	e7da      	b.n	800bd0a <_free_r+0x22>
 800bd54:	d902      	bls.n	800bd5c <_free_r+0x74>
 800bd56:	230c      	movs	r3, #12
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	e7d6      	b.n	800bd0a <_free_r+0x22>
 800bd5c:	6820      	ldr	r0, [r4, #0]
 800bd5e:	1821      	adds	r1, r4, r0
 800bd60:	428b      	cmp	r3, r1
 800bd62:	bf04      	itt	eq
 800bd64:	6819      	ldreq	r1, [r3, #0]
 800bd66:	685b      	ldreq	r3, [r3, #4]
 800bd68:	6063      	str	r3, [r4, #4]
 800bd6a:	bf04      	itt	eq
 800bd6c:	1809      	addeq	r1, r1, r0
 800bd6e:	6021      	streq	r1, [r4, #0]
 800bd70:	6054      	str	r4, [r2, #4]
 800bd72:	e7ca      	b.n	800bd0a <_free_r+0x22>
 800bd74:	bd38      	pop	{r3, r4, r5, pc}
 800bd76:	bf00      	nop
 800bd78:	200050a8 	.word	0x200050a8

0800bd7c <_Balloc>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	69c6      	ldr	r6, [r0, #28]
 800bd80:	4604      	mov	r4, r0
 800bd82:	460d      	mov	r5, r1
 800bd84:	b976      	cbnz	r6, 800bda4 <_Balloc+0x28>
 800bd86:	2010      	movs	r0, #16
 800bd88:	f7fe f96e 	bl	800a068 <malloc>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	61e0      	str	r0, [r4, #28]
 800bd90:	b920      	cbnz	r0, 800bd9c <_Balloc+0x20>
 800bd92:	4b18      	ldr	r3, [pc, #96]	@ (800bdf4 <_Balloc+0x78>)
 800bd94:	4818      	ldr	r0, [pc, #96]	@ (800bdf8 <_Balloc+0x7c>)
 800bd96:	216b      	movs	r1, #107	@ 0x6b
 800bd98:	f000 ff56 	bl	800cc48 <__assert_func>
 800bd9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bda0:	6006      	str	r6, [r0, #0]
 800bda2:	60c6      	str	r6, [r0, #12]
 800bda4:	69e6      	ldr	r6, [r4, #28]
 800bda6:	68f3      	ldr	r3, [r6, #12]
 800bda8:	b183      	cbz	r3, 800bdcc <_Balloc+0x50>
 800bdaa:	69e3      	ldr	r3, [r4, #28]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdb2:	b9b8      	cbnz	r0, 800bde4 <_Balloc+0x68>
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	fa01 f605 	lsl.w	r6, r1, r5
 800bdba:	1d72      	adds	r2, r6, #5
 800bdbc:	0092      	lsls	r2, r2, #2
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 ff60 	bl	800cc84 <_calloc_r>
 800bdc4:	b160      	cbz	r0, 800bde0 <_Balloc+0x64>
 800bdc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdca:	e00e      	b.n	800bdea <_Balloc+0x6e>
 800bdcc:	2221      	movs	r2, #33	@ 0x21
 800bdce:	2104      	movs	r1, #4
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	f000 ff57 	bl	800cc84 <_calloc_r>
 800bdd6:	69e3      	ldr	r3, [r4, #28]
 800bdd8:	60f0      	str	r0, [r6, #12]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e4      	bne.n	800bdaa <_Balloc+0x2e>
 800bde0:	2000      	movs	r0, #0
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
 800bde4:	6802      	ldr	r2, [r0, #0]
 800bde6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bdea:	2300      	movs	r3, #0
 800bdec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdf0:	e7f7      	b.n	800bde2 <_Balloc+0x66>
 800bdf2:	bf00      	nop
 800bdf4:	0800dde1 	.word	0x0800dde1
 800bdf8:	0800de61 	.word	0x0800de61

0800bdfc <_Bfree>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	69c6      	ldr	r6, [r0, #28]
 800be00:	4605      	mov	r5, r0
 800be02:	460c      	mov	r4, r1
 800be04:	b976      	cbnz	r6, 800be24 <_Bfree+0x28>
 800be06:	2010      	movs	r0, #16
 800be08:	f7fe f92e 	bl	800a068 <malloc>
 800be0c:	4602      	mov	r2, r0
 800be0e:	61e8      	str	r0, [r5, #28]
 800be10:	b920      	cbnz	r0, 800be1c <_Bfree+0x20>
 800be12:	4b09      	ldr	r3, [pc, #36]	@ (800be38 <_Bfree+0x3c>)
 800be14:	4809      	ldr	r0, [pc, #36]	@ (800be3c <_Bfree+0x40>)
 800be16:	218f      	movs	r1, #143	@ 0x8f
 800be18:	f000 ff16 	bl	800cc48 <__assert_func>
 800be1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be20:	6006      	str	r6, [r0, #0]
 800be22:	60c6      	str	r6, [r0, #12]
 800be24:	b13c      	cbz	r4, 800be36 <_Bfree+0x3a>
 800be26:	69eb      	ldr	r3, [r5, #28]
 800be28:	6862      	ldr	r2, [r4, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be30:	6021      	str	r1, [r4, #0]
 800be32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be36:	bd70      	pop	{r4, r5, r6, pc}
 800be38:	0800dde1 	.word	0x0800dde1
 800be3c:	0800de61 	.word	0x0800de61

0800be40 <__multadd>:
 800be40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be44:	690d      	ldr	r5, [r1, #16]
 800be46:	4607      	mov	r7, r0
 800be48:	460c      	mov	r4, r1
 800be4a:	461e      	mov	r6, r3
 800be4c:	f101 0c14 	add.w	ip, r1, #20
 800be50:	2000      	movs	r0, #0
 800be52:	f8dc 3000 	ldr.w	r3, [ip]
 800be56:	b299      	uxth	r1, r3
 800be58:	fb02 6101 	mla	r1, r2, r1, r6
 800be5c:	0c1e      	lsrs	r6, r3, #16
 800be5e:	0c0b      	lsrs	r3, r1, #16
 800be60:	fb02 3306 	mla	r3, r2, r6, r3
 800be64:	b289      	uxth	r1, r1
 800be66:	3001      	adds	r0, #1
 800be68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be6c:	4285      	cmp	r5, r0
 800be6e:	f84c 1b04 	str.w	r1, [ip], #4
 800be72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be76:	dcec      	bgt.n	800be52 <__multadd+0x12>
 800be78:	b30e      	cbz	r6, 800bebe <__multadd+0x7e>
 800be7a:	68a3      	ldr	r3, [r4, #8]
 800be7c:	42ab      	cmp	r3, r5
 800be7e:	dc19      	bgt.n	800beb4 <__multadd+0x74>
 800be80:	6861      	ldr	r1, [r4, #4]
 800be82:	4638      	mov	r0, r7
 800be84:	3101      	adds	r1, #1
 800be86:	f7ff ff79 	bl	800bd7c <_Balloc>
 800be8a:	4680      	mov	r8, r0
 800be8c:	b928      	cbnz	r0, 800be9a <__multadd+0x5a>
 800be8e:	4602      	mov	r2, r0
 800be90:	4b0c      	ldr	r3, [pc, #48]	@ (800bec4 <__multadd+0x84>)
 800be92:	480d      	ldr	r0, [pc, #52]	@ (800bec8 <__multadd+0x88>)
 800be94:	21ba      	movs	r1, #186	@ 0xba
 800be96:	f000 fed7 	bl	800cc48 <__assert_func>
 800be9a:	6922      	ldr	r2, [r4, #16]
 800be9c:	3202      	adds	r2, #2
 800be9e:	f104 010c 	add.w	r1, r4, #12
 800bea2:	0092      	lsls	r2, r2, #2
 800bea4:	300c      	adds	r0, #12
 800bea6:	f7ff f8c2 	bl	800b02e <memcpy>
 800beaa:	4621      	mov	r1, r4
 800beac:	4638      	mov	r0, r7
 800beae:	f7ff ffa5 	bl	800bdfc <_Bfree>
 800beb2:	4644      	mov	r4, r8
 800beb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800beb8:	3501      	adds	r5, #1
 800beba:	615e      	str	r6, [r3, #20]
 800bebc:	6125      	str	r5, [r4, #16]
 800bebe:	4620      	mov	r0, r4
 800bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec4:	0800de50 	.word	0x0800de50
 800bec8:	0800de61 	.word	0x0800de61

0800becc <__hi0bits>:
 800becc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bed0:	4603      	mov	r3, r0
 800bed2:	bf36      	itet	cc
 800bed4:	0403      	lslcc	r3, r0, #16
 800bed6:	2000      	movcs	r0, #0
 800bed8:	2010      	movcc	r0, #16
 800beda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bede:	bf3c      	itt	cc
 800bee0:	021b      	lslcc	r3, r3, #8
 800bee2:	3008      	addcc	r0, #8
 800bee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bee8:	bf3c      	itt	cc
 800beea:	011b      	lslcc	r3, r3, #4
 800beec:	3004      	addcc	r0, #4
 800beee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bef2:	bf3c      	itt	cc
 800bef4:	009b      	lslcc	r3, r3, #2
 800bef6:	3002      	addcc	r0, #2
 800bef8:	2b00      	cmp	r3, #0
 800befa:	db05      	blt.n	800bf08 <__hi0bits+0x3c>
 800befc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bf00:	f100 0001 	add.w	r0, r0, #1
 800bf04:	bf08      	it	eq
 800bf06:	2020      	moveq	r0, #32
 800bf08:	4770      	bx	lr

0800bf0a <__lo0bits>:
 800bf0a:	6803      	ldr	r3, [r0, #0]
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	f013 0007 	ands.w	r0, r3, #7
 800bf12:	d00b      	beq.n	800bf2c <__lo0bits+0x22>
 800bf14:	07d9      	lsls	r1, r3, #31
 800bf16:	d421      	bmi.n	800bf5c <__lo0bits+0x52>
 800bf18:	0798      	lsls	r0, r3, #30
 800bf1a:	bf49      	itett	mi
 800bf1c:	085b      	lsrmi	r3, r3, #1
 800bf1e:	089b      	lsrpl	r3, r3, #2
 800bf20:	2001      	movmi	r0, #1
 800bf22:	6013      	strmi	r3, [r2, #0]
 800bf24:	bf5c      	itt	pl
 800bf26:	6013      	strpl	r3, [r2, #0]
 800bf28:	2002      	movpl	r0, #2
 800bf2a:	4770      	bx	lr
 800bf2c:	b299      	uxth	r1, r3
 800bf2e:	b909      	cbnz	r1, 800bf34 <__lo0bits+0x2a>
 800bf30:	0c1b      	lsrs	r3, r3, #16
 800bf32:	2010      	movs	r0, #16
 800bf34:	b2d9      	uxtb	r1, r3
 800bf36:	b909      	cbnz	r1, 800bf3c <__lo0bits+0x32>
 800bf38:	3008      	adds	r0, #8
 800bf3a:	0a1b      	lsrs	r3, r3, #8
 800bf3c:	0719      	lsls	r1, r3, #28
 800bf3e:	bf04      	itt	eq
 800bf40:	091b      	lsreq	r3, r3, #4
 800bf42:	3004      	addeq	r0, #4
 800bf44:	0799      	lsls	r1, r3, #30
 800bf46:	bf04      	itt	eq
 800bf48:	089b      	lsreq	r3, r3, #2
 800bf4a:	3002      	addeq	r0, #2
 800bf4c:	07d9      	lsls	r1, r3, #31
 800bf4e:	d403      	bmi.n	800bf58 <__lo0bits+0x4e>
 800bf50:	085b      	lsrs	r3, r3, #1
 800bf52:	f100 0001 	add.w	r0, r0, #1
 800bf56:	d003      	beq.n	800bf60 <__lo0bits+0x56>
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	4770      	bx	lr
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	4770      	bx	lr
 800bf60:	2020      	movs	r0, #32
 800bf62:	4770      	bx	lr

0800bf64 <__i2b>:
 800bf64:	b510      	push	{r4, lr}
 800bf66:	460c      	mov	r4, r1
 800bf68:	2101      	movs	r1, #1
 800bf6a:	f7ff ff07 	bl	800bd7c <_Balloc>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	b928      	cbnz	r0, 800bf7e <__i2b+0x1a>
 800bf72:	4b05      	ldr	r3, [pc, #20]	@ (800bf88 <__i2b+0x24>)
 800bf74:	4805      	ldr	r0, [pc, #20]	@ (800bf8c <__i2b+0x28>)
 800bf76:	f240 1145 	movw	r1, #325	@ 0x145
 800bf7a:	f000 fe65 	bl	800cc48 <__assert_func>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	6144      	str	r4, [r0, #20]
 800bf82:	6103      	str	r3, [r0, #16]
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	bf00      	nop
 800bf88:	0800de50 	.word	0x0800de50
 800bf8c:	0800de61 	.word	0x0800de61

0800bf90 <__multiply>:
 800bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	4614      	mov	r4, r2
 800bf96:	690a      	ldr	r2, [r1, #16]
 800bf98:	6923      	ldr	r3, [r4, #16]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	bfa8      	it	ge
 800bf9e:	4623      	movge	r3, r4
 800bfa0:	460f      	mov	r7, r1
 800bfa2:	bfa4      	itt	ge
 800bfa4:	460c      	movge	r4, r1
 800bfa6:	461f      	movge	r7, r3
 800bfa8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bfac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bfb0:	68a3      	ldr	r3, [r4, #8]
 800bfb2:	6861      	ldr	r1, [r4, #4]
 800bfb4:	eb0a 0609 	add.w	r6, sl, r9
 800bfb8:	42b3      	cmp	r3, r6
 800bfba:	b085      	sub	sp, #20
 800bfbc:	bfb8      	it	lt
 800bfbe:	3101      	addlt	r1, #1
 800bfc0:	f7ff fedc 	bl	800bd7c <_Balloc>
 800bfc4:	b930      	cbnz	r0, 800bfd4 <__multiply+0x44>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	4b44      	ldr	r3, [pc, #272]	@ (800c0dc <__multiply+0x14c>)
 800bfca:	4845      	ldr	r0, [pc, #276]	@ (800c0e0 <__multiply+0x150>)
 800bfcc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bfd0:	f000 fe3a 	bl	800cc48 <__assert_func>
 800bfd4:	f100 0514 	add.w	r5, r0, #20
 800bfd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bfdc:	462b      	mov	r3, r5
 800bfde:	2200      	movs	r2, #0
 800bfe0:	4543      	cmp	r3, r8
 800bfe2:	d321      	bcc.n	800c028 <__multiply+0x98>
 800bfe4:	f107 0114 	add.w	r1, r7, #20
 800bfe8:	f104 0214 	add.w	r2, r4, #20
 800bfec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bff0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bff4:	9302      	str	r3, [sp, #8]
 800bff6:	1b13      	subs	r3, r2, r4
 800bff8:	3b15      	subs	r3, #21
 800bffa:	f023 0303 	bic.w	r3, r3, #3
 800bffe:	3304      	adds	r3, #4
 800c000:	f104 0715 	add.w	r7, r4, #21
 800c004:	42ba      	cmp	r2, r7
 800c006:	bf38      	it	cc
 800c008:	2304      	movcc	r3, #4
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	9b02      	ldr	r3, [sp, #8]
 800c00e:	9103      	str	r1, [sp, #12]
 800c010:	428b      	cmp	r3, r1
 800c012:	d80c      	bhi.n	800c02e <__multiply+0x9e>
 800c014:	2e00      	cmp	r6, #0
 800c016:	dd03      	ble.n	800c020 <__multiply+0x90>
 800c018:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d05b      	beq.n	800c0d8 <__multiply+0x148>
 800c020:	6106      	str	r6, [r0, #16]
 800c022:	b005      	add	sp, #20
 800c024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c028:	f843 2b04 	str.w	r2, [r3], #4
 800c02c:	e7d8      	b.n	800bfe0 <__multiply+0x50>
 800c02e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c032:	f1ba 0f00 	cmp.w	sl, #0
 800c036:	d024      	beq.n	800c082 <__multiply+0xf2>
 800c038:	f104 0e14 	add.w	lr, r4, #20
 800c03c:	46a9      	mov	r9, r5
 800c03e:	f04f 0c00 	mov.w	ip, #0
 800c042:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c046:	f8d9 3000 	ldr.w	r3, [r9]
 800c04a:	fa1f fb87 	uxth.w	fp, r7
 800c04e:	b29b      	uxth	r3, r3
 800c050:	fb0a 330b 	mla	r3, sl, fp, r3
 800c054:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c058:	f8d9 7000 	ldr.w	r7, [r9]
 800c05c:	4463      	add	r3, ip
 800c05e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c062:	fb0a c70b 	mla	r7, sl, fp, ip
 800c066:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c070:	4572      	cmp	r2, lr
 800c072:	f849 3b04 	str.w	r3, [r9], #4
 800c076:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c07a:	d8e2      	bhi.n	800c042 <__multiply+0xb2>
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	f845 c003 	str.w	ip, [r5, r3]
 800c082:	9b03      	ldr	r3, [sp, #12]
 800c084:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c088:	3104      	adds	r1, #4
 800c08a:	f1b9 0f00 	cmp.w	r9, #0
 800c08e:	d021      	beq.n	800c0d4 <__multiply+0x144>
 800c090:	682b      	ldr	r3, [r5, #0]
 800c092:	f104 0c14 	add.w	ip, r4, #20
 800c096:	46ae      	mov	lr, r5
 800c098:	f04f 0a00 	mov.w	sl, #0
 800c09c:	f8bc b000 	ldrh.w	fp, [ip]
 800c0a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c0a4:	fb09 770b 	mla	r7, r9, fp, r7
 800c0a8:	4457      	add	r7, sl
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c0b0:	f84e 3b04 	str.w	r3, [lr], #4
 800c0b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0bc:	f8be 3000 	ldrh.w	r3, [lr]
 800c0c0:	fb09 330a 	mla	r3, r9, sl, r3
 800c0c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c0c8:	4562      	cmp	r2, ip
 800c0ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0ce:	d8e5      	bhi.n	800c09c <__multiply+0x10c>
 800c0d0:	9f01      	ldr	r7, [sp, #4]
 800c0d2:	51eb      	str	r3, [r5, r7]
 800c0d4:	3504      	adds	r5, #4
 800c0d6:	e799      	b.n	800c00c <__multiply+0x7c>
 800c0d8:	3e01      	subs	r6, #1
 800c0da:	e79b      	b.n	800c014 <__multiply+0x84>
 800c0dc:	0800de50 	.word	0x0800de50
 800c0e0:	0800de61 	.word	0x0800de61

0800c0e4 <__pow5mult>:
 800c0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0e8:	4615      	mov	r5, r2
 800c0ea:	f012 0203 	ands.w	r2, r2, #3
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	460e      	mov	r6, r1
 800c0f2:	d007      	beq.n	800c104 <__pow5mult+0x20>
 800c0f4:	4c25      	ldr	r4, [pc, #148]	@ (800c18c <__pow5mult+0xa8>)
 800c0f6:	3a01      	subs	r2, #1
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0fe:	f7ff fe9f 	bl	800be40 <__multadd>
 800c102:	4606      	mov	r6, r0
 800c104:	10ad      	asrs	r5, r5, #2
 800c106:	d03d      	beq.n	800c184 <__pow5mult+0xa0>
 800c108:	69fc      	ldr	r4, [r7, #28]
 800c10a:	b97c      	cbnz	r4, 800c12c <__pow5mult+0x48>
 800c10c:	2010      	movs	r0, #16
 800c10e:	f7fd ffab 	bl	800a068 <malloc>
 800c112:	4602      	mov	r2, r0
 800c114:	61f8      	str	r0, [r7, #28]
 800c116:	b928      	cbnz	r0, 800c124 <__pow5mult+0x40>
 800c118:	4b1d      	ldr	r3, [pc, #116]	@ (800c190 <__pow5mult+0xac>)
 800c11a:	481e      	ldr	r0, [pc, #120]	@ (800c194 <__pow5mult+0xb0>)
 800c11c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c120:	f000 fd92 	bl	800cc48 <__assert_func>
 800c124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c128:	6004      	str	r4, [r0, #0]
 800c12a:	60c4      	str	r4, [r0, #12]
 800c12c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c134:	b94c      	cbnz	r4, 800c14a <__pow5mult+0x66>
 800c136:	f240 2171 	movw	r1, #625	@ 0x271
 800c13a:	4638      	mov	r0, r7
 800c13c:	f7ff ff12 	bl	800bf64 <__i2b>
 800c140:	2300      	movs	r3, #0
 800c142:	f8c8 0008 	str.w	r0, [r8, #8]
 800c146:	4604      	mov	r4, r0
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	f04f 0900 	mov.w	r9, #0
 800c14e:	07eb      	lsls	r3, r5, #31
 800c150:	d50a      	bpl.n	800c168 <__pow5mult+0x84>
 800c152:	4631      	mov	r1, r6
 800c154:	4622      	mov	r2, r4
 800c156:	4638      	mov	r0, r7
 800c158:	f7ff ff1a 	bl	800bf90 <__multiply>
 800c15c:	4631      	mov	r1, r6
 800c15e:	4680      	mov	r8, r0
 800c160:	4638      	mov	r0, r7
 800c162:	f7ff fe4b 	bl	800bdfc <_Bfree>
 800c166:	4646      	mov	r6, r8
 800c168:	106d      	asrs	r5, r5, #1
 800c16a:	d00b      	beq.n	800c184 <__pow5mult+0xa0>
 800c16c:	6820      	ldr	r0, [r4, #0]
 800c16e:	b938      	cbnz	r0, 800c180 <__pow5mult+0x9c>
 800c170:	4622      	mov	r2, r4
 800c172:	4621      	mov	r1, r4
 800c174:	4638      	mov	r0, r7
 800c176:	f7ff ff0b 	bl	800bf90 <__multiply>
 800c17a:	6020      	str	r0, [r4, #0]
 800c17c:	f8c0 9000 	str.w	r9, [r0]
 800c180:	4604      	mov	r4, r0
 800c182:	e7e4      	b.n	800c14e <__pow5mult+0x6a>
 800c184:	4630      	mov	r0, r6
 800c186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18a:	bf00      	nop
 800c18c:	0800debc 	.word	0x0800debc
 800c190:	0800dde1 	.word	0x0800dde1
 800c194:	0800de61 	.word	0x0800de61

0800c198 <__lshift>:
 800c198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c19c:	460c      	mov	r4, r1
 800c19e:	6849      	ldr	r1, [r1, #4]
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1a6:	68a3      	ldr	r3, [r4, #8]
 800c1a8:	4607      	mov	r7, r0
 800c1aa:	4691      	mov	r9, r2
 800c1ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1b0:	f108 0601 	add.w	r6, r8, #1
 800c1b4:	42b3      	cmp	r3, r6
 800c1b6:	db0b      	blt.n	800c1d0 <__lshift+0x38>
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	f7ff fddf 	bl	800bd7c <_Balloc>
 800c1be:	4605      	mov	r5, r0
 800c1c0:	b948      	cbnz	r0, 800c1d6 <__lshift+0x3e>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	4b28      	ldr	r3, [pc, #160]	@ (800c268 <__lshift+0xd0>)
 800c1c6:	4829      	ldr	r0, [pc, #164]	@ (800c26c <__lshift+0xd4>)
 800c1c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c1cc:	f000 fd3c 	bl	800cc48 <__assert_func>
 800c1d0:	3101      	adds	r1, #1
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	e7ee      	b.n	800c1b4 <__lshift+0x1c>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f100 0114 	add.w	r1, r0, #20
 800c1dc:	f100 0210 	add.w	r2, r0, #16
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	4553      	cmp	r3, sl
 800c1e4:	db33      	blt.n	800c24e <__lshift+0xb6>
 800c1e6:	6920      	ldr	r0, [r4, #16]
 800c1e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1ec:	f104 0314 	add.w	r3, r4, #20
 800c1f0:	f019 091f 	ands.w	r9, r9, #31
 800c1f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1fc:	d02b      	beq.n	800c256 <__lshift+0xbe>
 800c1fe:	f1c9 0e20 	rsb	lr, r9, #32
 800c202:	468a      	mov	sl, r1
 800c204:	2200      	movs	r2, #0
 800c206:	6818      	ldr	r0, [r3, #0]
 800c208:	fa00 f009 	lsl.w	r0, r0, r9
 800c20c:	4310      	orrs	r0, r2
 800c20e:	f84a 0b04 	str.w	r0, [sl], #4
 800c212:	f853 2b04 	ldr.w	r2, [r3], #4
 800c216:	459c      	cmp	ip, r3
 800c218:	fa22 f20e 	lsr.w	r2, r2, lr
 800c21c:	d8f3      	bhi.n	800c206 <__lshift+0x6e>
 800c21e:	ebac 0304 	sub.w	r3, ip, r4
 800c222:	3b15      	subs	r3, #21
 800c224:	f023 0303 	bic.w	r3, r3, #3
 800c228:	3304      	adds	r3, #4
 800c22a:	f104 0015 	add.w	r0, r4, #21
 800c22e:	4584      	cmp	ip, r0
 800c230:	bf38      	it	cc
 800c232:	2304      	movcc	r3, #4
 800c234:	50ca      	str	r2, [r1, r3]
 800c236:	b10a      	cbz	r2, 800c23c <__lshift+0xa4>
 800c238:	f108 0602 	add.w	r6, r8, #2
 800c23c:	3e01      	subs	r6, #1
 800c23e:	4638      	mov	r0, r7
 800c240:	612e      	str	r6, [r5, #16]
 800c242:	4621      	mov	r1, r4
 800c244:	f7ff fdda 	bl	800bdfc <_Bfree>
 800c248:	4628      	mov	r0, r5
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c252:	3301      	adds	r3, #1
 800c254:	e7c5      	b.n	800c1e2 <__lshift+0x4a>
 800c256:	3904      	subs	r1, #4
 800c258:	f853 2b04 	ldr.w	r2, [r3], #4
 800c25c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c260:	459c      	cmp	ip, r3
 800c262:	d8f9      	bhi.n	800c258 <__lshift+0xc0>
 800c264:	e7ea      	b.n	800c23c <__lshift+0xa4>
 800c266:	bf00      	nop
 800c268:	0800de50 	.word	0x0800de50
 800c26c:	0800de61 	.word	0x0800de61

0800c270 <__mcmp>:
 800c270:	690a      	ldr	r2, [r1, #16]
 800c272:	4603      	mov	r3, r0
 800c274:	6900      	ldr	r0, [r0, #16]
 800c276:	1a80      	subs	r0, r0, r2
 800c278:	b530      	push	{r4, r5, lr}
 800c27a:	d10e      	bne.n	800c29a <__mcmp+0x2a>
 800c27c:	3314      	adds	r3, #20
 800c27e:	3114      	adds	r1, #20
 800c280:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c284:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c288:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c28c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c290:	4295      	cmp	r5, r2
 800c292:	d003      	beq.n	800c29c <__mcmp+0x2c>
 800c294:	d205      	bcs.n	800c2a2 <__mcmp+0x32>
 800c296:	f04f 30ff 	mov.w	r0, #4294967295
 800c29a:	bd30      	pop	{r4, r5, pc}
 800c29c:	42a3      	cmp	r3, r4
 800c29e:	d3f3      	bcc.n	800c288 <__mcmp+0x18>
 800c2a0:	e7fb      	b.n	800c29a <__mcmp+0x2a>
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	e7f9      	b.n	800c29a <__mcmp+0x2a>
	...

0800c2a8 <__mdiff>:
 800c2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	4689      	mov	r9, r1
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	4648      	mov	r0, r9
 800c2b4:	4614      	mov	r4, r2
 800c2b6:	f7ff ffdb 	bl	800c270 <__mcmp>
 800c2ba:	1e05      	subs	r5, r0, #0
 800c2bc:	d112      	bne.n	800c2e4 <__mdiff+0x3c>
 800c2be:	4629      	mov	r1, r5
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f7ff fd5b 	bl	800bd7c <_Balloc>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	b928      	cbnz	r0, 800c2d6 <__mdiff+0x2e>
 800c2ca:	4b3f      	ldr	r3, [pc, #252]	@ (800c3c8 <__mdiff+0x120>)
 800c2cc:	f240 2137 	movw	r1, #567	@ 0x237
 800c2d0:	483e      	ldr	r0, [pc, #248]	@ (800c3cc <__mdiff+0x124>)
 800c2d2:	f000 fcb9 	bl	800cc48 <__assert_func>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2dc:	4610      	mov	r0, r2
 800c2de:	b003      	add	sp, #12
 800c2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e4:	bfbc      	itt	lt
 800c2e6:	464b      	movlt	r3, r9
 800c2e8:	46a1      	movlt	r9, r4
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c2f0:	bfba      	itte	lt
 800c2f2:	461c      	movlt	r4, r3
 800c2f4:	2501      	movlt	r5, #1
 800c2f6:	2500      	movge	r5, #0
 800c2f8:	f7ff fd40 	bl	800bd7c <_Balloc>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	b918      	cbnz	r0, 800c308 <__mdiff+0x60>
 800c300:	4b31      	ldr	r3, [pc, #196]	@ (800c3c8 <__mdiff+0x120>)
 800c302:	f240 2145 	movw	r1, #581	@ 0x245
 800c306:	e7e3      	b.n	800c2d0 <__mdiff+0x28>
 800c308:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c30c:	6926      	ldr	r6, [r4, #16]
 800c30e:	60c5      	str	r5, [r0, #12]
 800c310:	f109 0310 	add.w	r3, r9, #16
 800c314:	f109 0514 	add.w	r5, r9, #20
 800c318:	f104 0e14 	add.w	lr, r4, #20
 800c31c:	f100 0b14 	add.w	fp, r0, #20
 800c320:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c324:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c328:	9301      	str	r3, [sp, #4]
 800c32a:	46d9      	mov	r9, fp
 800c32c:	f04f 0c00 	mov.w	ip, #0
 800c330:	9b01      	ldr	r3, [sp, #4]
 800c332:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c336:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	fa1f f38a 	uxth.w	r3, sl
 800c340:	4619      	mov	r1, r3
 800c342:	b283      	uxth	r3, r0
 800c344:	1acb      	subs	r3, r1, r3
 800c346:	0c00      	lsrs	r0, r0, #16
 800c348:	4463      	add	r3, ip
 800c34a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c34e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c352:	b29b      	uxth	r3, r3
 800c354:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c358:	4576      	cmp	r6, lr
 800c35a:	f849 3b04 	str.w	r3, [r9], #4
 800c35e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c362:	d8e5      	bhi.n	800c330 <__mdiff+0x88>
 800c364:	1b33      	subs	r3, r6, r4
 800c366:	3b15      	subs	r3, #21
 800c368:	f023 0303 	bic.w	r3, r3, #3
 800c36c:	3415      	adds	r4, #21
 800c36e:	3304      	adds	r3, #4
 800c370:	42a6      	cmp	r6, r4
 800c372:	bf38      	it	cc
 800c374:	2304      	movcc	r3, #4
 800c376:	441d      	add	r5, r3
 800c378:	445b      	add	r3, fp
 800c37a:	461e      	mov	r6, r3
 800c37c:	462c      	mov	r4, r5
 800c37e:	4544      	cmp	r4, r8
 800c380:	d30e      	bcc.n	800c3a0 <__mdiff+0xf8>
 800c382:	f108 0103 	add.w	r1, r8, #3
 800c386:	1b49      	subs	r1, r1, r5
 800c388:	f021 0103 	bic.w	r1, r1, #3
 800c38c:	3d03      	subs	r5, #3
 800c38e:	45a8      	cmp	r8, r5
 800c390:	bf38      	it	cc
 800c392:	2100      	movcc	r1, #0
 800c394:	440b      	add	r3, r1
 800c396:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c39a:	b191      	cbz	r1, 800c3c2 <__mdiff+0x11a>
 800c39c:	6117      	str	r7, [r2, #16]
 800c39e:	e79d      	b.n	800c2dc <__mdiff+0x34>
 800c3a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c3a4:	46e6      	mov	lr, ip
 800c3a6:	0c08      	lsrs	r0, r1, #16
 800c3a8:	fa1c fc81 	uxtah	ip, ip, r1
 800c3ac:	4471      	add	r1, lr
 800c3ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c3b2:	b289      	uxth	r1, r1
 800c3b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c3b8:	f846 1b04 	str.w	r1, [r6], #4
 800c3bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c3c0:	e7dd      	b.n	800c37e <__mdiff+0xd6>
 800c3c2:	3f01      	subs	r7, #1
 800c3c4:	e7e7      	b.n	800c396 <__mdiff+0xee>
 800c3c6:	bf00      	nop
 800c3c8:	0800de50 	.word	0x0800de50
 800c3cc:	0800de61 	.word	0x0800de61

0800c3d0 <__d2b>:
 800c3d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	ec59 8b10 	vmov	r8, r9, d0
 800c3dc:	4616      	mov	r6, r2
 800c3de:	f7ff fccd 	bl	800bd7c <_Balloc>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	b930      	cbnz	r0, 800c3f4 <__d2b+0x24>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	4b23      	ldr	r3, [pc, #140]	@ (800c478 <__d2b+0xa8>)
 800c3ea:	4824      	ldr	r0, [pc, #144]	@ (800c47c <__d2b+0xac>)
 800c3ec:	f240 310f 	movw	r1, #783	@ 0x30f
 800c3f0:	f000 fc2a 	bl	800cc48 <__assert_func>
 800c3f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3fc:	b10d      	cbz	r5, 800c402 <__d2b+0x32>
 800c3fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	f1b8 0300 	subs.w	r3, r8, #0
 800c408:	d023      	beq.n	800c452 <__d2b+0x82>
 800c40a:	4668      	mov	r0, sp
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	f7ff fd7c 	bl	800bf0a <__lo0bits>
 800c412:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c416:	b1d0      	cbz	r0, 800c44e <__d2b+0x7e>
 800c418:	f1c0 0320 	rsb	r3, r0, #32
 800c41c:	fa02 f303 	lsl.w	r3, r2, r3
 800c420:	430b      	orrs	r3, r1
 800c422:	40c2      	lsrs	r2, r0
 800c424:	6163      	str	r3, [r4, #20]
 800c426:	9201      	str	r2, [sp, #4]
 800c428:	9b01      	ldr	r3, [sp, #4]
 800c42a:	61a3      	str	r3, [r4, #24]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	bf0c      	ite	eq
 800c430:	2201      	moveq	r2, #1
 800c432:	2202      	movne	r2, #2
 800c434:	6122      	str	r2, [r4, #16]
 800c436:	b1a5      	cbz	r5, 800c462 <__d2b+0x92>
 800c438:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c43c:	4405      	add	r5, r0
 800c43e:	603d      	str	r5, [r7, #0]
 800c440:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c444:	6030      	str	r0, [r6, #0]
 800c446:	4620      	mov	r0, r4
 800c448:	b003      	add	sp, #12
 800c44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44e:	6161      	str	r1, [r4, #20]
 800c450:	e7ea      	b.n	800c428 <__d2b+0x58>
 800c452:	a801      	add	r0, sp, #4
 800c454:	f7ff fd59 	bl	800bf0a <__lo0bits>
 800c458:	9b01      	ldr	r3, [sp, #4]
 800c45a:	6163      	str	r3, [r4, #20]
 800c45c:	3020      	adds	r0, #32
 800c45e:	2201      	movs	r2, #1
 800c460:	e7e8      	b.n	800c434 <__d2b+0x64>
 800c462:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c466:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c46a:	6038      	str	r0, [r7, #0]
 800c46c:	6918      	ldr	r0, [r3, #16]
 800c46e:	f7ff fd2d 	bl	800becc <__hi0bits>
 800c472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c476:	e7e5      	b.n	800c444 <__d2b+0x74>
 800c478:	0800de50 	.word	0x0800de50
 800c47c:	0800de61 	.word	0x0800de61

0800c480 <__ssputs_r>:
 800c480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c484:	688e      	ldr	r6, [r1, #8]
 800c486:	461f      	mov	r7, r3
 800c488:	42be      	cmp	r6, r7
 800c48a:	680b      	ldr	r3, [r1, #0]
 800c48c:	4682      	mov	sl, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	4690      	mov	r8, r2
 800c492:	d82d      	bhi.n	800c4f0 <__ssputs_r+0x70>
 800c494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c49c:	d026      	beq.n	800c4ec <__ssputs_r+0x6c>
 800c49e:	6965      	ldr	r5, [r4, #20]
 800c4a0:	6909      	ldr	r1, [r1, #16]
 800c4a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4a6:	eba3 0901 	sub.w	r9, r3, r1
 800c4aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4ae:	1c7b      	adds	r3, r7, #1
 800c4b0:	444b      	add	r3, r9
 800c4b2:	106d      	asrs	r5, r5, #1
 800c4b4:	429d      	cmp	r5, r3
 800c4b6:	bf38      	it	cc
 800c4b8:	461d      	movcc	r5, r3
 800c4ba:	0553      	lsls	r3, r2, #21
 800c4bc:	d527      	bpl.n	800c50e <__ssputs_r+0x8e>
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7fd fe04 	bl	800a0cc <_malloc_r>
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	b360      	cbz	r0, 800c522 <__ssputs_r+0xa2>
 800c4c8:	6921      	ldr	r1, [r4, #16]
 800c4ca:	464a      	mov	r2, r9
 800c4cc:	f7fe fdaf 	bl	800b02e <memcpy>
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c4d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	6126      	str	r6, [r4, #16]
 800c4de:	6165      	str	r5, [r4, #20]
 800c4e0:	444e      	add	r6, r9
 800c4e2:	eba5 0509 	sub.w	r5, r5, r9
 800c4e6:	6026      	str	r6, [r4, #0]
 800c4e8:	60a5      	str	r5, [r4, #8]
 800c4ea:	463e      	mov	r6, r7
 800c4ec:	42be      	cmp	r6, r7
 800c4ee:	d900      	bls.n	800c4f2 <__ssputs_r+0x72>
 800c4f0:	463e      	mov	r6, r7
 800c4f2:	6820      	ldr	r0, [r4, #0]
 800c4f4:	4632      	mov	r2, r6
 800c4f6:	4641      	mov	r1, r8
 800c4f8:	f000 fb6a 	bl	800cbd0 <memmove>
 800c4fc:	68a3      	ldr	r3, [r4, #8]
 800c4fe:	1b9b      	subs	r3, r3, r6
 800c500:	60a3      	str	r3, [r4, #8]
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	4433      	add	r3, r6
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	2000      	movs	r0, #0
 800c50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50e:	462a      	mov	r2, r5
 800c510:	f000 fbde 	bl	800ccd0 <_realloc_r>
 800c514:	4606      	mov	r6, r0
 800c516:	2800      	cmp	r0, #0
 800c518:	d1e0      	bne.n	800c4dc <__ssputs_r+0x5c>
 800c51a:	6921      	ldr	r1, [r4, #16]
 800c51c:	4650      	mov	r0, sl
 800c51e:	f7ff fbe3 	bl	800bce8 <_free_r>
 800c522:	230c      	movs	r3, #12
 800c524:	f8ca 3000 	str.w	r3, [sl]
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c52e:	81a3      	strh	r3, [r4, #12]
 800c530:	f04f 30ff 	mov.w	r0, #4294967295
 800c534:	e7e9      	b.n	800c50a <__ssputs_r+0x8a>
	...

0800c538 <_svfiprintf_r>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	4698      	mov	r8, r3
 800c53e:	898b      	ldrh	r3, [r1, #12]
 800c540:	061b      	lsls	r3, r3, #24
 800c542:	b09d      	sub	sp, #116	@ 0x74
 800c544:	4607      	mov	r7, r0
 800c546:	460d      	mov	r5, r1
 800c548:	4614      	mov	r4, r2
 800c54a:	d510      	bpl.n	800c56e <_svfiprintf_r+0x36>
 800c54c:	690b      	ldr	r3, [r1, #16]
 800c54e:	b973      	cbnz	r3, 800c56e <_svfiprintf_r+0x36>
 800c550:	2140      	movs	r1, #64	@ 0x40
 800c552:	f7fd fdbb 	bl	800a0cc <_malloc_r>
 800c556:	6028      	str	r0, [r5, #0]
 800c558:	6128      	str	r0, [r5, #16]
 800c55a:	b930      	cbnz	r0, 800c56a <_svfiprintf_r+0x32>
 800c55c:	230c      	movs	r3, #12
 800c55e:	603b      	str	r3, [r7, #0]
 800c560:	f04f 30ff 	mov.w	r0, #4294967295
 800c564:	b01d      	add	sp, #116	@ 0x74
 800c566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56a:	2340      	movs	r3, #64	@ 0x40
 800c56c:	616b      	str	r3, [r5, #20]
 800c56e:	2300      	movs	r3, #0
 800c570:	9309      	str	r3, [sp, #36]	@ 0x24
 800c572:	2320      	movs	r3, #32
 800c574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c578:	f8cd 800c 	str.w	r8, [sp, #12]
 800c57c:	2330      	movs	r3, #48	@ 0x30
 800c57e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c71c <_svfiprintf_r+0x1e4>
 800c582:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c586:	f04f 0901 	mov.w	r9, #1
 800c58a:	4623      	mov	r3, r4
 800c58c:	469a      	mov	sl, r3
 800c58e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c592:	b10a      	cbz	r2, 800c598 <_svfiprintf_r+0x60>
 800c594:	2a25      	cmp	r2, #37	@ 0x25
 800c596:	d1f9      	bne.n	800c58c <_svfiprintf_r+0x54>
 800c598:	ebba 0b04 	subs.w	fp, sl, r4
 800c59c:	d00b      	beq.n	800c5b6 <_svfiprintf_r+0x7e>
 800c59e:	465b      	mov	r3, fp
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7ff ff6b 	bl	800c480 <__ssputs_r>
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	f000 80a7 	beq.w	800c6fe <_svfiprintf_r+0x1c6>
 800c5b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5b2:	445a      	add	r2, fp
 800c5b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 809f 	beq.w	800c6fe <_svfiprintf_r+0x1c6>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ca:	f10a 0a01 	add.w	sl, sl, #1
 800c5ce:	9304      	str	r3, [sp, #16]
 800c5d0:	9307      	str	r3, [sp, #28]
 800c5d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5d8:	4654      	mov	r4, sl
 800c5da:	2205      	movs	r2, #5
 800c5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e0:	484e      	ldr	r0, [pc, #312]	@ (800c71c <_svfiprintf_r+0x1e4>)
 800c5e2:	f7f3 fdf5 	bl	80001d0 <memchr>
 800c5e6:	9a04      	ldr	r2, [sp, #16]
 800c5e8:	b9d8      	cbnz	r0, 800c622 <_svfiprintf_r+0xea>
 800c5ea:	06d0      	lsls	r0, r2, #27
 800c5ec:	bf44      	itt	mi
 800c5ee:	2320      	movmi	r3, #32
 800c5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5f4:	0711      	lsls	r1, r2, #28
 800c5f6:	bf44      	itt	mi
 800c5f8:	232b      	movmi	r3, #43	@ 0x2b
 800c5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c602:	2b2a      	cmp	r3, #42	@ 0x2a
 800c604:	d015      	beq.n	800c632 <_svfiprintf_r+0xfa>
 800c606:	9a07      	ldr	r2, [sp, #28]
 800c608:	4654      	mov	r4, sl
 800c60a:	2000      	movs	r0, #0
 800c60c:	f04f 0c0a 	mov.w	ip, #10
 800c610:	4621      	mov	r1, r4
 800c612:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c616:	3b30      	subs	r3, #48	@ 0x30
 800c618:	2b09      	cmp	r3, #9
 800c61a:	d94b      	bls.n	800c6b4 <_svfiprintf_r+0x17c>
 800c61c:	b1b0      	cbz	r0, 800c64c <_svfiprintf_r+0x114>
 800c61e:	9207      	str	r2, [sp, #28]
 800c620:	e014      	b.n	800c64c <_svfiprintf_r+0x114>
 800c622:	eba0 0308 	sub.w	r3, r0, r8
 800c626:	fa09 f303 	lsl.w	r3, r9, r3
 800c62a:	4313      	orrs	r3, r2
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	46a2      	mov	sl, r4
 800c630:	e7d2      	b.n	800c5d8 <_svfiprintf_r+0xa0>
 800c632:	9b03      	ldr	r3, [sp, #12]
 800c634:	1d19      	adds	r1, r3, #4
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	9103      	str	r1, [sp, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bfbb      	ittet	lt
 800c63e:	425b      	neglt	r3, r3
 800c640:	f042 0202 	orrlt.w	r2, r2, #2
 800c644:	9307      	strge	r3, [sp, #28]
 800c646:	9307      	strlt	r3, [sp, #28]
 800c648:	bfb8      	it	lt
 800c64a:	9204      	strlt	r2, [sp, #16]
 800c64c:	7823      	ldrb	r3, [r4, #0]
 800c64e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c650:	d10a      	bne.n	800c668 <_svfiprintf_r+0x130>
 800c652:	7863      	ldrb	r3, [r4, #1]
 800c654:	2b2a      	cmp	r3, #42	@ 0x2a
 800c656:	d132      	bne.n	800c6be <_svfiprintf_r+0x186>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	1d1a      	adds	r2, r3, #4
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	9203      	str	r2, [sp, #12]
 800c660:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c664:	3402      	adds	r4, #2
 800c666:	9305      	str	r3, [sp, #20]
 800c668:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c72c <_svfiprintf_r+0x1f4>
 800c66c:	7821      	ldrb	r1, [r4, #0]
 800c66e:	2203      	movs	r2, #3
 800c670:	4650      	mov	r0, sl
 800c672:	f7f3 fdad 	bl	80001d0 <memchr>
 800c676:	b138      	cbz	r0, 800c688 <_svfiprintf_r+0x150>
 800c678:	9b04      	ldr	r3, [sp, #16]
 800c67a:	eba0 000a 	sub.w	r0, r0, sl
 800c67e:	2240      	movs	r2, #64	@ 0x40
 800c680:	4082      	lsls	r2, r0
 800c682:	4313      	orrs	r3, r2
 800c684:	3401      	adds	r4, #1
 800c686:	9304      	str	r3, [sp, #16]
 800c688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c68c:	4824      	ldr	r0, [pc, #144]	@ (800c720 <_svfiprintf_r+0x1e8>)
 800c68e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c692:	2206      	movs	r2, #6
 800c694:	f7f3 fd9c 	bl	80001d0 <memchr>
 800c698:	2800      	cmp	r0, #0
 800c69a:	d036      	beq.n	800c70a <_svfiprintf_r+0x1d2>
 800c69c:	4b21      	ldr	r3, [pc, #132]	@ (800c724 <_svfiprintf_r+0x1ec>)
 800c69e:	bb1b      	cbnz	r3, 800c6e8 <_svfiprintf_r+0x1b0>
 800c6a0:	9b03      	ldr	r3, [sp, #12]
 800c6a2:	3307      	adds	r3, #7
 800c6a4:	f023 0307 	bic.w	r3, r3, #7
 800c6a8:	3308      	adds	r3, #8
 800c6aa:	9303      	str	r3, [sp, #12]
 800c6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ae:	4433      	add	r3, r6
 800c6b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6b2:	e76a      	b.n	800c58a <_svfiprintf_r+0x52>
 800c6b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	2001      	movs	r0, #1
 800c6bc:	e7a8      	b.n	800c610 <_svfiprintf_r+0xd8>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	3401      	adds	r4, #1
 800c6c2:	9305      	str	r3, [sp, #20]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	f04f 0c0a 	mov.w	ip, #10
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6d0:	3a30      	subs	r2, #48	@ 0x30
 800c6d2:	2a09      	cmp	r2, #9
 800c6d4:	d903      	bls.n	800c6de <_svfiprintf_r+0x1a6>
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0c6      	beq.n	800c668 <_svfiprintf_r+0x130>
 800c6da:	9105      	str	r1, [sp, #20]
 800c6dc:	e7c4      	b.n	800c668 <_svfiprintf_r+0x130>
 800c6de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e7f0      	b.n	800c6ca <_svfiprintf_r+0x192>
 800c6e8:	ab03      	add	r3, sp, #12
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	462a      	mov	r2, r5
 800c6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c728 <_svfiprintf_r+0x1f0>)
 800c6f0:	a904      	add	r1, sp, #16
 800c6f2:	4638      	mov	r0, r7
 800c6f4:	f7fd fe16 	bl	800a324 <_printf_float>
 800c6f8:	1c42      	adds	r2, r0, #1
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	d1d6      	bne.n	800c6ac <_svfiprintf_r+0x174>
 800c6fe:	89ab      	ldrh	r3, [r5, #12]
 800c700:	065b      	lsls	r3, r3, #25
 800c702:	f53f af2d 	bmi.w	800c560 <_svfiprintf_r+0x28>
 800c706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c708:	e72c      	b.n	800c564 <_svfiprintf_r+0x2c>
 800c70a:	ab03      	add	r3, sp, #12
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	462a      	mov	r2, r5
 800c710:	4b05      	ldr	r3, [pc, #20]	@ (800c728 <_svfiprintf_r+0x1f0>)
 800c712:	a904      	add	r1, sp, #16
 800c714:	4638      	mov	r0, r7
 800c716:	f7fe f89d 	bl	800a854 <_printf_i>
 800c71a:	e7ed      	b.n	800c6f8 <_svfiprintf_r+0x1c0>
 800c71c:	0800dfb8 	.word	0x0800dfb8
 800c720:	0800dfc2 	.word	0x0800dfc2
 800c724:	0800a325 	.word	0x0800a325
 800c728:	0800c481 	.word	0x0800c481
 800c72c:	0800dfbe 	.word	0x0800dfbe

0800c730 <__sfputc_r>:
 800c730:	6893      	ldr	r3, [r2, #8]
 800c732:	3b01      	subs	r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	b410      	push	{r4}
 800c738:	6093      	str	r3, [r2, #8]
 800c73a:	da08      	bge.n	800c74e <__sfputc_r+0x1e>
 800c73c:	6994      	ldr	r4, [r2, #24]
 800c73e:	42a3      	cmp	r3, r4
 800c740:	db01      	blt.n	800c746 <__sfputc_r+0x16>
 800c742:	290a      	cmp	r1, #10
 800c744:	d103      	bne.n	800c74e <__sfputc_r+0x1e>
 800c746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c74a:	f7fe bb4c 	b.w	800ade6 <__swbuf_r>
 800c74e:	6813      	ldr	r3, [r2, #0]
 800c750:	1c58      	adds	r0, r3, #1
 800c752:	6010      	str	r0, [r2, #0]
 800c754:	7019      	strb	r1, [r3, #0]
 800c756:	4608      	mov	r0, r1
 800c758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <__sfputs_r>:
 800c75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c760:	4606      	mov	r6, r0
 800c762:	460f      	mov	r7, r1
 800c764:	4614      	mov	r4, r2
 800c766:	18d5      	adds	r5, r2, r3
 800c768:	42ac      	cmp	r4, r5
 800c76a:	d101      	bne.n	800c770 <__sfputs_r+0x12>
 800c76c:	2000      	movs	r0, #0
 800c76e:	e007      	b.n	800c780 <__sfputs_r+0x22>
 800c770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c774:	463a      	mov	r2, r7
 800c776:	4630      	mov	r0, r6
 800c778:	f7ff ffda 	bl	800c730 <__sfputc_r>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d1f3      	bne.n	800c768 <__sfputs_r+0xa>
 800c780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c784 <_vfiprintf_r>:
 800c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c788:	460d      	mov	r5, r1
 800c78a:	b09d      	sub	sp, #116	@ 0x74
 800c78c:	4614      	mov	r4, r2
 800c78e:	4698      	mov	r8, r3
 800c790:	4606      	mov	r6, r0
 800c792:	b118      	cbz	r0, 800c79c <_vfiprintf_r+0x18>
 800c794:	6a03      	ldr	r3, [r0, #32]
 800c796:	b90b      	cbnz	r3, 800c79c <_vfiprintf_r+0x18>
 800c798:	f7fe fa08 	bl	800abac <__sinit>
 800c79c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c79e:	07d9      	lsls	r1, r3, #31
 800c7a0:	d405      	bmi.n	800c7ae <_vfiprintf_r+0x2a>
 800c7a2:	89ab      	ldrh	r3, [r5, #12]
 800c7a4:	059a      	lsls	r2, r3, #22
 800c7a6:	d402      	bmi.n	800c7ae <_vfiprintf_r+0x2a>
 800c7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7aa:	f7fe fc3e 	bl	800b02a <__retarget_lock_acquire_recursive>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	071b      	lsls	r3, r3, #28
 800c7b2:	d501      	bpl.n	800c7b8 <_vfiprintf_r+0x34>
 800c7b4:	692b      	ldr	r3, [r5, #16]
 800c7b6:	b99b      	cbnz	r3, 800c7e0 <_vfiprintf_r+0x5c>
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f7fe fb52 	bl	800ae64 <__swsetup_r>
 800c7c0:	b170      	cbz	r0, 800c7e0 <_vfiprintf_r+0x5c>
 800c7c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7c4:	07dc      	lsls	r4, r3, #31
 800c7c6:	d504      	bpl.n	800c7d2 <_vfiprintf_r+0x4e>
 800c7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7cc:	b01d      	add	sp, #116	@ 0x74
 800c7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d2:	89ab      	ldrh	r3, [r5, #12]
 800c7d4:	0598      	lsls	r0, r3, #22
 800c7d6:	d4f7      	bmi.n	800c7c8 <_vfiprintf_r+0x44>
 800c7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7da:	f7fe fc27 	bl	800b02c <__retarget_lock_release_recursive>
 800c7de:	e7f3      	b.n	800c7c8 <_vfiprintf_r+0x44>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7e4:	2320      	movs	r3, #32
 800c7e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ee:	2330      	movs	r3, #48	@ 0x30
 800c7f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c9a0 <_vfiprintf_r+0x21c>
 800c7f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7f8:	f04f 0901 	mov.w	r9, #1
 800c7fc:	4623      	mov	r3, r4
 800c7fe:	469a      	mov	sl, r3
 800c800:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c804:	b10a      	cbz	r2, 800c80a <_vfiprintf_r+0x86>
 800c806:	2a25      	cmp	r2, #37	@ 0x25
 800c808:	d1f9      	bne.n	800c7fe <_vfiprintf_r+0x7a>
 800c80a:	ebba 0b04 	subs.w	fp, sl, r4
 800c80e:	d00b      	beq.n	800c828 <_vfiprintf_r+0xa4>
 800c810:	465b      	mov	r3, fp
 800c812:	4622      	mov	r2, r4
 800c814:	4629      	mov	r1, r5
 800c816:	4630      	mov	r0, r6
 800c818:	f7ff ffa1 	bl	800c75e <__sfputs_r>
 800c81c:	3001      	adds	r0, #1
 800c81e:	f000 80a7 	beq.w	800c970 <_vfiprintf_r+0x1ec>
 800c822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c824:	445a      	add	r2, fp
 800c826:	9209      	str	r2, [sp, #36]	@ 0x24
 800c828:	f89a 3000 	ldrb.w	r3, [sl]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 809f 	beq.w	800c970 <_vfiprintf_r+0x1ec>
 800c832:	2300      	movs	r3, #0
 800c834:	f04f 32ff 	mov.w	r2, #4294967295
 800c838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c83c:	f10a 0a01 	add.w	sl, sl, #1
 800c840:	9304      	str	r3, [sp, #16]
 800c842:	9307      	str	r3, [sp, #28]
 800c844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c848:	931a      	str	r3, [sp, #104]	@ 0x68
 800c84a:	4654      	mov	r4, sl
 800c84c:	2205      	movs	r2, #5
 800c84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c852:	4853      	ldr	r0, [pc, #332]	@ (800c9a0 <_vfiprintf_r+0x21c>)
 800c854:	f7f3 fcbc 	bl	80001d0 <memchr>
 800c858:	9a04      	ldr	r2, [sp, #16]
 800c85a:	b9d8      	cbnz	r0, 800c894 <_vfiprintf_r+0x110>
 800c85c:	06d1      	lsls	r1, r2, #27
 800c85e:	bf44      	itt	mi
 800c860:	2320      	movmi	r3, #32
 800c862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c866:	0713      	lsls	r3, r2, #28
 800c868:	bf44      	itt	mi
 800c86a:	232b      	movmi	r3, #43	@ 0x2b
 800c86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c870:	f89a 3000 	ldrb.w	r3, [sl]
 800c874:	2b2a      	cmp	r3, #42	@ 0x2a
 800c876:	d015      	beq.n	800c8a4 <_vfiprintf_r+0x120>
 800c878:	9a07      	ldr	r2, [sp, #28]
 800c87a:	4654      	mov	r4, sl
 800c87c:	2000      	movs	r0, #0
 800c87e:	f04f 0c0a 	mov.w	ip, #10
 800c882:	4621      	mov	r1, r4
 800c884:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c888:	3b30      	subs	r3, #48	@ 0x30
 800c88a:	2b09      	cmp	r3, #9
 800c88c:	d94b      	bls.n	800c926 <_vfiprintf_r+0x1a2>
 800c88e:	b1b0      	cbz	r0, 800c8be <_vfiprintf_r+0x13a>
 800c890:	9207      	str	r2, [sp, #28]
 800c892:	e014      	b.n	800c8be <_vfiprintf_r+0x13a>
 800c894:	eba0 0308 	sub.w	r3, r0, r8
 800c898:	fa09 f303 	lsl.w	r3, r9, r3
 800c89c:	4313      	orrs	r3, r2
 800c89e:	9304      	str	r3, [sp, #16]
 800c8a0:	46a2      	mov	sl, r4
 800c8a2:	e7d2      	b.n	800c84a <_vfiprintf_r+0xc6>
 800c8a4:	9b03      	ldr	r3, [sp, #12]
 800c8a6:	1d19      	adds	r1, r3, #4
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	9103      	str	r1, [sp, #12]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	bfbb      	ittet	lt
 800c8b0:	425b      	neglt	r3, r3
 800c8b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c8b6:	9307      	strge	r3, [sp, #28]
 800c8b8:	9307      	strlt	r3, [sp, #28]
 800c8ba:	bfb8      	it	lt
 800c8bc:	9204      	strlt	r2, [sp, #16]
 800c8be:	7823      	ldrb	r3, [r4, #0]
 800c8c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8c2:	d10a      	bne.n	800c8da <_vfiprintf_r+0x156>
 800c8c4:	7863      	ldrb	r3, [r4, #1]
 800c8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8c8:	d132      	bne.n	800c930 <_vfiprintf_r+0x1ac>
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	1d1a      	adds	r2, r3, #4
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	9203      	str	r2, [sp, #12]
 800c8d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8d6:	3402      	adds	r4, #2
 800c8d8:	9305      	str	r3, [sp, #20]
 800c8da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c9b0 <_vfiprintf_r+0x22c>
 800c8de:	7821      	ldrb	r1, [r4, #0]
 800c8e0:	2203      	movs	r2, #3
 800c8e2:	4650      	mov	r0, sl
 800c8e4:	f7f3 fc74 	bl	80001d0 <memchr>
 800c8e8:	b138      	cbz	r0, 800c8fa <_vfiprintf_r+0x176>
 800c8ea:	9b04      	ldr	r3, [sp, #16]
 800c8ec:	eba0 000a 	sub.w	r0, r0, sl
 800c8f0:	2240      	movs	r2, #64	@ 0x40
 800c8f2:	4082      	lsls	r2, r0
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	3401      	adds	r4, #1
 800c8f8:	9304      	str	r3, [sp, #16]
 800c8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8fe:	4829      	ldr	r0, [pc, #164]	@ (800c9a4 <_vfiprintf_r+0x220>)
 800c900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c904:	2206      	movs	r2, #6
 800c906:	f7f3 fc63 	bl	80001d0 <memchr>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d03f      	beq.n	800c98e <_vfiprintf_r+0x20a>
 800c90e:	4b26      	ldr	r3, [pc, #152]	@ (800c9a8 <_vfiprintf_r+0x224>)
 800c910:	bb1b      	cbnz	r3, 800c95a <_vfiprintf_r+0x1d6>
 800c912:	9b03      	ldr	r3, [sp, #12]
 800c914:	3307      	adds	r3, #7
 800c916:	f023 0307 	bic.w	r3, r3, #7
 800c91a:	3308      	adds	r3, #8
 800c91c:	9303      	str	r3, [sp, #12]
 800c91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c920:	443b      	add	r3, r7
 800c922:	9309      	str	r3, [sp, #36]	@ 0x24
 800c924:	e76a      	b.n	800c7fc <_vfiprintf_r+0x78>
 800c926:	fb0c 3202 	mla	r2, ip, r2, r3
 800c92a:	460c      	mov	r4, r1
 800c92c:	2001      	movs	r0, #1
 800c92e:	e7a8      	b.n	800c882 <_vfiprintf_r+0xfe>
 800c930:	2300      	movs	r3, #0
 800c932:	3401      	adds	r4, #1
 800c934:	9305      	str	r3, [sp, #20]
 800c936:	4619      	mov	r1, r3
 800c938:	f04f 0c0a 	mov.w	ip, #10
 800c93c:	4620      	mov	r0, r4
 800c93e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c942:	3a30      	subs	r2, #48	@ 0x30
 800c944:	2a09      	cmp	r2, #9
 800c946:	d903      	bls.n	800c950 <_vfiprintf_r+0x1cc>
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0c6      	beq.n	800c8da <_vfiprintf_r+0x156>
 800c94c:	9105      	str	r1, [sp, #20]
 800c94e:	e7c4      	b.n	800c8da <_vfiprintf_r+0x156>
 800c950:	fb0c 2101 	mla	r1, ip, r1, r2
 800c954:	4604      	mov	r4, r0
 800c956:	2301      	movs	r3, #1
 800c958:	e7f0      	b.n	800c93c <_vfiprintf_r+0x1b8>
 800c95a:	ab03      	add	r3, sp, #12
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	462a      	mov	r2, r5
 800c960:	4b12      	ldr	r3, [pc, #72]	@ (800c9ac <_vfiprintf_r+0x228>)
 800c962:	a904      	add	r1, sp, #16
 800c964:	4630      	mov	r0, r6
 800c966:	f7fd fcdd 	bl	800a324 <_printf_float>
 800c96a:	4607      	mov	r7, r0
 800c96c:	1c78      	adds	r0, r7, #1
 800c96e:	d1d6      	bne.n	800c91e <_vfiprintf_r+0x19a>
 800c970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c972:	07d9      	lsls	r1, r3, #31
 800c974:	d405      	bmi.n	800c982 <_vfiprintf_r+0x1fe>
 800c976:	89ab      	ldrh	r3, [r5, #12]
 800c978:	059a      	lsls	r2, r3, #22
 800c97a:	d402      	bmi.n	800c982 <_vfiprintf_r+0x1fe>
 800c97c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c97e:	f7fe fb55 	bl	800b02c <__retarget_lock_release_recursive>
 800c982:	89ab      	ldrh	r3, [r5, #12]
 800c984:	065b      	lsls	r3, r3, #25
 800c986:	f53f af1f 	bmi.w	800c7c8 <_vfiprintf_r+0x44>
 800c98a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c98c:	e71e      	b.n	800c7cc <_vfiprintf_r+0x48>
 800c98e:	ab03      	add	r3, sp, #12
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	462a      	mov	r2, r5
 800c994:	4b05      	ldr	r3, [pc, #20]	@ (800c9ac <_vfiprintf_r+0x228>)
 800c996:	a904      	add	r1, sp, #16
 800c998:	4630      	mov	r0, r6
 800c99a:	f7fd ff5b 	bl	800a854 <_printf_i>
 800c99e:	e7e4      	b.n	800c96a <_vfiprintf_r+0x1e6>
 800c9a0:	0800dfb8 	.word	0x0800dfb8
 800c9a4:	0800dfc2 	.word	0x0800dfc2
 800c9a8:	0800a325 	.word	0x0800a325
 800c9ac:	0800c75f 	.word	0x0800c75f
 800c9b0:	0800dfbe 	.word	0x0800dfbe

0800c9b4 <__sflush_r>:
 800c9b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9bc:	0716      	lsls	r6, r2, #28
 800c9be:	4605      	mov	r5, r0
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	d454      	bmi.n	800ca6e <__sflush_r+0xba>
 800c9c4:	684b      	ldr	r3, [r1, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dc02      	bgt.n	800c9d0 <__sflush_r+0x1c>
 800c9ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	dd48      	ble.n	800ca62 <__sflush_r+0xae>
 800c9d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9d2:	2e00      	cmp	r6, #0
 800c9d4:	d045      	beq.n	800ca62 <__sflush_r+0xae>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c9dc:	682f      	ldr	r7, [r5, #0]
 800c9de:	6a21      	ldr	r1, [r4, #32]
 800c9e0:	602b      	str	r3, [r5, #0]
 800c9e2:	d030      	beq.n	800ca46 <__sflush_r+0x92>
 800c9e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9e6:	89a3      	ldrh	r3, [r4, #12]
 800c9e8:	0759      	lsls	r1, r3, #29
 800c9ea:	d505      	bpl.n	800c9f8 <__sflush_r+0x44>
 800c9ec:	6863      	ldr	r3, [r4, #4]
 800c9ee:	1ad2      	subs	r2, r2, r3
 800c9f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9f2:	b10b      	cbz	r3, 800c9f8 <__sflush_r+0x44>
 800c9f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c9f6:	1ad2      	subs	r2, r2, r3
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9fc:	6a21      	ldr	r1, [r4, #32]
 800c9fe:	4628      	mov	r0, r5
 800ca00:	47b0      	blx	r6
 800ca02:	1c43      	adds	r3, r0, #1
 800ca04:	89a3      	ldrh	r3, [r4, #12]
 800ca06:	d106      	bne.n	800ca16 <__sflush_r+0x62>
 800ca08:	6829      	ldr	r1, [r5, #0]
 800ca0a:	291d      	cmp	r1, #29
 800ca0c:	d82b      	bhi.n	800ca66 <__sflush_r+0xb2>
 800ca0e:	4a2a      	ldr	r2, [pc, #168]	@ (800cab8 <__sflush_r+0x104>)
 800ca10:	410a      	asrs	r2, r1
 800ca12:	07d6      	lsls	r6, r2, #31
 800ca14:	d427      	bmi.n	800ca66 <__sflush_r+0xb2>
 800ca16:	2200      	movs	r2, #0
 800ca18:	6062      	str	r2, [r4, #4]
 800ca1a:	04d9      	lsls	r1, r3, #19
 800ca1c:	6922      	ldr	r2, [r4, #16]
 800ca1e:	6022      	str	r2, [r4, #0]
 800ca20:	d504      	bpl.n	800ca2c <__sflush_r+0x78>
 800ca22:	1c42      	adds	r2, r0, #1
 800ca24:	d101      	bne.n	800ca2a <__sflush_r+0x76>
 800ca26:	682b      	ldr	r3, [r5, #0]
 800ca28:	b903      	cbnz	r3, 800ca2c <__sflush_r+0x78>
 800ca2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca2e:	602f      	str	r7, [r5, #0]
 800ca30:	b1b9      	cbz	r1, 800ca62 <__sflush_r+0xae>
 800ca32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca36:	4299      	cmp	r1, r3
 800ca38:	d002      	beq.n	800ca40 <__sflush_r+0x8c>
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f7ff f954 	bl	800bce8 <_free_r>
 800ca40:	2300      	movs	r3, #0
 800ca42:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca44:	e00d      	b.n	800ca62 <__sflush_r+0xae>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4628      	mov	r0, r5
 800ca4a:	47b0      	blx	r6
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	1c50      	adds	r0, r2, #1
 800ca50:	d1c9      	bne.n	800c9e6 <__sflush_r+0x32>
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d0c6      	beq.n	800c9e6 <__sflush_r+0x32>
 800ca58:	2b1d      	cmp	r3, #29
 800ca5a:	d001      	beq.n	800ca60 <__sflush_r+0xac>
 800ca5c:	2b16      	cmp	r3, #22
 800ca5e:	d11e      	bne.n	800ca9e <__sflush_r+0xea>
 800ca60:	602f      	str	r7, [r5, #0]
 800ca62:	2000      	movs	r0, #0
 800ca64:	e022      	b.n	800caac <__sflush_r+0xf8>
 800ca66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca6a:	b21b      	sxth	r3, r3
 800ca6c:	e01b      	b.n	800caa6 <__sflush_r+0xf2>
 800ca6e:	690f      	ldr	r7, [r1, #16]
 800ca70:	2f00      	cmp	r7, #0
 800ca72:	d0f6      	beq.n	800ca62 <__sflush_r+0xae>
 800ca74:	0793      	lsls	r3, r2, #30
 800ca76:	680e      	ldr	r6, [r1, #0]
 800ca78:	bf08      	it	eq
 800ca7a:	694b      	ldreq	r3, [r1, #20]
 800ca7c:	600f      	str	r7, [r1, #0]
 800ca7e:	bf18      	it	ne
 800ca80:	2300      	movne	r3, #0
 800ca82:	eba6 0807 	sub.w	r8, r6, r7
 800ca86:	608b      	str	r3, [r1, #8]
 800ca88:	f1b8 0f00 	cmp.w	r8, #0
 800ca8c:	dde9      	ble.n	800ca62 <__sflush_r+0xae>
 800ca8e:	6a21      	ldr	r1, [r4, #32]
 800ca90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca92:	4643      	mov	r3, r8
 800ca94:	463a      	mov	r2, r7
 800ca96:	4628      	mov	r0, r5
 800ca98:	47b0      	blx	r6
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	dc08      	bgt.n	800cab0 <__sflush_r+0xfc>
 800ca9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caa6:	81a3      	strh	r3, [r4, #12]
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab0:	4407      	add	r7, r0
 800cab2:	eba8 0800 	sub.w	r8, r8, r0
 800cab6:	e7e7      	b.n	800ca88 <__sflush_r+0xd4>
 800cab8:	dfbffffe 	.word	0xdfbffffe

0800cabc <_fflush_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	690b      	ldr	r3, [r1, #16]
 800cac0:	4605      	mov	r5, r0
 800cac2:	460c      	mov	r4, r1
 800cac4:	b913      	cbnz	r3, 800cacc <_fflush_r+0x10>
 800cac6:	2500      	movs	r5, #0
 800cac8:	4628      	mov	r0, r5
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	b118      	cbz	r0, 800cad6 <_fflush_r+0x1a>
 800cace:	6a03      	ldr	r3, [r0, #32]
 800cad0:	b90b      	cbnz	r3, 800cad6 <_fflush_r+0x1a>
 800cad2:	f7fe f86b 	bl	800abac <__sinit>
 800cad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d0f3      	beq.n	800cac6 <_fflush_r+0xa>
 800cade:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cae0:	07d0      	lsls	r0, r2, #31
 800cae2:	d404      	bmi.n	800caee <_fflush_r+0x32>
 800cae4:	0599      	lsls	r1, r3, #22
 800cae6:	d402      	bmi.n	800caee <_fflush_r+0x32>
 800cae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caea:	f7fe fa9e 	bl	800b02a <__retarget_lock_acquire_recursive>
 800caee:	4628      	mov	r0, r5
 800caf0:	4621      	mov	r1, r4
 800caf2:	f7ff ff5f 	bl	800c9b4 <__sflush_r>
 800caf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800caf8:	07da      	lsls	r2, r3, #31
 800cafa:	4605      	mov	r5, r0
 800cafc:	d4e4      	bmi.n	800cac8 <_fflush_r+0xc>
 800cafe:	89a3      	ldrh	r3, [r4, #12]
 800cb00:	059b      	lsls	r3, r3, #22
 800cb02:	d4e1      	bmi.n	800cac8 <_fflush_r+0xc>
 800cb04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb06:	f7fe fa91 	bl	800b02c <__retarget_lock_release_recursive>
 800cb0a:	e7dd      	b.n	800cac8 <_fflush_r+0xc>

0800cb0c <__swhatbuf_r>:
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	460c      	mov	r4, r1
 800cb10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb14:	2900      	cmp	r1, #0
 800cb16:	b096      	sub	sp, #88	@ 0x58
 800cb18:	4615      	mov	r5, r2
 800cb1a:	461e      	mov	r6, r3
 800cb1c:	da0d      	bge.n	800cb3a <__swhatbuf_r+0x2e>
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb24:	f04f 0100 	mov.w	r1, #0
 800cb28:	bf14      	ite	ne
 800cb2a:	2340      	movne	r3, #64	@ 0x40
 800cb2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb30:	2000      	movs	r0, #0
 800cb32:	6031      	str	r1, [r6, #0]
 800cb34:	602b      	str	r3, [r5, #0]
 800cb36:	b016      	add	sp, #88	@ 0x58
 800cb38:	bd70      	pop	{r4, r5, r6, pc}
 800cb3a:	466a      	mov	r2, sp
 800cb3c:	f000 f862 	bl	800cc04 <_fstat_r>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	dbec      	blt.n	800cb1e <__swhatbuf_r+0x12>
 800cb44:	9901      	ldr	r1, [sp, #4]
 800cb46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb4e:	4259      	negs	r1, r3
 800cb50:	4159      	adcs	r1, r3
 800cb52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb56:	e7eb      	b.n	800cb30 <__swhatbuf_r+0x24>

0800cb58 <__smakebuf_r>:
 800cb58:	898b      	ldrh	r3, [r1, #12]
 800cb5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb5c:	079d      	lsls	r5, r3, #30
 800cb5e:	4606      	mov	r6, r0
 800cb60:	460c      	mov	r4, r1
 800cb62:	d507      	bpl.n	800cb74 <__smakebuf_r+0x1c>
 800cb64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	6123      	str	r3, [r4, #16]
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	6163      	str	r3, [r4, #20]
 800cb70:	b003      	add	sp, #12
 800cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb74:	ab01      	add	r3, sp, #4
 800cb76:	466a      	mov	r2, sp
 800cb78:	f7ff ffc8 	bl	800cb0c <__swhatbuf_r>
 800cb7c:	9f00      	ldr	r7, [sp, #0]
 800cb7e:	4605      	mov	r5, r0
 800cb80:	4639      	mov	r1, r7
 800cb82:	4630      	mov	r0, r6
 800cb84:	f7fd faa2 	bl	800a0cc <_malloc_r>
 800cb88:	b948      	cbnz	r0, 800cb9e <__smakebuf_r+0x46>
 800cb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb8e:	059a      	lsls	r2, r3, #22
 800cb90:	d4ee      	bmi.n	800cb70 <__smakebuf_r+0x18>
 800cb92:	f023 0303 	bic.w	r3, r3, #3
 800cb96:	f043 0302 	orr.w	r3, r3, #2
 800cb9a:	81a3      	strh	r3, [r4, #12]
 800cb9c:	e7e2      	b.n	800cb64 <__smakebuf_r+0xc>
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	6020      	str	r0, [r4, #0]
 800cba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbae:	b15b      	cbz	r3, 800cbc8 <__smakebuf_r+0x70>
 800cbb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	f000 f837 	bl	800cc28 <_isatty_r>
 800cbba:	b128      	cbz	r0, 800cbc8 <__smakebuf_r+0x70>
 800cbbc:	89a3      	ldrh	r3, [r4, #12]
 800cbbe:	f023 0303 	bic.w	r3, r3, #3
 800cbc2:	f043 0301 	orr.w	r3, r3, #1
 800cbc6:	81a3      	strh	r3, [r4, #12]
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	431d      	orrs	r5, r3
 800cbcc:	81a5      	strh	r5, [r4, #12]
 800cbce:	e7cf      	b.n	800cb70 <__smakebuf_r+0x18>

0800cbd0 <memmove>:
 800cbd0:	4288      	cmp	r0, r1
 800cbd2:	b510      	push	{r4, lr}
 800cbd4:	eb01 0402 	add.w	r4, r1, r2
 800cbd8:	d902      	bls.n	800cbe0 <memmove+0x10>
 800cbda:	4284      	cmp	r4, r0
 800cbdc:	4623      	mov	r3, r4
 800cbde:	d807      	bhi.n	800cbf0 <memmove+0x20>
 800cbe0:	1e43      	subs	r3, r0, #1
 800cbe2:	42a1      	cmp	r1, r4
 800cbe4:	d008      	beq.n	800cbf8 <memmove+0x28>
 800cbe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbee:	e7f8      	b.n	800cbe2 <memmove+0x12>
 800cbf0:	4402      	add	r2, r0
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	428a      	cmp	r2, r1
 800cbf6:	d100      	bne.n	800cbfa <memmove+0x2a>
 800cbf8:	bd10      	pop	{r4, pc}
 800cbfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc02:	e7f7      	b.n	800cbf4 <memmove+0x24>

0800cc04 <_fstat_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d07      	ldr	r5, [pc, #28]	@ (800cc24 <_fstat_r+0x20>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	4611      	mov	r1, r2
 800cc10:	602b      	str	r3, [r5, #0]
 800cc12:	f7f6 fdc5 	bl	80037a0 <_fstat>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d102      	bne.n	800cc20 <_fstat_r+0x1c>
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	b103      	cbz	r3, 800cc20 <_fstat_r+0x1c>
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	bd38      	pop	{r3, r4, r5, pc}
 800cc22:	bf00      	nop
 800cc24:	200051e8 	.word	0x200051e8

0800cc28 <_isatty_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d06      	ldr	r5, [pc, #24]	@ (800cc44 <_isatty_r+0x1c>)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4608      	mov	r0, r1
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	f7f6 fdc4 	bl	80037c0 <_isatty>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_isatty_r+0x1a>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_isatty_r+0x1a>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	200051e8 	.word	0x200051e8

0800cc48 <__assert_func>:
 800cc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc4a:	4614      	mov	r4, r2
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4b09      	ldr	r3, [pc, #36]	@ (800cc74 <__assert_func+0x2c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4605      	mov	r5, r0
 800cc54:	68d8      	ldr	r0, [r3, #12]
 800cc56:	b954      	cbnz	r4, 800cc6e <__assert_func+0x26>
 800cc58:	4b07      	ldr	r3, [pc, #28]	@ (800cc78 <__assert_func+0x30>)
 800cc5a:	461c      	mov	r4, r3
 800cc5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc60:	9100      	str	r1, [sp, #0]
 800cc62:	462b      	mov	r3, r5
 800cc64:	4905      	ldr	r1, [pc, #20]	@ (800cc7c <__assert_func+0x34>)
 800cc66:	f000 f86f 	bl	800cd48 <fiprintf>
 800cc6a:	f000 f87f 	bl	800cd6c <abort>
 800cc6e:	4b04      	ldr	r3, [pc, #16]	@ (800cc80 <__assert_func+0x38>)
 800cc70:	e7f4      	b.n	800cc5c <__assert_func+0x14>
 800cc72:	bf00      	nop
 800cc74:	20000024 	.word	0x20000024
 800cc78:	0800e00e 	.word	0x0800e00e
 800cc7c:	0800dfe0 	.word	0x0800dfe0
 800cc80:	0800dfd3 	.word	0x0800dfd3

0800cc84 <_calloc_r>:
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	fba1 5402 	umull	r5, r4, r1, r2
 800cc8a:	b93c      	cbnz	r4, 800cc9c <_calloc_r+0x18>
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	f7fd fa1d 	bl	800a0cc <_malloc_r>
 800cc92:	4606      	mov	r6, r0
 800cc94:	b928      	cbnz	r0, 800cca2 <_calloc_r+0x1e>
 800cc96:	2600      	movs	r6, #0
 800cc98:	4630      	mov	r0, r6
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}
 800cc9c:	220c      	movs	r2, #12
 800cc9e:	6002      	str	r2, [r0, #0]
 800cca0:	e7f9      	b.n	800cc96 <_calloc_r+0x12>
 800cca2:	462a      	mov	r2, r5
 800cca4:	4621      	mov	r1, r4
 800cca6:	f7fe f933 	bl	800af10 <memset>
 800ccaa:	e7f5      	b.n	800cc98 <_calloc_r+0x14>

0800ccac <__ascii_mbtowc>:
 800ccac:	b082      	sub	sp, #8
 800ccae:	b901      	cbnz	r1, 800ccb2 <__ascii_mbtowc+0x6>
 800ccb0:	a901      	add	r1, sp, #4
 800ccb2:	b142      	cbz	r2, 800ccc6 <__ascii_mbtowc+0x1a>
 800ccb4:	b14b      	cbz	r3, 800ccca <__ascii_mbtowc+0x1e>
 800ccb6:	7813      	ldrb	r3, [r2, #0]
 800ccb8:	600b      	str	r3, [r1, #0]
 800ccba:	7812      	ldrb	r2, [r2, #0]
 800ccbc:	1e10      	subs	r0, r2, #0
 800ccbe:	bf18      	it	ne
 800ccc0:	2001      	movne	r0, #1
 800ccc2:	b002      	add	sp, #8
 800ccc4:	4770      	bx	lr
 800ccc6:	4610      	mov	r0, r2
 800ccc8:	e7fb      	b.n	800ccc2 <__ascii_mbtowc+0x16>
 800ccca:	f06f 0001 	mvn.w	r0, #1
 800ccce:	e7f8      	b.n	800ccc2 <__ascii_mbtowc+0x16>

0800ccd0 <_realloc_r>:
 800ccd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd4:	4680      	mov	r8, r0
 800ccd6:	4615      	mov	r5, r2
 800ccd8:	460c      	mov	r4, r1
 800ccda:	b921      	cbnz	r1, 800cce6 <_realloc_r+0x16>
 800ccdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cce0:	4611      	mov	r1, r2
 800cce2:	f7fd b9f3 	b.w	800a0cc <_malloc_r>
 800cce6:	b92a      	cbnz	r2, 800ccf4 <_realloc_r+0x24>
 800cce8:	f7fe fffe 	bl	800bce8 <_free_r>
 800ccec:	2400      	movs	r4, #0
 800ccee:	4620      	mov	r0, r4
 800ccf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf4:	f000 f841 	bl	800cd7a <_malloc_usable_size_r>
 800ccf8:	4285      	cmp	r5, r0
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	d802      	bhi.n	800cd04 <_realloc_r+0x34>
 800ccfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cd02:	d8f4      	bhi.n	800ccee <_realloc_r+0x1e>
 800cd04:	4629      	mov	r1, r5
 800cd06:	4640      	mov	r0, r8
 800cd08:	f7fd f9e0 	bl	800a0cc <_malloc_r>
 800cd0c:	4607      	mov	r7, r0
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d0ec      	beq.n	800ccec <_realloc_r+0x1c>
 800cd12:	42b5      	cmp	r5, r6
 800cd14:	462a      	mov	r2, r5
 800cd16:	4621      	mov	r1, r4
 800cd18:	bf28      	it	cs
 800cd1a:	4632      	movcs	r2, r6
 800cd1c:	f7fe f987 	bl	800b02e <memcpy>
 800cd20:	4621      	mov	r1, r4
 800cd22:	4640      	mov	r0, r8
 800cd24:	f7fe ffe0 	bl	800bce8 <_free_r>
 800cd28:	463c      	mov	r4, r7
 800cd2a:	e7e0      	b.n	800ccee <_realloc_r+0x1e>

0800cd2c <__ascii_wctomb>:
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	4608      	mov	r0, r1
 800cd30:	b141      	cbz	r1, 800cd44 <__ascii_wctomb+0x18>
 800cd32:	2aff      	cmp	r2, #255	@ 0xff
 800cd34:	d904      	bls.n	800cd40 <__ascii_wctomb+0x14>
 800cd36:	228a      	movs	r2, #138	@ 0x8a
 800cd38:	601a      	str	r2, [r3, #0]
 800cd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3e:	4770      	bx	lr
 800cd40:	700a      	strb	r2, [r1, #0]
 800cd42:	2001      	movs	r0, #1
 800cd44:	4770      	bx	lr
	...

0800cd48 <fiprintf>:
 800cd48:	b40e      	push	{r1, r2, r3}
 800cd4a:	b503      	push	{r0, r1, lr}
 800cd4c:	4601      	mov	r1, r0
 800cd4e:	ab03      	add	r3, sp, #12
 800cd50:	4805      	ldr	r0, [pc, #20]	@ (800cd68 <fiprintf+0x20>)
 800cd52:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd56:	6800      	ldr	r0, [r0, #0]
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	f7ff fd13 	bl	800c784 <_vfiprintf_r>
 800cd5e:	b002      	add	sp, #8
 800cd60:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd64:	b003      	add	sp, #12
 800cd66:	4770      	bx	lr
 800cd68:	20000024 	.word	0x20000024

0800cd6c <abort>:
 800cd6c:	b508      	push	{r3, lr}
 800cd6e:	2006      	movs	r0, #6
 800cd70:	f000 f834 	bl	800cddc <raise>
 800cd74:	2001      	movs	r0, #1
 800cd76:	f7f6 fcdf 	bl	8003738 <_exit>

0800cd7a <_malloc_usable_size_r>:
 800cd7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd7e:	1f18      	subs	r0, r3, #4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	bfbc      	itt	lt
 800cd84:	580b      	ldrlt	r3, [r1, r0]
 800cd86:	18c0      	addlt	r0, r0, r3
 800cd88:	4770      	bx	lr

0800cd8a <_raise_r>:
 800cd8a:	291f      	cmp	r1, #31
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4605      	mov	r5, r0
 800cd90:	460c      	mov	r4, r1
 800cd92:	d904      	bls.n	800cd9e <_raise_r+0x14>
 800cd94:	2316      	movs	r3, #22
 800cd96:	6003      	str	r3, [r0, #0]
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	bd38      	pop	{r3, r4, r5, pc}
 800cd9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cda0:	b112      	cbz	r2, 800cda8 <_raise_r+0x1e>
 800cda2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cda6:	b94b      	cbnz	r3, 800cdbc <_raise_r+0x32>
 800cda8:	4628      	mov	r0, r5
 800cdaa:	f000 f831 	bl	800ce10 <_getpid_r>
 800cdae:	4622      	mov	r2, r4
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb8:	f000 b818 	b.w	800cdec <_kill_r>
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d00a      	beq.n	800cdd6 <_raise_r+0x4c>
 800cdc0:	1c59      	adds	r1, r3, #1
 800cdc2:	d103      	bne.n	800cdcc <_raise_r+0x42>
 800cdc4:	2316      	movs	r3, #22
 800cdc6:	6003      	str	r3, [r0, #0]
 800cdc8:	2001      	movs	r0, #1
 800cdca:	e7e7      	b.n	800cd9c <_raise_r+0x12>
 800cdcc:	2100      	movs	r1, #0
 800cdce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	4798      	blx	r3
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	e7e0      	b.n	800cd9c <_raise_r+0x12>
	...

0800cddc <raise>:
 800cddc:	4b02      	ldr	r3, [pc, #8]	@ (800cde8 <raise+0xc>)
 800cdde:	4601      	mov	r1, r0
 800cde0:	6818      	ldr	r0, [r3, #0]
 800cde2:	f7ff bfd2 	b.w	800cd8a <_raise_r>
 800cde6:	bf00      	nop
 800cde8:	20000024 	.word	0x20000024

0800cdec <_kill_r>:
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	4d07      	ldr	r5, [pc, #28]	@ (800ce0c <_kill_r+0x20>)
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	4608      	mov	r0, r1
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	602b      	str	r3, [r5, #0]
 800cdfa:	f7f6 fc8d 	bl	8003718 <_kill>
 800cdfe:	1c43      	adds	r3, r0, #1
 800ce00:	d102      	bne.n	800ce08 <_kill_r+0x1c>
 800ce02:	682b      	ldr	r3, [r5, #0]
 800ce04:	b103      	cbz	r3, 800ce08 <_kill_r+0x1c>
 800ce06:	6023      	str	r3, [r4, #0]
 800ce08:	bd38      	pop	{r3, r4, r5, pc}
 800ce0a:	bf00      	nop
 800ce0c:	200051e8 	.word	0x200051e8

0800ce10 <_getpid_r>:
 800ce10:	f7f6 bc7a 	b.w	8003708 <_getpid>

0800ce14 <_init>:
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce16:	bf00      	nop
 800ce18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1a:	bc08      	pop	{r3}
 800ce1c:	469e      	mov	lr, r3
 800ce1e:	4770      	bx	lr

0800ce20 <_fini>:
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	bf00      	nop
 800ce24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce26:	bc08      	pop	{r3}
 800ce28:	469e      	mov	lr, r3
 800ce2a:	4770      	bx	lr
