
weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a0  0800d648  0800d648  0000e648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ece8  0800ece8  000101e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ece8  0800ece8  0000fce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecf0  0800ecf0  000101e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecf0  0800ecf0  0000fcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ecf4  0800ecf4  0000fcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ecf8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101e0  2**0
                  CONTENTS
 10 .bss          0000505c  200001e0  200001e0  000101e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000523c  2000523c  000101e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb99  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a8b  00000000  00000000  0002bda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001910  00000000  00000000  0002f838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138c  00000000  00000000  00031148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f6c  00000000  00000000  000324d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c54d  00000000  00000000  00056440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db5b9  00000000  00000000  0007298d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014df46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d40  00000000  00000000  0014df8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00155ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d62c 	.word	0x0800d62c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d62c 	.word	0x0800d62c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9b5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000fe0:	2305      	movs	r3, #5
 8000fe2:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 facb 	bl	8002584 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d133      	bne.n	8001062 <bme280_init+0x8a>
		while (try_count) {
 8000ffa:	e028      	b.n	800104e <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000ffc:	f107 010d 	add.w	r1, r7, #13
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	20d0      	movs	r0, #208	@ 0xd0
 8001006:	f000 f832 	bl	800106e <bme280_get_regs>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d114      	bne.n	8001040 <bme280_init+0x68>
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	2b60      	cmp	r3, #96	@ 0x60
 800101a:	d111      	bne.n	8001040 <bme280_init+0x68>
				dev->chip_id = chip_id;
 800101c:	7b7a      	ldrb	r2, [r7, #13]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f978 	bl	8001318 <bme280_soft_reset>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d110      	bne.n	8001056 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 f919 	bl	800226c <get_calib_data>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]
				}
				break;
 800103e:	e00a      	b.n	8001056 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2001      	movs	r0, #1
 8001046:	4798      	blx	r3
			--try_count;
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	3b01      	subs	r3, #1
 800104c:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1d3      	bne.n	8000ffc <bme280_init+0x24>
 8001054:	e000      	b.n	8001058 <bme280_init+0x80>
				break;
 8001056:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800105e:	23fe      	movs	r3, #254	@ 0xfe
 8001060:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800106e:	b590      	push	{r4, r7, lr}
 8001070:	b087      	sub	sp, #28
 8001072:	af00      	add	r7, sp, #0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	4613      	mov	r3, r2
 800107e:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f001 fa7f 	bl	8002584 <null_ptr_check>
 8001086:	4603      	mov	r3, r0
 8001088:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800108a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d117      	bne.n	80010c2 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	789b      	ldrb	r3, [r3, #2]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d003      	beq.n	80010a2 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010a0:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685c      	ldr	r4, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7858      	ldrb	r0, [r3, #1]
 80010aa:	89bb      	ldrh	r3, [r7, #12]
 80010ac:	7bf9      	ldrb	r1, [r7, #15]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	47a0      	blx	r4
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 80010b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 80010be:	23fc      	movs	r3, #252	@ 0xfc
 80010c0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80010c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}

080010ce <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b08d      	sub	sp, #52	@ 0x34
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4613      	mov	r3, r2
 80010dc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b0a      	cmp	r3, #10
 80010e2:	d901      	bls.n	80010e8 <bme280_set_regs+0x1a>
		len = 10;
 80010e4:	230a      	movs	r3, #10
 80010e6:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f001 fa4b 	bl	8002584 <null_ptr_check>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80010f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d156      	bne.n	80011aa <bme280_set_regs+0xdc>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d053      	beq.n	80011aa <bme280_set_regs+0xdc>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d050      	beq.n	80011aa <bme280_set_regs+0xdc>
		if (len != 0) {
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d049      	beq.n	80011a2 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	789b      	ldrb	r3, [r3, #2]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d01a      	beq.n	8001152 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800111c:	2300      	movs	r3, #0
 800111e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001122:	e011      	b.n	8001148 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001124:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001132:	68f9      	ldr	r1, [r7, #12]
 8001134:	440b      	add	r3, r1
 8001136:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800113e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001142:	3301      	adds	r3, #1
 8001144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001148:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3e8      	bcc.n	8001124 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d90d      	bls.n	8001174 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f107 0114 	add.w	r1, r7, #20
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f001 f8c8 	bl	80022f6 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	b29b      	uxth	r3, r3
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b01      	subs	r3, #1
 8001170:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001172:	e001      	b.n	8001178 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689c      	ldr	r4, [r3, #8]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	7858      	ldrb	r0, [r3, #1]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	7819      	ldrb	r1, [r3, #0]
 8001184:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001186:	f107 0214 	add.w	r2, r7, #20
 800118a:	47a0      	blx	r4
 800118c:	4603      	mov	r3, r0
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8001192:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 800119a:	23fc      	movs	r3, #252	@ 0xfc
 800119c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80011a0:	e007      	b.n	80011b2 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80011a2:	23fd      	movs	r3, #253	@ 0xfd
 80011a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80011a8:	e003      	b.n	80011b2 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011aa:	23ff      	movs	r3, #255	@ 0xff
 80011ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80011b0:	e000      	b.n	80011b4 <bme280_set_regs+0xe6>
		if (len != 0) {
 80011b2:	bf00      	nop
	}


	return rslt;
 80011b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3734      	adds	r7, #52	@ 0x34
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}

080011c0 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f001 f9d9 	bl	8002584 <null_ptr_check>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d13f      	bne.n	800125e <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80011de:	f107 030e 	add.w	r3, r7, #14
 80011e2:	6839      	ldr	r1, [r7, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f874 	bl	80012d2 <bme280_get_sensor_mode>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d107      	bne.n	8001206 <bme280_set_sensor_settings+0x46>
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f000 fb36 	bl	800186e <put_device_to_sleep>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d127      	bne.n	800125e <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4619      	mov	r1, r3
 8001212:	2007      	movs	r0, #7
 8001214:	f001 f99a 	bl	800254c <are_settings_changed>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d009      	beq.n	8001232 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f972 	bl	8001512 <set_osr_settings>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d111      	bne.n	800125e <bme280_set_sensor_settings+0x9e>
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4619      	mov	r1, r3
 800123e:	2018      	movs	r0, #24
 8001240:	f001 f984 	bl	800254c <are_settings_changed>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f9f9 	bl	800164c <set_filter_standby_settings>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	6039      	str	r1, [r7, #0]
 8001274:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f001 f984 	bl	8002584 <null_ptr_check>
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11e      	bne.n	80012c6 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001288:	f107 030e 	add.w	r3, r7, #14
 800128c:	6839      	ldr	r1, [r7, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f81f 	bl	80012d2 <bme280_get_sensor_mode>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d107      	bne.n	80012b0 <bme280_set_sensor_mode+0x46>
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f000 fae1 	bl	800186e <put_device_to_sleep>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 faa3 	bl	8001808 <write_power_mode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f001 f951 	bl	8002584 <null_ptr_check>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10e      	bne.n	800130c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	20f4      	movs	r0, #244	@ 0xf4
 80012f6:	f7ff feba 	bl	800106e <bme280_get_regs>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	b2da      	uxtb	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800130c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001320:	23e0      	movs	r3, #224	@ 0xe0
 8001322:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001324:	23b6      	movs	r3, #182	@ 0xb6
 8001326:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f001 f92b 	bl	8002584 <null_ptr_check>
 800132e:	4603      	mov	r3, r0
 8001330:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10d      	bne.n	8001356 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800133a:	f107 010d 	add.w	r1, r7, #13
 800133e:	f107 000e 	add.w	r0, r7, #14
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f7ff fec2 	bl	80010ce <bme280_set_regs>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2002      	movs	r0, #2
 8001354:	4798      	blx	r3
	}

	return rslt;
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b08a      	sub	sp, #40	@ 0x28
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f001 f8fd 	bl	8002584 <null_ptr_check>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001390:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001394:	2b00      	cmp	r3, #0
 8001396:	d124      	bne.n	80013e2 <bme280_get_sensor_data+0x80>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d021      	beq.n	80013e2 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800139e:	f107 011c 	add.w	r1, r7, #28
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2208      	movs	r2, #8
 80013a6:	20f7      	movs	r0, #247	@ 0xf7
 80013a8:	f7ff fe61 	bl	800106e <bme280_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 80013b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80013ba:	f107 0210 	add.w	r2, r7, #16
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f815 	bl	80013f4 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3310      	adds	r3, #16
 80013ce:	f107 0110 	add.w	r1, r7, #16
 80013d2:	7bf8      	ldrb	r0, [r7, #15]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	f000 f853 	bl	8001480 <bme280_compensate_data>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80013e0:	e002      	b.n	80013e8 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80013e2:	23ff      	movs	r3, #255	@ 0xff
 80013e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 80013e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3728      	adds	r7, #40	@ 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	031b      	lsls	r3, r3, #12
 8001404:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3301      	adds	r3, #1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3302      	adds	r3, #2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	b2db      	uxtb	r3, r3
 800141a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	431a      	orrs	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	431a      	orrs	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3303      	adds	r3, #3
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	031b      	lsls	r3, r3, #12
 8001432:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3304      	adds	r3, #4
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3305      	adds	r3, #5
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	b2db      	uxtb	r3, r3
 8001448:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	431a      	orrs	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	431a      	orrs	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3306      	adds	r3, #6
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3307      	adds	r3, #7
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	431a      	orrs	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d033      	beq.n	8001502 <bme280_compensate_data+0x82>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d030      	beq.n	8001502 <bme280_compensate_data+0x82>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d02d      	beq.n	8001502 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 fa1f 	bl	8001908 <compensate_temperature>
 80014ca:	4602      	mov	r2, r0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	f000 fa75 	bl	80019cc <compensate_pressure>
 80014e2:	4602      	mov	r2, r0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80014f2:	6839      	ldr	r1, [r7, #0]
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f000 fe0d 	bl	8002114 <compensate_humidity>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001500:	e001      	b.n	8001506 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001502:	23ff      	movs	r3, #255	@ 0xff
 8001504:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001520:	2301      	movs	r3, #1
 8001522:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f000 f815 	bl	8001560 <set_osr_humidity_settings>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f842 	bl	80015d4 <set_osr_press_temp_settings>
 8001550:	4603      	mov	r3, r0
 8001552:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001554:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800156a:	23f2      	movs	r3, #242	@ 0xf2
 800156c:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	789b      	ldrb	r3, [r3, #2]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800157a:	f107 010e 	add.w	r1, r7, #14
 800157e:	f107 000c 	add.w	r0, r7, #12
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	f7ff fda2 	bl	80010ce <bme280_set_regs>
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d118      	bne.n	80015c8 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001596:	23f4      	movs	r3, #244	@ 0xf4
 8001598:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800159a:	7b38      	ldrb	r0, [r7, #12]
 800159c:	f107 010d 	add.w	r1, r7, #13
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f7ff fd63 	bl	800106e <bme280_get_regs>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80015ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80015b4:	f107 010d 	add.w	r1, r7, #13
 80015b8:	f107 000c 	add.w	r0, r7, #12
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	f7ff fd85 	bl	80010ce <bme280_set_regs>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80015e2:	23f4      	movs	r3, #244	@ 0xf4
 80015e4:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015e6:	7db8      	ldrb	r0, [r7, #22]
 80015e8:	f107 0115 	add.w	r1, r7, #21
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f7ff fd3d 	bl	800106e <bme280_get_regs>
 80015f4:	4603      	mov	r3, r0
 80015f6:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11f      	bne.n	8001640 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800160a:	f107 0315 	add.w	r3, r7, #21
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f88e 	bl	8001732 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001620:	f107 0315 	add.w	r3, r7, #21
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f8a0 	bl	800176c <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800162c:	f107 0115 	add.w	r1, r7, #21
 8001630:	f107 0016 	add.w	r0, r7, #22
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f7ff fd49 	bl	80010ce <bme280_set_regs>
 800163c:	4603      	mov	r3, r0
 800163e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800165a:	23f5      	movs	r3, #245	@ 0xf5
 800165c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800165e:	7db8      	ldrb	r0, [r7, #22]
 8001660:	f107 0115 	add.w	r1, r7, #21
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f7ff fd01 	bl	800106e <bme280_get_regs>
 800166c:	4603      	mov	r3, r0
 800166e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11f      	bne.n	80016b8 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001682:	f107 0315 	add.w	r3, r7, #21
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f81b 	bl	80016c4 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001698:	f107 0315 	add.w	r3, r7, #21
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f82d 	bl	80016fe <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016a4:	f107 0115 	add.w	r1, r7, #21
 80016a8:	f107 0016 	add.w	r0, r7, #22
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f7ff fd0d 	bl	80010ce <bme280_set_regs>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80016b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	f023 031c 	bic.w	r3, r3, #28
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	78db      	ldrb	r3, [r3, #3]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	f003 031c 	and.w	r3, r3, #28
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	701a      	strb	r2, [r3, #0]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	b25a      	sxtb	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	791b      	ldrb	r3, [r3, #4]
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	b25b      	sxtb	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b25b      	sxtb	r3, r3
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25b      	sxtb	r3, r3
 8001742:	f023 031c 	bic.w	r3, r3, #28
 8001746:	b25a      	sxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	b25b      	sxtb	r3, r3
 8001750:	f003 031c 	and.w	r3, r3, #28
 8001754:	b25b      	sxtb	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b25b      	sxtb	r3, r3
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	b25a      	sxtb	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	785b      	ldrb	r3, [r3, #1]
 8001786:	015b      	lsls	r3, r3, #5
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4313      	orrs	r3, r2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	b2da      	uxtb	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	701a      	strb	r2, [r3, #0]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3302      	adds	r3, #2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	109b      	asrs	r3, r3, #2
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3302      	adds	r3, #2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3303      	adds	r3, #3
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	109b      	asrs	r3, r3, #2
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3303      	adds	r3, #3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	711a      	strb	r2, [r3, #4]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001814:	23f4      	movs	r3, #244	@ 0xf4
 8001816:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001818:	7bb8      	ldrb	r0, [r7, #14]
 800181a:	f107 010d 	add.w	r1, r7, #13
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	f7ff fc24 	bl	800106e <bme280_get_regs>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d117      	bne.n	8001862 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001832:	7b7b      	ldrb	r3, [r7, #13]
 8001834:	b25b      	sxtb	r3, r3
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	b25a      	sxtb	r2, r3
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	b25b      	sxtb	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800184e:	f107 010d 	add.w	r1, r7, #13
 8001852:	f107 000e 	add.w	r0, r7, #14
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	f7ff fc38 	bl	80010ce <bme280_set_regs>
 800185e:	4603      	mov	r3, r0
 8001860:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001876:	f107 0110 	add.w	r1, r7, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2204      	movs	r2, #4
 800187e:	20f2      	movs	r0, #242	@ 0xf2
 8001880:	f7ff fbf5 	bl	800106e <bme280_get_regs>
 8001884:	4603      	mov	r3, r0
 8001886:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001888:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d118      	bne.n	80018c2 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff80 	bl	80017a0 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fd39 	bl	8001318 <bme280_soft_reset>
 80018a6:	4603      	mov	r3, r0
 80018a8:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80018aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f808 	bl	80018ce <reload_device_settings>
 80018be:	4603      	mov	r3, r0
 80018c0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80018c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	201f      	movs	r0, #31
 80018de:	f7ff fe18 	bl	8001512 <set_osr_settings>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	201f      	movs	r0, #31
 80018f4:	f7ff feaa 	bl	800164c <set_filter_standby_settings>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80018fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <compensate_temperature+0xc0>)
 8001914:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001916:	f242 1334 	movw	r3, #8500	@ 0x2134
 800191a:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	8812      	ldrh	r2, [r2, #0]
 8001926:	0052      	lsls	r2, r2, #1
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001932:	461a      	mov	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	da01      	bge.n	8001942 <compensate_temperature+0x3a>
 800193e:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001942:	12db      	asrs	r3, r3, #11
 8001944:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	8812      	ldrh	r2, [r2, #0]
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	fb03 f303 	mul.w	r3, r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	da01      	bge.n	8001962 <compensate_temperature+0x5a>
 800195e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001962:	131b      	asrs	r3, r3, #12
 8001964:	461a      	mov	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	da02      	bge.n	800197a <compensate_temperature+0x72>
 8001974:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001978:	333f      	adds	r3, #63	@ 0x3f
 800197a:	139b      	asrs	r3, r3, #14
 800197c:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	441a      	add	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	3380      	adds	r3, #128	@ 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	da00      	bge.n	800199a <compensate_temperature+0x92>
 8001998:	33ff      	adds	r3, #255	@ 0xff
 800199a:	121b      	asrs	r3, r3, #8
 800199c:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	da02      	bge.n	80019ac <compensate_temperature+0xa4>
		temperature = temperature_min;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e005      	b.n	80019b8 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dd01      	ble.n	80019b8 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	61fb      	str	r3, [r7, #28]

	return temperature;
 80019b8:	69fb      	ldr	r3, [r7, #28]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	fffff060 	.word	0xfffff060

080019cc <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80019cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d0:	b0ea      	sub	sp, #424	@ 0x1a8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 80019d8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 80019dc:	4bbf      	ldr	r3, [pc, #764]	@ (8001cdc <compensate_pressure+0x310>)
 80019de:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 80019e2:	4bbf      	ldr	r3, [pc, #764]	@ (8001ce0 <compensate_pressure+0x314>)
 80019e4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80019e8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	17da      	asrs	r2, r3, #31
 80019f0:	4698      	mov	r8, r3
 80019f2:	4691      	mov	r9, r2
 80019f4:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 80019f8:	f149 3bff 	adc.w	fp, r9, #4294967295
 80019fc:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001a00:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a04:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a08:	fb03 f102 	mul.w	r1, r3, r2
 8001a0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a10:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	18ca      	adds	r2, r1, r3
 8001a1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a1e:	fba3 4503 	umull	r4, r5, r3, r3
 8001a22:	1953      	adds	r3, r2, r5
 8001a24:	461d      	mov	r5, r3
 8001a26:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a2a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	17da      	asrs	r2, r3, #31
 8001a32:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a36:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001a3a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001a3e:	4603      	mov	r3, r0
 8001a40:	fb03 f205 	mul.w	r2, r3, r5
 8001a44:	460b      	mov	r3, r1
 8001a46:	fb04 f303 	mul.w	r3, r4, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	fba4 1202 	umull	r1, r2, r4, r2
 8001a52:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001a56:	460a      	mov	r2, r1
 8001a58:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001a5c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a60:	4413      	add	r3, r2
 8001a62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001a66:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 8001a6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 8001a6e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001a72:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a76:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	17da      	asrs	r2, r3, #31
 8001a7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001a82:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a86:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a8a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8001a8e:	462a      	mov	r2, r5
 8001a90:	fb02 f203 	mul.w	r2, r2, r3
 8001a94:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001a98:	4621      	mov	r1, r4
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	441a      	add	r2, r3
 8001aa0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	fba3 1301 	umull	r1, r3, r3, r1
 8001aaa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001aae:	460b      	mov	r3, r1
 8001ab0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001ab4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001ab8:	18d3      	adds	r3, r2, r3
 8001aba:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001abe:	f04f 0000 	mov.w	r0, #0
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001aca:	462b      	mov	r3, r5
 8001acc:	0459      	lsls	r1, r3, #17
 8001ace:	4623      	mov	r3, r4
 8001ad0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	0458      	lsls	r0, r3, #17
 8001ad8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001adc:	1814      	adds	r4, r2, r0
 8001ade:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001ae2:	414b      	adcs	r3, r1
 8001ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001ae8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001aec:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001af0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001af4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	17da      	asrs	r2, r3, #31
 8001afc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001b00:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001b04:	f04f 0000 	mov.w	r0, #0
 8001b08:	f04f 0100 	mov.w	r1, #0
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b10:	00d9      	lsls	r1, r3, #3
 8001b12:	2000      	movs	r0, #0
 8001b14:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001b18:	1814      	adds	r4, r2, r0
 8001b1a:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001b1e:	414b      	adcs	r3, r1
 8001b20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001b24:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001b28:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001b2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b30:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b34:	fb03 f102 	mul.w	r1, r3, r2
 8001b38:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001b3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	18ca      	adds	r2, r1, r3
 8001b46:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b4a:	fba3 1303 	umull	r1, r3, r3, r3
 8001b4e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001b52:	460b      	mov	r3, r1
 8001b54:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001b58:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b5c:	18d3      	adds	r3, r2, r3
 8001b5e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001b62:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	17da      	asrs	r2, r3, #31
 8001b6e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001b72:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001b76:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001b80:	4642      	mov	r2, r8
 8001b82:	fb02 f203 	mul.w	r2, r2, r3
 8001b86:	464b      	mov	r3, r9
 8001b88:	4621      	mov	r1, r4
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	4622      	mov	r2, r4
 8001b92:	4641      	mov	r1, r8
 8001b94:	fba2 1201 	umull	r1, r2, r2, r1
 8001b98:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001ba2:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001bac:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da09      	bge.n	8001bc8 <compensate_pressure+0x1fc>
 8001bb4:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001bb8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001bbc:	f143 0300 	adc.w	r3, r3, #0
 8001bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001bc4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0a10      	lsrs	r0, r2, #8
 8001bd2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001bd6:	1219      	asrs	r1, r3, #8
 8001bd8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001be8:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001bec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001bf0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001bf4:	464a      	mov	r2, r9
 8001bf6:	fb02 f203 	mul.w	r2, r2, r3
 8001bfa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001bfe:	4644      	mov	r4, r8
 8001c00:	fb04 f303 	mul.w	r3, r4, r3
 8001c04:	441a      	add	r2, r3
 8001c06:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c0a:	4644      	mov	r4, r8
 8001c0c:	fba3 4304 	umull	r4, r3, r3, r4
 8001c10:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c14:	4623      	mov	r3, r4
 8001c16:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c1a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001c1e:	18d3      	adds	r3, r2, r3
 8001c20:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001c30:	464c      	mov	r4, r9
 8001c32:	0323      	lsls	r3, r4, #12
 8001c34:	4644      	mov	r4, r8
 8001c36:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c3a:	4644      	mov	r4, r8
 8001c3c:	0322      	lsls	r2, r4, #12
 8001c3e:	1884      	adds	r4, r0, r2
 8001c40:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001c44:	eb41 0303 	adc.w	r3, r1, r3
 8001c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c4c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001c50:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c5c:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001c60:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001c64:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001c68:	1884      	adds	r4, r0, r2
 8001c6a:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001c6e:	eb41 0303 	adc.w	r3, r1, r3
 8001c72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001c76:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c7a:	88db      	ldrh	r3, [r3, #6]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001c84:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c88:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001c8c:	462b      	mov	r3, r5
 8001c8e:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001c92:	4642      	mov	r2, r8
 8001c94:	fb02 f203 	mul.w	r2, r2, r3
 8001c98:	464b      	mov	r3, r9
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	4641      	mov	r1, r8
 8001ca6:	fba2 1201 	umull	r1, r2, r2, r1
 8001caa:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001cae:	460a      	mov	r2, r1
 8001cb0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001cb4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001cb8:	4413      	add	r3, r2
 8001cba:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001cbe:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da0e      	bge.n	8001ce4 <compensate_pressure+0x318>
 8001cc6:	1e51      	subs	r1, r2, #1
 8001cc8:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001ccc:	f143 0301 	adc.w	r3, r3, #1
 8001cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001cd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001cd8:	e004      	b.n	8001ce4 <compensate_pressure+0x318>
 8001cda:	bf00      	nop
 8001cdc:	002dc6c0 	.word	0x002dc6c0
 8001ce0:	00a7d8c0 	.word	0x00a7d8c0
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	1058      	asrs	r0, r3, #1
 8001cee:	17d9      	asrs	r1, r3, #31
 8001cf0:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001cf4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f000 81fc 	beq.w	80020f6 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001cfe:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d0e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d12:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001d16:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001d1a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	07d9      	lsls	r1, r3, #31
 8001d28:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001d2c:	07d0      	lsls	r0, r2, #31
 8001d2e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001d32:	1a84      	subs	r4, r0, r2
 8001d34:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001d38:	eb61 0303 	sbc.w	r3, r1, r3
 8001d3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001d40:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d44:	4622      	mov	r2, r4
 8001d46:	462b      	mov	r3, r5
 8001d48:	1891      	adds	r1, r2, r2
 8001d4a:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001d4c:	415b      	adcs	r3, r3
 8001d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d50:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001d54:	4621      	mov	r1, r4
 8001d56:	1851      	adds	r1, r2, r1
 8001d58:	6739      	str	r1, [r7, #112]	@ 0x70
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	414b      	adcs	r3, r1
 8001d5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001d6c:	4649      	mov	r1, r9
 8001d6e:	018b      	lsls	r3, r1, #6
 8001d70:	4641      	mov	r1, r8
 8001d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d76:	4641      	mov	r1, r8
 8001d78:	018a      	lsls	r2, r1, #6
 8001d7a:	4641      	mov	r1, r8
 8001d7c:	1889      	adds	r1, r1, r2
 8001d7e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001d80:	4649      	mov	r1, r9
 8001d82:	eb43 0101 	adc.w	r1, r3, r1
 8001d86:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001d94:	4649      	mov	r1, r9
 8001d96:	008b      	lsls	r3, r1, #2
 8001d98:	4641      	mov	r1, r8
 8001d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d9e:	4641      	mov	r1, r8
 8001da0:	008a      	lsls	r2, r1, #2
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	4622      	mov	r2, r4
 8001daa:	189b      	adds	r3, r3, r2
 8001dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dae:	460b      	mov	r3, r1
 8001db0:	462a      	mov	r2, r5
 8001db2:	eb42 0303 	adc.w	r3, r2, r3
 8001db6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	008b      	lsls	r3, r1, #2
 8001dc8:	4641      	mov	r1, r8
 8001dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dce:	4641      	mov	r1, r8
 8001dd0:	008a      	lsls	r2, r1, #2
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4622      	mov	r2, r4
 8001dda:	189b      	adds	r3, r3, r2
 8001ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001de0:	462b      	mov	r3, r5
 8001de2:	460a      	mov	r2, r1
 8001de4:	eb42 0303 	adc.w	r3, r2, r3
 8001de8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dec:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001df4:	f7fe ff28 	bl	8000c48 <__aeabi_ldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001e00:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001e04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	17da      	asrs	r2, r3, #31
 8001e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e10:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e14:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	da08      	bge.n	8001e2e <compensate_pressure+0x462>
 8001e1c:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001e20:	1851      	adds	r1, r2, r1
 8001e22:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e24:	f143 0300 	adc.w	r3, r3, #0
 8001e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e2e:	f04f 0000 	mov.w	r0, #0
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	0b50      	lsrs	r0, r2, #13
 8001e38:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e3c:	1359      	asrs	r1, r3, #13
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e46:	4629      	mov	r1, r5
 8001e48:	fb02 f001 	mul.w	r0, r2, r1
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	fb01 f103 	mul.w	r1, r1, r3
 8001e52:	4401      	add	r1, r0
 8001e54:	4620      	mov	r0, r4
 8001e56:	fba0 2302 	umull	r2, r3, r0, r2
 8001e5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001e5e:	4613      	mov	r3, r2
 8001e60:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001e64:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e68:	18cb      	adds	r3, r1, r3
 8001e6a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001e6e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da08      	bge.n	8001e88 <compensate_pressure+0x4bc>
 8001e76:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001e7a:	1851      	adds	r1, r2, r1
 8001e7c:	6539      	str	r1, [r7, #80]	@ 0x50
 8001e7e:	f143 0300 	adc.w	r3, r3, #0
 8001e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	0b50      	lsrs	r0, r2, #13
 8001e92:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e96:	1359      	asrs	r1, r3, #13
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	fb02 f001 	mul.w	r0, r2, r1
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	fb01 f103 	mul.w	r1, r1, r3
 8001eac:	4401      	add	r1, r0
 8001eae:	4620      	mov	r0, r4
 8001eb0:	fba0 2302 	umull	r2, r3, r0, r2
 8001eb4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001eb8:	4613      	mov	r3, r2
 8001eba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001ebe:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001ec2:	18cb      	adds	r3, r1, r3
 8001ec4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001ec8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da08      	bge.n	8001ee2 <compensate_pressure+0x516>
 8001ed0:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001ed4:	1851      	adds	r1, r2, r1
 8001ed6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ed8:	f143 0300 	adc.w	r3, r3, #0
 8001edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ede:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ee2:	f04f 0000 	mov.w	r0, #0
 8001ee6:	f04f 0100 	mov.w	r1, #0
 8001eea:	0e50      	lsrs	r0, r2, #25
 8001eec:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001ef0:	1659      	asrs	r1, r3, #25
 8001ef2:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001ef6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001efa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	17da      	asrs	r2, r3, #31
 8001f02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f06:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001f0a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001f0e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001f12:	462a      	mov	r2, r5
 8001f14:	fb02 f203 	mul.w	r2, r2, r3
 8001f18:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	441a      	add	r2, r3
 8001f24:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001f28:	4621      	mov	r1, r4
 8001f2a:	fba3 1301 	umull	r1, r3, r3, r1
 8001f2e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001f32:	460b      	mov	r3, r1
 8001f34:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001f38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001f42:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da07      	bge.n	8001f5a <compensate_pressure+0x58e>
 8001f4a:	4971      	ldr	r1, [pc, #452]	@ (8002110 <compensate_pressure+0x744>)
 8001f4c:	1851      	adds	r1, r2, r1
 8001f4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f50:	f143 0300 	adc.w	r3, r3, #0
 8001f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f5a:	f04f 0000 	mov.w	r0, #0
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	0cd0      	lsrs	r0, r2, #19
 8001f64:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001f68:	14d9      	asrs	r1, r3, #19
 8001f6a:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001f6e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001f72:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001f76:	1884      	adds	r4, r0, r2
 8001f78:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001f7c:	eb41 0303 	adc.w	r3, r1, r3
 8001f80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f84:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001f88:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	1889      	adds	r1, r1, r2
 8001f90:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8001f94:	4629      	mov	r1, r5
 8001f96:	eb43 0101 	adc.w	r1, r3, r1
 8001f9a:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001f9e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da07      	bge.n	8001fb6 <compensate_pressure+0x5ea>
 8001fa6:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001faa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fac:	f143 0300 	adc.w	r3, r3, #0
 8001fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fb2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001fb6:	f04f 0000 	mov.w	r0, #0
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	0a10      	lsrs	r0, r2, #8
 8001fc0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fc4:	1219      	asrs	r1, r3, #8
 8001fc6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001fca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	17da      	asrs	r2, r3, #31
 8001fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001fd6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001fe6:	464c      	mov	r4, r9
 8001fe8:	0123      	lsls	r3, r4, #4
 8001fea:	4644      	mov	r4, r8
 8001fec:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ff0:	4644      	mov	r4, r8
 8001ff2:	0122      	lsls	r2, r4, #4
 8001ff4:	1884      	adds	r4, r0, r2
 8001ff6:	633c      	str	r4, [r7, #48]	@ 0x30
 8001ff8:	eb41 0303 	adc.w	r3, r1, r3
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ffe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002002:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8002006:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 800200a:	0fd9      	lsrs	r1, r3, #31
 800200c:	2000      	movs	r0, #0
 800200e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002010:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002012:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002016:	4621      	mov	r1, r4
 8002018:	1889      	adds	r1, r1, r2
 800201a:	6239      	str	r1, [r7, #32]
 800201c:	4629      	mov	r1, r5
 800201e:	eb43 0101 	adc.w	r1, r3, r1
 8002022:	6279      	str	r1, [r7, #36]	@ 0x24
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002030:	4621      	mov	r1, r4
 8002032:	084a      	lsrs	r2, r1, #1
 8002034:	4629      	mov	r1, r5
 8002036:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800203a:	4629      	mov	r1, r5
 800203c:	104b      	asrs	r3, r1, #1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	1894      	adds	r4, r2, r2
 8002048:	61bc      	str	r4, [r7, #24]
 800204a:	415b      	adcs	r3, r3
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002052:	1814      	adds	r4, r2, r0
 8002054:	613c      	str	r4, [r7, #16]
 8002056:	414b      	adcs	r3, r1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002066:	464c      	mov	r4, r9
 8002068:	0163      	lsls	r3, r4, #5
 800206a:	4644      	mov	r4, r8
 800206c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002070:	4644      	mov	r4, r8
 8002072:	0162      	lsls	r2, r4, #5
 8002074:	4644      	mov	r4, r8
 8002076:	18a4      	adds	r4, r4, r2
 8002078:	60bc      	str	r4, [r7, #8]
 800207a:	464c      	mov	r4, r9
 800207c:	eb43 0404 	adc.w	r4, r3, r4
 8002080:	60fc      	str	r4, [r7, #12]
 8002082:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002086:	4623      	mov	r3, r4
 8002088:	181b      	adds	r3, r3, r0
 800208a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800208e:	462b      	mov	r3, r5
 8002090:	eb41 0303 	adc.w	r3, r1, r3
 8002094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002098:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 800209c:	2b00      	cmp	r3, #0
 800209e:	da07      	bge.n	80020b0 <compensate_pressure+0x6e4>
 80020a0:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	f143 0300 	adc.w	r3, r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	09d0      	lsrs	r0, r2, #7
 80020ba:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80020be:	11d9      	asrs	r1, r3, #7
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4613      	mov	r3, r2
 80020c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 80020ca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80020ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d204      	bcs.n	80020e0 <compensate_pressure+0x714>
			pressure = pressure_min;
 80020d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020da:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020de:	e00e      	b.n	80020fe <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80020e0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80020e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d908      	bls.n	80020fe <compensate_pressure+0x732>
			pressure = pressure_max;
 80020ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80020f0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020f4:	e003      	b.n	80020fe <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 80020f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80020fa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 80020fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 8002102:	4618      	mov	r0, r3
 8002104:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8002108:	46bd      	mov	sp, r7
 800210a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800210e:	bf00      	nop
 8002110:	0007ffff 	.word	0x0007ffff

08002114 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002114:	b480      	push	{r7}
 8002116:	b08b      	sub	sp, #44	@ 0x2c
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 800211e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8002122:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800212c:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	039b      	lsls	r3, r3, #14
 8002134:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800213c:	051b      	lsls	r3, r3, #20
 800213e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002146:	461a      	mov	r2, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	1ad2      	subs	r2, r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800215e:	2b00      	cmp	r3, #0
 8002160:	da02      	bge.n	8002168 <compensate_humidity+0x54>
 8002162:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002166:	337f      	adds	r3, #127	@ 0x7f
 8002168:	13db      	asrs	r3, r3, #15
 800216a:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8002172:	461a      	mov	r2, r3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	da01      	bge.n	8002182 <compensate_humidity+0x6e>
 800217e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002182:	129b      	asrs	r3, r3, #10
 8002184:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	7f1b      	ldrb	r3, [r3, #28]
 800218a:	461a      	mov	r2, r3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	da01      	bge.n	800219a <compensate_humidity+0x86>
 8002196:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800219a:	12db      	asrs	r3, r3, #11
 800219c:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	da01      	bge.n	80021b2 <compensate_humidity+0x9e>
 80021ae:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80021b2:	129b      	asrs	r3, r3, #10
 80021b4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80021b8:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80021c0:	461a      	mov	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da02      	bge.n	80021d6 <compensate_humidity+0xc2>
 80021d0:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80021d4:	333f      	adds	r3, #63	@ 0x3f
 80021d6:	139b      	asrs	r3, r3, #14
 80021d8:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da02      	bge.n	80021f0 <compensate_humidity+0xdc>
 80021ea:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80021ee:	337f      	adds	r3, #127	@ 0x7f
 80021f0:	13db      	asrs	r3, r3, #15
 80021f2:	461a      	mov	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da02      	bge.n	8002200 <compensate_humidity+0xec>
 80021fa:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80021fe:	337f      	adds	r3, #127	@ 0x7f
 8002200:	13db      	asrs	r3, r3, #15
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	da00      	bge.n	800220c <compensate_humidity+0xf8>
 800220a:	337f      	adds	r3, #127	@ 0x7f
 800220c:	11db      	asrs	r3, r3, #7
 800220e:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
 8002214:	461a      	mov	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	da00      	bge.n	8002222 <compensate_humidity+0x10e>
 8002220:	330f      	adds	r3, #15
 8002222:	111b      	asrs	r3, r3, #4
 8002224:	425b      	negs	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002234:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800223c:	bfa8      	it	ge
 800223e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8002242:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da01      	bge.n	800224e <compensate_humidity+0x13a>
 800224a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800224e:	131b      	asrs	r3, r3, #12
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 8002252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	429a      	cmp	r2, r3
 8002258:	d901      	bls.n	800225e <compensate_humidity+0x14a>
		humidity = humidity_max;
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002260:	4618      	mov	r0, r3
 8002262:	372c      	adds	r7, #44	@ 0x2c
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	@ 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002274:	2388      	movs	r3, #136	@ 0x88
 8002276:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002290:	f107 010c 	add.w	r1, r7, #12
 8002294:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	221a      	movs	r2, #26
 800229c:	f7fe fee7 	bl	800106e <bme280_get_regs>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 80022a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d11d      	bne.n	80022ea <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f84a 	bl	800234e <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80022ba:	23e1      	movs	r3, #225	@ 0xe1
 80022bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80022c0:	f107 010c 	add.w	r1, r7, #12
 80022c4:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2207      	movs	r2, #7
 80022cc:	f7fe fecf 	bl	800106e <bme280_get_regs>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 80022d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f8e2 	bl	80024ae <parse_humidity_calib_data>
		}
	}

	return rslt;
 80022ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3728      	adds	r7, #40	@ 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002304:	2301      	movs	r3, #1
 8002306:	75fb      	strb	r3, [r7, #23]
 8002308:	e016      	b.n	8002338 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	441a      	add	r2, r3
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	68b9      	ldr	r1, [r7, #8]
 8002318:	440b      	add	r3, r1
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	441a      	add	r2, r3
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4619      	mov	r1, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	440b      	add	r3, r1
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	3301      	adds	r3, #1
 8002336:	75fb      	strb	r3, [r7, #23]
 8002338:	7dfa      	ldrb	r2, [r7, #23]
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3e4      	bcc.n	800230a <interleave_reg_addr+0x14>
	}
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3310      	adds	r3, #16
 800235c:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3301      	adds	r3, #1
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b21a      	sxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21b      	sxth	r3, r3
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3303      	adds	r3, #3
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	b21a      	sxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3305      	adds	r3, #5
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	b21a      	sxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3307      	adds	r3, #7
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3306      	adds	r3, #6
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3309      	adds	r3, #9
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3308      	adds	r3, #8
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b21a      	sxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	330b      	adds	r3, #11
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	330a      	adds	r3, #10
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	330d      	adds	r3, #13
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	b21a      	sxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	330c      	adds	r3, #12
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b21b      	sxth	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b21a      	sxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	330f      	adds	r3, #15
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	b21a      	sxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	330e      	adds	r3, #14
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b21b      	sxth	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b21a      	sxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3311      	adds	r3, #17
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b21a      	sxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3310      	adds	r3, #16
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b21b      	sxth	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b21a      	sxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3313      	adds	r3, #19
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21a      	sxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3312      	adds	r3, #18
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21a      	sxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3315      	adds	r3, #21
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21a      	sxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3314      	adds	r3, #20
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b21a      	sxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3317      	adds	r3, #23
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	b21a      	sxth	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3316      	adds	r3, #22
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b21b      	sxth	r3, r3
 8002490:	4313      	orrs	r3, r2
 8002492:	b21a      	sxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3319      	adds	r3, #25
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	761a      	strb	r2, [r3, #24]

}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b087      	sub	sp, #28
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3310      	adds	r3, #16
 80024bc:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3301      	adds	r3, #1
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3302      	adds	r3, #2
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3303      	adds	r3, #3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80024fe:	8a7a      	ldrh	r2, [r7, #18]
 8002500:	8a3b      	ldrh	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	b21a      	sxth	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3305      	adds	r3, #5
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b25b      	sxtb	r3, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	b29b      	uxth	r3, r3
 8002518:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	b2db      	uxtb	r3, r3
 8002524:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002526:	89fa      	ldrh	r2, [r7, #14]
 8002528:	89bb      	ldrh	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	b21a      	sxth	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3306      	adds	r3, #6
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25a      	sxtb	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	71fb      	strb	r3, [r7, #7]
 8002558:	4613      	mov	r3, r2
 800255a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002560:	79fa      	ldrb	r2, [r7, #7]
 8002562:	79bb      	ldrb	r3, [r7, #6]
 8002564:	4013      	ands	r3, r2
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <null_ptr_check+0x26>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <null_ptr_check+0x26>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <null_ptr_check+0x26>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80025aa:	23ff      	movs	r3, #255	@ 0xff
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e001      	b.n	80025b4 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80025b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80025d0:	230a      	movs	r3, #10
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	1cfb      	adds	r3, r7, #3
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2301      	movs	r3, #1
 80025de:	2200      	movs	r2, #0
 80025e0:	2178      	movs	r1, #120	@ 0x78
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f002 fc60 	bl	8004ea8 <HAL_I2C_Mem_Write>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80025fc:	2064      	movs	r0, #100	@ 0x64
 80025fe:	f001 fd09 	bl	8004014 <HAL_Delay>
    int status = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8002606:	21ae      	movs	r1, #174	@ 0xae
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ffdb 	bl	80025c4 <ssd1306_WriteCommand>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8002618:	2120      	movs	r1, #32
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffd2 	bl	80025c4 <ssd1306_WriteCommand>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800262a:	2110      	movs	r1, #16
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ffc9 	bl	80025c4 <ssd1306_WriteCommand>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800263c:	21b0      	movs	r1, #176	@ 0xb0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffc0 	bl	80025c4 <ssd1306_WriteCommand>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800264e:	21c8      	movs	r1, #200	@ 0xc8
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ffb7 	bl	80025c4 <ssd1306_WriteCommand>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8002660:	2100      	movs	r1, #0
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffae 	bl	80025c4 <ssd1306_WriteCommand>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8002672:	2110      	movs	r1, #16
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffa5 	bl	80025c4 <ssd1306_WriteCommand>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8002684:	2140      	movs	r1, #64	@ 0x40
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff9c 	bl	80025c4 <ssd1306_WriteCommand>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8002696:	2181      	movs	r1, #129	@ 0x81
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff93 	bl	80025c4 <ssd1306_WriteCommand>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4413      	add	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80026a8:	21ff      	movs	r1, #255	@ 0xff
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff8a 	bl	80025c4 <ssd1306_WriteCommand>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80026ba:	21a1      	movs	r1, #161	@ 0xa1
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff81 	bl	80025c4 <ssd1306_WriteCommand>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80026cc:	21a6      	movs	r1, #166	@ 0xa6
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff78 	bl	80025c4 <ssd1306_WriteCommand>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80026de:	21a8      	movs	r1, #168	@ 0xa8
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff6f 	bl	80025c4 <ssd1306_WriteCommand>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80026f0:	213f      	movs	r1, #63	@ 0x3f
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff66 	bl	80025c4 <ssd1306_WriteCommand>
 80026f8:	4603      	mov	r3, r0
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002702:	21a4      	movs	r1, #164	@ 0xa4
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff5d 	bl	80025c4 <ssd1306_WriteCommand>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8002714:	21d3      	movs	r1, #211	@ 0xd3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ff54 	bl	80025c4 <ssd1306_WriteCommand>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8002726:	2100      	movs	r1, #0
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff4b 	bl	80025c4 <ssd1306_WriteCommand>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8002738:	21d5      	movs	r1, #213	@ 0xd5
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff42 	bl	80025c4 <ssd1306_WriteCommand>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800274a:	21f0      	movs	r1, #240	@ 0xf0
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff39 	bl	80025c4 <ssd1306_WriteCommand>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 800275c:	21d9      	movs	r1, #217	@ 0xd9
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff30 	bl	80025c4 <ssd1306_WriteCommand>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 800276e:	2122      	movs	r1, #34	@ 0x22
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff27 	bl	80025c4 <ssd1306_WriteCommand>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8002780:	21da      	movs	r1, #218	@ 0xda
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ff1e 	bl	80025c4 <ssd1306_WriteCommand>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 8002792:	2112      	movs	r1, #18
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff15 	bl	80025c4 <ssd1306_WriteCommand>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80027a4:	21db      	movs	r1, #219	@ 0xdb
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff0c 	bl	80025c4 <ssd1306_WriteCommand>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80027b6:	2120      	movs	r1, #32
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff03 	bl	80025c4 <ssd1306_WriteCommand>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80027c8:	218d      	movs	r1, #141	@ 0x8d
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fefa 	bl	80025c4 <ssd1306_WriteCommand>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80027da:	2114      	movs	r1, #20
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fef1 	bl	80025c4 <ssd1306_WriteCommand>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4413      	add	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 80027ec:	21af      	movs	r1, #175	@ 0xaf
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fee8 	bl	80025c4 <ssd1306_WriteCommand>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <ssd1306_Init+0x214>
        return 1;
 8002804:	2301      	movs	r3, #1
 8002806:	e00f      	b.n	8002828 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002808:	2000      	movs	r0, #0
 800280a:	f000 f813 	bl	8002834 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f834 	bl	800287c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <ssd1306_Init+0x23c>)
 8002816:	2200      	movs	r2, #0
 8002818:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800281a:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <ssd1306_Init+0x23c>)
 800281c:	2200      	movs	r2, #0
 800281e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <ssd1306_Init+0x23c>)
 8002822:	2201      	movs	r2, #1
 8002824:	715a      	strb	r2, [r3, #5]

    return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200005fc 	.word	0x200005fc

08002834 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e00d      	b.n	8002860 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <ssd1306_Fill+0x1a>
 800284a:	2100      	movs	r1, #0
 800284c:	e000      	b.n	8002850 <ssd1306_Fill+0x1c>
 800284e:	21ff      	movs	r1, #255	@ 0xff
 8002850:	4a09      	ldr	r2, [pc, #36]	@ (8002878 <ssd1306_Fill+0x44>)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4413      	add	r3, r2
 8002856:	460a      	mov	r2, r1
 8002858:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002866:	d3ed      	bcc.n	8002844 <ssd1306_Fill+0x10>
    }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	200001fc 	.word	0x200001fc

0800287c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af04      	add	r7, sp, #16
 8002882:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e020      	b.n	80028cc <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	3b50      	subs	r3, #80	@ 0x50
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fe96 	bl	80025c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8002898:	2100      	movs	r1, #0
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fe92 	bl	80025c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80028a0:	2110      	movs	r1, #16
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fe8e 	bl	80025c4 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	01db      	lsls	r3, r3, #7
 80028ac:	4a0b      	ldr	r2, [pc, #44]	@ (80028dc <ssd1306_UpdateScreen+0x60>)
 80028ae:	4413      	add	r3, r2
 80028b0:	2264      	movs	r2, #100	@ 0x64
 80028b2:	9202      	str	r2, [sp, #8]
 80028b4:	2280      	movs	r2, #128	@ 0x80
 80028b6:	9201      	str	r2, [sp, #4]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	2240      	movs	r2, #64	@ 0x40
 80028be:	2178      	movs	r1, #120	@ 0x78
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f002 faf1 	bl	8004ea8 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	3301      	adds	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2b07      	cmp	r3, #7
 80028d0:	d9db      	bls.n	800288a <ssd1306_UpdateScreen+0xe>
    }
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200001fc 	.word	0x200001fc

080028e0 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
 80028ea:	460b      	mov	r3, r1
 80028ec:	71bb      	strb	r3, [r7, #6]
 80028ee:	4613      	mov	r3, r2
 80028f0:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db48      	blt.n	800298c <ssd1306_DrawPixel+0xac>
 80028fa:	79bb      	ldrb	r3, [r7, #6]
 80028fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80028fe:	d845      	bhi.n	800298c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8002900:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <ssd1306_DrawPixel+0xb8>)
 8002902:	791b      	ldrb	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002908:	797b      	ldrb	r3, [r7, #5]
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8002916:	797b      	ldrb	r3, [r7, #5]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d11a      	bne.n	8002952 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	79bb      	ldrb	r3, [r7, #6]
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	b2d8      	uxtb	r0, r3
 8002924:	4603      	mov	r3, r0
 8002926:	01db      	lsls	r3, r3, #7
 8002928:	4413      	add	r3, r2
 800292a:	4a1c      	ldr	r2, [pc, #112]	@ (800299c <ssd1306_DrawPixel+0xbc>)
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	b25a      	sxtb	r2, r3
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	b25b      	sxtb	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b259      	sxtb	r1, r3
 8002942:	79fa      	ldrb	r2, [r7, #7]
 8002944:	4603      	mov	r3, r0
 8002946:	01db      	lsls	r3, r3, #7
 8002948:	4413      	add	r3, r2
 800294a:	b2c9      	uxtb	r1, r1
 800294c:	4a13      	ldr	r2, [pc, #76]	@ (800299c <ssd1306_DrawPixel+0xbc>)
 800294e:	54d1      	strb	r1, [r2, r3]
 8002950:	e01d      	b.n	800298e <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002952:	79fa      	ldrb	r2, [r7, #7]
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	b2d8      	uxtb	r0, r3
 800295a:	4603      	mov	r3, r0
 800295c:	01db      	lsls	r3, r3, #7
 800295e:	4413      	add	r3, r2
 8002960:	4a0e      	ldr	r2, [pc, #56]	@ (800299c <ssd1306_DrawPixel+0xbc>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	b25a      	sxtb	r2, r3
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	b25b      	sxtb	r3, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	b25b      	sxtb	r3, r3
 8002978:	4013      	ands	r3, r2
 800297a:	b259      	sxtb	r1, r3
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	4603      	mov	r3, r0
 8002980:	01db      	lsls	r3, r3, #7
 8002982:	4413      	add	r3, r2
 8002984:	b2c9      	uxtb	r1, r1
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <ssd1306_DrawPixel+0xbc>)
 8002988:	54d1      	strb	r1, [r2, r3]
 800298a:	e000      	b.n	800298e <ssd1306_DrawPixel+0xae>
        return;
 800298c:	bf00      	nop
    }
}
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	200005fc 	.word	0x200005fc
 800299c:	200001fc 	.word	0x200001fc

080029a0 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4604      	mov	r4, r0
 80029a8:	1d38      	adds	r0, r7, #4
 80029aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80029ae:	461a      	mov	r2, r3
 80029b0:	4623      	mov	r3, r4
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	4613      	mov	r3, r2
 80029b6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80029b8:	4b38      	ldr	r3, [pc, #224]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	793b      	ldrb	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80029c4:	dc06      	bgt.n	80029d4 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80029c6:	4b35      	ldr	r3, [pc, #212]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 80029c8:	885b      	ldrh	r3, [r3, #2]
 80029ca:	461a      	mov	r2, r3
 80029cc:	797b      	ldrb	r3, [r7, #5]
 80029ce:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80029d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80029d2:	dd01      	ble.n	80029d8 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e05c      	b.n	8002a92 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	e04c      	b.n	8002a78 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	3b20      	subs	r3, #32
 80029e4:	7979      	ldrb	r1, [r7, #5]
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	440b      	add	r3, r1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e034      	b.n	8002a68 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d012      	beq.n	8002a34 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002a0e:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	b2d8      	uxtb	r0, r3
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a1e:	885b      	ldrh	r3, [r3, #2]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	7bba      	ldrb	r2, [r7, #14]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7ff ff57 	bl	80028e0 <ssd1306_DrawPixel>
 8002a32:	e016      	b.n	8002a62 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	b2d8      	uxtb	r0, r3
 8002a42:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a44:	885b      	ldrh	r3, [r3, #2]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b2d9      	uxtb	r1, r3
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f7ff ff3f 	bl	80028e0 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	793b      	ldrb	r3, [r7, #4]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d3c5      	bcc.n	80029fe <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	797b      	ldrb	r3, [r7, #5]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d3ad      	bcc.n	80029de <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	793a      	ldrb	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <ssd1306_WriteChar+0xfc>)
 8002a8e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200005fc 	.word	0x200005fc

08002aa0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	1d38      	adds	r0, r7, #4
 8002aaa:	e880 0006 	stmia.w	r0, {r1, r2}
 8002aae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002ab0:	e012      	b.n	8002ad8 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	7818      	ldrb	r0, [r3, #0]
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	1d3a      	adds	r2, r7, #4
 8002aba:	ca06      	ldmia	r2, {r1, r2}
 8002abc:	f7ff ff70 	bl	80029a0 <ssd1306_WriteChar>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d002      	beq.n	8002ad2 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	e008      	b.n	8002ae4 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e8      	bne.n	8002ab2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	460a      	mov	r2, r1
 8002af6:	71fb      	strb	r3, [r7, #7]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <ssd1306_SetCursor+0x2c>)
 8002b02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002b04:	79bb      	ldrb	r3, [r7, #6]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <ssd1306_SetCursor+0x2c>)
 8002b0a:	805a      	strh	r2, [r3, #2]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	200005fc 	.word	0x200005fc

08002b1c <user_i2c_read>:

struct bme280_dev dev;
struct bme280_data comp_data;
int8_t rslt;

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	603a      	str	r2, [r7, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	71bb      	strb	r3, [r7, #6]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK)
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	1dba      	adds	r2, r7, #6
 8002b3c:	230a      	movs	r3, #10
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2301      	movs	r3, #1
 8002b42:	4811      	ldr	r0, [pc, #68]	@ (8002b88 <user_i2c_read+0x6c>)
 8002b44:	f001 fe80 	bl	8004848 <HAL_I2C_Master_Transmit>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <user_i2c_read+0x38>
		return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	e014      	b.n	8002b7e <user_i2c_read+0x62>
	if (HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	b299      	uxth	r1, r3
 8002b62:	88bb      	ldrh	r3, [r7, #4]
 8002b64:	220a      	movs	r2, #10
 8002b66:	9200      	str	r2, [sp, #0]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	4807      	ldr	r0, [pc, #28]	@ (8002b88 <user_i2c_read+0x6c>)
 8002b6c:	f001 ff6a 	bl	8004a44 <HAL_I2C_Master_Receive>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <user_i2c_read+0x60>
			!= HAL_OK)
		return -1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e000      	b.n	8002b7e <user_i2c_read+0x62>

	return 0;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000604 	.word	0x20000604

08002b8c <user_delay_ms>:

void user_delay_ms(uint32_t period) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

	HAL_Delay(period);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f001 fa3d 	bl	8004014 <HAL_Delay>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	603a      	str	r2, [r7, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	71bb      	strb	r3, [r7, #6]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80bb      	strh	r3, [r7, #4]
	int8_t *buf;
	buf = malloc(len + 1);
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f007 fe4a 	bl	800a858 <malloc>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]
	buf[0] = reg_addr;
 8002bc8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, data, len);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	88ba      	ldrh	r2, [r7, #4]
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f008 fe36 	bl	800b84a <memcpy>

	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	b299      	uxth	r1, r3
 8002be6:	88bb      	ldrh	r3, [r7, #4]
 8002be8:	3301      	adds	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	9200      	str	r2, [sp, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4808      	ldr	r0, [pc, #32]	@ (8002c18 <user_i2c_write+0x74>)
 8002bf6:	f001 fe27 	bl	8004848 <HAL_I2C_Master_Transmit>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <user_i2c_write+0x62>
	HAL_MAX_DELAY) != HAL_OK)
		return -1;
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
 8002c04:	e003      	b.n	8002c0e <user_i2c_write+0x6a>

	free(buf);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f007 fe2e 	bl	800a868 <free>
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000604 	.word	0x20000604

08002c1c <_write>:

// for printf() redirection to USART2
int _write(int file, char *data, int len) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*) data, len,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4807      	ldr	r0, [pc, #28]	@ (8002c50 <_write+0x34>)
 8002c34:	f003 fe0a 	bl	800684c <HAL_UART_Transmit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]
	HAL_MAX_DELAY);
	return (status == HAL_OK ? len : 0);
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <_write+0x2a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e000      	b.n	8002c48 <_write+0x2c>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000658 	.word	0x20000658

08002c54 <publishMQTTMessage>:
		}
	}
	/* USER CODE END StartMQTTPublishTask */
}

void publishMQTTMessage(const char *topic, const char *payload) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002c64:	6018      	str	r0, [r3, #0]
 8002c66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c6a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002c6e:	6019      	str	r1, [r3, #0]
	char mqttCommand[256];
	int topicLength = strlen(topic);
 8002c70:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c74:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	f7fd faf9 	bl	8000270 <strlen>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	int payloadLength = strlen(payload);
 8002c84:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002c88:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	f7fd faef 	bl	8000270 <strlen>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	int remainingLength = 2 + topicLength + payloadLength; // 2 bytes for topic length + topic + payload
 8002c98:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

	// Send MQTT publish packet
	snprintf(mqttCommand, sizeof(mqttCommand), "AT+CIPSEND=%d\r\n",
 8002ca8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002cac:	3302      	adds	r3, #2
 8002cae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8002cb2:	4a44      	ldr	r2, [pc, #272]	@ (8002dc4 <publishMQTTMessage+0x170>)
 8002cb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cb8:	f008 fc16 	bl	800b4e8 <sniprintf>
			remainingLength + 2); // +2 for the fixed header
	sendATCommand(mqttCommand);
 8002cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f885 	bl	8002dd0 <sendATCommand>
	osDelay(1000); // Short delay to ensure the ESP32 is ready to receive the packet
 8002cc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cca:	f004 fb31 	bl	8007330 <osDelay>

	// Construct the MQTT PUBLISH packet
	char mqttPublishPacket[256];
	int packetIndex = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

	// Fixed header
	mqttPublishPacket[packetIndex++] = 0x30; // PUBLISH packet type
 8002cd4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	f8c7 2208 	str.w	r2, [r7, #520]	@ 0x208
 8002cde:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002ce2:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8002ce6:	2130      	movs	r1, #48	@ 0x30
 8002ce8:	54d1      	strb	r1, [r2, r3]
	mqttPublishPacket[packetIndex++] = remainingLength;
 8002cea:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	f8c7 2208 	str.w	r2, [r7, #520]	@ 0x208
 8002cf4:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8002cf8:	b2d1      	uxtb	r1, r2
 8002cfa:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002cfe:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8002d02:	54d1      	strb	r1, [r2, r3]

	// Variable header
	mqttPublishPacket[packetIndex++] = (topicLength >> 8) & 0xFF; // Topic length MSB
 8002d04:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002d08:	1219      	asrs	r1, r3, #8
 8002d0a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	f8c7 2208 	str.w	r2, [r7, #520]	@ 0x208
 8002d14:	b2c9      	uxtb	r1, r1
 8002d16:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002d1a:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8002d1e:	54d1      	strb	r1, [r2, r3]
	mqttPublishPacket[packetIndex++] = topicLength & 0xFF;   // Topic length LSB
 8002d20:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	f8c7 2208 	str.w	r2, [r7, #520]	@ 0x208
 8002d2a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8002d2e:	b2d1      	uxtb	r1, r2
 8002d30:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8002d34:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8002d38:	54d1      	strb	r1, [r2, r3]
	memcpy(&mqttPublishPacket[packetIndex], topic, topicLength);
 8002d3a:	f107 0208 	add.w	r2, r7, #8
 8002d3e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002d42:	18d0      	adds	r0, r2, r3
 8002d44:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8002d48:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d4c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	f008 fd7a 	bl	800b84a <memcpy>
	packetIndex += topicLength;
 8002d56:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8002d5a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002d5e:	4413      	add	r3, r2
 8002d60:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

	// Payload
	memcpy(&mqttPublishPacket[packetIndex], payload, payloadLength);
 8002d64:	f107 0208 	add.w	r2, r7, #8
 8002d68:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002d6c:	18d0      	adds	r0, r2, r3
 8002d6e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8002d72:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8002d76:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	f008 fd65 	bl	800b84a <memcpy>
	packetIndex += payloadLength;
 8002d80:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8002d84:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8002d88:	4413      	add	r3, r2
 8002d8a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

	// Send the constructed MQTT PUBLISH packet
	HAL_UART_Transmit(&huart2, (uint8_t*) mqttPublishPacket, packetIndex,
 8002d8e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	f107 0108 	add.w	r1, r7, #8
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9c:	480a      	ldr	r0, [pc, #40]	@ (8002dc8 <publishMQTTMessage+0x174>)
 8002d9e:	f003 fd55 	bl	800684c <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	osDelay(1000); // Wait for the publish packet to be processed
 8002da2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002da6:	f004 fac3 	bl	8007330 <osDelay>

	// Close the TCP connection
	sendATCommand("AT+CIPCLOSE\r\n");
 8002daa:	4808      	ldr	r0, [pc, #32]	@ (8002dcc <publishMQTTMessage+0x178>)
 8002dac:	f000 f810 	bl	8002dd0 <sendATCommand>
	osDelay(1000); // Wait for the connection to close
 8002db0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002db4:	f004 fabc 	bl	8007330 <osDelay>
}
 8002db8:	bf00      	nop
 8002dba:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800d6d8 	.word	0x0800d6d8
 8002dc8:	20000658 	.word	0x20000658
 8002dcc:	0800d6e8 	.word	0x0800d6e8

08002dd0 <sendATCommand>:

void sendATCommand(const char *command) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	// Implement the function to send AT command via UART to ESP32-C3
	HAL_UART_Transmit(&huart2, (uint8_t*) command, strlen(command),
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fd fa49 	bl	8000270 <strlen>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4803      	ldr	r0, [pc, #12]	@ (8002df8 <sendATCommand+0x28>)
 8002dea:	f003 fd2f 	bl	800684c <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	//HAL_Delay(100); // Delay to allow response from ESP32-C3
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000658 	.word	0x20000658

08002dfc <waitForResponse>:

bool waitForResponse(const char *expectedResponse, uint32_t timeout) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b0c4      	sub	sp, #272	@ 0x110
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e0a:	6018      	str	r0, [r3, #0]
 8002e0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e14:	6019      	str	r1, [r3, #0]
	uint32_t start = HAL_GetTick();
 8002e16:	f001 f8f1 	bl	8003ffc <HAL_GetTick>
 8002e1a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
	char response[256];
	uint32_t index = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	while ((HAL_GetTick() - start) < timeout) {
 8002e24:	e037      	b.n	8002e96 <waitForResponse+0x9a>
		if (HAL_UART_Receive(&huart2, (uint8_t*) &response[index], 1, 100)
 8002e26:	f107 0208 	add.w	r2, r7, #8
 8002e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e2e:	18d1      	adds	r1, r2, r3
 8002e30:	2364      	movs	r3, #100	@ 0x64
 8002e32:	2201      	movs	r2, #1
 8002e34:	4821      	ldr	r0, [pc, #132]	@ (8002ebc <waitForResponse+0xc0>)
 8002e36:	f003 fd94 	bl	8006962 <HAL_UART_Receive>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d12a      	bne.n	8002e96 <waitForResponse+0x9a>
				== HAL_OK) {
			if (response[index] == '\n') {
 8002e40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e44:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8002e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b0a      	cmp	r3, #10
 8002e52:	d11b      	bne.n	8002e8c <waitForResponse+0x90>
				response[index + 1] = '\0';
 8002e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002e5e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8002e62:	2100      	movs	r1, #0
 8002e64:	54d1      	strb	r1, [r2, r3]
				if (strstr(response, expectedResponse) != NULL) {
 8002e66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e6e:	f107 0208 	add.w	r2, r7, #8
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	4610      	mov	r0, r2
 8002e76:	f008 fc4b 	bl	800b710 <strstr>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <waitForResponse+0x88>
					return true;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e016      	b.n	8002eb2 <waitForResponse+0xb6>
				}
				index = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002e8a:	e004      	b.n	8002e96 <waitForResponse+0x9a>
			} else {
				index++;
 8002e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e90:	3301      	adds	r3, #1
 8002e92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	while ((HAL_GetTick() - start) < timeout) {
 8002e96:	f001 f8b1 	bl	8003ffc <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002ea6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8ba      	bhi.n	8002e26 <waitForResponse+0x2a>
			}
		}
	}
	return false;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000658 	.word	0x20000658

08002ec0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b09c      	sub	sp, #112	@ 0x70
 8002ec4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002ec6:	f001 f863 	bl	8003f90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002eca:	f000 fa2d 	bl	8003328 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ece:	f000 fb17 	bl	8003500 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002ed2:	f000 fa93 	bl	80033fc <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8002ed6:	f000 fabf 	bl	8003458 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8002eda:	f000 fae7 	bl	80034ac <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/*----------------------------------------BME280 Setup-------------------------------------------------*/
	/* BME280 Initialization */
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002ede:	4bb9      	ldr	r3, [pc, #740]	@ (80031c4 <main+0x304>)
 8002ee0:	2276      	movs	r2, #118	@ 0x76
 8002ee2:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8002ee4:	4bb7      	ldr	r3, [pc, #732]	@ (80031c4 <main+0x304>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8002eea:	4bb6      	ldr	r3, [pc, #728]	@ (80031c4 <main+0x304>)
 8002eec:	4ab6      	ldr	r2, [pc, #728]	@ (80031c8 <main+0x308>)
 8002eee:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8002ef0:	4bb4      	ldr	r3, [pc, #720]	@ (80031c4 <main+0x304>)
 8002ef2:	4ab6      	ldr	r2, [pc, #728]	@ (80031cc <main+0x30c>)
 8002ef4:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8002ef6:	4bb3      	ldr	r3, [pc, #716]	@ (80031c4 <main+0x304>)
 8002ef8:	4ab5      	ldr	r2, [pc, #724]	@ (80031d0 <main+0x310>)
 8002efa:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev); // Initialize the sensor.
 8002efc:	48b1      	ldr	r0, [pc, #708]	@ (80031c4 <main+0x304>)
 8002efe:	f7fe f86b 	bl	8000fd8 <bme280_init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	4bb3      	ldr	r3, [pc, #716]	@ (80031d4 <main+0x314>)
 8002f08:	701a      	strb	r2, [r3, #0]
	if (rslt == BME280_OK) {
 8002f0a:	4bb2      	ldr	r3, [pc, #712]	@ (80031d4 <main+0x314>)
 8002f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <main+0x5c>
		printf("BME280 Successfully Initialized\r\n");
 8002f14:	48b0      	ldr	r0, [pc, #704]	@ (80031d8 <main+0x318>)
 8002f16:	f008 fadf 	bl	800b4d8 <puts>
 8002f1a:	e006      	b.n	8002f2a <main+0x6a>
	} else {
		printf("Failed to Initialize BME280. Error code: %d\r\n", rslt);
 8002f1c:	4bad      	ldr	r3, [pc, #692]	@ (80031d4 <main+0x314>)
 8002f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f22:	4619      	mov	r1, r3
 8002f24:	48ad      	ldr	r0, [pc, #692]	@ (80031dc <main+0x31c>)
 8002f26:	f008 fa6f 	bl	800b408 <iprintf>
	}

	/* BME280 Configuration */
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002f2a:	4ba6      	ldr	r3, [pc, #664]	@ (80031c4 <main+0x304>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002f32:	4ba4      	ldr	r3, [pc, #656]	@ (80031c4 <main+0x304>)
 8002f34:	2205      	movs	r2, #5
 8002f36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002f3a:	4ba2      	ldr	r3, [pc, #648]	@ (80031c4 <main+0x304>)
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002f42:	4ba0      	ldr	r3, [pc, #640]	@ (80031c4 <main+0x304>)
 8002f44:	2204      	movs	r2, #4
 8002f46:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	rslt = bme280_set_sensor_settings(
 8002f4a:	499e      	ldr	r1, [pc, #632]	@ (80031c4 <main+0x304>)
 8002f4c:	200f      	movs	r0, #15
 8002f4e:	f7fe f937 	bl	80011c0 <bme280_set_sensor_settings>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b9f      	ldr	r3, [pc, #636]	@ (80031d4 <main+0x314>)
 8002f58:	701a      	strb	r2, [r3, #0]
			BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL
					| BME280_FILTER_SEL, &dev);
	//rslt = bme280_set_sensor_settings(BME280_ALL_SETTINGS_SEL, &dev); this can also be used in place of above
	if (rslt == BME280_OK) {
 8002f5a:	4b9e      	ldr	r3, [pc, #632]	@ (80031d4 <main+0x314>)
 8002f5c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <main+0xac>
		printf("BME280 Successfully Configured\r\n");
 8002f64:	489e      	ldr	r0, [pc, #632]	@ (80031e0 <main+0x320>)
 8002f66:	f008 fab7 	bl	800b4d8 <puts>
 8002f6a:	e006      	b.n	8002f7a <main+0xba>
	} else {
		printf("Failed to Configure BME280. Error code: %d\r\n", rslt);
 8002f6c:	4b99      	ldr	r3, [pc, #612]	@ (80031d4 <main+0x314>)
 8002f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8002f72:	4619      	mov	r1, r3
 8002f74:	489b      	ldr	r0, [pc, #620]	@ (80031e4 <main+0x324>)
 8002f76:	f008 fa47 	bl	800b408 <iprintf>
	}
	/* BME280 Mode Setting */
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8002f7a:	4992      	ldr	r1, [pc, #584]	@ (80031c4 <main+0x304>)
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f7fe f974 	bl	800126a <bme280_set_sensor_mode>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b93      	ldr	r3, [pc, #588]	@ (80031d4 <main+0x314>)
 8002f88:	701a      	strb	r2, [r3, #0]
	dev.delay_ms(40);
 8002f8a:	4b8e      	ldr	r3, [pc, #568]	@ (80031c4 <main+0x304>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2028      	movs	r0, #40	@ 0x28
 8002f90:	4798      	blx	r3
	if (rslt == BME280_OK) {
 8002f92:	4b90      	ldr	r3, [pc, #576]	@ (80031d4 <main+0x314>)
 8002f94:	f993 3000 	ldrsb.w	r3, [r3]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d103      	bne.n	8002fa4 <main+0xe4>
		printf("BME280 Mode Successfully set.\r\n");
 8002f9c:	4892      	ldr	r0, [pc, #584]	@ (80031e8 <main+0x328>)
 8002f9e:	f008 fa9b 	bl	800b4d8 <puts>
 8002fa2:	e006      	b.n	8002fb2 <main+0xf2>
	} else {
		printf("Failed to set BME280 Mode. Error code: %d\r\n", rslt);
 8002fa4:	4b8b      	ldr	r3, [pc, #556]	@ (80031d4 <main+0x314>)
 8002fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8002faa:	4619      	mov	r1, r3
 8002fac:	488f      	ldr	r0, [pc, #572]	@ (80031ec <main+0x32c>)
 8002fae:	f008 fa2b 	bl	800b408 <iprintf>
	}

	/*-------------------------------------SSD1306 Setup-----------------------------------------------------*/
	ssd1306_Init(&hi2c1);
 8002fb2:	488f      	ldr	r0, [pc, #572]	@ (80031f0 <main+0x330>)
 8002fb4:	f7ff fb1e 	bl	80025f4 <ssd1306_Init>
	/*----------------------------------ESP32C3 Wifi Setup---------------------------------------------------*/

	char atCommand[100];

	// Restore ESP32 to factory settings (optional)
	HAL_UART_Transmit(&huart3, (uint8_t*) "Restoring ESP32\r\n",
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbc:	2211      	movs	r2, #17
 8002fbe:	498d      	ldr	r1, [pc, #564]	@ (80031f4 <main+0x334>)
 8002fc0:	488d      	ldr	r0, [pc, #564]	@ (80031f8 <main+0x338>)
 8002fc2:	f003 fc43 	bl	800684c <HAL_UART_Transmit>
			strlen("Restoring ESP32\r\n"), HAL_MAX_DELAY);
	sendATCommand("AT+RESTORE\r\n");
 8002fc6:	488d      	ldr	r0, [pc, #564]	@ (80031fc <main+0x33c>)
 8002fc8:	f7ff ff02 	bl	8002dd0 <sendATCommand>
	if (!waitForResponse("OK\r\n", 10000)) {
 8002fcc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002fd0:	488b      	ldr	r0, [pc, #556]	@ (8003200 <main+0x340>)
 8002fd2:	f7ff ff13 	bl	8002dfc <waitForResponse>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <main+0x130>
		HAL_UART_Transmit(&huart3, (uint8_t*) "Failed to Restore ESP32\r\n",
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	2219      	movs	r2, #25
 8002fe8:	4986      	ldr	r1, [pc, #536]	@ (8003204 <main+0x344>)
 8002fea:	4883      	ldr	r0, [pc, #524]	@ (80031f8 <main+0x338>)
 8002fec:	f003 fc2e 	bl	800684c <HAL_UART_Transmit>
				strlen("Failed to Restore ESP32\r\n"), HAL_MAX_DELAY);
	}

	HAL_Delay(4000);
 8002ff0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002ff4:	f001 f80e 	bl	8004014 <HAL_Delay>

	//-------------------------------------------------Wifi Con Setup---------------------------------------------//

	// Test AT communication
	HAL_UART_Transmit(&huart3, (uint8_t*) "Testing AT command\r\n",
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	2214      	movs	r2, #20
 8002ffe:	4982      	ldr	r1, [pc, #520]	@ (8003208 <main+0x348>)
 8003000:	487d      	ldr	r0, [pc, #500]	@ (80031f8 <main+0x338>)
 8003002:	f003 fc23 	bl	800684c <HAL_UART_Transmit>
			strlen("Testing AT command\r\n"), HAL_MAX_DELAY);
	sendATCommand("AT\r\n");
 8003006:	4881      	ldr	r0, [pc, #516]	@ (800320c <main+0x34c>)
 8003008:	f7ff fee2 	bl	8002dd0 <sendATCommand>
	if (!waitForResponse("OK\r\n", 2000)) {
 800300c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003010:	487b      	ldr	r0, [pc, #492]	@ (8003200 <main+0x340>)
 8003012:	f7ff fef3 	bl	8002dfc <waitForResponse>
 8003016:	4603      	mov	r3, r0
 8003018:	f083 0301 	eor.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <main+0x170>
		HAL_UART_Transmit(&huart3, (uint8_t*) "AT command failed\r\n",
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	2213      	movs	r2, #19
 8003028:	4979      	ldr	r1, [pc, #484]	@ (8003210 <main+0x350>)
 800302a:	4873      	ldr	r0, [pc, #460]	@ (80031f8 <main+0x338>)
 800302c:	f003 fc0e 	bl	800684c <HAL_UART_Transmit>
				strlen("AT command failed\r\n"), HAL_MAX_DELAY);
	}

	// Set WiFi mode to station mode
	HAL_UART_Transmit(&huart3,
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	2223      	movs	r2, #35	@ 0x23
 8003036:	4977      	ldr	r1, [pc, #476]	@ (8003214 <main+0x354>)
 8003038:	486f      	ldr	r0, [pc, #444]	@ (80031f8 <main+0x338>)
 800303a:	f003 fc07 	bl	800684c <HAL_UART_Transmit>
			(uint8_t*) "Setting WiFi mode to station mode\r\n",
			strlen("Setting WiFi mode to station mode\r\n"), HAL_MAX_DELAY);
	sendATCommand("AT+CWMODE=1\r\n");
 800303e:	4876      	ldr	r0, [pc, #472]	@ (8003218 <main+0x358>)
 8003040:	f7ff fec6 	bl	8002dd0 <sendATCommand>
	if (!waitForResponse("OK\r\n", 7000)) {
 8003044:	f641 3158 	movw	r1, #7000	@ 0x1b58
 8003048:	486d      	ldr	r0, [pc, #436]	@ (8003200 <main+0x340>)
 800304a:	f7ff fed7 	bl	8002dfc <waitForResponse>
 800304e:	4603      	mov	r3, r0
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d006      	beq.n	8003068 <main+0x1a8>
		HAL_UART_Transmit(&huart3, (uint8_t*) "Failed to Set Mode ESP32\r\n",
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	221a      	movs	r2, #26
 8003060:	496e      	ldr	r1, [pc, #440]	@ (800321c <main+0x35c>)
 8003062:	4865      	ldr	r0, [pc, #404]	@ (80031f8 <main+0x338>)
 8003064:	f003 fbf2 	bl	800684c <HAL_UART_Transmit>
				strlen("Failed to Set Mode ESP32\r\n"), HAL_MAX_DELAY);
	}

	// Connect to WiFi
	HAL_UART_Transmit(&huart3, (uint8_t*) "Connecting to Wifi\r\n",
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
 800306c:	2214      	movs	r2, #20
 800306e:	496c      	ldr	r1, [pc, #432]	@ (8003220 <main+0x360>)
 8003070:	4861      	ldr	r0, [pc, #388]	@ (80031f8 <main+0x338>)
 8003072:	f003 fbeb 	bl	800684c <HAL_UART_Transmit>
			strlen("Connecting to Wifi\r\n"), HAL_MAX_DELAY);
	snprintf(atCommand, sizeof(atCommand), "AT+CWJAP=\"%s\",\"%s\"\r\n",
 8003076:	1d38      	adds	r0, r7, #4
 8003078:	4b6a      	ldr	r3, [pc, #424]	@ (8003224 <main+0x364>)
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	4b6a      	ldr	r3, [pc, #424]	@ (8003228 <main+0x368>)
 800307e:	4a6b      	ldr	r2, [pc, #428]	@ (800322c <main+0x36c>)
 8003080:	2164      	movs	r1, #100	@ 0x64
 8003082:	f008 fa31 	bl	800b4e8 <sniprintf>
	WIFI_SSID, WIFI_PASS);
	sendATCommand(atCommand);
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fea1 	bl	8002dd0 <sendATCommand>
	if (!waitForResponse("WIFI GOT IP\r\n", 10000)) {
 800308e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003092:	4867      	ldr	r0, [pc, #412]	@ (8003230 <main+0x370>)
 8003094:	f7ff feb2 	bl	8002dfc <waitForResponse>
 8003098:	4603      	mov	r3, r0
 800309a:	f083 0301 	eor.w	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <main+0x1f2>
		HAL_UART_Transmit(&huart3, (uint8_t*) "WiFi Connection Failed\r\n",
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
 80030a8:	2218      	movs	r2, #24
 80030aa:	4962      	ldr	r1, [pc, #392]	@ (8003234 <main+0x374>)
 80030ac:	4852      	ldr	r0, [pc, #328]	@ (80031f8 <main+0x338>)
 80030ae:	f003 fbcd 	bl	800684c <HAL_UART_Transmit>
	}

	//-------------------------------------------------MQTT Con Setup---------------------------------------------//

	// Set MQTT Username and Password
	HAL_UART_Transmit(&huart3, (uint8_t*) "Configuring MQTT Credentials\r\n",
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	221e      	movs	r2, #30
 80030b8:	495f      	ldr	r1, [pc, #380]	@ (8003238 <main+0x378>)
 80030ba:	484f      	ldr	r0, [pc, #316]	@ (80031f8 <main+0x338>)
 80030bc:	f003 fbc6 	bl	800684c <HAL_UART_Transmit>
			strlen("Configuring MQTT Credentials\r\n"), HAL_MAX_DELAY);
	snprintf(atCommand, sizeof(atCommand),
 80030c0:	1d38      	adds	r0, r7, #4
 80030c2:	4b5e      	ldr	r3, [pc, #376]	@ (800323c <main+0x37c>)
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003240 <main+0x380>)
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003244 <main+0x384>)
 80030cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003248 <main+0x388>)
 80030ce:	2164      	movs	r1, #100	@ 0x64
 80030d0:	f008 fa0a 	bl	800b4e8 <sniprintf>
			"AT+MQTTUSERCFG=0,2,\"%s\",\"%s\",\"%s\",0,0,\"\"\r\n",
			MQTT_CLIENT_ID, MQTT_USERNAME, MQTT_PASSWORD);
	sendATCommand(atCommand);
 80030d4:	1d3b      	adds	r3, r7, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fe7a 	bl	8002dd0 <sendATCommand>
	if (!waitForResponse("OK\r\n", 1000)) {
 80030dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80030e0:	4847      	ldr	r0, [pc, #284]	@ (8003200 <main+0x340>)
 80030e2:	f7ff fe8b 	bl	8002dfc <waitForResponse>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f083 0301 	eor.w	r3, r3, #1
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <main+0x242>
		HAL_UART_Transmit(&huart3,
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	2226      	movs	r2, #38	@ 0x26
 80030f8:	4954      	ldr	r1, [pc, #336]	@ (800324c <main+0x38c>)
 80030fa:	483f      	ldr	r0, [pc, #252]	@ (80031f8 <main+0x338>)
 80030fc:	f003 fba6 	bl	800684c <HAL_UART_Transmit>
				(uint8_t*) "Failed to Configure MQTT Credentials\r\n",
				strlen("Failed to Configure MQTT Credentials\r\n"),
				HAL_MAX_DELAY);
		return;
 8003100:	e0ee      	b.n	80032e0 <main+0x420>
	}

	// Connect to MQTT Broker
	HAL_UART_Transmit(&huart3, (uint8_t*) "Connecting to MQTT Broker\r\n",
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	221b      	movs	r2, #27
 8003108:	4951      	ldr	r1, [pc, #324]	@ (8003250 <main+0x390>)
 800310a:	483b      	ldr	r0, [pc, #236]	@ (80031f8 <main+0x338>)
 800310c:	f003 fb9e 	bl	800684c <HAL_UART_Transmit>
			strlen("Connecting to MQTT Broker\r\n"), HAL_MAX_DELAY);
	snprintf(atCommand, sizeof(atCommand), "AT+MQTTCONN=0,\"%s\",%d,1\r\n",
 8003110:	1d38      	adds	r0, r7, #4
 8003112:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	4b4e      	ldr	r3, [pc, #312]	@ (8003254 <main+0x394>)
 800311a:	4a4f      	ldr	r2, [pc, #316]	@ (8003258 <main+0x398>)
 800311c:	2164      	movs	r1, #100	@ 0x64
 800311e:	f008 f9e3 	bl	800b4e8 <sniprintf>
			MQTT_BROKER_URL, MQTT_PORT);
	sendATCommand(atCommand);
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe53 	bl	8002dd0 <sendATCommand>
	if (!waitForResponse("OK\r\n", 5000)) {
 800312a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800312e:	4834      	ldr	r0, [pc, #208]	@ (8003200 <main+0x340>)
 8003130:	f7ff fe64 	bl	8002dfc <waitForResponse>
 8003134:	4603      	mov	r3, r0
 8003136:	f083 0301 	eor.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <main+0x28e>
		HAL_UART_Transmit(&huart3,
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	2222      	movs	r2, #34	@ 0x22
 8003146:	4945      	ldr	r1, [pc, #276]	@ (800325c <main+0x39c>)
 8003148:	482b      	ldr	r0, [pc, #172]	@ (80031f8 <main+0x338>)
 800314a:	f003 fb7f 	bl	800684c <HAL_UART_Transmit>
				(uint8_t*) "Failed to Connect to MQTT Broker\r\n",
				strlen("Failed to Connect to MQTT Broker\r\n"), HAL_MAX_DELAY);
	}

	// Subscribe to a Topic
	HAL_UART_Transmit(&huart3, (uint8_t*) "Subscribing to Topic\r\n",
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	2216      	movs	r2, #22
 8003154:	4942      	ldr	r1, [pc, #264]	@ (8003260 <main+0x3a0>)
 8003156:	4828      	ldr	r0, [pc, #160]	@ (80031f8 <main+0x338>)
 8003158:	f003 fb78 	bl	800684c <HAL_UART_Transmit>
			strlen("Subscribing to Topic\r\n"), HAL_MAX_DELAY);
	sendATCommand("AT+MQTTSUB=0,\"sensor/bme280\",1\r\n");
 800315c:	4841      	ldr	r0, [pc, #260]	@ (8003264 <main+0x3a4>)
 800315e:	f7ff fe37 	bl	8002dd0 <sendATCommand>
	if (!waitForResponse("OK\r\n", 1000)) {
 8003162:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003166:	4826      	ldr	r0, [pc, #152]	@ (8003200 <main+0x340>)
 8003168:	f7ff fe48 	bl	8002dfc <waitForResponse>
 800316c:	4603      	mov	r3, r0
 800316e:	f083 0301 	eor.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <main+0x2c8>
		HAL_UART_Transmit(&huart3,
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	221e      	movs	r2, #30
 800317e:	493a      	ldr	r1, [pc, #232]	@ (8003268 <main+0x3a8>)
 8003180:	481d      	ldr	r0, [pc, #116]	@ (80031f8 <main+0x338>)
 8003182:	f003 fb63 	bl	800684c <HAL_UART_Transmit>
				(uint8_t*) "Failed to Subscribe to Topic\r\n",
				strlen("Failed to Subscribe to Topic\r\n"), HAL_MAX_DELAY);
		return;
 8003186:	e0ab      	b.n	80032e0 <main+0x420>
	}

	// Publish to a Topic
	HAL_UART_Transmit(&huart3, (uint8_t*) "Publishing to Topic\r\n",
 8003188:	f04f 33ff 	mov.w	r3, #4294967295
 800318c:	2215      	movs	r2, #21
 800318e:	4937      	ldr	r1, [pc, #220]	@ (800326c <main+0x3ac>)
 8003190:	4819      	ldr	r0, [pc, #100]	@ (80031f8 <main+0x338>)
 8003192:	f003 fb5b 	bl	800684c <HAL_UART_Transmit>
			strlen("Publishing to Topic\r\n"), HAL_MAX_DELAY);
	sendATCommand("AT+MQTTPUB=0,\"sensor/bme280\",\"message\",1,0\r\n");
 8003196:	4836      	ldr	r0, [pc, #216]	@ (8003270 <main+0x3b0>)
 8003198:	f7ff fe1a 	bl	8002dd0 <sendATCommand>
	if (!waitForResponse("OK\r\n", 1000)) {
 800319c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80031a0:	4817      	ldr	r0, [pc, #92]	@ (8003200 <main+0x340>)
 80031a2:	f7ff fe2b 	bl	8002dfc <waitForResponse>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f083 0301 	eor.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d062      	beq.n	8003278 <main+0x3b8>
		HAL_UART_Transmit(&huart3, (uint8_t*) "Failed to Publish to Topic\r\n",
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	221c      	movs	r2, #28
 80031b8:	492e      	ldr	r1, [pc, #184]	@ (8003274 <main+0x3b4>)
 80031ba:	480f      	ldr	r0, [pc, #60]	@ (80031f8 <main+0x338>)
 80031bc:	f003 fb46 	bl	800684c <HAL_UART_Transmit>
				strlen("Failed to Publish to Topic\r\n"), HAL_MAX_DELAY);
		return;
 80031c0:	e08e      	b.n	80032e0 <main+0x420>
 80031c2:	bf00      	nop
 80031c4:	20000700 	.word	0x20000700
 80031c8:	08002b1d 	.word	0x08002b1d
 80031cc:	08002ba5 	.word	0x08002ba5
 80031d0:	08002b8d 	.word	0x08002b8d
 80031d4:	2000074c 	.word	0x2000074c
 80031d8:	0800d6f8 	.word	0x0800d6f8
 80031dc:	0800d71c 	.word	0x0800d71c
 80031e0:	0800d74c 	.word	0x0800d74c
 80031e4:	0800d76c 	.word	0x0800d76c
 80031e8:	0800d79c 	.word	0x0800d79c
 80031ec:	0800d7bc 	.word	0x0800d7bc
 80031f0:	20000604 	.word	0x20000604
 80031f4:	0800d7e8 	.word	0x0800d7e8
 80031f8:	200006a0 	.word	0x200006a0
 80031fc:	0800d7fc 	.word	0x0800d7fc
 8003200:	0800d80c 	.word	0x0800d80c
 8003204:	0800d814 	.word	0x0800d814
 8003208:	0800d830 	.word	0x0800d830
 800320c:	0800d848 	.word	0x0800d848
 8003210:	0800d850 	.word	0x0800d850
 8003214:	0800d864 	.word	0x0800d864
 8003218:	0800d888 	.word	0x0800d888
 800321c:	0800d898 	.word	0x0800d898
 8003220:	0800d8b4 	.word	0x0800d8b4
 8003224:	0800d8ec 	.word	0x0800d8ec
 8003228:	0800d8cc 	.word	0x0800d8cc
 800322c:	0800d8d4 	.word	0x0800d8d4
 8003230:	0800d8fc 	.word	0x0800d8fc
 8003234:	0800d90c 	.word	0x0800d90c
 8003238:	0800d928 	.word	0x0800d928
 800323c:	0800d978 	.word	0x0800d978
 8003240:	0800d984 	.word	0x0800d984
 8003244:	0800d948 	.word	0x0800d948
 8003248:	0800d94c 	.word	0x0800d94c
 800324c:	0800d990 	.word	0x0800d990
 8003250:	0800d9b8 	.word	0x0800d9b8
 8003254:	0800d9d4 	.word	0x0800d9d4
 8003258:	0800da08 	.word	0x0800da08
 800325c:	0800da24 	.word	0x0800da24
 8003260:	0800da48 	.word	0x0800da48
 8003264:	0800da60 	.word	0x0800da60
 8003268:	0800da84 	.word	0x0800da84
 800326c:	0800daa4 	.word	0x0800daa4
 8003270:	0800dabc 	.word	0x0800dabc
 8003274:	0800daec 	.word	0x0800daec
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8003278:	f003 ff7e 	bl	8007178 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of i2c1Mutex */
	i2c1MutexHandle = osMutexNew(&i2c1Mutex_attributes);
 800327c:	481a      	ldr	r0, [pc, #104]	@ (80032e8 <main+0x428>)
 800327e:	f004 f872 	bl	8007366 <osMutexNew>
 8003282:	4603      	mov	r3, r0
 8003284:	4a19      	ldr	r2, [pc, #100]	@ (80032ec <main+0x42c>)
 8003286:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of bme280Data */
	bme280DataHandle = osMessageQueueNew(16, sizeof(bme280Data_t),
 8003288:	4a19      	ldr	r2, [pc, #100]	@ (80032f0 <main+0x430>)
 800328a:	210c      	movs	r1, #12
 800328c:	2010      	movs	r0, #16
 800328e:	f004 f978 	bl	8007582 <osMessageQueueNew>
 8003292:	4603      	mov	r3, r0
 8003294:	4a17      	ldr	r2, [pc, #92]	@ (80032f4 <main+0x434>)
 8003296:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8003298:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <main+0x438>)
 800329a:	2100      	movs	r1, #0
 800329c:	4817      	ldr	r0, [pc, #92]	@ (80032fc <main+0x43c>)
 800329e:	f003 ffb5 	bl	800720c <osThreadNew>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4a16      	ldr	r2, [pc, #88]	@ (8003300 <main+0x440>)
 80032a6:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of bme280Task */
	bme280TaskHandle = osThreadNew(Startbme280Task, NULL,
 80032a8:	4a16      	ldr	r2, [pc, #88]	@ (8003304 <main+0x444>)
 80032aa:	2100      	movs	r1, #0
 80032ac:	4816      	ldr	r0, [pc, #88]	@ (8003308 <main+0x448>)
 80032ae:	f003 ffad 	bl	800720c <osThreadNew>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4a15      	ldr	r2, [pc, #84]	@ (800330c <main+0x44c>)
 80032b6:	6013      	str	r3, [r2, #0]
			&bme280Task_attributes);

	/* creation of lcdTask */
	lcdTaskHandle = osThreadNew(StartlcdTask, NULL, &lcdTask_attributes);
 80032b8:	4a15      	ldr	r2, [pc, #84]	@ (8003310 <main+0x450>)
 80032ba:	2100      	movs	r1, #0
 80032bc:	4815      	ldr	r0, [pc, #84]	@ (8003314 <main+0x454>)
 80032be:	f003 ffa5 	bl	800720c <osThreadNew>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4a14      	ldr	r2, [pc, #80]	@ (8003318 <main+0x458>)
 80032c6:	6013      	str	r3, [r2, #0]

	/* creation of mqttTask */
	mqttTaskHandle = osThreadNew(StartmqttTask, NULL, &mqttTask_attributes);
 80032c8:	4a14      	ldr	r2, [pc, #80]	@ (800331c <main+0x45c>)
 80032ca:	2100      	movs	r1, #0
 80032cc:	4814      	ldr	r0, [pc, #80]	@ (8003320 <main+0x460>)
 80032ce:	f003 ff9d 	bl	800720c <osThreadNew>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4a13      	ldr	r2, [pc, #76]	@ (8003324 <main+0x464>)
 80032d6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80032d8:	f003 ff72 	bl	80071c0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <main+0x41c>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3768      	adds	r7, #104	@ 0x68
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	0800e950 	.word	0x0800e950
 80032ec:	200006fc 	.word	0x200006fc
 80032f0:	0800e938 	.word	0x0800e938
 80032f4:	200006f8 	.word	0x200006f8
 80032f8:	0800e8a8 	.word	0x0800e8a8
 80032fc:	08003799 	.word	0x08003799
 8003300:	200006e8 	.word	0x200006e8
 8003304:	0800e8cc 	.word	0x0800e8cc
 8003308:	080037b9 	.word	0x080037b9
 800330c:	200006ec 	.word	0x200006ec
 8003310:	0800e8f0 	.word	0x0800e8f0
 8003314:	0800388d 	.word	0x0800388d
 8003318:	200006f0 	.word	0x200006f0
 800331c:	0800e914 	.word	0x0800e914
 8003320:	08003995 	.word	0x08003995
 8003324:	200006f4 	.word	0x200006f4

08003328 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b094      	sub	sp, #80	@ 0x50
 800332c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800332e:	f107 0320 	add.w	r3, r7, #32
 8003332:	2230      	movs	r2, #48	@ 0x30
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f008 f9e2 	bl	800b700 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	4b28      	ldr	r3, [pc, #160]	@ (80033f4 <SystemClock_Config+0xcc>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	4a27      	ldr	r2, [pc, #156]	@ (80033f4 <SystemClock_Config+0xcc>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335a:	6413      	str	r3, [r2, #64]	@ 0x40
 800335c:	4b25      	ldr	r3, [pc, #148]	@ (80033f4 <SystemClock_Config+0xcc>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003368:	2300      	movs	r3, #0
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	4b22      	ldr	r3, [pc, #136]	@ (80033f8 <SystemClock_Config+0xd0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a21      	ldr	r2, [pc, #132]	@ (80033f8 <SystemClock_Config+0xd0>)
 8003372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b1f      	ldr	r3, [pc, #124]	@ (80033f8 <SystemClock_Config+0xd0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003384:	2301      	movs	r3, #1
 8003386:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800338e:	2302      	movs	r3, #2
 8003390:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003392:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003396:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003398:	2304      	movs	r3, #4
 800339a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 175;
 800339c:	23af      	movs	r3, #175	@ 0xaf
 800339e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80033a0:	2304      	movs	r3, #4
 80033a2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80033a4:	2307      	movs	r3, #7
 80033a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80033a8:	f107 0320 	add.w	r3, r7, #32
 80033ac:	4618      	mov	r0, r3
 80033ae:	f002 fa91 	bl	80058d4 <HAL_RCC_OscConfig>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <SystemClock_Config+0x94>
		Error_Handler();
 80033b8:	f000 fb48 	bl	8003a4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80033bc:	230f      	movs	r3, #15
 80033be:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033c0:	2302      	movs	r3, #2
 80033c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033d2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80033d4:	f107 030c 	add.w	r3, r7, #12
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f002 fcf2 	bl	8005dc4 <HAL_RCC_ClockConfig>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <SystemClock_Config+0xc2>
		Error_Handler();
 80033e6:	f000 fb31 	bl	8003a4c <Error_Handler>
	}
}
 80033ea:	bf00      	nop
 80033ec:	3750      	adds	r7, #80	@ 0x50
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000

080033fc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003400:	4b12      	ldr	r3, [pc, #72]	@ (800344c <MX_I2C1_Init+0x50>)
 8003402:	4a13      	ldr	r2, [pc, #76]	@ (8003450 <MX_I2C1_Init+0x54>)
 8003404:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003406:	4b11      	ldr	r3, [pc, #68]	@ (800344c <MX_I2C1_Init+0x50>)
 8003408:	4a12      	ldr	r2, [pc, #72]	@ (8003454 <MX_I2C1_Init+0x58>)
 800340a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800340c:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <MX_I2C1_Init+0x50>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <MX_I2C1_Init+0x50>)
 8003414:	2200      	movs	r2, #0
 8003416:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <MX_I2C1_Init+0x50>)
 800341a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800341e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003420:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <MX_I2C1_Init+0x50>)
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <MX_I2C1_Init+0x50>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800342c:	4b07      	ldr	r3, [pc, #28]	@ (800344c <MX_I2C1_Init+0x50>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <MX_I2C1_Init+0x50>)
 8003434:	2200      	movs	r2, #0
 8003436:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003438:	4804      	ldr	r0, [pc, #16]	@ (800344c <MX_I2C1_Init+0x50>)
 800343a:	f001 f8c1 	bl	80045c0 <HAL_I2C_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8003444:	f000 fb02 	bl	8003a4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000604 	.word	0x20000604
 8003450:	40005400 	.word	0x40005400
 8003454:	000186a0 	.word	0x000186a0

08003458 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800345c:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800345e:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <MX_USART2_UART_Init+0x50>)
 8003460:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003464:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003468:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800348e:	4805      	ldr	r0, [pc, #20]	@ (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003490:	f003 f98c 	bl	80067ac <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800349a:	f000 fad7 	bl	8003a4c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000658 	.word	0x20000658
 80034a8:	40004400 	.word	0x40004400

080034ac <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034b2:	4a12      	ldr	r2, [pc, #72]	@ (80034fc <MX_USART3_UART_Init+0x50>)
 80034b4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80034b6:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034bc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034be:	4b0e      	ldr	r3, [pc, #56]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80034d0:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034d2:	220c      	movs	r2, #12
 80034d4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034dc:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80034e2:	4805      	ldr	r0, [pc, #20]	@ (80034f8 <MX_USART3_UART_Init+0x4c>)
 80034e4:	f003 f962 	bl	80067ac <HAL_UART_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80034ee:	f000 faad 	bl	8003a4c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200006a0 	.word	0x200006a0
 80034fc:	40004800 	.word	0x40004800

08003500 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	@ 0x30
 8003504:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003506:	f107 031c 	add.w	r3, r7, #28
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	4b99      	ldr	r3, [pc, #612]	@ (8003780 <MX_GPIO_Init+0x280>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	4a98      	ldr	r2, [pc, #608]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003520:	f043 0310 	orr.w	r3, r3, #16
 8003524:	6313      	str	r3, [r2, #48]	@ 0x30
 8003526:	4b96      	ldr	r3, [pc, #600]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	4b92      	ldr	r3, [pc, #584]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	4a91      	ldr	r2, [pc, #580]	@ (8003780 <MX_GPIO_Init+0x280>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6313      	str	r3, [r2, #48]	@ 0x30
 8003542:	4b8f      	ldr	r3, [pc, #572]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	4b8b      	ldr	r3, [pc, #556]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	4a8a      	ldr	r2, [pc, #552]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800355c:	6313      	str	r3, [r2, #48]	@ 0x30
 800355e:	4b88      	ldr	r3, [pc, #544]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	4b84      	ldr	r3, [pc, #528]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	4a83      	ldr	r2, [pc, #524]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6313      	str	r3, [r2, #48]	@ 0x30
 800357a:	4b81      	ldr	r3, [pc, #516]	@ (8003780 <MX_GPIO_Init+0x280>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	4b7d      	ldr	r3, [pc, #500]	@ (8003780 <MX_GPIO_Init+0x280>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	4a7c      	ldr	r2, [pc, #496]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	6313      	str	r3, [r2, #48]	@ 0x30
 8003596:	4b7a      	ldr	r3, [pc, #488]	@ (8003780 <MX_GPIO_Init+0x280>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	4b76      	ldr	r3, [pc, #472]	@ (8003780 <MX_GPIO_Init+0x280>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	4a75      	ldr	r2, [pc, #468]	@ (8003780 <MX_GPIO_Init+0x280>)
 80035ac:	f043 0308 	orr.w	r3, r3, #8
 80035b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035b2:	4b73      	ldr	r3, [pc, #460]	@ (8003780 <MX_GPIO_Init+0x280>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80035be:	2200      	movs	r2, #0
 80035c0:	2108      	movs	r1, #8
 80035c2:	4870      	ldr	r0, [pc, #448]	@ (8003784 <MX_GPIO_Init+0x284>)
 80035c4:	f000 ffc8 	bl	8004558 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 80035c8:	2201      	movs	r2, #1
 80035ca:	2101      	movs	r1, #1
 80035cc:	486e      	ldr	r0, [pc, #440]	@ (8003788 <MX_GPIO_Init+0x288>)
 80035ce:	f000 ffc3 	bl	8004558 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80035d2:	2200      	movs	r2, #0
 80035d4:	f24f 2110 	movw	r1, #61968	@ 0xf210
 80035d8:	486c      	ldr	r0, [pc, #432]	@ (800378c <MX_GPIO_Init+0x28c>)
 80035da:	f000 ffbd 	bl	8004558 <HAL_GPIO_WritePin>
	GPIO_PIN_9 | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80035de:	2308      	movs	r3, #8
 80035e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e2:	2301      	movs	r3, #1
 80035e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f107 031c 	add.w	r3, r7, #28
 80035f2:	4619      	mov	r1, r3
 80035f4:	4863      	ldr	r0, [pc, #396]	@ (8003784 <MX_GPIO_Init+0x284>)
 80035f6:	f000 fe13 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fe:	2301      	movs	r3, #1
 8003600:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800360a:	f107 031c 	add.w	r3, r7, #28
 800360e:	4619      	mov	r1, r3
 8003610:	485d      	ldr	r0, [pc, #372]	@ (8003788 <MX_GPIO_Init+0x288>)
 8003612:	f000 fe05 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003616:	2308      	movs	r3, #8
 8003618:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003622:	2300      	movs	r3, #0
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003626:	2305      	movs	r3, #5
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800362a:	f107 031c 	add.w	r3, r7, #28
 800362e:	4619      	mov	r1, r3
 8003630:	4855      	ldr	r0, [pc, #340]	@ (8003788 <MX_GPIO_Init+0x288>)
 8003632:	f000 fdf5 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8003636:	2301      	movs	r3, #1
 8003638:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800363a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800363e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4619      	mov	r1, r3
 800364a:	4851      	ldr	r0, [pc, #324]	@ (8003790 <MX_GPIO_Init+0x290>)
 800364c:	f000 fde8 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003650:	2310      	movs	r3, #16
 8003652:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	2300      	movs	r3, #0
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003660:	2306      	movs	r3, #6
 8003662:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003664:	f107 031c 	add.w	r3, r7, #28
 8003668:	4619      	mov	r1, r3
 800366a:	4849      	ldr	r0, [pc, #292]	@ (8003790 <MX_GPIO_Init+0x290>)
 800366c:	f000 fdd8 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8003670:	23e0      	movs	r3, #224	@ 0xe0
 8003672:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	2300      	movs	r3, #0
 800367e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003680:	2305      	movs	r3, #5
 8003682:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003684:	f107 031c 	add.w	r3, r7, #28
 8003688:	4619      	mov	r1, r3
 800368a:	4841      	ldr	r0, [pc, #260]	@ (8003790 <MX_GPIO_Init+0x290>)
 800368c:	f000 fdc8 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8003690:	2304      	movs	r3, #4
 8003692:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003694:	2300      	movs	r3, #0
 8003696:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800369c:	f107 031c 	add.w	r3, r7, #28
 80036a0:	4619      	mov	r1, r3
 80036a2:	483c      	ldr	r0, [pc, #240]	@ (8003794 <MX_GPIO_Init+0x294>)
 80036a4:	f000 fdbc 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80036a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	2302      	movs	r3, #2
 80036b0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b6:	2300      	movs	r3, #0
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036ba:	2305      	movs	r3, #5
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80036be:	f107 031c 	add.w	r3, r7, #28
 80036c2:	4619      	mov	r1, r3
 80036c4:	4833      	ldr	r0, [pc, #204]	@ (8003794 <MX_GPIO_Init+0x294>)
 80036c6:	f000 fdab 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD9 LD4_Pin LD3_Pin LD5_Pin
	 LD6_Pin Audio_RST_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin
 80036ca:	f24f 2310 	movw	r3, #61968	@ 0xf210
 80036ce:	61fb      	str	r3, [r7, #28]
			| Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d0:	2301      	movs	r3, #1
 80036d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d8:	2300      	movs	r3, #0
 80036da:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036dc:	f107 031c 	add.w	r3, r7, #28
 80036e0:	4619      	mov	r1, r3
 80036e2:	482a      	ldr	r0, [pc, #168]	@ (800378c <MX_GPIO_Init+0x28c>)
 80036e4:	f000 fd9c 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 80036e8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80036ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036fa:	2306      	movs	r3, #6
 80036fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	4619      	mov	r1, r3
 8003704:	4820      	ldr	r0, [pc, #128]	@ (8003788 <MX_GPIO_Init+0x288>)
 8003706:	f000 fd8b 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800370a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800370e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003710:	2300      	movs	r3, #0
 8003712:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	4619      	mov	r1, r3
 800371e:	481c      	ldr	r0, [pc, #112]	@ (8003790 <MX_GPIO_Init+0x290>)
 8003720:	f000 fd7e 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8003724:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003728:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372a:	2302      	movs	r3, #2
 800372c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003732:	2300      	movs	r3, #0
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003736:	230a      	movs	r3, #10
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373a:	f107 031c 	add.w	r3, r7, #28
 800373e:	4619      	mov	r1, r3
 8003740:	4813      	ldr	r0, [pc, #76]	@ (8003790 <MX_GPIO_Init+0x290>)
 8003742:	f000 fd6d 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003746:	2320      	movs	r3, #32
 8003748:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003752:	f107 031c 	add.w	r3, r7, #28
 8003756:	4619      	mov	r1, r3
 8003758:	480c      	ldr	r0, [pc, #48]	@ (800378c <MX_GPIO_Init+0x28c>)
 800375a:	f000 fd61 	bl	8004220 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800375e:	2302      	movs	r3, #2
 8003760:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003762:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003766:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800376c:	f107 031c 	add.w	r3, r7, #28
 8003770:	4619      	mov	r1, r3
 8003772:	4804      	ldr	r0, [pc, #16]	@ (8003784 <MX_GPIO_Init+0x284>)
 8003774:	f000 fd54 	bl	8004220 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003778:	bf00      	nop
 800377a:	3730      	adds	r7, #48	@ 0x30
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40023800 	.word	0x40023800
 8003784:	40021000 	.word	0x40021000
 8003788:	40020800 	.word	0x40020800
 800378c:	40020c00 	.word	0x40020c00
 8003790:	40020000 	.word	0x40020000
 8003794:	40020400 	.word	0x40020400

08003798 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
 80037a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037a4:	4803      	ldr	r0, [pc, #12]	@ (80037b4 <StartDefaultTask+0x1c>)
 80037a6:	f000 fef0 	bl	800458a <HAL_GPIO_TogglePin>
		osDelay(200);
 80037aa:	20c8      	movs	r0, #200	@ 0xc8
 80037ac:	f003 fdc0 	bl	8007330 <osDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_9);
 80037b0:	bf00      	nop
 80037b2:	e7f5      	b.n	80037a0 <StartDefaultTask+0x8>
 80037b4:	40020c00 	.word	0x40020c00

080037b8 <Startbme280Task>:
 * @brief Function implementing the bme280Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Startbme280Task */
void Startbme280Task(void *argument) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Startbme280Task */
	bme280Data_t sensorData;
	/* Infinite loop */
	for (;;) {

		if (osMutexAcquire(i2c1MutexHandle, osWaitForever) == osOK) {
 80037c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003870 <Startbme280Task+0xb8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fe52 	bl	8007472 <osMutexAcquire>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d145      	bne.n	8003860 <Startbme280Task+0xa8>
			/* BME280 Data Collection */
			rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80037d4:	4a27      	ldr	r2, [pc, #156]	@ (8003874 <Startbme280Task+0xbc>)
 80037d6:	4928      	ldr	r1, [pc, #160]	@ (8003878 <Startbme280Task+0xc0>)
 80037d8:	2007      	movs	r0, #7
 80037da:	f7fd fdc2 	bl	8001362 <bme280_get_sensor_data>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b26      	ldr	r3, [pc, #152]	@ (800387c <Startbme280Task+0xc4>)
 80037e4:	701a      	strb	r2, [r3, #0]
			osMutexRelease(i2c1MutexHandle); // Release the I2C1 mutex
 80037e6:	4b22      	ldr	r3, [pc, #136]	@ (8003870 <Startbme280Task+0xb8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 fe8c 	bl	8007508 <osMutexRelease>
			if (rslt == BME280_OK) {
 80037f0:	4b22      	ldr	r3, [pc, #136]	@ (800387c <Startbme280Task+0xc4>)
 80037f2:	f993 3000 	ldrsb.w	r3, [r3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d129      	bne.n	800384e <Startbme280Task+0x96>
				sensorData.temperature = comp_data.temperature / 100.0f; //100.0f is to make at least one operand float type
 80037fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <Startbme280Task+0xc0>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003806:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8003880 <Startbme280Task+0xc8>
 800380a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800380e:	edc7 7a03 	vstr	s15, [r7, #12]
				sensorData.pressure = comp_data.pressure * (0.00750062 / 100); //1hPa = 0.00750062 mmHg
 8003812:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <Startbme280Task+0xc0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fe74 	bl	8000504 <__aeabi_ui2d>
 800381c:	a312      	add	r3, pc, #72	@ (adr r3, 8003868 <Startbme280Task+0xb0>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc fee9 	bl	80005f8 <__aeabi_dmul>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	f7fd f9bb 	bl	8000ba8 <__aeabi_d2f>
 8003832:	4603      	mov	r3, r0
 8003834:	613b      	str	r3, [r7, #16]
				sensorData.humidity = comp_data.humidity / 1024.0f; //1024.0f is to make at least one operand float type
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <Startbme280Task+0xc0>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003842:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003884 <Startbme280Task+0xcc>
 8003846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800384a:	edc7 7a05 	vstr	s15, [r7, #20]
			}
			// Send data to the queue
			if (osMessageQueuePut(bme280DataHandle, &sensorData, 0,
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <Startbme280Task+0xd0>)
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	f107 010c 	add.w	r1, r7, #12
 8003856:	f04f 33ff 	mov.w	r3, #4294967295
 800385a:	2200      	movs	r2, #0
 800385c:	f003 ff04 	bl	8007668 <osMessageQueuePut>
			osWaitForever) != osOK) {
			}

		}
		osDelay(1);
 8003860:	2001      	movs	r0, #1
 8003862:	f003 fd65 	bl	8007330 <osDelay>
		if (osMutexAcquire(i2c1MutexHandle, osWaitForever) == osOK) {
 8003866:	e7ab      	b.n	80037c0 <Startbme280Task+0x8>
 8003868:	b4389e86 	.word	0xb4389e86
 800386c:	3f13a994 	.word	0x3f13a994
 8003870:	200006fc 	.word	0x200006fc
 8003874:	20000700 	.word	0x20000700
 8003878:	20000740 	.word	0x20000740
 800387c:	2000074c 	.word	0x2000074c
 8003880:	42c80000 	.word	0x42c80000
 8003884:	44800000 	.word	0x44800000
 8003888:	200006f8 	.word	0x200006f8

0800388c <StartlcdTask>:
 * @brief Function implementing the lcdTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartlcdTask */
void StartlcdTask(void *argument) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b090      	sub	sp, #64	@ 0x40
 8003890:	af02      	add	r7, sp, #8
 8003892:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartlcdTask */
	bme280Data_t receivedData;
	char buffer[32];
	/* Infinite loop */
	for (;;) {
		if (osMessageQueueGet(bme280DataHandle, &receivedData, NULL,
 8003894:	4b38      	ldr	r3, [pc, #224]	@ (8003978 <StartlcdTask+0xec>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	2200      	movs	r2, #0
 80038a2:	f003 ff41 	bl	8007728 <osMessageQueueGet>
		} else {
			// Handle error: Failed to receive data from queue
		}

		// Clear the display
		ssd1306_Fill(Black);
 80038a6:	2000      	movs	r0, #0
 80038a8:	f7fe ffc4 	bl	8002834 <ssd1306_Fill>

		// Print the received data on the SSD1306 display
		// Write data to local screen buffer
		snprintf(buffer, sizeof(buffer), "Tem:%.2f C",
				receivedData.temperature);
 80038ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
		snprintf(buffer, sizeof(buffer), "Tem:%.2f C",
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fc fe4a 	bl	8000548 <__aeabi_f2d>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	f107 000c 	add.w	r0, r7, #12
 80038bc:	e9cd 2300 	strd	r2, r3, [sp]
 80038c0:	4a2e      	ldr	r2, [pc, #184]	@ (800397c <StartlcdTask+0xf0>)
 80038c2:	2120      	movs	r1, #32
 80038c4:	f007 fe10 	bl	800b4e8 <sniprintf>
		ssd1306_SetCursor(0, 0);
 80038c8:	2100      	movs	r1, #0
 80038ca:	2000      	movs	r0, #0
 80038cc:	f7ff f90e 	bl	8002aec <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_11x18, White);
 80038d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <StartlcdTask+0xf4>)
 80038d2:	f107 000c 	add.w	r0, r7, #12
 80038d6:	2301      	movs	r3, #1
 80038d8:	ca06      	ldmia	r2, {r1, r2}
 80038da:	f7ff f8e1 	bl	8002aa0 <ssd1306_WriteString>

		snprintf(buffer, sizeof(buffer), "Hum:%.2f %%", receivedData.humidity);
 80038de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fe31 	bl	8000548 <__aeabi_f2d>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	f107 000c 	add.w	r0, r7, #12
 80038ee:	e9cd 2300 	strd	r2, r3, [sp]
 80038f2:	4a24      	ldr	r2, [pc, #144]	@ (8003984 <StartlcdTask+0xf8>)
 80038f4:	2120      	movs	r1, #32
 80038f6:	f007 fdf7 	bl	800b4e8 <sniprintf>
		ssd1306_SetCursor(0, 18); // Move cursor to the next line
 80038fa:	2112      	movs	r1, #18
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7ff f8f5 	bl	8002aec <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8003902:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <StartlcdTask+0xf4>)
 8003904:	f107 000c 	add.w	r0, r7, #12
 8003908:	2301      	movs	r3, #1
 800390a:	ca06      	ldmia	r2, {r1, r2}
 800390c:	f7ff f8c8 	bl	8002aa0 <ssd1306_WriteString>

		snprintf(buffer, sizeof(buffer), "Prs:%.2f mmHg",
				receivedData.pressure);
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
		snprintf(buffer, sizeof(buffer), "Prs:%.2f mmHg",
 8003912:	4618      	mov	r0, r3
 8003914:	f7fc fe18 	bl	8000548 <__aeabi_f2d>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	f107 000c 	add.w	r0, r7, #12
 8003920:	e9cd 2300 	strd	r2, r3, [sp]
 8003924:	4a18      	ldr	r2, [pc, #96]	@ (8003988 <StartlcdTask+0xfc>)
 8003926:	2120      	movs	r1, #32
 8003928:	f007 fdde 	bl	800b4e8 <sniprintf>
		ssd1306_SetCursor(0, 36); // Move cursor to the next line
 800392c:	2124      	movs	r1, #36	@ 0x24
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff f8dc 	bl	8002aec <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_11x18, White);
 8003934:	4a12      	ldr	r2, [pc, #72]	@ (8003980 <StartlcdTask+0xf4>)
 8003936:	f107 000c 	add.w	r0, r7, #12
 800393a:	2301      	movs	r3, #1
 800393c:	ca06      	ldmia	r2, {r1, r2}
 800393e:	f7ff f8af 	bl	8002aa0 <ssd1306_WriteString>

		////////////////////------Mutex------------////////////////////////
		if (osMutexAcquire(i2c1MutexHandle, osWaitForever) == osOK) {
 8003942:	4b12      	ldr	r3, [pc, #72]	@ (800398c <StartlcdTask+0x100>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f04f 31ff 	mov.w	r1, #4294967295
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fd91 	bl	8007472 <osMutexAcquire>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <StartlcdTask+0xda>
			// Update the SSD1306 display
			ssd1306_UpdateScreen(&hi2c1);
 8003956:	480e      	ldr	r0, [pc, #56]	@ (8003990 <StartlcdTask+0x104>)
 8003958:	f7fe ff90 	bl	800287c <ssd1306_UpdateScreen>
			// Release the mutex after accessing the I2C1 peripheral
			osMutexRelease(i2c1MutexHandle);
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <StartlcdTask+0x100>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f003 fdd1 	bl	8007508 <osMutexRelease>
		} else {
			// Handle error: Failed to acquire mutex
		}
		// Release the mutex after accessing the I2C1 peripheral
		osMutexRelease(i2c1MutexHandle);
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <StartlcdTask+0x100>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fdcc 	bl	8007508 <osMutexRelease>
		////////////////////------Mutex------------////////////////////////

		osDelay(1);
 8003970:	2001      	movs	r0, #1
 8003972:	f003 fcdd 	bl	8007330 <osDelay>
		if (osMessageQueueGet(bme280DataHandle, &receivedData, NULL,
 8003976:	e78d      	b.n	8003894 <StartlcdTask+0x8>
 8003978:	200006f8 	.word	0x200006f8
 800397c:	0800db0c 	.word	0x0800db0c
 8003980:	20000000 	.word	0x20000000
 8003984:	0800db18 	.word	0x0800db18
 8003988:	0800db24 	.word	0x0800db24
 800398c:	200006fc 	.word	0x200006fc
 8003990:	20000604 	.word	0x20000604

08003994 <StartmqttTask>:
 * @brief Function implementing the mqttTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartmqttTask */
void StartmqttTask(void *argument) {
 8003994:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003998:	b0ac      	sub	sp, #176	@ 0xb0
 800399a:	af06      	add	r7, sp, #24
 800399c:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartmqttTask */
	bme280Data_t sensorData;
	char mqttPayload[128];
	const char *mqttTopic = "sensor/bme280";
 800399e:	4b1f      	ldr	r3, [pc, #124]	@ (8003a1c <StartmqttTask+0x88>)
 80039a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	/* Infinite loop */
	for (;;) {
		// Get data from the queue
		if (osMessageQueueGet(bme280DataHandle, &sensorData, NULL,
 80039a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a20 <StartmqttTask+0x8c>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	2200      	movs	r2, #0
 80039b2:	f003 feb9 	bl	8007728 <osMessageQueueGet>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d12b      	bne.n	8003a14 <StartmqttTask+0x80>
		osWaitForever) == osOK) {
			// Format the data as a JSON string
			snprintf(mqttPayload, sizeof(mqttPayload),
					"{\"temperature\": %.2f, \"pressure\": %.2f, \"humidity\": %.2f}",
					sensorData.temperature, sensorData.pressure,
 80039bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
			snprintf(mqttPayload, sizeof(mqttPayload),
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fc fdc1 	bl	8000548 <__aeabi_f2d>
 80039c6:	4604      	mov	r4, r0
 80039c8:	460d      	mov	r5, r1
					sensorData.temperature, sensorData.pressure,
 80039ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
			snprintf(mqttPayload, sizeof(mqttPayload),
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc fdba 	bl	8000548 <__aeabi_f2d>
 80039d4:	4680      	mov	r8, r0
 80039d6:	4689      	mov	r9, r1
					sensorData.humidity);
 80039d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
			snprintf(mqttPayload, sizeof(mqttPayload),
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fc fdb3 	bl	8000548 <__aeabi_f2d>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	f107 0008 	add.w	r0, r7, #8
 80039ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80039f2:	e9cd 4500 	strd	r4, r5, [sp]
 80039f6:	4a0b      	ldr	r2, [pc, #44]	@ (8003a24 <StartmqttTask+0x90>)
 80039f8:	2180      	movs	r1, #128	@ 0x80
 80039fa:	f007 fd75 	bl	800b4e8 <sniprintf>

			// Publish the data to the MQTT broker
			publishMQTTMessage(mqttTopic, mqttPayload);
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	4619      	mov	r1, r3
 8003a04:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003a08:	f7ff f924 	bl	8002c54 <publishMQTTMessage>

			osDelay(1000); // Delay for a while before the next publish
 8003a0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a10:	f003 fc8e 	bl	8007330 <osDelay>
		}
		osDelay(1);
 8003a14:	2001      	movs	r0, #1
 8003a16:	f003 fc8b 	bl	8007330 <osDelay>
		if (osMessageQueueGet(bme280DataHandle, &sensorData, NULL,
 8003a1a:	e7c3      	b.n	80039a4 <StartmqttTask+0x10>
 8003a1c:	0800d68c 	.word	0x0800d68c
 8003a20:	200006f8 	.word	0x200006f8
 8003a24:	0800d69c 	.word	0x0800d69c

08003a28 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003a3a:	f000 facb 	bl	8003fd4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40001000 	.word	0x40001000

08003a4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a50:	b672      	cpsid	i
}
 8003a52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <Error_Handler+0x8>

08003a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <HAL_MspInit+0x54>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	4a11      	ldr	r2, [pc, #68]	@ (8003aac <HAL_MspInit+0x54>)
 8003a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003aac <HAL_MspInit+0x54>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <HAL_MspInit+0x54>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	4a0a      	ldr	r2, [pc, #40]	@ (8003aac <HAL_MspInit+0x54>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8a:	4b08      	ldr	r3, [pc, #32]	@ (8003aac <HAL_MspInit+0x54>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	210f      	movs	r1, #15
 8003a9a:	f06f 0001 	mvn.w	r0, #1
 8003a9e:	f000 fb95 	bl	80041cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800

08003ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	@ 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a19      	ldr	r2, [pc, #100]	@ (8003b34 <HAL_I2C_MspInit+0x84>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d12c      	bne.n	8003b2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	4b18      	ldr	r3, [pc, #96]	@ (8003b38 <HAL_I2C_MspInit+0x88>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	4a17      	ldr	r2, [pc, #92]	@ (8003b38 <HAL_I2C_MspInit+0x88>)
 8003adc:	f043 0302 	orr.w	r3, r3, #2
 8003ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae2:	4b15      	ldr	r3, [pc, #84]	@ (8003b38 <HAL_I2C_MspInit+0x88>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003aee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003af4:	2312      	movs	r3, #18
 8003af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	2300      	movs	r3, #0
 8003afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b00:	2304      	movs	r3, #4
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4619      	mov	r1, r3
 8003b0a:	480c      	ldr	r0, [pc, #48]	@ (8003b3c <HAL_I2C_MspInit+0x8c>)
 8003b0c:	f000 fb88 	bl	8004220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <HAL_I2C_MspInit+0x88>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	4a07      	ldr	r2, [pc, #28]	@ (8003b38 <HAL_I2C_MspInit+0x88>)
 8003b1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_I2C_MspInit+0x88>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b2c:	bf00      	nop
 8003b2e:	3728      	adds	r7, #40	@ 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40005400 	.word	0x40005400
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40020400 	.word	0x40020400

08003b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08c      	sub	sp, #48	@ 0x30
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a42      	ldr	r2, [pc, #264]	@ (8003c68 <HAL_UART_MspInit+0x128>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d12c      	bne.n	8003bbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	4b41      	ldr	r3, [pc, #260]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	4a40      	ldr	r2, [pc, #256]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b72:	4b3e      	ldr	r3, [pc, #248]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	4b3a      	ldr	r3, [pc, #232]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	4a39      	ldr	r2, [pc, #228]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8e:	4b37      	ldr	r3, [pc, #220]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003baa:	2307      	movs	r3, #7
 8003bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bae:	f107 031c 	add.w	r3, r7, #28
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	482e      	ldr	r0, [pc, #184]	@ (8003c70 <HAL_UART_MspInit+0x130>)
 8003bb6:	f000 fb33 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bba:	e050      	b.n	8003c5e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003c74 <HAL_UART_MspInit+0x134>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d14b      	bne.n	8003c5e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	4b28      	ldr	r3, [pc, #160]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	4a27      	ldr	r2, [pc, #156]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bd6:	4b25      	ldr	r3, [pc, #148]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b21      	ldr	r3, [pc, #132]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	4a20      	ldr	r2, [pc, #128]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	4b1a      	ldr	r3, [pc, #104]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	4a19      	ldr	r2, [pc, #100]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003c08:	f043 0308 	orr.w	r3, r3, #8
 8003c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c0e:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <HAL_UART_MspInit+0x12c>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003c1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c2c:	2307      	movs	r3, #7
 8003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c30:	f107 031c 	add.w	r3, r7, #28
 8003c34:	4619      	mov	r1, r3
 8003c36:	4810      	ldr	r0, [pc, #64]	@ (8003c78 <HAL_UART_MspInit+0x138>)
 8003c38:	f000 faf2 	bl	8004220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c4e:	2307      	movs	r3, #7
 8003c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c52:	f107 031c 	add.w	r3, r7, #28
 8003c56:	4619      	mov	r1, r3
 8003c58:	4808      	ldr	r0, [pc, #32]	@ (8003c7c <HAL_UART_MspInit+0x13c>)
 8003c5a:	f000 fae1 	bl	8004220 <HAL_GPIO_Init>
}
 8003c5e:	bf00      	nop
 8003c60:	3730      	adds	r7, #48	@ 0x30
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40004400 	.word	0x40004400
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020000 	.word	0x40020000
 8003c74:	40004800 	.word	0x40004800
 8003c78:	40020400 	.word	0x40020400
 8003c7c:	40020c00 	.word	0x40020c00

08003c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08e      	sub	sp, #56	@ 0x38
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	4b33      	ldr	r3, [pc, #204]	@ (8003d64 <HAL_InitTick+0xe4>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	4a32      	ldr	r2, [pc, #200]	@ (8003d64 <HAL_InitTick+0xe4>)
 8003c9a:	f043 0310 	orr.w	r3, r3, #16
 8003c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca0:	4b30      	ldr	r3, [pc, #192]	@ (8003d64 <HAL_InitTick+0xe4>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cac:	f107 0210 	add.w	r2, r7, #16
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f002 faa4 	bl	8006204 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003cc6:	f002 fa75 	bl	80061b4 <HAL_RCC_GetPCLK1Freq>
 8003cca:	6378      	str	r0, [r7, #52]	@ 0x34
 8003ccc:	e004      	b.n	8003cd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003cce:	f002 fa71 	bl	80061b4 <HAL_RCC_GetPCLK1Freq>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	4a23      	ldr	r2, [pc, #140]	@ (8003d68 <HAL_InitTick+0xe8>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	0c9b      	lsrs	r3, r3, #18
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ce6:	4b21      	ldr	r3, [pc, #132]	@ (8003d6c <HAL_InitTick+0xec>)
 8003ce8:	4a21      	ldr	r2, [pc, #132]	@ (8003d70 <HAL_InitTick+0xf0>)
 8003cea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003cec:	4b1f      	ldr	r3, [pc, #124]	@ (8003d6c <HAL_InitTick+0xec>)
 8003cee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003cf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d6c <HAL_InitTick+0xec>)
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8003d6c <HAL_InitTick+0xec>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	@ (8003d6c <HAL_InitTick+0xec>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d06:	4b19      	ldr	r3, [pc, #100]	@ (8003d6c <HAL_InitTick+0xec>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003d0c:	4817      	ldr	r0, [pc, #92]	@ (8003d6c <HAL_InitTick+0xec>)
 8003d0e:	f002 faab 	bl	8006268 <HAL_TIM_Base_Init>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003d18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11b      	bne.n	8003d58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003d20:	4812      	ldr	r0, [pc, #72]	@ (8003d6c <HAL_InitTick+0xec>)
 8003d22:	f002 fafb 	bl	800631c <HAL_TIM_Base_Start_IT>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d111      	bne.n	8003d58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d34:	2036      	movs	r0, #54	@ 0x36
 8003d36:	f000 fa65 	bl	8004204 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0f      	cmp	r3, #15
 8003d3e:	d808      	bhi.n	8003d52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003d40:	2200      	movs	r2, #0
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	2036      	movs	r0, #54	@ 0x36
 8003d46:	f000 fa41 	bl	80041cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <HAL_InitTick+0xf4>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e002      	b.n	8003d58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003d58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3738      	adds	r7, #56	@ 0x38
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	431bde83 	.word	0x431bde83
 8003d6c:	20000750 	.word	0x20000750
 8003d70:	40001000 	.word	0x40001000
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d7c:	bf00      	nop
 8003d7e:	e7fd      	b.n	8003d7c <NMI_Handler+0x4>

08003d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <HardFault_Handler+0x4>

08003d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <MemManage_Handler+0x4>

08003d90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <BusFault_Handler+0x4>

08003d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d9c:	bf00      	nop
 8003d9e:	e7fd      	b.n	8003d9c <UsageFault_Handler+0x4>

08003da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003db4:	4802      	ldr	r0, [pc, #8]	@ (8003dc0 <TIM6_DAC_IRQHandler+0x10>)
 8003db6:	f002 fb21 	bl	80063fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000750 	.word	0x20000750

08003dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return 1;
 8003dc8:	2301      	movs	r3, #1
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_kill>:

int _kill(int pid, int sig)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dde:	f007 fd07 	bl	800b7f0 <__errno>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2216      	movs	r2, #22
 8003de6:	601a      	str	r2, [r3, #0]
  return -1;
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <_exit>:

void _exit (int status)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ffe7 	bl	8003dd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <_exit+0x12>

08003e0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e00a      	b.n	8003e32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e1c:	f3af 8000 	nop.w
 8003e20:	4601      	mov	r1, r0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	60ba      	str	r2, [r7, #8]
 8003e28:	b2ca      	uxtb	r2, r1
 8003e2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	dbf0      	blt.n	8003e1c <_read+0x12>
  }

  return len;
 8003e3a:	687b      	ldr	r3, [r7, #4]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e6c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_isatty>:

int _isatty(int file)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e84:	2301      	movs	r3, #1
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003eb4:	4a14      	ldr	r2, [pc, #80]	@ (8003f08 <_sbrk+0x5c>)
 8003eb6:	4b15      	ldr	r3, [pc, #84]	@ (8003f0c <_sbrk+0x60>)
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ec0:	4b13      	ldr	r3, [pc, #76]	@ (8003f10 <_sbrk+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	@ (8003f10 <_sbrk+0x64>)
 8003eca:	4a12      	ldr	r2, [pc, #72]	@ (8003f14 <_sbrk+0x68>)
 8003ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ece:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <_sbrk+0x64>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d207      	bcs.n	8003eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003edc:	f007 fc88 	bl	800b7f0 <__errno>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	220c      	movs	r2, #12
 8003ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eea:	e009      	b.n	8003f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eec:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <_sbrk+0x64>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ef2:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <_sbrk+0x64>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	4a05      	ldr	r2, [pc, #20]	@ (8003f10 <_sbrk+0x64>)
 8003efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003efe:	68fb      	ldr	r3, [r7, #12]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20020000 	.word	0x20020000
 8003f0c:	00000400 	.word	0x00000400
 8003f10:	20000798 	.word	0x20000798
 8003f14:	20005240 	.word	0x20005240

08003f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f1c:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <SystemInit+0x20>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	4a05      	ldr	r2, [pc, #20]	@ (8003f38 <SystemInit+0x20>)
 8003f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003f40:	f7ff ffea 	bl	8003f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f44:	480c      	ldr	r0, [pc, #48]	@ (8003f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f46:	490d      	ldr	r1, [pc, #52]	@ (8003f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f48:	4a0d      	ldr	r2, [pc, #52]	@ (8003f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f4c:	e002      	b.n	8003f54 <LoopCopyDataInit>

08003f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f52:	3304      	adds	r3, #4

08003f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f58:	d3f9      	bcc.n	8003f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f60:	e001      	b.n	8003f66 <LoopFillZerobss>

08003f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f64:	3204      	adds	r2, #4

08003f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f68:	d3fb      	bcc.n	8003f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f6a:	f007 fc47 	bl	800b7fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f6e:	f7fe ffa7 	bl	8002ec0 <main>
  bx  lr    
 8003f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003f80:	0800ecf8 	.word	0x0800ecf8
  ldr r2, =_sbss
 8003f84:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003f88:	2000523c 	.word	0x2000523c

08003f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC_IRQHandler>
	...

08003f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f94:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd0 <HAL_Init+0x40>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd0 <HAL_Init+0x40>)
 8003f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <HAL_Init+0x40>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd0 <HAL_Init+0x40>)
 8003fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fac:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <HAL_Init+0x40>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a07      	ldr	r2, [pc, #28]	@ (8003fd0 <HAL_Init+0x40>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb8:	2003      	movs	r0, #3
 8003fba:	f000 f8fc 	bl	80041b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fbe:	200f      	movs	r0, #15
 8003fc0:	f7ff fe5e 	bl	8003c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fc4:	f7ff fd48 	bl	8003a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023c00 	.word	0x40023c00

08003fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fd8:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <HAL_IncTick+0x20>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <HAL_IncTick+0x24>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <HAL_IncTick+0x24>)
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000010 	.word	0x20000010
 8003ff8:	2000079c 	.word	0x2000079c

08003ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8004000:	4b03      	ldr	r3, [pc, #12]	@ (8004010 <HAL_GetTick+0x14>)
 8004002:	681b      	ldr	r3, [r3, #0]
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	2000079c 	.word	0x2000079c

08004014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800401c:	f7ff ffee 	bl	8003ffc <HAL_GetTick>
 8004020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d005      	beq.n	800403a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800402e:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <HAL_Delay+0x44>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800403a:	bf00      	nop
 800403c:	f7ff ffde 	bl	8003ffc <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	429a      	cmp	r2, r3
 800404a:	d8f7      	bhi.n	800403c <HAL_Delay+0x28>
  {
  }
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000010 	.word	0x20000010

0800405c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800406c:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004078:	4013      	ands	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800408c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800408e:	4a04      	ldr	r2, [pc, #16]	@ (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	60d3      	str	r3, [r2, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a8:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <__NVIC_GetPriorityGrouping+0x18>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 0307 	and.w	r3, r3, #7
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db0b      	blt.n	80040ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4907      	ldr	r1, [pc, #28]	@ (80040f8 <__NVIC_EnableIRQ+0x38>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2001      	movs	r0, #1
 80040e2:	fa00 f202 	lsl.w	r2, r0, r2
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000e100 	.word	0xe000e100

080040fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db0a      	blt.n	8004126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	490c      	ldr	r1, [pc, #48]	@ (8004148 <__NVIC_SetPriority+0x4c>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440b      	add	r3, r1
 8004120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004124:	e00a      	b.n	800413c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4908      	ldr	r1, [pc, #32]	@ (800414c <__NVIC_SetPriority+0x50>)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	3b04      	subs	r3, #4
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	440b      	add	r3, r1
 800413a:	761a      	strb	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000e100 	.word	0xe000e100
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	@ 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f1c3 0307 	rsb	r3, r3, #7
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf28      	it	cs
 800416e:	2304      	movcs	r3, #4
 8004170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3304      	adds	r3, #4
 8004176:	2b06      	cmp	r3, #6
 8004178:	d902      	bls.n	8004180 <NVIC_EncodePriority+0x30>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3b03      	subs	r3, #3
 800417e:	e000      	b.n	8004182 <NVIC_EncodePriority+0x32>
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	f04f 32ff 	mov.w	r2, #4294967295
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004198:	f04f 31ff 	mov.w	r1, #4294967295
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43d9      	mvns	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a8:	4313      	orrs	r3, r2
         );
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3724      	adds	r7, #36	@ 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ff4c 	bl	800405c <__NVIC_SetPriorityGrouping>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041de:	f7ff ff61 	bl	80040a4 <__NVIC_GetPriorityGrouping>
 80041e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f7ff ffb1 	bl	8004150 <NVIC_EncodePriority>
 80041ee:	4602      	mov	r2, r0
 80041f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff80 	bl	80040fc <__NVIC_SetPriority>
}
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ff54 	bl	80040c0 <__NVIC_EnableIRQ>
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	@ 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	e16b      	b.n	8004514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800423c:	2201      	movs	r2, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	f040 815a 	bne.w	800450e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d005      	beq.n	8004272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800426e:	2b02      	cmp	r3, #2
 8004270:	d130      	bne.n	80042d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2203      	movs	r2, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a8:	2201      	movs	r2, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 0201 	and.w	r2, r3, #1
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d017      	beq.n	8004310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d123      	bne.n	8004364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	08da      	lsrs	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3208      	adds	r2, #8
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	2203      	movs	r2, #3
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0203 	and.w	r2, r3, #3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80b4 	beq.w	800450e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b60      	ldr	r3, [pc, #384]	@ (800452c <HAL_GPIO_Init+0x30c>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ae:	4a5f      	ldr	r2, [pc, #380]	@ (800452c <HAL_GPIO_Init+0x30c>)
 80043b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043b6:	4b5d      	ldr	r3, [pc, #372]	@ (800452c <HAL_GPIO_Init+0x30c>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004530 <HAL_GPIO_Init+0x310>)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	089b      	lsrs	r3, r3, #2
 80043c8:	3302      	adds	r3, #2
 80043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	220f      	movs	r2, #15
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a52      	ldr	r2, [pc, #328]	@ (8004534 <HAL_GPIO_Init+0x314>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <HAL_GPIO_Init+0x226>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a51      	ldr	r2, [pc, #324]	@ (8004538 <HAL_GPIO_Init+0x318>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d025      	beq.n	8004442 <HAL_GPIO_Init+0x222>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a50      	ldr	r2, [pc, #320]	@ (800453c <HAL_GPIO_Init+0x31c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <HAL_GPIO_Init+0x21e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4f      	ldr	r2, [pc, #316]	@ (8004540 <HAL_GPIO_Init+0x320>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d019      	beq.n	800443a <HAL_GPIO_Init+0x21a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4e      	ldr	r2, [pc, #312]	@ (8004544 <HAL_GPIO_Init+0x324>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0x216>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a4d      	ldr	r2, [pc, #308]	@ (8004548 <HAL_GPIO_Init+0x328>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_Init+0x212>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4c      	ldr	r2, [pc, #304]	@ (800454c <HAL_GPIO_Init+0x32c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x20e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4b      	ldr	r2, [pc, #300]	@ (8004550 <HAL_GPIO_Init+0x330>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_Init+0x20a>
 8004426:	2307      	movs	r3, #7
 8004428:	e00e      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800442a:	2308      	movs	r3, #8
 800442c:	e00c      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800442e:	2306      	movs	r3, #6
 8004430:	e00a      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004432:	2305      	movs	r3, #5
 8004434:	e008      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004436:	2304      	movs	r3, #4
 8004438:	e006      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800443a:	2303      	movs	r3, #3
 800443c:	e004      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800443e:	2302      	movs	r3, #2
 8004440:	e002      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004446:	2300      	movs	r3, #0
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f002 0203 	and.w	r2, r2, #3
 800444e:	0092      	lsls	r2, r2, #2
 8004450:	4093      	lsls	r3, r2
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004458:	4935      	ldr	r1, [pc, #212]	@ (8004530 <HAL_GPIO_Init+0x310>)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004466:	4b3b      	ldr	r3, [pc, #236]	@ (8004554 <HAL_GPIO_Init+0x334>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448a:	4a32      	ldr	r2, [pc, #200]	@ (8004554 <HAL_GPIO_Init+0x334>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004490:	4b30      	ldr	r3, [pc, #192]	@ (8004554 <HAL_GPIO_Init+0x334>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b4:	4a27      	ldr	r2, [pc, #156]	@ (8004554 <HAL_GPIO_Init+0x334>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ba:	4b26      	ldr	r3, [pc, #152]	@ (8004554 <HAL_GPIO_Init+0x334>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044de:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_GPIO_Init+0x334>)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004554 <HAL_GPIO_Init+0x334>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004508:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <HAL_GPIO_Init+0x334>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	f67f ae90 	bls.w	800423c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3724      	adds	r7, #36	@ 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	40013800 	.word	0x40013800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40021400 	.word	0x40021400
 800454c:	40021800 	.word	0x40021800
 8004550:	40021c00 	.word	0x40021c00
 8004554:	40013c00 	.word	0x40013c00

08004558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
 8004564:	4613      	mov	r3, r2
 8004566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004568:	787b      	ldrb	r3, [r7, #1]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004574:	e003      	b.n	800457e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004576:	887b      	ldrh	r3, [r7, #2]
 8004578:	041a      	lsls	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	619a      	str	r2, [r3, #24]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800459c:	887a      	ldrh	r2, [r7, #2]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4013      	ands	r3, r2
 80045a2:	041a      	lsls	r2, r3, #16
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43d9      	mvns	r1, r3
 80045a8:	887b      	ldrh	r3, [r7, #2]
 80045aa:	400b      	ands	r3, r1
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	619a      	str	r2, [r3, #24]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e12b      	b.n	800482a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fa62 	bl	8003ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	@ 0x24
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004624:	f001 fdc6 	bl	80061b4 <HAL_RCC_GetPCLK1Freq>
 8004628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4a81      	ldr	r2, [pc, #516]	@ (8004834 <HAL_I2C_Init+0x274>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d807      	bhi.n	8004644 <HAL_I2C_Init+0x84>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a80      	ldr	r2, [pc, #512]	@ (8004838 <HAL_I2C_Init+0x278>)
 8004638:	4293      	cmp	r3, r2
 800463a:	bf94      	ite	ls
 800463c:	2301      	movls	r3, #1
 800463e:	2300      	movhi	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e006      	b.n	8004652 <HAL_I2C_Init+0x92>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a7d      	ldr	r2, [pc, #500]	@ (800483c <HAL_I2C_Init+0x27c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	bf94      	ite	ls
 800464c:	2301      	movls	r3, #1
 800464e:	2300      	movhi	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e0e7      	b.n	800482a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a78      	ldr	r2, [pc, #480]	@ (8004840 <HAL_I2C_Init+0x280>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	0c9b      	lsrs	r3, r3, #18
 8004664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a6a      	ldr	r2, [pc, #424]	@ (8004834 <HAL_I2C_Init+0x274>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d802      	bhi.n	8004694 <HAL_I2C_Init+0xd4>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	3301      	adds	r3, #1
 8004692:	e009      	b.n	80046a8 <HAL_I2C_Init+0xe8>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	4a69      	ldr	r2, [pc, #420]	@ (8004844 <HAL_I2C_Init+0x284>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	099b      	lsrs	r3, r3, #6
 80046a6:	3301      	adds	r3, #1
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	495c      	ldr	r1, [pc, #368]	@ (8004834 <HAL_I2C_Init+0x274>)
 80046c4:	428b      	cmp	r3, r1
 80046c6:	d819      	bhi.n	80046fc <HAL_I2C_Init+0x13c>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1e59      	subs	r1, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046dc:	400b      	ands	r3, r1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_I2C_Init+0x138>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1e59      	subs	r1, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f0:	3301      	adds	r3, #1
 80046f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f6:	e051      	b.n	800479c <HAL_I2C_Init+0x1dc>
 80046f8:	2304      	movs	r3, #4
 80046fa:	e04f      	b.n	800479c <HAL_I2C_Init+0x1dc>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d111      	bne.n	8004728 <HAL_I2C_Init+0x168>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1e58      	subs	r0, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	440b      	add	r3, r1
 8004712:	fbb0 f3f3 	udiv	r3, r0, r3
 8004716:	3301      	adds	r3, #1
 8004718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e012      	b.n	800474e <HAL_I2C_Init+0x18e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1e58      	subs	r0, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	0099      	lsls	r1, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	fbb0 f3f3 	udiv	r3, r0, r3
 800473e:	3301      	adds	r3, #1
 8004740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_I2C_Init+0x196>
 8004752:	2301      	movs	r3, #1
 8004754:	e022      	b.n	800479c <HAL_I2C_Init+0x1dc>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10e      	bne.n	800477c <HAL_I2C_Init+0x1bc>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1e58      	subs	r0, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	440b      	add	r3, r1
 800476c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477a:	e00f      	b.n	800479c <HAL_I2C_Init+0x1dc>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1e58      	subs	r0, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	0099      	lsls	r1, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004792:	3301      	adds	r3, #1
 8004794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	6809      	ldr	r1, [r1, #0]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6911      	ldr	r1, [r2, #16]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68d2      	ldr	r2, [r2, #12]
 80047d6:	4311      	orrs	r1, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	430b      	orrs	r3, r1
 80047de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	000186a0 	.word	0x000186a0
 8004838:	001e847f 	.word	0x001e847f
 800483c:	003d08ff 	.word	0x003d08ff
 8004840:	431bde83 	.word	0x431bde83
 8004844:	10624dd3 	.word	0x10624dd3

08004848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	461a      	mov	r2, r3
 8004854:	460b      	mov	r3, r1
 8004856:	817b      	strh	r3, [r7, #10]
 8004858:	4613      	mov	r3, r2
 800485a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800485c:	f7ff fbce 	bl	8003ffc <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b20      	cmp	r3, #32
 800486c:	f040 80e0 	bne.w	8004a30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2319      	movs	r3, #25
 8004876:	2201      	movs	r2, #1
 8004878:	4970      	ldr	r1, [pc, #448]	@ (8004a3c <HAL_I2C_Master_Transmit+0x1f4>)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fdf4 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004886:	2302      	movs	r3, #2
 8004888:	e0d3      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_I2C_Master_Transmit+0x50>
 8004894:	2302      	movs	r3, #2
 8004896:	e0cc      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d007      	beq.n	80048be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2221      	movs	r2, #33	@ 0x21
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2210      	movs	r2, #16
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	893a      	ldrh	r2, [r7, #8]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a50      	ldr	r2, [pc, #320]	@ (8004a40 <HAL_I2C_Master_Transmit+0x1f8>)
 80048fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004900:	8979      	ldrh	r1, [r7, #10]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fbc8 	bl	800509c <I2C_MasterRequestWrite>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e08d      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800492c:	e066      	b.n	80049fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	6a39      	ldr	r1, [r7, #32]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 feb2 	bl	800569c <I2C_WaitOnTXEFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	2b04      	cmp	r3, #4
 8004944:	d107      	bne.n	8004956 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004954:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06b      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d11b      	bne.n	80049d0 <HAL_I2C_Master_Transmit+0x188>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499c:	2b00      	cmp	r3, #0
 800499e:	d017      	beq.n	80049d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	6a39      	ldr	r1, [r7, #32]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fea9 	bl	800572c <I2C_WaitOnBTFFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d107      	bne.n	80049f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e01a      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d194      	bne.n	800492e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e000      	b.n	8004a32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
  }
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	00100002 	.word	0x00100002
 8004a40:	ffff0000 	.word	0xffff0000

08004a44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08c      	sub	sp, #48	@ 0x30
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	460b      	mov	r3, r1
 8004a52:	817b      	strh	r3, [r7, #10]
 8004a54:	4613      	mov	r3, r2
 8004a56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a58:	f7ff fad0 	bl	8003ffc <HAL_GetTick>
 8004a5c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	f040 8217 	bne.w	8004e9a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2319      	movs	r3, #25
 8004a72:	2201      	movs	r2, #1
 8004a74:	497c      	ldr	r1, [pc, #496]	@ (8004c68 <HAL_I2C_Master_Receive+0x224>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fcf6 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
 8004a84:	e20a      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2C_Master_Receive+0x50>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e203      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d007      	beq.n	8004aba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0201 	orr.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ac8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2222      	movs	r2, #34	@ 0x22
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	893a      	ldrh	r2, [r7, #8]
 8004aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a5c      	ldr	r2, [pc, #368]	@ (8004c6c <HAL_I2C_Master_Receive+0x228>)
 8004afa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004afc:	8979      	ldrh	r1, [r7, #10]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fb4c 	bl	80051a0 <I2C_MasterRequestRead>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e1c4      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d113      	bne.n	8004b42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	623b      	str	r3, [r7, #32]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e198      	b.n	8004e74 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d11b      	bne.n	8004b82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e178      	b.n	8004e74 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d11b      	bne.n	8004bc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	e158      	b.n	8004e74 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004be8:	e144      	b.n	8004e74 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	f200 80f1 	bhi.w	8004dd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d123      	bne.n	8004c44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fddb 	bl	80057bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e145      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c42:	e117      	b.n	8004e74 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d14e      	bne.n	8004cea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	2200      	movs	r2, #0
 8004c54:	4906      	ldr	r1, [pc, #24]	@ (8004c70 <HAL_I2C_Master_Receive+0x22c>)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fc06 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e11a      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
 8004c66:	bf00      	nop
 8004c68:	00100002 	.word	0x00100002
 8004c6c:	ffff0000 	.word	0xffff0000
 8004c70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ce8:	e0c4      	b.n	8004e74 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	496c      	ldr	r1, [pc, #432]	@ (8004ea4 <HAL_I2C_Master_Receive+0x460>)
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fbb7 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0cb      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	4955      	ldr	r1, [pc, #340]	@ (8004ea4 <HAL_I2C_Master_Receive+0x460>)
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fb89 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e09d      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dd4:	e04e      	b.n	8004e74 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fcee 	bl	80057bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e058      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d124      	bne.n	8004e74 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d107      	bne.n	8004e42 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e40:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f47f aeb6 	bne.w	8004bea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	e000      	b.n	8004e9c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
  }
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3728      	adds	r7, #40	@ 0x28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	00010004 	.word	0x00010004

08004ea8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	817b      	strh	r3, [r7, #10]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	813b      	strh	r3, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ec2:	f7ff f89b 	bl	8003ffc <HAL_GetTick>
 8004ec6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	f040 80d9 	bne.w	8005088 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2319      	movs	r3, #25
 8004edc:	2201      	movs	r2, #1
 8004ede:	496d      	ldr	r1, [pc, #436]	@ (8005094 <HAL_I2C_Mem_Write+0x1ec>)
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fac1 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
 8004eee:	e0cc      	b.n	800508a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_I2C_Mem_Write+0x56>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0c5      	b.n	800508a <HAL_I2C_Mem_Write+0x1e2>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d007      	beq.n	8004f24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2221      	movs	r2, #33	@ 0x21
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2240      	movs	r2, #64	@ 0x40
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a4d      	ldr	r2, [pc, #308]	@ (8005098 <HAL_I2C_Mem_Write+0x1f0>)
 8004f64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f66:	88f8      	ldrh	r0, [r7, #6]
 8004f68:	893a      	ldrh	r2, [r7, #8]
 8004f6a:	8979      	ldrh	r1, [r7, #10]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4603      	mov	r3, r0
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f9e0 	bl	800533c <I2C_RequestMemoryWrite>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d052      	beq.n	8005028 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e081      	b.n	800508a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fb86 	bl	800569c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00d      	beq.n	8004fb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d107      	bne.n	8004fae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e06b      	b.n	800508a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d11b      	bne.n	8005028 <HAL_I2C_Mem_Write+0x180>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d017      	beq.n	8005028 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	781a      	ldrb	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1aa      	bne.n	8004f86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fb79 	bl	800572c <I2C_WaitOnBTFFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	2b04      	cmp	r3, #4
 8005046:	d107      	bne.n	8005058 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005056:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e016      	b.n	800508a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800506a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	00100002 	.word	0x00100002
 8005098:	ffff0000 	.word	0xffff0000

0800509c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	460b      	mov	r3, r1
 80050aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d006      	beq.n	80050c6 <I2C_MasterRequestWrite+0x2a>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d003      	beq.n	80050c6 <I2C_MasterRequestWrite+0x2a>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050c4:	d108      	bne.n	80050d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e00b      	b.n	80050f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050dc:	2b12      	cmp	r3, #18
 80050de:	d107      	bne.n	80050f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f9b3 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005116:	d103      	bne.n	8005120 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800511e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e035      	b.n	8005190 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800512c:	d108      	bne.n	8005140 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800512e:	897b      	ldrh	r3, [r7, #10]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800513c:	611a      	str	r2, [r3, #16]
 800513e:	e01b      	b.n	8005178 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005140:	897b      	ldrh	r3, [r7, #10]
 8005142:	11db      	asrs	r3, r3, #7
 8005144:	b2db      	uxtb	r3, r3
 8005146:	f003 0306 	and.w	r3, r3, #6
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f063 030f 	orn	r3, r3, #15
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	490e      	ldr	r1, [pc, #56]	@ (8005198 <I2C_MasterRequestWrite+0xfc>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f9fc 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e010      	b.n	8005190 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800516e:	897b      	ldrh	r3, [r7, #10]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4907      	ldr	r1, [pc, #28]	@ (800519c <I2C_MasterRequestWrite+0x100>)
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f9ec 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	00010008 	.word	0x00010008
 800519c:	00010002 	.word	0x00010002

080051a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	460b      	mov	r3, r1
 80051ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d006      	beq.n	80051da <I2C_MasterRequestRead+0x3a>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d003      	beq.n	80051da <I2C_MasterRequestRead+0x3a>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051d8:	d108      	bne.n	80051ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e00b      	b.n	8005204 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f0:	2b11      	cmp	r3, #17
 80051f2:	d107      	bne.n	8005204 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005202:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f929 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522a:	d103      	bne.n	8005234 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005232:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e079      	b.n	800532c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005240:	d108      	bne.n	8005254 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005242:	897b      	ldrh	r3, [r7, #10]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	b2da      	uxtb	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	611a      	str	r2, [r3, #16]
 8005252:	e05f      	b.n	8005314 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005254:	897b      	ldrh	r3, [r7, #10]
 8005256:	11db      	asrs	r3, r3, #7
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 0306 	and.w	r3, r3, #6
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f063 030f 	orn	r3, r3, #15
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	4930      	ldr	r1, [pc, #192]	@ (8005334 <I2C_MasterRequestRead+0x194>)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f972 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e054      	b.n	800532c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005282:	897b      	ldrh	r3, [r7, #10]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4929      	ldr	r1, [pc, #164]	@ (8005338 <I2C_MasterRequestRead+0x198>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f962 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e044      	b.n	800532c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f8c7 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00d      	beq.n	80052fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ee:	d103      	bne.n	80052f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052f6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e017      	b.n	800532c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052fc:	897b      	ldrh	r3, [r7, #10]
 80052fe:	11db      	asrs	r3, r3, #7
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0306 	and.w	r3, r3, #6
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f063 030e 	orn	r3, r3, #14
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	4907      	ldr	r1, [pc, #28]	@ (8005338 <I2C_MasterRequestRead+0x198>)
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f91e 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	00010008 	.word	0x00010008
 8005338:	00010002 	.word	0x00010002

0800533c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	4608      	mov	r0, r1
 8005346:	4611      	mov	r1, r2
 8005348:	461a      	mov	r2, r3
 800534a:	4603      	mov	r3, r0
 800534c:	817b      	strh	r3, [r7, #10]
 800534e:	460b      	mov	r3, r1
 8005350:	813b      	strh	r3, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	2200      	movs	r2, #0
 800536e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f878 	bl	8005468 <I2C_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800538c:	d103      	bne.n	8005396 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005394:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e05f      	b.n	800545a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800539a:	897b      	ldrh	r3, [r7, #10]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	6a3a      	ldr	r2, [r7, #32]
 80053ae:	492d      	ldr	r1, [pc, #180]	@ (8005464 <I2C_RequestMemoryWrite+0x128>)
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f8d3 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e04c      	b.n	800545a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d8:	6a39      	ldr	r1, [r7, #32]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f95e 	bl	800569c <I2C_WaitOnTXEFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d107      	bne.n	80053fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e02b      	b.n	800545a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d105      	bne.n	8005414 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005408:	893b      	ldrh	r3, [r7, #8]
 800540a:	b2da      	uxtb	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	611a      	str	r2, [r3, #16]
 8005412:	e021      	b.n	8005458 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005414:	893b      	ldrh	r3, [r7, #8]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	b29b      	uxth	r3, r3
 800541a:	b2da      	uxtb	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005424:	6a39      	ldr	r1, [r7, #32]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f938 	bl	800569c <I2C_WaitOnTXEFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	2b04      	cmp	r3, #4
 8005438:	d107      	bne.n	800544a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005448:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e005      	b.n	800545a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800544e:	893b      	ldrh	r3, [r7, #8]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	00010002 	.word	0x00010002

08005468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005478:	e048      	b.n	800550c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d044      	beq.n	800550c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fe fdbb 	bl	8003ffc <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d139      	bne.n	800550c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10d      	bne.n	80054be <I2C_WaitOnFlagUntilTimeout+0x56>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	43da      	mvns	r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4013      	ands	r3, r2
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	e00c      	b.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	43da      	mvns	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4013      	ands	r3, r2
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d116      	bne.n	800550c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e023      	b.n	8005554 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d10d      	bne.n	8005532 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	43da      	mvns	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	e00c      	b.n	800554c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	43da      	mvns	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4013      	ands	r3, r2
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	429a      	cmp	r2, r3
 8005550:	d093      	beq.n	800547a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800556a:	e071      	b.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800557a:	d123      	bne.n	80055c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800558a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005594:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	f043 0204 	orr.w	r2, r3, #4
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e067      	b.n	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d041      	beq.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055cc:	f7fe fd16 	bl	8003ffc <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d302      	bcc.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d136      	bne.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	0c1b      	lsrs	r3, r3, #16
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d10c      	bne.n	8005606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	43da      	mvns	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4013      	ands	r3, r2
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2301      	movne	r3, #1
 8005600:	2300      	moveq	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	e00b      	b.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	43da      	mvns	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4013      	ands	r3, r2
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	f043 0220 	orr.w	r2, r3, #32
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e021      	b.n	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	0c1b      	lsrs	r3, r3, #16
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10c      	bne.n	8005674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	43da      	mvns	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e00b      	b.n	800568c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	43da      	mvns	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4013      	ands	r3, r2
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf14      	ite	ne
 8005686:	2301      	movne	r3, #1
 8005688:	2300      	moveq	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	f47f af6d 	bne.w	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a8:	e034      	b.n	8005714 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f8e3 	bl	8005876 <I2C_IsAcknowledgeFailed>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e034      	b.n	8005724 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d028      	beq.n	8005714 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c2:	f7fe fc9b 	bl	8003ffc <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d302      	bcc.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d11d      	bne.n	8005714 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d016      	beq.n	8005714 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e007      	b.n	8005724 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571e:	2b80      	cmp	r3, #128	@ 0x80
 8005720:	d1c3      	bne.n	80056aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005738:	e034      	b.n	80057a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f89b 	bl	8005876 <I2C_IsAcknowledgeFailed>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e034      	b.n	80057b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d028      	beq.n	80057a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005752:	f7fe fc53 	bl	8003ffc <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d11d      	bne.n	80057a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b04      	cmp	r3, #4
 8005774:	d016      	beq.n	80057a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e007      	b.n	80057b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d1c3      	bne.n	800573a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057c8:	e049      	b.n	800585e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d119      	bne.n	800580c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0210 	mvn.w	r2, #16
 80057e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e030      	b.n	800586e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580c:	f7fe fbf6 	bl	8003ffc <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	d302      	bcc.n	8005822 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d11d      	bne.n	800585e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582c:	2b40      	cmp	r3, #64	@ 0x40
 800582e:	d016      	beq.n	800585e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	f043 0220 	orr.w	r2, r3, #32
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e007      	b.n	800586e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005868:	2b40      	cmp	r3, #64	@ 0x40
 800586a:	d1ae      	bne.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800588c:	d11b      	bne.n	80058c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005896:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	f043 0204 	orr.w	r2, r3, #4
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e267      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d075      	beq.n	80059de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058f2:	4b88      	ldr	r3, [pc, #544]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 030c 	and.w	r3, r3, #12
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d00c      	beq.n	8005918 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058fe:	4b85      	ldr	r3, [pc, #532]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005906:	2b08      	cmp	r3, #8
 8005908:	d112      	bne.n	8005930 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800590a:	4b82      	ldr	r3, [pc, #520]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005912:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005916:	d10b      	bne.n	8005930 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005918:	4b7e      	ldr	r3, [pc, #504]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d05b      	beq.n	80059dc <HAL_RCC_OscConfig+0x108>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d157      	bne.n	80059dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e242      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005938:	d106      	bne.n	8005948 <HAL_RCC_OscConfig+0x74>
 800593a:	4b76      	ldr	r3, [pc, #472]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a75      	ldr	r2, [pc, #468]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e01d      	b.n	8005984 <HAL_RCC_OscConfig+0xb0>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x98>
 8005952:	4b70      	ldr	r3, [pc, #448]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a6f      	ldr	r2, [pc, #444]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a6c      	ldr	r2, [pc, #432]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e00b      	b.n	8005984 <HAL_RCC_OscConfig+0xb0>
 800596c:	4b69      	ldr	r3, [pc, #420]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a68      	ldr	r2, [pc, #416]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	4b66      	ldr	r3, [pc, #408]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a65      	ldr	r2, [pc, #404]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 800597e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d013      	beq.n	80059b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800598c:	f7fe fb36 	bl	8003ffc <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005994:	f7fe fb32 	bl	8003ffc <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b64      	cmp	r3, #100	@ 0x64
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e207      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0xc0>
 80059b2:	e014      	b.n	80059de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7fe fb22 	bl	8003ffc <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059bc:	f7fe fb1e 	bl	8003ffc <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	@ 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e1f3      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ce:	4b51      	ldr	r3, [pc, #324]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0xe8>
 80059da:	e000      	b.n	80059de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d063      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059f6:	4b47      	ldr	r3, [pc, #284]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d11c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a02:	4b44      	ldr	r3, [pc, #272]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d116      	bne.n	8005a3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a0e:	4b41      	ldr	r3, [pc, #260]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_RCC_OscConfig+0x152>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d001      	beq.n	8005a26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e1c7      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a26:	4b3b      	ldr	r3, [pc, #236]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4937      	ldr	r1, [pc, #220]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a3a:	e03a      	b.n	8005ab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d020      	beq.n	8005a86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a44:	4b34      	ldr	r3, [pc, #208]	@ (8005b18 <HAL_RCC_OscConfig+0x244>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4a:	f7fe fad7 	bl	8003ffc <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a52:	f7fe fad3 	bl	8003ffc <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e1a8      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a64:	4b2b      	ldr	r3, [pc, #172]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f0      	beq.n	8005a52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a70:	4b28      	ldr	r3, [pc, #160]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4925      	ldr	r1, [pc, #148]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	600b      	str	r3, [r1, #0]
 8005a84:	e015      	b.n	8005ab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a86:	4b24      	ldr	r3, [pc, #144]	@ (8005b18 <HAL_RCC_OscConfig+0x244>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8c:	f7fe fab6 	bl	8003ffc <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a94:	f7fe fab2 	bl	8003ffc <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e187      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d036      	beq.n	8005b2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d016      	beq.n	8005af4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ac6:	4b15      	ldr	r3, [pc, #84]	@ (8005b1c <HAL_RCC_OscConfig+0x248>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fe fa96 	bl	8003ffc <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad4:	f7fe fa92 	bl	8003ffc <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e167      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b14 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0f0      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x200>
 8005af2:	e01b      	b.n	8005b2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005af4:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <HAL_RCC_OscConfig+0x248>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005afa:	f7fe fa7f 	bl	8003ffc <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b00:	e00e      	b.n	8005b20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b02:	f7fe fa7b 	bl	8003ffc <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d907      	bls.n	8005b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e150      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
 8005b14:	40023800 	.word	0x40023800
 8005b18:	42470000 	.word	0x42470000
 8005b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b20:	4b88      	ldr	r3, [pc, #544]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1ea      	bne.n	8005b02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8097 	beq.w	8005c68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b3e:	4b81      	ldr	r3, [pc, #516]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10f      	bne.n	8005b6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b52:	4a7c      	ldr	r2, [pc, #496]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b5a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	60bb      	str	r3, [r7, #8]
 8005b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b66:	2301      	movs	r3, #1
 8005b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6a:	4b77      	ldr	r3, [pc, #476]	@ (8005d48 <HAL_RCC_OscConfig+0x474>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d118      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b76:	4b74      	ldr	r3, [pc, #464]	@ (8005d48 <HAL_RCC_OscConfig+0x474>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a73      	ldr	r2, [pc, #460]	@ (8005d48 <HAL_RCC_OscConfig+0x474>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b82:	f7fe fa3b 	bl	8003ffc <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8a:	f7fe fa37 	bl	8003ffc <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e10c      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005d48 <HAL_RCC_OscConfig+0x474>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d106      	bne.n	8005bbe <HAL_RCC_OscConfig+0x2ea>
 8005bb0:	4b64      	ldr	r3, [pc, #400]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb4:	4a63      	ldr	r2, [pc, #396]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bbc:	e01c      	b.n	8005bf8 <HAL_RCC_OscConfig+0x324>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d10c      	bne.n	8005be0 <HAL_RCC_OscConfig+0x30c>
 8005bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bca:	4a5e      	ldr	r2, [pc, #376]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bcc:	f043 0304 	orr.w	r3, r3, #4
 8005bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd2:	4b5c      	ldr	r3, [pc, #368]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd6:	4a5b      	ldr	r2, [pc, #364]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bde:	e00b      	b.n	8005bf8 <HAL_RCC_OscConfig+0x324>
 8005be0:	4b58      	ldr	r3, [pc, #352]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be4:	4a57      	ldr	r2, [pc, #348]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bec:	4b55      	ldr	r3, [pc, #340]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf0:	4a54      	ldr	r2, [pc, #336]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005bf2:	f023 0304 	bic.w	r3, r3, #4
 8005bf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d015      	beq.n	8005c2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c00:	f7fe f9fc 	bl	8003ffc <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c06:	e00a      	b.n	8005c1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c08:	f7fe f9f8 	bl	8003ffc <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e0cb      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1e:	4b49      	ldr	r3, [pc, #292]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0ee      	beq.n	8005c08 <HAL_RCC_OscConfig+0x334>
 8005c2a:	e014      	b.n	8005c56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2c:	f7fe f9e6 	bl	8003ffc <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c32:	e00a      	b.n	8005c4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c34:	f7fe f9e2 	bl	8003ffc <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e0b5      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1ee      	bne.n	8005c34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d105      	bne.n	8005c68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c5c:	4b39      	ldr	r3, [pc, #228]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	4a38      	ldr	r2, [pc, #224]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80a1 	beq.w	8005db4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c72:	4b34      	ldr	r3, [pc, #208]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 030c 	and.w	r3, r3, #12
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d05c      	beq.n	8005d38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d141      	bne.n	8005d0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c86:	4b31      	ldr	r3, [pc, #196]	@ (8005d4c <HAL_RCC_OscConfig+0x478>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8c:	f7fe f9b6 	bl	8003ffc <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c94:	f7fe f9b2 	bl	8003ffc <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e087      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca6:	4b27      	ldr	r3, [pc, #156]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	019b      	lsls	r3, r3, #6
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	041b      	lsls	r3, r3, #16
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	061b      	lsls	r3, r3, #24
 8005cd6:	491b      	ldr	r1, [pc, #108]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d4c <HAL_RCC_OscConfig+0x478>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce2:	f7fe f98b 	bl	8003ffc <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cea:	f7fe f987 	bl	8003ffc <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e05c      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfc:	4b11      	ldr	r3, [pc, #68]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f0      	beq.n	8005cea <HAL_RCC_OscConfig+0x416>
 8005d08:	e054      	b.n	8005db4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0a:	4b10      	ldr	r3, [pc, #64]	@ (8005d4c <HAL_RCC_OscConfig+0x478>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7fe f974 	bl	8003ffc <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fe f970 	bl	8003ffc <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e045      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0x444>
 8005d36:	e03d      	b.n	8005db4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e038      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40007000 	.word	0x40007000
 8005d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d50:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <HAL_RCC_OscConfig+0x4ec>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d028      	beq.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d121      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d11a      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d80:	4013      	ands	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d111      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d107      	bne.n	8005db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d001      	beq.n	8005db4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800

08005dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0cc      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd8:	4b68      	ldr	r3, [pc, #416]	@ (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d90c      	bls.n	8005e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de6:	4b65      	ldr	r3, [pc, #404]	@ (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dee:	4b63      	ldr	r3, [pc, #396]	@ (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0b8      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d020      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e18:	4b59      	ldr	r3, [pc, #356]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	4a58      	ldr	r2, [pc, #352]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e30:	4b53      	ldr	r3, [pc, #332]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4a52      	ldr	r2, [pc, #328]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e3c:	4b50      	ldr	r3, [pc, #320]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	494d      	ldr	r1, [pc, #308]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d044      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d107      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b47      	ldr	r3, [pc, #284]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d119      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e07f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d003      	beq.n	8005e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d107      	bne.n	8005e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e82:	4b3f      	ldr	r3, [pc, #252]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e06f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e92:	4b3b      	ldr	r3, [pc, #236]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e067      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ea2:	4b37      	ldr	r3, [pc, #220]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f023 0203 	bic.w	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	4934      	ldr	r1, [pc, #208]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eb4:	f7fe f8a2 	bl	8003ffc <HAL_GetTick>
 8005eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eba:	e00a      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ebc:	f7fe f89e 	bl	8003ffc <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e04f      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 020c 	and.w	r2, r3, #12
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d1eb      	bne.n	8005ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ee4:	4b25      	ldr	r3, [pc, #148]	@ (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d20c      	bcs.n	8005f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef2:	4b22      	ldr	r3, [pc, #136]	@ (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efa:	4b20      	ldr	r3, [pc, #128]	@ (8005f7c <HAL_RCC_ClockConfig+0x1b8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e032      	b.n	8005f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f18:	4b19      	ldr	r3, [pc, #100]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4916      	ldr	r1, [pc, #88]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f36:	4b12      	ldr	r3, [pc, #72]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	490e      	ldr	r1, [pc, #56]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f4a:	f000 f821 	bl	8005f90 <HAL_RCC_GetSysClockFreq>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	490a      	ldr	r1, [pc, #40]	@ (8005f84 <HAL_RCC_ClockConfig+0x1c0>)
 8005f5c:	5ccb      	ldrb	r3, [r1, r3]
 8005f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f62:	4a09      	ldr	r2, [pc, #36]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c4>)
 8005f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f66:	4b09      	ldr	r3, [pc, #36]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fd fe88 	bl	8003c80 <HAL_InitTick>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40023c00 	.word	0x40023c00
 8005f80:	40023800 	.word	0x40023800
 8005f84:	0800e960 	.word	0x0800e960
 8005f88:	20000008 	.word	0x20000008
 8005f8c:	2000000c 	.word	0x2000000c

08005f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f94:	b094      	sub	sp, #80	@ 0x50
 8005f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fa8:	4b79      	ldr	r3, [pc, #484]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x200>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 030c 	and.w	r3, r3, #12
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d00d      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	f200 80e1 	bhi.w	800617c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d003      	beq.n	8005fca <HAL_RCC_GetSysClockFreq+0x3a>
 8005fc2:	e0db      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fc4:	4b73      	ldr	r3, [pc, #460]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005fc8:	e0db      	b.n	8006182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fca:	4b73      	ldr	r3, [pc, #460]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x208>)
 8005fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fce:	e0d8      	b.n	8006182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fda:	4b6d      	ldr	r3, [pc, #436]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d063      	beq.n	80060ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	2200      	movs	r2, #0
 8005fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ff0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ffe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006002:	4622      	mov	r2, r4
 8006004:	462b      	mov	r3, r5
 8006006:	f04f 0000 	mov.w	r0, #0
 800600a:	f04f 0100 	mov.w	r1, #0
 800600e:	0159      	lsls	r1, r3, #5
 8006010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006014:	0150      	lsls	r0, r2, #5
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4621      	mov	r1, r4
 800601c:	1a51      	subs	r1, r2, r1
 800601e:	6139      	str	r1, [r7, #16]
 8006020:	4629      	mov	r1, r5
 8006022:	eb63 0301 	sbc.w	r3, r3, r1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006034:	4659      	mov	r1, fp
 8006036:	018b      	lsls	r3, r1, #6
 8006038:	4651      	mov	r1, sl
 800603a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800603e:	4651      	mov	r1, sl
 8006040:	018a      	lsls	r2, r1, #6
 8006042:	4651      	mov	r1, sl
 8006044:	ebb2 0801 	subs.w	r8, r2, r1
 8006048:	4659      	mov	r1, fp
 800604a:	eb63 0901 	sbc.w	r9, r3, r1
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800605a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800605e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006062:	4690      	mov	r8, r2
 8006064:	4699      	mov	r9, r3
 8006066:	4623      	mov	r3, r4
 8006068:	eb18 0303 	adds.w	r3, r8, r3
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	462b      	mov	r3, r5
 8006070:	eb49 0303 	adc.w	r3, r9, r3
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006082:	4629      	mov	r1, r5
 8006084:	024b      	lsls	r3, r1, #9
 8006086:	4621      	mov	r1, r4
 8006088:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800608c:	4621      	mov	r1, r4
 800608e:	024a      	lsls	r2, r1, #9
 8006090:	4610      	mov	r0, r2
 8006092:	4619      	mov	r1, r3
 8006094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006096:	2200      	movs	r2, #0
 8006098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800609a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800609c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060a0:	f7fa fe22 	bl	8000ce8 <__aeabi_uldivmod>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4613      	mov	r3, r2
 80060aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ac:	e058      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ae:	4b38      	ldr	r3, [pc, #224]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x200>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	099b      	lsrs	r3, r3, #6
 80060b4:	2200      	movs	r2, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	4611      	mov	r1, r2
 80060ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060be:	623b      	str	r3, [r7, #32]
 80060c0:	2300      	movs	r3, #0
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	f04f 0000 	mov.w	r0, #0
 80060d0:	f04f 0100 	mov.w	r1, #0
 80060d4:	0159      	lsls	r1, r3, #5
 80060d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060da:	0150      	lsls	r0, r2, #5
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4641      	mov	r1, r8
 80060e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80060e6:	4649      	mov	r1, r9
 80060e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006100:	ebb2 040a 	subs.w	r4, r2, sl
 8006104:	eb63 050b 	sbc.w	r5, r3, fp
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	00eb      	lsls	r3, r5, #3
 8006112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006116:	00e2      	lsls	r2, r4, #3
 8006118:	4614      	mov	r4, r2
 800611a:	461d      	mov	r5, r3
 800611c:	4643      	mov	r3, r8
 800611e:	18e3      	adds	r3, r4, r3
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	464b      	mov	r3, r9
 8006124:	eb45 0303 	adc.w	r3, r5, r3
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006136:	4629      	mov	r1, r5
 8006138:	028b      	lsls	r3, r1, #10
 800613a:	4621      	mov	r1, r4
 800613c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006140:	4621      	mov	r1, r4
 8006142:	028a      	lsls	r2, r1, #10
 8006144:	4610      	mov	r0, r2
 8006146:	4619      	mov	r1, r3
 8006148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800614a:	2200      	movs	r2, #0
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	61fa      	str	r2, [r7, #28]
 8006150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006154:	f7fa fdc8 	bl	8000ce8 <__aeabi_uldivmod>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4613      	mov	r3, r2
 800615e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006160:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <HAL_RCC_GetSysClockFreq+0x200>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	3301      	adds	r3, #1
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800617a:	e002      	b.n	8006182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800617c:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <HAL_RCC_GetSysClockFreq+0x204>)
 800617e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006184:	4618      	mov	r0, r3
 8006186:	3750      	adds	r7, #80	@ 0x50
 8006188:	46bd      	mov	sp, r7
 800618a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800
 8006194:	00f42400 	.word	0x00f42400
 8006198:	007a1200 	.word	0x007a1200

0800619c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a0:	4b03      	ldr	r3, [pc, #12]	@ (80061b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	20000008 	.word	0x20000008

080061b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061b8:	f7ff fff0 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061bc:	4602      	mov	r2, r0
 80061be:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	0a9b      	lsrs	r3, r3, #10
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	4903      	ldr	r1, [pc, #12]	@ (80061d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ca:	5ccb      	ldrb	r3, [r1, r3]
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40023800 	.word	0x40023800
 80061d8:	0800e970 	.word	0x0800e970

080061dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061e0:	f7ff ffdc 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b05      	ldr	r3, [pc, #20]	@ (80061fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	0b5b      	lsrs	r3, r3, #13
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	4903      	ldr	r1, [pc, #12]	@ (8006200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061f2:	5ccb      	ldrb	r3, [r1, r3]
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40023800 	.word	0x40023800
 8006200:	0800e970 	.word	0x0800e970

08006204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	220f      	movs	r2, #15
 8006212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006214:	4b12      	ldr	r3, [pc, #72]	@ (8006260 <HAL_RCC_GetClockConfig+0x5c>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 0203 	and.w	r2, r3, #3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006220:	4b0f      	ldr	r3, [pc, #60]	@ (8006260 <HAL_RCC_GetClockConfig+0x5c>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800622c:	4b0c      	ldr	r3, [pc, #48]	@ (8006260 <HAL_RCC_GetClockConfig+0x5c>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006238:	4b09      	ldr	r3, [pc, #36]	@ (8006260 <HAL_RCC_GetClockConfig+0x5c>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	08db      	lsrs	r3, r3, #3
 800623e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006246:	4b07      	ldr	r3, [pc, #28]	@ (8006264 <HAL_RCC_GetClockConfig+0x60>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0207 	and.w	r2, r3, #7
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	601a      	str	r2, [r3, #0]
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	40023c00 	.word	0x40023c00

08006268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e041      	b.n	80062fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f839 	bl	8006306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f000 f9c0 	bl	800662c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d001      	beq.n	8006334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e04e      	b.n	80063d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a23      	ldr	r2, [pc, #140]	@ (80063e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d022      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635e:	d01d      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1f      	ldr	r2, [pc, #124]	@ (80063e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d018      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1e      	ldr	r2, [pc, #120]	@ (80063e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d013      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1c      	ldr	r2, [pc, #112]	@ (80063ec <HAL_TIM_Base_Start_IT+0xd0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00e      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1b      	ldr	r2, [pc, #108]	@ (80063f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a19      	ldr	r2, [pc, #100]	@ (80063f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a18      	ldr	r2, [pc, #96]	@ (80063f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d111      	bne.n	80063c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b06      	cmp	r3, #6
 80063ac:	d010      	beq.n	80063d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0201 	orr.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063be:	e007      	b.n	80063d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40000400 	.word	0x40000400
 80063e8:	40000800 	.word	0x40000800
 80063ec:	40000c00 	.word	0x40000c00
 80063f0:	40010400 	.word	0x40010400
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40001800 	.word	0x40001800

080063fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d020      	beq.n	8006460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01b      	beq.n	8006460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0202 	mvn.w	r2, #2
 8006430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f8d2 	bl	80065f0 <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8c4 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f8d5 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d020      	beq.n	80064ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01b      	beq.n	80064ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0204 	mvn.w	r2, #4
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f8ac 	bl	80065f0 <HAL_TIM_IC_CaptureCallback>
 8006498:	e005      	b.n	80064a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f89e 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f8af 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d020      	beq.n	80064f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01b      	beq.n	80064f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0208 	mvn.w	r2, #8
 80064c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2204      	movs	r2, #4
 80064ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f886 	bl	80065f0 <HAL_TIM_IC_CaptureCallback>
 80064e4:	e005      	b.n	80064f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f878 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f889 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d020      	beq.n	8006544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0210 	mvn.w	r2, #16
 8006514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2208      	movs	r2, #8
 800651a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f860 	bl	80065f0 <HAL_TIM_IC_CaptureCallback>
 8006530:	e005      	b.n	800653e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f852 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f863 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00c      	beq.n	8006568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0201 	mvn.w	r2, #1
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fd fa60 	bl	8003a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00c      	beq.n	800658c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006578:	2b00      	cmp	r3, #0
 800657a:	d007      	beq.n	800658c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f906 	bl	8006798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00c      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d007      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f834 	bl	8006618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00c      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0220 	mvn.w	r2, #32
 80065cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8d8 	bl	8006784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a46      	ldr	r2, [pc, #280]	@ (8006758 <TIM_Base_SetConfig+0x12c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d013      	beq.n	800666c <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664a:	d00f      	beq.n	800666c <TIM_Base_SetConfig+0x40>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a43      	ldr	r2, [pc, #268]	@ (800675c <TIM_Base_SetConfig+0x130>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00b      	beq.n	800666c <TIM_Base_SetConfig+0x40>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a42      	ldr	r2, [pc, #264]	@ (8006760 <TIM_Base_SetConfig+0x134>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_Base_SetConfig+0x40>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a41      	ldr	r2, [pc, #260]	@ (8006764 <TIM_Base_SetConfig+0x138>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_Base_SetConfig+0x40>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a40      	ldr	r2, [pc, #256]	@ (8006768 <TIM_Base_SetConfig+0x13c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d108      	bne.n	800667e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a35      	ldr	r2, [pc, #212]	@ (8006758 <TIM_Base_SetConfig+0x12c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d02b      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668c:	d027      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a32      	ldr	r2, [pc, #200]	@ (800675c <TIM_Base_SetConfig+0x130>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d023      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a31      	ldr	r2, [pc, #196]	@ (8006760 <TIM_Base_SetConfig+0x134>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01f      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a30      	ldr	r2, [pc, #192]	@ (8006764 <TIM_Base_SetConfig+0x138>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d01b      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006768 <TIM_Base_SetConfig+0x13c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d017      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a2e      	ldr	r2, [pc, #184]	@ (800676c <TIM_Base_SetConfig+0x140>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006770 <TIM_Base_SetConfig+0x144>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00f      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006774 <TIM_Base_SetConfig+0x148>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00b      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006778 <TIM_Base_SetConfig+0x14c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2a      	ldr	r2, [pc, #168]	@ (800677c <TIM_Base_SetConfig+0x150>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d003      	beq.n	80066de <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a29      	ldr	r2, [pc, #164]	@ (8006780 <TIM_Base_SetConfig+0x154>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d108      	bne.n	80066f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a10      	ldr	r2, [pc, #64]	@ (8006758 <TIM_Base_SetConfig+0x12c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_Base_SetConfig+0xf8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a12      	ldr	r2, [pc, #72]	@ (8006768 <TIM_Base_SetConfig+0x13c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d103      	bne.n	800672c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	d105      	bne.n	800674a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f023 0201 	bic.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	611a      	str	r2, [r3, #16]
  }
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40010000 	.word	0x40010000
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40010400 	.word	0x40010400
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400
 8006774:	40014800 	.word	0x40014800
 8006778:	40001800 	.word	0x40001800
 800677c:	40001c00 	.word	0x40001c00
 8006780:	40002000 	.word	0x40002000

08006784 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e042      	b.n	8006844 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fd f9b4 	bl	8003b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2224      	movs	r2, #36	@ 0x24
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa09 	bl	8006c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695a      	ldr	r2, [r3, #20]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	@ 0x28
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	4613      	mov	r3, r2
 800685a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b20      	cmp	r3, #32
 800686a:	d175      	bne.n	8006958 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_UART_Transmit+0x2c>
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e06e      	b.n	800695a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2221      	movs	r2, #33	@ 0x21
 8006886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800688a:	f7fd fbb7 	bl	8003ffc <HAL_GetTick>
 800688e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	88fa      	ldrh	r2, [r7, #6]
 8006894:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	88fa      	ldrh	r2, [r7, #6]
 800689a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068a4:	d108      	bne.n	80068b8 <HAL_UART_Transmit+0x6c>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d104      	bne.n	80068b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	e003      	b.n	80068c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068c0:	e02e      	b.n	8006920 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2200      	movs	r2, #0
 80068ca:	2180      	movs	r1, #128	@ 0x80
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f8df 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e03a      	b.n	800695a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	3302      	adds	r3, #2
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	e007      	b.n	8006912 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3301      	adds	r3, #1
 8006910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1cb      	bne.n	80068c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	2140      	movs	r1, #64	@ 0x40
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 f8ab 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e006      	b.n	800695a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e000      	b.n	800695a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	3720      	adds	r7, #32
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b08a      	sub	sp, #40	@ 0x28
 8006966:	af02      	add	r7, sp, #8
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	603b      	str	r3, [r7, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b20      	cmp	r3, #32
 8006980:	f040 8081 	bne.w	8006a86 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_UART_Receive+0x2e>
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e079      	b.n	8006a88 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2222      	movs	r2, #34	@ 0x22
 800699e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069a8:	f7fd fb28 	bl	8003ffc <HAL_GetTick>
 80069ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	88fa      	ldrh	r2, [r7, #6]
 80069b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c2:	d108      	bne.n	80069d6 <HAL_UART_Receive+0x74>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	e003      	b.n	80069de <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80069de:	e047      	b.n	8006a70 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2200      	movs	r2, #0
 80069e8:	2120      	movs	r1, #32
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f850 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e042      	b.n	8006a88 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10c      	bne.n	8006a22 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e01f      	b.n	8006a62 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a2a:	d007      	beq.n	8006a3c <HAL_UART_Receive+0xda>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <HAL_UART_Receive+0xe8>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d106      	bne.n	8006a4a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	e008      	b.n	8006a5c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1b2      	bne.n	80069e0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa0:	e03b      	b.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d037      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fd faa7 	bl	8003ffc <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e03a      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d023      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b80      	cmp	r3, #128	@ 0x80
 8006ad6:	d020      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b40      	cmp	r3, #64	@ 0x40
 8006adc:	d01d      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d116      	bne.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006aec:	2300      	movs	r3, #0
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 f81d 	bl	8006b42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e00f      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	bf0c      	ite	eq
 8006b2a:	2301      	moveq	r3, #1
 8006b2c:	2300      	movne	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d0b4      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b095      	sub	sp, #84	@ 0x54
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	330c      	adds	r3, #12
 8006b68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e5      	bne.n	8006b4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3314      	adds	r3, #20
 8006b9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e5      	bne.n	8006b7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d119      	bne.n	8006bee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f023 0310 	bic.w	r3, r3, #16
 8006bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bda:	61ba      	str	r2, [r7, #24]
 8006bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6979      	ldr	r1, [r7, #20]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bfc:	bf00      	nop
 8006bfe:	3754      	adds	r7, #84	@ 0x54
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c0c:	b0c0      	sub	sp, #256	@ 0x100
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c24:	68d9      	ldr	r1, [r3, #12]
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	ea40 0301 	orr.w	r3, r0, r1
 8006c30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c60:	f021 010c 	bic.w	r1, r1, #12
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	6999      	ldr	r1, [r3, #24]
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	ea40 0301 	orr.w	r3, r0, r1
 8006c8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b8f      	ldr	r3, [pc, #572]	@ (8006ed4 <UART_SetConfig+0x2cc>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d005      	beq.n	8006ca8 <UART_SetConfig+0xa0>
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b8d      	ldr	r3, [pc, #564]	@ (8006ed8 <UART_SetConfig+0x2d0>)
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d104      	bne.n	8006cb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ca8:	f7ff fa98 	bl	80061dc <HAL_RCC_GetPCLK2Freq>
 8006cac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cb0:	e003      	b.n	8006cba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cb2:	f7ff fa7f 	bl	80061b4 <HAL_RCC_GetPCLK1Freq>
 8006cb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc4:	f040 810c 	bne.w	8006ee0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cda:	4622      	mov	r2, r4
 8006cdc:	462b      	mov	r3, r5
 8006cde:	1891      	adds	r1, r2, r2
 8006ce0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006ce2:	415b      	adcs	r3, r3
 8006ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ce6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cea:	4621      	mov	r1, r4
 8006cec:	eb12 0801 	adds.w	r8, r2, r1
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	eb43 0901 	adc.w	r9, r3, r1
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d0a:	4690      	mov	r8, r2
 8006d0c:	4699      	mov	r9, r3
 8006d0e:	4623      	mov	r3, r4
 8006d10:	eb18 0303 	adds.w	r3, r8, r3
 8006d14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d18:	462b      	mov	r3, r5
 8006d1a:	eb49 0303 	adc.w	r3, r9, r3
 8006d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d36:	460b      	mov	r3, r1
 8006d38:	18db      	adds	r3, r3, r3
 8006d3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	eb42 0303 	adc.w	r3, r2, r3
 8006d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d4c:	f7f9 ffcc 	bl	8000ce8 <__aeabi_uldivmod>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4b61      	ldr	r3, [pc, #388]	@ (8006edc <UART_SetConfig+0x2d4>)
 8006d56:	fba3 2302 	umull	r2, r3, r3, r2
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	011c      	lsls	r4, r3, #4
 8006d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	1891      	adds	r1, r2, r2
 8006d76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d78:	415b      	adcs	r3, r3
 8006d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d80:	4641      	mov	r1, r8
 8006d82:	eb12 0a01 	adds.w	sl, r2, r1
 8006d86:	4649      	mov	r1, r9
 8006d88:	eb43 0b01 	adc.w	fp, r3, r1
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006da0:	4692      	mov	sl, r2
 8006da2:	469b      	mov	fp, r3
 8006da4:	4643      	mov	r3, r8
 8006da6:	eb1a 0303 	adds.w	r3, sl, r3
 8006daa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dae:	464b      	mov	r3, r9
 8006db0:	eb4b 0303 	adc.w	r3, fp, r3
 8006db4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006dc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	18db      	adds	r3, r3, r3
 8006dd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	eb42 0303 	adc.w	r3, r2, r3
 8006dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006de2:	f7f9 ff81 	bl	8000ce8 <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	4b3b      	ldr	r3, [pc, #236]	@ (8006edc <UART_SetConfig+0x2d4>)
 8006dee:	fba3 2301 	umull	r2, r3, r3, r1
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2264      	movs	r2, #100	@ 0x64
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	1acb      	subs	r3, r1, r3
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e02:	4b36      	ldr	r3, [pc, #216]	@ (8006edc <UART_SetConfig+0x2d4>)
 8006e04:	fba3 2302 	umull	r2, r3, r3, r2
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e10:	441c      	add	r4, r3
 8006e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e24:	4642      	mov	r2, r8
 8006e26:	464b      	mov	r3, r9
 8006e28:	1891      	adds	r1, r2, r2
 8006e2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e2c:	415b      	adcs	r3, r3
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e34:	4641      	mov	r1, r8
 8006e36:	1851      	adds	r1, r2, r1
 8006e38:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	414b      	adcs	r3, r1
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	00cb      	lsls	r3, r1, #3
 8006e50:	4651      	mov	r1, sl
 8006e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e56:	4651      	mov	r1, sl
 8006e58:	00ca      	lsls	r2, r1, #3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4642      	mov	r2, r8
 8006e62:	189b      	adds	r3, r3, r2
 8006e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e68:	464b      	mov	r3, r9
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	eb42 0303 	adc.w	r3, r2, r3
 8006e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e88:	460b      	mov	r3, r1
 8006e8a:	18db      	adds	r3, r3, r3
 8006e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e8e:	4613      	mov	r3, r2
 8006e90:	eb42 0303 	adc.w	r3, r2, r3
 8006e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e9e:	f7f9 ff23 	bl	8000ce8 <__aeabi_uldivmod>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <UART_SetConfig+0x2d4>)
 8006ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	2164      	movs	r1, #100	@ 0x64
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	3332      	adds	r3, #50	@ 0x32
 8006eba:	4a08      	ldr	r2, [pc, #32]	@ (8006edc <UART_SetConfig+0x2d4>)
 8006ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	f003 0207 	and.w	r2, r3, #7
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4422      	add	r2, r4
 8006ece:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ed0:	e106      	b.n	80070e0 <UART_SetConfig+0x4d8>
 8006ed2:	bf00      	nop
 8006ed4:	40011000 	.word	0x40011000
 8006ed8:	40011400 	.word	0x40011400
 8006edc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006eea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	1891      	adds	r1, r2, r2
 8006ef8:	6239      	str	r1, [r7, #32]
 8006efa:	415b      	adcs	r3, r3
 8006efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006efe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f02:	4641      	mov	r1, r8
 8006f04:	1854      	adds	r4, r2, r1
 8006f06:	4649      	mov	r1, r9
 8006f08:	eb43 0501 	adc.w	r5, r3, r1
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	00eb      	lsls	r3, r5, #3
 8006f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f1a:	00e2      	lsls	r2, r4, #3
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	461d      	mov	r5, r3
 8006f20:	4643      	mov	r3, r8
 8006f22:	18e3      	adds	r3, r4, r3
 8006f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f28:	464b      	mov	r3, r9
 8006f2a:	eb45 0303 	adc.w	r3, r5, r3
 8006f2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f4e:	4629      	mov	r1, r5
 8006f50:	008b      	lsls	r3, r1, #2
 8006f52:	4621      	mov	r1, r4
 8006f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f58:	4621      	mov	r1, r4
 8006f5a:	008a      	lsls	r2, r1, #2
 8006f5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f60:	f7f9 fec2 	bl	8000ce8 <__aeabi_uldivmod>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4b60      	ldr	r3, [pc, #384]	@ (80070ec <UART_SetConfig+0x4e4>)
 8006f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	011c      	lsls	r4, r3, #4
 8006f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	1891      	adds	r1, r2, r2
 8006f8a:	61b9      	str	r1, [r7, #24]
 8006f8c:	415b      	adcs	r3, r3
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f94:	4641      	mov	r1, r8
 8006f96:	1851      	adds	r1, r2, r1
 8006f98:	6139      	str	r1, [r7, #16]
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	414b      	adcs	r3, r1
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fac:	4659      	mov	r1, fp
 8006fae:	00cb      	lsls	r3, r1, #3
 8006fb0:	4651      	mov	r1, sl
 8006fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb6:	4651      	mov	r1, sl
 8006fb8:	00ca      	lsls	r2, r1, #3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fc8:	464b      	mov	r3, r9
 8006fca:	460a      	mov	r2, r1
 8006fcc:	eb42 0303 	adc.w	r3, r2, r3
 8006fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fec:	4649      	mov	r1, r9
 8006fee:	008b      	lsls	r3, r1, #2
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	008a      	lsls	r2, r1, #2
 8006ffa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ffe:	f7f9 fe73 	bl	8000ce8 <__aeabi_uldivmod>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4611      	mov	r1, r2
 8007008:	4b38      	ldr	r3, [pc, #224]	@ (80070ec <UART_SetConfig+0x4e4>)
 800700a:	fba3 2301 	umull	r2, r3, r3, r1
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	2264      	movs	r2, #100	@ 0x64
 8007012:	fb02 f303 	mul.w	r3, r2, r3
 8007016:	1acb      	subs	r3, r1, r3
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	3332      	adds	r3, #50	@ 0x32
 800701c:	4a33      	ldr	r2, [pc, #204]	@ (80070ec <UART_SetConfig+0x4e4>)
 800701e:	fba2 2303 	umull	r2, r3, r2, r3
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007028:	441c      	add	r4, r3
 800702a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800702e:	2200      	movs	r2, #0
 8007030:	673b      	str	r3, [r7, #112]	@ 0x70
 8007032:	677a      	str	r2, [r7, #116]	@ 0x74
 8007034:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007038:	4642      	mov	r2, r8
 800703a:	464b      	mov	r3, r9
 800703c:	1891      	adds	r1, r2, r2
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	415b      	adcs	r3, r3
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007048:	4641      	mov	r1, r8
 800704a:	1851      	adds	r1, r2, r1
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	4649      	mov	r1, r9
 8007050:	414b      	adcs	r3, r1
 8007052:	607b      	str	r3, [r7, #4]
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007060:	4659      	mov	r1, fp
 8007062:	00cb      	lsls	r3, r1, #3
 8007064:	4651      	mov	r1, sl
 8007066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800706a:	4651      	mov	r1, sl
 800706c:	00ca      	lsls	r2, r1, #3
 800706e:	4610      	mov	r0, r2
 8007070:	4619      	mov	r1, r3
 8007072:	4603      	mov	r3, r0
 8007074:	4642      	mov	r2, r8
 8007076:	189b      	adds	r3, r3, r2
 8007078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800707a:	464b      	mov	r3, r9
 800707c:	460a      	mov	r2, r1
 800707e:	eb42 0303 	adc.w	r3, r2, r3
 8007082:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	663b      	str	r3, [r7, #96]	@ 0x60
 800708e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800709c:	4649      	mov	r1, r9
 800709e:	008b      	lsls	r3, r1, #2
 80070a0:	4641      	mov	r1, r8
 80070a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a6:	4641      	mov	r1, r8
 80070a8:	008a      	lsls	r2, r1, #2
 80070aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070ae:	f7f9 fe1b 	bl	8000ce8 <__aeabi_uldivmod>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <UART_SetConfig+0x4e4>)
 80070b8:	fba3 1302 	umull	r1, r3, r3, r2
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	2164      	movs	r1, #100	@ 0x64
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	3332      	adds	r3, #50	@ 0x32
 80070ca:	4a08      	ldr	r2, [pc, #32]	@ (80070ec <UART_SetConfig+0x4e4>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	f003 020f 	and.w	r2, r3, #15
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4422      	add	r2, r4
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070e6:	46bd      	mov	sp, r7
 80070e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ec:	51eb851f 	.word	0x51eb851f

080070f0 <__NVIC_SetPriority>:
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	6039      	str	r1, [r7, #0]
 80070fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007100:	2b00      	cmp	r3, #0
 8007102:	db0a      	blt.n	800711a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	b2da      	uxtb	r2, r3
 8007108:	490c      	ldr	r1, [pc, #48]	@ (800713c <__NVIC_SetPriority+0x4c>)
 800710a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710e:	0112      	lsls	r2, r2, #4
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	440b      	add	r3, r1
 8007114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007118:	e00a      	b.n	8007130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	4908      	ldr	r1, [pc, #32]	@ (8007140 <__NVIC_SetPriority+0x50>)
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	3b04      	subs	r3, #4
 8007128:	0112      	lsls	r2, r2, #4
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	440b      	add	r3, r1
 800712e:	761a      	strb	r2, [r3, #24]
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	e000e100 	.word	0xe000e100
 8007140:	e000ed00 	.word	0xe000ed00

08007144 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007148:	4b05      	ldr	r3, [pc, #20]	@ (8007160 <SysTick_Handler+0x1c>)
 800714a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800714c:	f002 fa04 	bl	8009558 <xTaskGetSchedulerState>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d001      	beq.n	800715a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007156:	f003 f8ff 	bl	800a358 <xPortSysTickHandler>
  }
}
 800715a:	bf00      	nop
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	e000e010 	.word	0xe000e010

08007164 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007168:	2100      	movs	r1, #0
 800716a:	f06f 0004 	mvn.w	r0, #4
 800716e:	f7ff ffbf 	bl	80070f0 <__NVIC_SetPriority>
#endif
}
 8007172:	bf00      	nop
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800717e:	f3ef 8305 	mrs	r3, IPSR
 8007182:	603b      	str	r3, [r7, #0]
  return(result);
 8007184:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800718a:	f06f 0305 	mvn.w	r3, #5
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	e00c      	b.n	80071ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007192:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <osKernelInitialize+0x44>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800719a:	4b08      	ldr	r3, [pc, #32]	@ (80071bc <osKernelInitialize+0x44>)
 800719c:	2201      	movs	r2, #1
 800719e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	e002      	b.n	80071ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071a6:	f04f 33ff 	mov.w	r3, #4294967295
 80071aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071ac:	687b      	ldr	r3, [r7, #4]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	200007a0 	.word	0x200007a0

080071c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c6:	f3ef 8305 	mrs	r3, IPSR
 80071ca:	603b      	str	r3, [r7, #0]
  return(result);
 80071cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <osKernelStart+0x1a>
    stat = osErrorISR;
 80071d2:	f06f 0305 	mvn.w	r3, #5
 80071d6:	607b      	str	r3, [r7, #4]
 80071d8:	e010      	b.n	80071fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071da:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <osKernelStart+0x48>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d109      	bne.n	80071f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071e2:	f7ff ffbf 	bl	8007164 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071e6:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <osKernelStart+0x48>)
 80071e8:	2202      	movs	r2, #2
 80071ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071ec:	f001 fd56 	bl	8008c9c <vTaskStartScheduler>
      stat = osOK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	607b      	str	r3, [r7, #4]
 80071f4:	e002      	b.n	80071fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071f6:	f04f 33ff 	mov.w	r3, #4294967295
 80071fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071fc:	687b      	ldr	r3, [r7, #4]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200007a0 	.word	0x200007a0

0800720c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b08e      	sub	sp, #56	@ 0x38
 8007210:	af04      	add	r7, sp, #16
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800721c:	f3ef 8305 	mrs	r3, IPSR
 8007220:	617b      	str	r3, [r7, #20]
  return(result);
 8007222:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007224:	2b00      	cmp	r3, #0
 8007226:	d17e      	bne.n	8007326 <osThreadNew+0x11a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d07b      	beq.n	8007326 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800722e:	2380      	movs	r3, #128	@ 0x80
 8007230:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007232:	2318      	movs	r3, #24
 8007234:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295
 800723e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d045      	beq.n	80072d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <osThreadNew+0x48>
        name = attr->name;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d008      	beq.n	800727a <osThreadNew+0x6e>
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b38      	cmp	r3, #56	@ 0x38
 800726c:	d805      	bhi.n	800727a <osThreadNew+0x6e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <osThreadNew+0x72>
        return (NULL);
 800727a:	2300      	movs	r3, #0
 800727c:	e054      	b.n	8007328 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	089b      	lsrs	r3, r3, #2
 800728c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <osThreadNew+0xa8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	2b5b      	cmp	r3, #91	@ 0x5b
 800729c:	d90a      	bls.n	80072b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d006      	beq.n	80072b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <osThreadNew+0xa8>
        mem = 1;
 80072ae:	2301      	movs	r3, #1
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	e010      	b.n	80072d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10c      	bne.n	80072d6 <osThreadNew+0xca>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d108      	bne.n	80072d6 <osThreadNew+0xca>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <osThreadNew+0xca>
          mem = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	e001      	b.n	80072d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d110      	bne.n	80072fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072e4:	9202      	str	r2, [sp, #8]
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6a3a      	ldr	r2, [r7, #32]
 80072f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f001 faf6 	bl	80088e4 <xTaskCreateStatic>
 80072f8:	4603      	mov	r3, r0
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	e013      	b.n	8007326 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d110      	bne.n	8007326 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	b29a      	uxth	r2, r3
 8007308:	f107 0310 	add.w	r3, r7, #16
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 fb44 	bl	80089a4 <xTaskCreate>
 800731c:	4603      	mov	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d001      	beq.n	8007326 <osThreadNew+0x11a>
            hTask = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007326:	693b      	ldr	r3, [r7, #16]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3728      	adds	r7, #40	@ 0x28
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007338:	f3ef 8305 	mrs	r3, IPSR
 800733c:	60bb      	str	r3, [r7, #8]
  return(result);
 800733e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <osDelay+0x1c>
    stat = osErrorISR;
 8007344:	f06f 0305 	mvn.w	r3, #5
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e007      	b.n	800735c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fc6a 	bl	8008c30 <vTaskDelay>
    }
  }

  return (stat);
 800735c:	68fb      	ldr	r3, [r7, #12]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007366:	b580      	push	{r7, lr}
 8007368:	b088      	sub	sp, #32
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007372:	f3ef 8305 	mrs	r3, IPSR
 8007376:	60bb      	str	r3, [r7, #8]
  return(result);
 8007378:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800737a:	2b00      	cmp	r3, #0
 800737c:	d174      	bne.n	8007468 <osMutexNew+0x102>
    if (attr != NULL) {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <osMutexNew+0x26>
      type = attr->attr_bits;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	e001      	b.n	8007390 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <osMutexNew+0x3a>
      rmtx = 1U;
 800739a:	2301      	movs	r3, #1
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e001      	b.n	80073a4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d15c      	bne.n	8007468 <osMutexNew+0x102>
      mem = -1;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d015      	beq.n	80073e6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d006      	beq.n	80073d0 <osMutexNew+0x6a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80073c8:	d902      	bls.n	80073d0 <osMutexNew+0x6a>
          mem = 1;
 80073ca:	2301      	movs	r3, #1
 80073cc:	613b      	str	r3, [r7, #16]
 80073ce:	e00c      	b.n	80073ea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d108      	bne.n	80073ea <osMutexNew+0x84>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <osMutexNew+0x84>
            mem = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	e001      	b.n	80073ea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d112      	bne.n	8007416 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	4619      	mov	r1, r3
 80073fc:	2004      	movs	r0, #4
 80073fe:	f000 fc50 	bl	8007ca2 <xQueueCreateMutexStatic>
 8007402:	61f8      	str	r0, [r7, #28]
 8007404:	e016      	b.n	8007434 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	4619      	mov	r1, r3
 800740c:	2001      	movs	r0, #1
 800740e:	f000 fc48 	bl	8007ca2 <xQueueCreateMutexStatic>
 8007412:	61f8      	str	r0, [r7, #28]
 8007414:	e00e      	b.n	8007434 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10b      	bne.n	8007434 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007422:	2004      	movs	r0, #4
 8007424:	f000 fc25 	bl	8007c72 <xQueueCreateMutex>
 8007428:	61f8      	str	r0, [r7, #28]
 800742a:	e003      	b.n	8007434 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800742c:	2001      	movs	r0, #1
 800742e:	f000 fc20 	bl	8007c72 <xQueueCreateMutex>
 8007432:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00c      	beq.n	8007454 <osMutexNew+0xee>
        if (attr != NULL) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <osMutexNew+0xe2>
          name = attr->name;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e001      	b.n	800744c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	69f8      	ldr	r0, [r7, #28]
 8007450:	f001 f9ea 	bl	8008828 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <osMutexNew+0x102>
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007468:	69fb      	ldr	r3, [r7, #28]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007490:	f3ef 8305 	mrs	r3, IPSR
 8007494:	60bb      	str	r3, [r7, #8]
  return(result);
 8007496:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800749c:	f06f 0305 	mvn.w	r3, #5
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	e02c      	b.n	80074fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d103      	bne.n	80074b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80074aa:	f06f 0303 	mvn.w	r3, #3
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	e025      	b.n	80074fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d011      	beq.n	80074dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6938      	ldr	r0, [r7, #16]
 80074bc:	f000 fc41 	bl	8007d42 <xQueueTakeMutexRecursive>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d01b      	beq.n	80074fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80074cc:	f06f 0301 	mvn.w	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e014      	b.n	80074fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80074d4:	f06f 0302 	mvn.w	r3, #2
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	e010      	b.n	80074fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6938      	ldr	r0, [r7, #16]
 80074e0:	f000 fee8 	bl	80082b4 <xQueueSemaphoreTake>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d009      	beq.n	80074fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80074f0:	f06f 0301 	mvn.w	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	e002      	b.n	80074fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80074f8:	f06f 0302 	mvn.w	r3, #2
 80074fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80074fe:	697b      	ldr	r3, [r7, #20]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007524:	f3ef 8305 	mrs	r3, IPSR
 8007528:	60bb      	str	r3, [r7, #8]
  return(result);
 800752a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007530:	f06f 0305 	mvn.w	r3, #5
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e01f      	b.n	8007578 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800753e:	f06f 0303 	mvn.w	r3, #3
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	e018      	b.n	8007578 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800754c:	6938      	ldr	r0, [r7, #16]
 800754e:	f000 fbc3 	bl	8007cd8 <xQueueGiveMutexRecursive>
 8007552:	4603      	mov	r3, r0
 8007554:	2b01      	cmp	r3, #1
 8007556:	d00f      	beq.n	8007578 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007558:	f06f 0302 	mvn.w	r3, #2
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	e00b      	b.n	8007578 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007560:	2300      	movs	r3, #0
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	6938      	ldr	r0, [r7, #16]
 8007568:	f000 fc22 	bl	8007db0 <xQueueGenericSend>
 800756c:	4603      	mov	r3, r0
 800756e:	2b01      	cmp	r3, #1
 8007570:	d002      	beq.n	8007578 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007572:	f06f 0302 	mvn.w	r3, #2
 8007576:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007578:	697b      	ldr	r3, [r7, #20]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007582:	b580      	push	{r7, lr}
 8007584:	b08a      	sub	sp, #40	@ 0x28
 8007586:	af02      	add	r7, sp, #8
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007592:	f3ef 8305 	mrs	r3, IPSR
 8007596:	613b      	str	r3, [r7, #16]
  return(result);
 8007598:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800759a:	2b00      	cmp	r3, #0
 800759c:	d15f      	bne.n	800765e <osMessageQueueNew+0xdc>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d05c      	beq.n	800765e <osMessageQueueNew+0xdc>
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d059      	beq.n	800765e <osMessageQueueNew+0xdc>
    mem = -1;
 80075aa:	f04f 33ff 	mov.w	r3, #4294967295
 80075ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d029      	beq.n	800760a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d012      	beq.n	80075e4 <osMessageQueueNew+0x62>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80075c4:	d90e      	bls.n	80075e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695a      	ldr	r2, [r3, #20]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	fb01 f303 	mul.w	r3, r1, r3
 80075da:	429a      	cmp	r2, r3
 80075dc:	d302      	bcc.n	80075e4 <osMessageQueueNew+0x62>
        mem = 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	e014      	b.n	800760e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d110      	bne.n	800760e <osMessageQueueNew+0x8c>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10c      	bne.n	800760e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <osMessageQueueNew+0x8c>
          mem = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	61bb      	str	r3, [r7, #24]
 8007608:	e001      	b.n	800760e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d10b      	bne.n	800762c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2100      	movs	r1, #0
 800761e:	9100      	str	r1, [sp, #0]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fa30 	bl	8007a88 <xQueueGenericCreateStatic>
 8007628:	61f8      	str	r0, [r7, #28]
 800762a:	e008      	b.n	800763e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007632:	2200      	movs	r2, #0
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 faa3 	bl	8007b82 <xQueueGenericCreate>
 800763c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00c      	beq.n	800765e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <osMessageQueueNew+0xd0>
        name = attr->name;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	e001      	b.n	8007656 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007656:	6979      	ldr	r1, [r7, #20]
 8007658:	69f8      	ldr	r0, [r7, #28]
 800765a:	f001 f8e5 	bl	8008828 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800765e:	69fb      	ldr	r3, [r7, #28]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	4613      	mov	r3, r2
 8007676:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007680:	f3ef 8305 	mrs	r3, IPSR
 8007684:	617b      	str	r3, [r7, #20]
  return(result);
 8007686:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007688:	2b00      	cmp	r3, #0
 800768a:	d028      	beq.n	80076de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <osMessageQueuePut+0x36>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <osMessageQueuePut+0x36>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800769e:	f06f 0303 	mvn.w	r3, #3
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	e038      	b.n	8007718 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80076aa:	f107 0210 	add.w	r2, r7, #16
 80076ae:	2300      	movs	r3, #0
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	69b8      	ldr	r0, [r7, #24]
 80076b4:	f000 fc7e 	bl	8007fb4 <xQueueGenericSendFromISR>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d003      	beq.n	80076c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80076be:	f06f 0302 	mvn.w	r3, #2
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	e028      	b.n	8007718 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d025      	beq.n	8007718 <osMessageQueuePut+0xb0>
 80076cc:	4b15      	ldr	r3, [pc, #84]	@ (8007724 <osMessageQueuePut+0xbc>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	e01c      	b.n	8007718 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <osMessageQueuePut+0x82>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d103      	bne.n	80076f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80076ea:	f06f 0303 	mvn.w	r3, #3
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	e012      	b.n	8007718 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80076f2:	2300      	movs	r3, #0
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	69b8      	ldr	r0, [r7, #24]
 80076fa:	f000 fb59 	bl	8007db0 <xQueueGenericSend>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b01      	cmp	r3, #1
 8007702:	d009      	beq.n	8007718 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800770a:	f06f 0301 	mvn.w	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	e002      	b.n	8007718 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007712:	f06f 0302 	mvn.w	r3, #2
 8007716:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007718:	69fb      	ldr	r3, [r7, #28]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800773e:	f3ef 8305 	mrs	r3, IPSR
 8007742:	617b      	str	r3, [r7, #20]
  return(result);
 8007744:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007746:	2b00      	cmp	r3, #0
 8007748:	d028      	beq.n	800779c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <osMessageQueueGet+0x34>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <osMessageQueueGet+0x34>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800775c:	f06f 0303 	mvn.w	r3, #3
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	e037      	b.n	80077d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007764:	2300      	movs	r3, #0
 8007766:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007768:	f107 0310 	add.w	r3, r7, #16
 800776c:	461a      	mov	r2, r3
 800776e:	68b9      	ldr	r1, [r7, #8]
 8007770:	69b8      	ldr	r0, [r7, #24]
 8007772:	f000 feaf 	bl	80084d4 <xQueueReceiveFromISR>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	d003      	beq.n	8007784 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800777c:	f06f 0302 	mvn.w	r3, #2
 8007780:	61fb      	str	r3, [r7, #28]
 8007782:	e027      	b.n	80077d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d024      	beq.n	80077d4 <osMessageQueueGet+0xac>
 800778a:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <osMessageQueueGet+0xb8>)
 800778c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	e01b      	b.n	80077d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <osMessageQueueGet+0x80>
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80077a8:	f06f 0303 	mvn.w	r3, #3
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e011      	b.n	80077d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	69b8      	ldr	r0, [r7, #24]
 80077b6:	f000 fc9b 	bl	80080f0 <xQueueReceive>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d009      	beq.n	80077d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80077c6:	f06f 0301 	mvn.w	r3, #1
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	e002      	b.n	80077d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80077ce:	f06f 0302 	mvn.w	r3, #2
 80077d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80077d4:	69fb      	ldr	r3, [r7, #28]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	e000ed04 	.word	0xe000ed04

080077e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a07      	ldr	r2, [pc, #28]	@ (8007810 <vApplicationGetIdleTaskMemory+0x2c>)
 80077f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4a06      	ldr	r2, [pc, #24]	@ (8007814 <vApplicationGetIdleTaskMemory+0x30>)
 80077fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2280      	movs	r2, #128	@ 0x80
 8007800:	601a      	str	r2, [r3, #0]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	200007a4 	.word	0x200007a4
 8007814:	20000800 	.word	0x20000800

08007818 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4a07      	ldr	r2, [pc, #28]	@ (8007844 <vApplicationGetTimerTaskMemory+0x2c>)
 8007828:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4a06      	ldr	r2, [pc, #24]	@ (8007848 <vApplicationGetTimerTaskMemory+0x30>)
 800782e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007836:	601a      	str	r2, [r3, #0]
}
 8007838:	bf00      	nop
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	20000a00 	.word	0x20000a00
 8007848:	20000a5c 	.word	0x20000a5c

0800784c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f103 0208 	add.w	r2, r3, #8
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f04f 32ff 	mov.w	r2, #4294967295
 8007864:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f103 0208 	add.w	r2, r3, #8
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f103 0208 	add.w	r2, r3, #8
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
}
 80078e2:	bf00      	nop
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078ee:	b480      	push	{r7}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d103      	bne.n	800790e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	e00c      	b.n	8007928 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3308      	adds	r3, #8
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e002      	b.n	800791c <vListInsert+0x2e>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	429a      	cmp	r2, r3
 8007926:	d2f6      	bcs.n	8007916 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
}
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6892      	ldr	r2, [r2, #8]
 8007976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6852      	ldr	r2, [r2, #4]
 8007980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d103      	bne.n	8007994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	1e5a      	subs	r2, r3, #1
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10b      	bne.n	80079e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80079da:	bf00      	nop
 80079dc:	bf00      	nop
 80079de:	e7fd      	b.n	80079dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079e0:	f002 fc2a 	bl	800a238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ec:	68f9      	ldr	r1, [r7, #12]
 80079ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	441a      	add	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a10:	3b01      	subs	r3, #1
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	441a      	add	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	22ff      	movs	r2, #255	@ 0xff
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	22ff      	movs	r2, #255	@ 0xff
 8007a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d114      	bne.n	8007a60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01a      	beq.n	8007a74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3310      	adds	r3, #16
 8007a42:	4618      	mov	r0, r3
 8007a44:	f001 fbb8 	bl	80091b8 <xTaskRemoveFromEventList>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d012      	beq.n	8007a74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a84 <xQueueGenericReset+0xd0>)
 8007a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	e009      	b.n	8007a74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3310      	adds	r3, #16
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff fef1 	bl	800784c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3324      	adds	r3, #36	@ 0x24
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff feec 	bl	800784c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a74:	f002 fc12 	bl	800a29c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a78:	2301      	movs	r3, #1
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08e      	sub	sp, #56	@ 0x38
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10b      	bne.n	8007ad2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	e7fd      	b.n	8007ace <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <xQueueGenericCreateStatic+0x56>
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <xQueueGenericCreateStatic+0x5a>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueGenericCreateStatic+0x5c>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	623b      	str	r3, [r7, #32]
}
 8007afa:	bf00      	nop
 8007afc:	bf00      	nop
 8007afe:	e7fd      	b.n	8007afc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <xQueueGenericCreateStatic+0x84>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <xQueueGenericCreateStatic+0x88>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <xQueueGenericCreateStatic+0x8a>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	61fb      	str	r3, [r7, #28]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b2e:	2350      	movs	r3, #80	@ 0x50
 8007b30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b50      	cmp	r3, #80	@ 0x50
 8007b36:	d00b      	beq.n	8007b50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	61bb      	str	r3, [r7, #24]
}
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
 8007b4e:	e7fd      	b.n	8007b4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00d      	beq.n	8007b78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f840 	bl	8007bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3730      	adds	r7, #48	@ 0x30
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b08a      	sub	sp, #40	@ 0x28
 8007b86:	af02      	add	r7, sp, #8
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <xQueueGenericCreate+0x2c>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	613b      	str	r3, [r7, #16]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	fb02 f303 	mul.w	r3, r2, r3
 8007bb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	3350      	adds	r3, #80	@ 0x50
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f002 fc5d 	bl	800a47c <pvPortMalloc>
 8007bc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d011      	beq.n	8007bee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	3350      	adds	r3, #80	@ 0x50
 8007bd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bdc:	79fa      	ldrb	r2, [r7, #7]
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f805 	bl	8007bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bee:	69bb      	ldr	r3, [r7, #24]
	}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e002      	b.n	8007c1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c26:	2101      	movs	r1, #1
 8007c28:	69b8      	ldr	r0, [r7, #24]
 8007c2a:	f7ff fec3 	bl	80079b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	78fa      	ldrb	r2, [r7, #3]
 8007c32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00e      	beq.n	8007c6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c5e:	2300      	movs	r3, #0
 8007c60:	2200      	movs	r2, #0
 8007c62:	2100      	movs	r1, #0
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8a3 	bl	8007db0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	4603      	mov	r3, r0
 8007c7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	2300      	movs	r3, #0
 8007c82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6939      	ldr	r1, [r7, #16]
 8007c8a:	6978      	ldr	r0, [r7, #20]
 8007c8c:	f7ff ff79 	bl	8007b82 <xQueueGenericCreate>
 8007c90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff ffd3 	bl	8007c3e <prvInitialiseMutex>

		return xNewQueue;
 8007c98:	68fb      	ldr	r3, [r7, #12]
	}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b088      	sub	sp, #32
 8007ca6:	af02      	add	r7, sp, #8
 8007ca8:	4603      	mov	r3, r0
 8007caa:	6039      	str	r1, [r7, #0]
 8007cac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	6939      	ldr	r1, [r7, #16]
 8007cc0:	6978      	ldr	r0, [r7, #20]
 8007cc2:	f7ff fee1 	bl	8007a88 <xQueueGenericCreateStatic>
 8007cc6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff ffb8 	bl	8007c3e <prvInitialiseMutex>

		return xNewQueue;
 8007cce:	68fb      	ldr	r3, [r7, #12]
	}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007cd8:	b590      	push	{r4, r7, lr}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	60fb      	str	r3, [r7, #12]
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	e7fd      	b.n	8007cfe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	689c      	ldr	r4, [r3, #8]
 8007d06:	f001 fc17 	bl	8009538 <xTaskGetCurrentTaskHandle>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	d111      	bne.n	8007d34 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	1e5a      	subs	r2, r3, #1
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d105      	bne.n	8007d2e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007d22:	2300      	movs	r3, #0
 8007d24:	2200      	movs	r2, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	6938      	ldr	r0, [r7, #16]
 8007d2a:	f000 f841 	bl	8007db0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e001      	b.n	8007d38 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007d38:	697b      	ldr	r3, [r7, #20]
	}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd90      	pop	{r4, r7, pc}

08007d42 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007d42:	b590      	push	{r4, r7, lr}
 8007d44:	b087      	sub	sp, #28
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10b      	bne.n	8007d6e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	689c      	ldr	r4, [r3, #8]
 8007d72:	f001 fbe1 	bl	8009538 <xTaskGetCurrentTaskHandle>
 8007d76:	4603      	mov	r3, r0
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	d107      	bne.n	8007d8c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007d86:	2301      	movs	r3, #1
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	e00c      	b.n	8007da6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6938      	ldr	r0, [r7, #16]
 8007d90:	f000 fa90 	bl	80082b4 <xQueueSemaphoreTake>
 8007d94:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007da6:	697b      	ldr	r3, [r7, #20]
	}
 8007da8:	4618      	mov	r0, r3
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd90      	pop	{r4, r7, pc}

08007db0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08e      	sub	sp, #56	@ 0x38
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10b      	bne.n	8007de4 <xQueueGenericSend+0x34>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007dde:	bf00      	nop
 8007de0:	bf00      	nop
 8007de2:	e7fd      	b.n	8007de0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <xQueueGenericSend+0x42>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <xQueueGenericSend+0x46>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericSend+0x48>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10b      	bne.n	8007e14 <xQueueGenericSend+0x64>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007e0e:	bf00      	nop
 8007e10:	bf00      	nop
 8007e12:	e7fd      	b.n	8007e10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d103      	bne.n	8007e22 <xQueueGenericSend+0x72>
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <xQueueGenericSend+0x76>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e000      	b.n	8007e28 <xQueueGenericSend+0x78>
 8007e26:	2300      	movs	r3, #0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10b      	bne.n	8007e44 <xQueueGenericSend+0x94>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	623b      	str	r3, [r7, #32]
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	e7fd      	b.n	8007e40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e44:	f001 fb88 	bl	8009558 <xTaskGetSchedulerState>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d102      	bne.n	8007e54 <xQueueGenericSend+0xa4>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <xQueueGenericSend+0xa8>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e000      	b.n	8007e5a <xQueueGenericSend+0xaa>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <xQueueGenericSend+0xc6>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	61fb      	str	r3, [r7, #28]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e76:	f002 f9df 	bl	800a238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d302      	bcc.n	8007e8c <xQueueGenericSend+0xdc>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d129      	bne.n	8007ee0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	68b9      	ldr	r1, [r7, #8]
 8007e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e92:	f000 fbb9 	bl	8008608 <prvCopyDataToQueue>
 8007e96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d010      	beq.n	8007ec2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	3324      	adds	r3, #36	@ 0x24
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f987 	bl	80091b8 <xTaskRemoveFromEventList>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d013      	beq.n	8007ed8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8007fb0 <xQueueGenericSend+0x200>)
 8007eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	e00a      	b.n	8007ed8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ec8:	4b39      	ldr	r3, [pc, #228]	@ (8007fb0 <xQueueGenericSend+0x200>)
 8007eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ed8:	f002 f9e0 	bl	800a29c <vPortExitCritical>
				return pdPASS;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e063      	b.n	8007fa8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ee6:	f002 f9d9 	bl	800a29c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e05c      	b.n	8007fa8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 f9c1 	bl	8009280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007efe:	2301      	movs	r3, #1
 8007f00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f02:	f002 f9cb 	bl	800a29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f06:	f000 ff31 	bl	8008d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f0a:	f002 f995 	bl	800a238 <vPortEnterCritical>
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f14:	b25b      	sxtb	r3, r3
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d103      	bne.n	8007f24 <xQueueGenericSend+0x174>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f2a:	b25b      	sxtb	r3, r3
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d103      	bne.n	8007f3a <xQueueGenericSend+0x18a>
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f3a:	f002 f9af 	bl	800a29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f3e:	1d3a      	adds	r2, r7, #4
 8007f40:	f107 0314 	add.w	r3, r7, #20
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f9b0 	bl	80092ac <xTaskCheckForTimeOut>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d124      	bne.n	8007f9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f54:	f000 fc50 	bl	80087f8 <prvIsQueueFull>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d018      	beq.n	8007f90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	3310      	adds	r3, #16
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 f8d4 	bl	8009114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f6e:	f000 fbdb 	bl	8008728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f72:	f000 ff09 	bl	8008d88 <xTaskResumeAll>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f47f af7c 	bne.w	8007e76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb0 <xQueueGenericSend+0x200>)
 8007f80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	e772      	b.n	8007e76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f92:	f000 fbc9 	bl	8008728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f96:	f000 fef7 	bl	8008d88 <xTaskResumeAll>
 8007f9a:	e76c      	b.n	8007e76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f9e:	f000 fbc3 	bl	8008728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fa2:	f000 fef1 	bl	8008d88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3738      	adds	r7, #56	@ 0x38
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b090      	sub	sp, #64	@ 0x40
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10b      	bne.n	8007fe4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	e7fd      	b.n	8007fe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d103      	bne.n	8007ff2 <xQueueGenericSendFromISR+0x3e>
 8007fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <xQueueGenericSendFromISR+0x42>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <xQueueGenericSendFromISR+0x44>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	e7fd      	b.n	8008010 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d103      	bne.n	8008022 <xQueueGenericSendFromISR+0x6e>
 800801a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <xQueueGenericSendFromISR+0x72>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <xQueueGenericSendFromISR+0x74>
 8008026:	2300      	movs	r3, #0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10b      	bne.n	8008044 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	623b      	str	r3, [r7, #32]
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	e7fd      	b.n	8008040 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008044:	f002 f9d8 	bl	800a3f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008048:	f3ef 8211 	mrs	r2, BASEPRI
 800804c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	61fa      	str	r2, [r7, #28]
 800805e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008060:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <xQueueGenericSendFromISR+0xc2>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d12f      	bne.n	80080d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008078:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800807c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008084:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800808c:	f000 fabc 	bl	8008608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008090:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d112      	bne.n	80080c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d016      	beq.n	80080d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a4:	3324      	adds	r3, #36	@ 0x24
 80080a6:	4618      	mov	r0, r3
 80080a8:	f001 f886 	bl	80091b8 <xTaskRemoveFromEventList>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00e      	beq.n	80080d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	e007      	b.n	80080d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80080c4:	3301      	adds	r3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	b25a      	sxtb	r2, r3
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80080d0:	2301      	movs	r3, #1
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80080d4:	e001      	b.n	80080da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080d6:	2300      	movs	r3, #0
 80080d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3740      	adds	r7, #64	@ 0x40
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08c      	sub	sp, #48	@ 0x30
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <xQueueReceive+0x32>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	623b      	str	r3, [r7, #32]
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	e7fd      	b.n	800811e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <xQueueReceive+0x40>
 8008128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <xQueueReceive+0x44>
 8008130:	2301      	movs	r3, #1
 8008132:	e000      	b.n	8008136 <xQueueReceive+0x46>
 8008134:	2300      	movs	r3, #0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10b      	bne.n	8008152 <xQueueReceive+0x62>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	61fb      	str	r3, [r7, #28]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008152:	f001 fa01 	bl	8009558 <xTaskGetSchedulerState>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <xQueueReceive+0x72>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <xQueueReceive+0x76>
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <xQueueReceive+0x78>
 8008166:	2300      	movs	r3, #0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <xQueueReceive+0x94>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	61bb      	str	r3, [r7, #24]
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008184:	f002 f858 	bl	800a238 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01f      	beq.n	80081d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008198:	f000 faa0 	bl	80086dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	1e5a      	subs	r2, r3, #1
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00f      	beq.n	80081cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	3310      	adds	r3, #16
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 f801 	bl	80091b8 <xTaskRemoveFromEventList>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081bc:	4b3c      	ldr	r3, [pc, #240]	@ (80082b0 <xQueueReceive+0x1c0>)
 80081be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081cc:	f002 f866 	bl	800a29c <vPortExitCritical>
				return pdPASS;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e069      	b.n	80082a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d103      	bne.n	80081e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081da:	f002 f85f 	bl	800a29c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081de:	2300      	movs	r3, #0
 80081e0:	e062      	b.n	80082a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d106      	bne.n	80081f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081e8:	f107 0310 	add.w	r3, r7, #16
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 f847 	bl	8009280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081f2:	2301      	movs	r3, #1
 80081f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081f6:	f002 f851 	bl	800a29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081fa:	f000 fdb7 	bl	8008d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081fe:	f002 f81b 	bl	800a238 <vPortEnterCritical>
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008208:	b25b      	sxtb	r3, r3
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820e:	d103      	bne.n	8008218 <xQueueReceive+0x128>
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800821e:	b25b      	sxtb	r3, r3
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008224:	d103      	bne.n	800822e <xQueueReceive+0x13e>
 8008226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800822e:	f002 f835 	bl	800a29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008232:	1d3a      	adds	r2, r7, #4
 8008234:	f107 0310 	add.w	r3, r7, #16
 8008238:	4611      	mov	r1, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f001 f836 	bl	80092ac <xTaskCheckForTimeOut>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d123      	bne.n	800828e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008248:	f000 fac0 	bl	80087cc <prvIsQueueEmpty>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d017      	beq.n	8008282 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008254:	3324      	adds	r3, #36	@ 0x24
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4611      	mov	r1, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f000 ff5a 	bl	8009114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008262:	f000 fa61 	bl	8008728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008266:	f000 fd8f 	bl	8008d88 <xTaskResumeAll>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d189      	bne.n	8008184 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008270:	4b0f      	ldr	r3, [pc, #60]	@ (80082b0 <xQueueReceive+0x1c0>)
 8008272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	e780      	b.n	8008184 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008284:	f000 fa50 	bl	8008728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008288:	f000 fd7e 	bl	8008d88 <xTaskResumeAll>
 800828c:	e77a      	b.n	8008184 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800828e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008290:	f000 fa4a 	bl	8008728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008294:	f000 fd78 	bl	8008d88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800829a:	f000 fa97 	bl	80087cc <prvIsQueueEmpty>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f43f af6f 	beq.w	8008184 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3730      	adds	r7, #48	@ 0x30
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08e      	sub	sp, #56	@ 0x38
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082be:	2300      	movs	r3, #0
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10b      	bne.n	80082e8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	623b      	str	r3, [r7, #32]
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	e7fd      	b.n	80082e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80082e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	61fb      	str	r3, [r7, #28]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008308:	f001 f926 	bl	8009558 <xTaskGetSchedulerState>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <xQueueSemaphoreTake+0x64>
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <xQueueSemaphoreTake+0x68>
 8008318:	2301      	movs	r3, #1
 800831a:	e000      	b.n	800831e <xQueueSemaphoreTake+0x6a>
 800831c:	2300      	movs	r3, #0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10b      	bne.n	800833a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	61bb      	str	r3, [r7, #24]
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop
 8008338:	e7fd      	b.n	8008336 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800833a:	f001 ff7d 	bl	800a238 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800833e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008342:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008346:	2b00      	cmp	r3, #0
 8008348:	d024      	beq.n	8008394 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800834a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834c:	1e5a      	subs	r2, r3, #1
 800834e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008350:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800835a:	f001 fa77 	bl	800984c <pvTaskIncrementMutexHeldCount>
 800835e:	4602      	mov	r2, r0
 8008360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008362:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00f      	beq.n	800838c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800836c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836e:	3310      	adds	r3, #16
 8008370:	4618      	mov	r0, r3
 8008372:	f000 ff21 	bl	80091b8 <xTaskRemoveFromEventList>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800837c:	4b54      	ldr	r3, [pc, #336]	@ (80084d0 <xQueueSemaphoreTake+0x21c>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800838c:	f001 ff86 	bl	800a29c <vPortExitCritical>
				return pdPASS;
 8008390:	2301      	movs	r3, #1
 8008392:	e098      	b.n	80084c6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d112      	bne.n	80083c0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	617b      	str	r3, [r7, #20]
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	e7fd      	b.n	80083b4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083b8:	f001 ff70 	bl	800a29c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083bc:	2300      	movs	r3, #0
 80083be:	e082      	b.n	80084c6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083c6:	f107 030c 	add.w	r3, r7, #12
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 ff58 	bl	8009280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083d4:	f001 ff62 	bl	800a29c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083d8:	f000 fcc8 	bl	8008d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083dc:	f001 ff2c 	bl	800a238 <vPortEnterCritical>
 80083e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083e6:	b25b      	sxtb	r3, r3
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d103      	bne.n	80083f6 <xQueueSemaphoreTake+0x142>
 80083ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083fc:	b25b      	sxtb	r3, r3
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008402:	d103      	bne.n	800840c <xQueueSemaphoreTake+0x158>
 8008404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800840c:	f001 ff46 	bl	800a29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008410:	463a      	mov	r2, r7
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	4611      	mov	r1, r2
 8008418:	4618      	mov	r0, r3
 800841a:	f000 ff47 	bl	80092ac <xTaskCheckForTimeOut>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d132      	bne.n	800848a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008424:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008426:	f000 f9d1 	bl	80087cc <prvIsQueueEmpty>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d026      	beq.n	800847e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d109      	bne.n	800844c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008438:	f001 fefe 	bl	800a238 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	4618      	mov	r0, r3
 8008442:	f001 f8a7 	bl	8009594 <xTaskPriorityInherit>
 8008446:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008448:	f001 ff28 	bl	800a29c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800844c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844e:	3324      	adds	r3, #36	@ 0x24
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fe5d 	bl	8009114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800845a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800845c:	f000 f964 	bl	8008728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008460:	f000 fc92 	bl	8008d88 <xTaskResumeAll>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	f47f af67 	bne.w	800833a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800846c:	4b18      	ldr	r3, [pc, #96]	@ (80084d0 <xQueueSemaphoreTake+0x21c>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	e75d      	b.n	800833a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800847e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008480:	f000 f952 	bl	8008728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008484:	f000 fc80 	bl	8008d88 <xTaskResumeAll>
 8008488:	e757      	b.n	800833a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800848a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800848c:	f000 f94c 	bl	8008728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008490:	f000 fc7a 	bl	8008d88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008494:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008496:	f000 f999 	bl	80087cc <prvIsQueueEmpty>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	f43f af4c 	beq.w	800833a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00d      	beq.n	80084c4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80084a8:	f001 fec6 	bl	800a238 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084ae:	f000 f893 	bl	80085d8 <prvGetDisinheritPriorityAfterTimeout>
 80084b2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 f942 	bl	8009744 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084c0:	f001 feec 	bl	800a29c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3738      	adds	r7, #56	@ 0x38
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	e000ed04 	.word	0xe000ed04

080084d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08e      	sub	sp, #56	@ 0x38
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10b      	bne.n	8008502 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	623b      	str	r3, [r7, #32]
}
 80084fc:	bf00      	nop
 80084fe:	bf00      	nop
 8008500:	e7fd      	b.n	80084fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d103      	bne.n	8008510 <xQueueReceiveFromISR+0x3c>
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <xQueueReceiveFromISR+0x40>
 8008510:	2301      	movs	r3, #1
 8008512:	e000      	b.n	8008516 <xQueueReceiveFromISR+0x42>
 8008514:	2300      	movs	r3, #0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	61fb      	str	r3, [r7, #28]
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	e7fd      	b.n	800852e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008532:	f001 ff61 	bl	800a3f8 <vPortValidateInterruptPriority>
	__asm volatile
 8008536:	f3ef 8211 	mrs	r2, BASEPRI
 800853a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	61ba      	str	r2, [r7, #24]
 800854c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800854e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008550:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008556:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855a:	2b00      	cmp	r3, #0
 800855c:	d02f      	beq.n	80085be <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008568:	68b9      	ldr	r1, [r7, #8]
 800856a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800856c:	f000 f8b6 	bl	80086dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	1e5a      	subs	r2, r3, #1
 8008574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008576:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008578:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d112      	bne.n	80085a8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d016      	beq.n	80085b8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858c:	3310      	adds	r3, #16
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fe12 	bl	80091b8 <xTaskRemoveFromEventList>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00e      	beq.n	80085b8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e007      	b.n	80085b8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085ac:	3301      	adds	r3, #1
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	b25a      	sxtb	r2, r3
 80085b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80085b8:	2301      	movs	r3, #1
 80085ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80085bc:	e001      	b.n	80085c2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80085be:	2300      	movs	r3, #0
 80085c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f383 8811 	msr	BASEPRI, r3
}
 80085cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3738      	adds	r7, #56	@ 0x38
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e001      	b.n	80085fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80085fa:	68fb      	ldr	r3, [r7, #12]
	}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10d      	bne.n	8008642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d14d      	bne.n	80086ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	4618      	mov	r0, r3
 8008634:	f001 f816 	bl	8009664 <xTaskPriorityDisinherit>
 8008638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	609a      	str	r2, [r3, #8]
 8008640:	e043      	b.n	80086ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d119      	bne.n	800867c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6858      	ldr	r0, [r3, #4]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008650:	461a      	mov	r2, r3
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	f003 f8f9 	bl	800b84a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008660:	441a      	add	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	429a      	cmp	r2, r3
 8008670:	d32b      	bcc.n	80086ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	e026      	b.n	80086ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68d8      	ldr	r0, [r3, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008684:	461a      	mov	r2, r3
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	f003 f8df 	bl	800b84a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008694:	425b      	negs	r3, r3
 8008696:	441a      	add	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d207      	bcs.n	80086b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b0:	425b      	negs	r3, r3
 80086b2:	441a      	add	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d105      	bne.n	80086ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086d2:	697b      	ldr	r3, [r7, #20]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d018      	beq.n	8008720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f6:	441a      	add	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	429a      	cmp	r2, r3
 8008706:	d303      	bcc.n	8008710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68d9      	ldr	r1, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008718:	461a      	mov	r2, r3
 800871a:	6838      	ldr	r0, [r7, #0]
 800871c:	f003 f895 	bl	800b84a <memcpy>
	}
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008730:	f001 fd82 	bl	800a238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800873a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800873c:	e011      	b.n	8008762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d012      	beq.n	800876c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3324      	adds	r3, #36	@ 0x24
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fd34 	bl	80091b8 <xTaskRemoveFromEventList>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008756:	f000 fe0d 	bl	8009374 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	3b01      	subs	r3, #1
 800875e:	b2db      	uxtb	r3, r3
 8008760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008766:	2b00      	cmp	r3, #0
 8008768:	dce9      	bgt.n	800873e <prvUnlockQueue+0x16>
 800876a:	e000      	b.n	800876e <prvUnlockQueue+0x46>
					break;
 800876c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	22ff      	movs	r2, #255	@ 0xff
 8008772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008776:	f001 fd91 	bl	800a29c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800877a:	f001 fd5d 	bl	800a238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008786:	e011      	b.n	80087ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d012      	beq.n	80087b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3310      	adds	r3, #16
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fd0f 	bl	80091b8 <xTaskRemoveFromEventList>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087a0:	f000 fde8 	bl	8009374 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dce9      	bgt.n	8008788 <prvUnlockQueue+0x60>
 80087b4:	e000      	b.n	80087b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	22ff      	movs	r2, #255	@ 0xff
 80087bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087c0:	f001 fd6c 	bl	800a29c <vPortExitCritical>
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087d4:	f001 fd30 	bl	800a238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d102      	bne.n	80087e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e001      	b.n	80087ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087ea:	f001 fd57 	bl	800a29c <vPortExitCritical>

	return xReturn;
 80087ee:	68fb      	ldr	r3, [r7, #12]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008800:	f001 fd1a 	bl	800a238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800880c:	429a      	cmp	r2, r3
 800880e:	d102      	bne.n	8008816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e001      	b.n	800881a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800881a:	f001 fd3f 	bl	800a29c <vPortExitCritical>

	return xReturn;
 800881e:	68fb      	ldr	r3, [r7, #12]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	e014      	b.n	8008862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008838:	4a0f      	ldr	r2, [pc, #60]	@ (8008878 <vQueueAddToRegistry+0x50>)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10b      	bne.n	800885c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008844:	490c      	ldr	r1, [pc, #48]	@ (8008878 <vQueueAddToRegistry+0x50>)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800884e:	4a0a      	ldr	r2, [pc, #40]	@ (8008878 <vQueueAddToRegistry+0x50>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	4413      	add	r3, r2
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800885a:	e006      	b.n	800886a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b07      	cmp	r3, #7
 8008866:	d9e7      	bls.n	8008838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000e5c 	.word	0x20000e5c

0800887c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800888c:	f001 fcd4 	bl	800a238 <vPortEnterCritical>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008896:	b25b      	sxtb	r3, r3
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889c:	d103      	bne.n	80088a6 <vQueueWaitForMessageRestricted+0x2a>
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ac:	b25b      	sxtb	r3, r3
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d103      	bne.n	80088bc <vQueueWaitForMessageRestricted+0x40>
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088bc:	f001 fcee 	bl	800a29c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	3324      	adds	r3, #36	@ 0x24
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 fc45 	bl	8009160 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f7ff ff26 	bl	8008728 <prvUnlockQueue>
	}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08e      	sub	sp, #56	@ 0x38
 80088e8:	af04      	add	r7, sp, #16
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <xTaskCreateStatic+0x2c>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	623b      	str	r3, [r7, #32]
}
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	e7fd      	b.n	800890c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	61fb      	str	r3, [r7, #28]
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	e7fd      	b.n	800892a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800892e:	235c      	movs	r3, #92	@ 0x5c
 8008930:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b5c      	cmp	r3, #92	@ 0x5c
 8008936:	d00b      	beq.n	8008950 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	61bb      	str	r3, [r7, #24]
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	e7fd      	b.n	800894c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008950:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008954:	2b00      	cmp	r3, #0
 8008956:	d01e      	beq.n	8008996 <xTaskCreateStatic+0xb2>
 8008958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01b      	beq.n	8008996 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008966:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	2202      	movs	r2, #2
 800896c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008970:	2300      	movs	r3, #0
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	9302      	str	r3, [sp, #8]
 8008978:	f107 0314 	add.w	r3, r7, #20
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f850 	bl	8008a2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800898e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008990:	f000 f8de 	bl	8008b50 <prvAddNewTaskToReadyList>
 8008994:	e001      	b.n	800899a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800899a:	697b      	ldr	r3, [r7, #20]
	}
 800899c:	4618      	mov	r0, r3
 800899e:	3728      	adds	r7, #40	@ 0x28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08c      	sub	sp, #48	@ 0x30
 80089a8:	af04      	add	r7, sp, #16
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f001 fd5f 	bl	800a47c <pvPortMalloc>
 80089be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00e      	beq.n	80089e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089c6:	205c      	movs	r0, #92	@ 0x5c
 80089c8:	f001 fd58 	bl	800a47c <pvPortMalloc>
 80089cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80089da:	e005      	b.n	80089e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089dc:	6978      	ldr	r0, [r7, #20]
 80089de:	f001 fe1b 	bl	800a618 <vPortFree>
 80089e2:	e001      	b.n	80089e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089e4:	2300      	movs	r3, #0
 80089e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d017      	beq.n	8008a1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089f6:	88fa      	ldrh	r2, [r7, #6]
 80089f8:	2300      	movs	r3, #0
 80089fa:	9303      	str	r3, [sp, #12]
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	9302      	str	r3, [sp, #8]
 8008a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 f80e 	bl	8008a2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a12:	69f8      	ldr	r0, [r7, #28]
 8008a14:	f000 f89c 	bl	8008b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	61bb      	str	r3, [r7, #24]
 8008a1c:	e002      	b.n	8008a24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a24:	69bb      	ldr	r3, [r7, #24]
	}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3720      	adds	r7, #32
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b088      	sub	sp, #32
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	461a      	mov	r2, r3
 8008a46:	21a5      	movs	r1, #165	@ 0xa5
 8008a48:	f002 fe5a 	bl	800b700 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a56:	3b01      	subs	r3, #1
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	f023 0307 	bic.w	r3, r3, #7
 8008a64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	617b      	str	r3, [r7, #20]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d01f      	beq.n	8008ace <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
 8008a92:	e012      	b.n	8008aba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	4413      	add	r3, r2
 8008a9a:	7819      	ldrb	r1, [r3, #0]
 8008a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	3334      	adds	r3, #52	@ 0x34
 8008aa4:	460a      	mov	r2, r1
 8008aa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d006      	beq.n	8008ac2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	d9e9      	bls.n	8008a94 <prvInitialiseNewTask+0x66>
 8008ac0:	e000      	b.n	8008ac4 <prvInitialiseNewTask+0x96>
			{
				break;
 8008ac2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008acc:	e003      	b.n	8008ad6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	2b37      	cmp	r3, #55	@ 0x37
 8008ada:	d901      	bls.n	8008ae0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008adc:	2337      	movs	r3, #55	@ 0x37
 8008ade:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008aea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aee:	2200      	movs	r2, #0
 8008af0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	3304      	adds	r3, #4
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fec8 	bl	800788c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	3318      	adds	r3, #24
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fec3 	bl	800788c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	2200      	movs	r2, #0
 8008b20:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	68f9      	ldr	r1, [r7, #12]
 8008b2e:	69b8      	ldr	r0, [r7, #24]
 8008b30:	f001 fa4e 	bl	8009fd0 <pxPortInitialiseStack>
 8008b34:	4602      	mov	r2, r0
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b46:	bf00      	nop
 8008b48:	3720      	adds	r7, #32
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b58:	f001 fb6e 	bl	800a238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c14 <prvAddNewTaskToReadyList+0xc4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3301      	adds	r3, #1
 8008b62:	4a2c      	ldr	r2, [pc, #176]	@ (8008c14 <prvAddNewTaskToReadyList+0xc4>)
 8008b64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b66:	4b2c      	ldr	r3, [pc, #176]	@ (8008c18 <prvAddNewTaskToReadyList+0xc8>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008c18 <prvAddNewTaskToReadyList+0xc8>)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b74:	4b27      	ldr	r3, [pc, #156]	@ (8008c14 <prvAddNewTaskToReadyList+0xc4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d110      	bne.n	8008b9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b7c:	f000 fc1e 	bl	80093bc <prvInitialiseTaskLists>
 8008b80:	e00d      	b.n	8008b9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b82:	4b26      	ldr	r3, [pc, #152]	@ (8008c1c <prvAddNewTaskToReadyList+0xcc>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d109      	bne.n	8008b9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b8a:	4b23      	ldr	r3, [pc, #140]	@ (8008c18 <prvAddNewTaskToReadyList+0xc8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d802      	bhi.n	8008b9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b98:	4a1f      	ldr	r2, [pc, #124]	@ (8008c18 <prvAddNewTaskToReadyList+0xc8>)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b9e:	4b20      	ldr	r3, [pc, #128]	@ (8008c20 <prvAddNewTaskToReadyList+0xd0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8008c20 <prvAddNewTaskToReadyList+0xd0>)
 8008ba6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c20 <prvAddNewTaskToReadyList+0xd0>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8008c24 <prvAddNewTaskToReadyList+0xd4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d903      	bls.n	8008bc4 <prvAddNewTaskToReadyList+0x74>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc0:	4a18      	ldr	r2, [pc, #96]	@ (8008c24 <prvAddNewTaskToReadyList+0xd4>)
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4a15      	ldr	r2, [pc, #84]	@ (8008c28 <prvAddNewTaskToReadyList+0xd8>)
 8008bd2:	441a      	add	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fe fe63 	bl	80078a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008be0:	f001 fb5c 	bl	800a29c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008be4:	4b0d      	ldr	r3, [pc, #52]	@ (8008c1c <prvAddNewTaskToReadyList+0xcc>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00e      	beq.n	8008c0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bec:	4b0a      	ldr	r3, [pc, #40]	@ (8008c18 <prvAddNewTaskToReadyList+0xc8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d207      	bcs.n	8008c0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8008c2c <prvAddNewTaskToReadyList+0xdc>)
 8008bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c0a:	bf00      	nop
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20001370 	.word	0x20001370
 8008c18:	20000e9c 	.word	0x20000e9c
 8008c1c:	2000137c 	.word	0x2000137c
 8008c20:	2000138c 	.word	0x2000138c
 8008c24:	20001378 	.word	0x20001378
 8008c28:	20000ea0 	.word	0x20000ea0
 8008c2c:	e000ed04 	.word	0xe000ed04

08008c30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d018      	beq.n	8008c74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c42:	4b14      	ldr	r3, [pc, #80]	@ (8008c94 <vTaskDelay+0x64>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <vTaskDelay+0x32>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	60bb      	str	r3, [r7, #8]
}
 8008c5c:	bf00      	nop
 8008c5e:	bf00      	nop
 8008c60:	e7fd      	b.n	8008c5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c62:	f000 f883 	bl	8008d6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c66:	2100      	movs	r1, #0
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fe03 	bl	8009874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c6e:	f000 f88b 	bl	8008d88 <xTaskResumeAll>
 8008c72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d107      	bne.n	8008c8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c7a:	4b07      	ldr	r3, [pc, #28]	@ (8008c98 <vTaskDelay+0x68>)
 8008c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20001398 	.word	0x20001398
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08a      	sub	sp, #40	@ 0x28
 8008ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008caa:	463a      	mov	r2, r7
 8008cac:	1d39      	adds	r1, r7, #4
 8008cae:	f107 0308 	add.w	r3, r7, #8
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe fd96 	bl	80077e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	9202      	str	r2, [sp, #8]
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	460a      	mov	r2, r1
 8008cca:	4922      	ldr	r1, [pc, #136]	@ (8008d54 <vTaskStartScheduler+0xb8>)
 8008ccc:	4822      	ldr	r0, [pc, #136]	@ (8008d58 <vTaskStartScheduler+0xbc>)
 8008cce:	f7ff fe09 	bl	80088e4 <xTaskCreateStatic>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4a21      	ldr	r2, [pc, #132]	@ (8008d5c <vTaskStartScheduler+0xc0>)
 8008cd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cd8:	4b20      	ldr	r3, [pc, #128]	@ (8008d5c <vTaskStartScheduler+0xc0>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	e001      	b.n	8008cea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d102      	bne.n	8008cf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008cf0:	f000 fe14 	bl	800991c <xTimerCreateTimerTask>
 8008cf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d116      	bne.n	8008d2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	613b      	str	r3, [r7, #16]
}
 8008d0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d10:	4b13      	ldr	r3, [pc, #76]	@ (8008d60 <vTaskStartScheduler+0xc4>)
 8008d12:	f04f 32ff 	mov.w	r2, #4294967295
 8008d16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d18:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <vTaskStartScheduler+0xc8>)
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d1e:	4b12      	ldr	r3, [pc, #72]	@ (8008d68 <vTaskStartScheduler+0xcc>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d24:	f001 f9e4 	bl	800a0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d28:	e00f      	b.n	8008d4a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d10b      	bne.n	8008d4a <vTaskStartScheduler+0xae>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	60fb      	str	r3, [r7, #12]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <vTaskStartScheduler+0xaa>
}
 8008d4a:	bf00      	nop
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	0800db34 	.word	0x0800db34
 8008d58:	0800938d 	.word	0x0800938d
 8008d5c:	20001394 	.word	0x20001394
 8008d60:	20001390 	.word	0x20001390
 8008d64:	2000137c 	.word	0x2000137c
 8008d68:	20001374 	.word	0x20001374

08008d6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d70:	4b04      	ldr	r3, [pc, #16]	@ (8008d84 <vTaskSuspendAll+0x18>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3301      	adds	r3, #1
 8008d76:	4a03      	ldr	r2, [pc, #12]	@ (8008d84 <vTaskSuspendAll+0x18>)
 8008d78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d7a:	bf00      	nop
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	20001398 	.word	0x20001398

08008d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d96:	4b42      	ldr	r3, [pc, #264]	@ (8008ea0 <xTaskResumeAll+0x118>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10b      	bne.n	8008db6 <xTaskResumeAll+0x2e>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	603b      	str	r3, [r7, #0]
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	e7fd      	b.n	8008db2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008db6:	f001 fa3f 	bl	800a238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dba:	4b39      	ldr	r3, [pc, #228]	@ (8008ea0 <xTaskResumeAll+0x118>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	4a37      	ldr	r2, [pc, #220]	@ (8008ea0 <xTaskResumeAll+0x118>)
 8008dc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dc4:	4b36      	ldr	r3, [pc, #216]	@ (8008ea0 <xTaskResumeAll+0x118>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d162      	bne.n	8008e92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dcc:	4b35      	ldr	r3, [pc, #212]	@ (8008ea4 <xTaskResumeAll+0x11c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d05e      	beq.n	8008e92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dd4:	e02f      	b.n	8008e36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd6:	4b34      	ldr	r3, [pc, #208]	@ (8008ea8 <xTaskResumeAll+0x120>)
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3318      	adds	r3, #24
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fdbc 	bl	8007960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe fdb7 	bl	8007960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df6:	4b2d      	ldr	r3, [pc, #180]	@ (8008eac <xTaskResumeAll+0x124>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d903      	bls.n	8008e06 <xTaskResumeAll+0x7e>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e02:	4a2a      	ldr	r2, [pc, #168]	@ (8008eac <xTaskResumeAll+0x124>)
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4a27      	ldr	r2, [pc, #156]	@ (8008eb0 <xTaskResumeAll+0x128>)
 8008e14:	441a      	add	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f7fe fd42 	bl	80078a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e26:	4b23      	ldr	r3, [pc, #140]	@ (8008eb4 <xTaskResumeAll+0x12c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d302      	bcc.n	8008e36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e30:	4b21      	ldr	r3, [pc, #132]	@ (8008eb8 <xTaskResumeAll+0x130>)
 8008e32:	2201      	movs	r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e36:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea8 <xTaskResumeAll+0x120>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1cb      	bne.n	8008dd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e44:	f000 fb58 	bl	80094f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e48:	4b1c      	ldr	r3, [pc, #112]	@ (8008ebc <xTaskResumeAll+0x134>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d010      	beq.n	8008e76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e54:	f000 f846 	bl	8008ee4 <xTaskIncrementTick>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e5e:	4b16      	ldr	r3, [pc, #88]	@ (8008eb8 <xTaskResumeAll+0x130>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1f1      	bne.n	8008e54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e70:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <xTaskResumeAll+0x134>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e76:	4b10      	ldr	r3, [pc, #64]	@ (8008eb8 <xTaskResumeAll+0x130>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e82:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec0 <xTaskResumeAll+0x138>)
 8008e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e92:	f001 fa03 	bl	800a29c <vPortExitCritical>

	return xAlreadyYielded;
 8008e96:	68bb      	ldr	r3, [r7, #8]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20001398 	.word	0x20001398
 8008ea4:	20001370 	.word	0x20001370
 8008ea8:	20001330 	.word	0x20001330
 8008eac:	20001378 	.word	0x20001378
 8008eb0:	20000ea0 	.word	0x20000ea0
 8008eb4:	20000e9c 	.word	0x20000e9c
 8008eb8:	20001384 	.word	0x20001384
 8008ebc:	20001380 	.word	0x20001380
 8008ec0:	e000ed04 	.word	0xe000ed04

08008ec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008eca:	4b05      	ldr	r3, [pc, #20]	@ (8008ee0 <xTaskGetTickCount+0x1c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ed0:	687b      	ldr	r3, [r7, #4]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	20001374 	.word	0x20001374

08008ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eee:	4b4f      	ldr	r3, [pc, #316]	@ (800902c <xTaskIncrementTick+0x148>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f040 8090 	bne.w	8009018 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8009030 <xTaskIncrementTick+0x14c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3301      	adds	r3, #1
 8008efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f00:	4a4b      	ldr	r2, [pc, #300]	@ (8009030 <xTaskIncrementTick+0x14c>)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d121      	bne.n	8008f50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f0c:	4b49      	ldr	r3, [pc, #292]	@ (8009034 <xTaskIncrementTick+0x150>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00b      	beq.n	8008f2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	603b      	str	r3, [r7, #0]
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	e7fd      	b.n	8008f2a <xTaskIncrementTick+0x46>
 8008f2e:	4b41      	ldr	r3, [pc, #260]	@ (8009034 <xTaskIncrementTick+0x150>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	4b40      	ldr	r3, [pc, #256]	@ (8009038 <xTaskIncrementTick+0x154>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a3e      	ldr	r2, [pc, #248]	@ (8009034 <xTaskIncrementTick+0x150>)
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8009038 <xTaskIncrementTick+0x154>)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	4b3e      	ldr	r3, [pc, #248]	@ (800903c <xTaskIncrementTick+0x158>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3301      	adds	r3, #1
 8008f48:	4a3c      	ldr	r2, [pc, #240]	@ (800903c <xTaskIncrementTick+0x158>)
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	f000 fad4 	bl	80094f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f50:	4b3b      	ldr	r3, [pc, #236]	@ (8009040 <xTaskIncrementTick+0x15c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d349      	bcc.n	8008fee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f5a:	4b36      	ldr	r3, [pc, #216]	@ (8009034 <xTaskIncrementTick+0x150>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d104      	bne.n	8008f6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f64:	4b36      	ldr	r3, [pc, #216]	@ (8009040 <xTaskIncrementTick+0x15c>)
 8008f66:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6a:	601a      	str	r2, [r3, #0]
					break;
 8008f6c:	e03f      	b.n	8008fee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6e:	4b31      	ldr	r3, [pc, #196]	@ (8009034 <xTaskIncrementTick+0x150>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d203      	bcs.n	8008f8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f86:	4a2e      	ldr	r2, [pc, #184]	@ (8009040 <xTaskIncrementTick+0x15c>)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f8c:	e02f      	b.n	8008fee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	3304      	adds	r3, #4
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fce4 	bl	8007960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d004      	beq.n	8008faa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	3318      	adds	r3, #24
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fcdb 	bl	8007960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fae:	4b25      	ldr	r3, [pc, #148]	@ (8009044 <xTaskIncrementTick+0x160>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d903      	bls.n	8008fbe <xTaskIncrementTick+0xda>
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fba:	4a22      	ldr	r2, [pc, #136]	@ (8009044 <xTaskIncrementTick+0x160>)
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4a1f      	ldr	r2, [pc, #124]	@ (8009048 <xTaskIncrementTick+0x164>)
 8008fcc:	441a      	add	r2, r3
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	f7fe fc66 	bl	80078a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fde:	4b1b      	ldr	r3, [pc, #108]	@ (800904c <xTaskIncrementTick+0x168>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d3b8      	bcc.n	8008f5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fec:	e7b5      	b.n	8008f5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fee:	4b17      	ldr	r3, [pc, #92]	@ (800904c <xTaskIncrementTick+0x168>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff4:	4914      	ldr	r1, [pc, #80]	@ (8009048 <xTaskIncrementTick+0x164>)
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d901      	bls.n	800900a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009006:	2301      	movs	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800900a:	4b11      	ldr	r3, [pc, #68]	@ (8009050 <xTaskIncrementTick+0x16c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d007      	beq.n	8009022 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009012:	2301      	movs	r3, #1
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	e004      	b.n	8009022 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009018:	4b0e      	ldr	r3, [pc, #56]	@ (8009054 <xTaskIncrementTick+0x170>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3301      	adds	r3, #1
 800901e:	4a0d      	ldr	r2, [pc, #52]	@ (8009054 <xTaskIncrementTick+0x170>)
 8009020:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009022:	697b      	ldr	r3, [r7, #20]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20001398 	.word	0x20001398
 8009030:	20001374 	.word	0x20001374
 8009034:	20001328 	.word	0x20001328
 8009038:	2000132c 	.word	0x2000132c
 800903c:	20001388 	.word	0x20001388
 8009040:	20001390 	.word	0x20001390
 8009044:	20001378 	.word	0x20001378
 8009048:	20000ea0 	.word	0x20000ea0
 800904c:	20000e9c 	.word	0x20000e9c
 8009050:	20001384 	.word	0x20001384
 8009054:	20001380 	.word	0x20001380

08009058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800905e:	4b28      	ldr	r3, [pc, #160]	@ (8009100 <vTaskSwitchContext+0xa8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009066:	4b27      	ldr	r3, [pc, #156]	@ (8009104 <vTaskSwitchContext+0xac>)
 8009068:	2201      	movs	r2, #1
 800906a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800906c:	e042      	b.n	80090f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800906e:	4b25      	ldr	r3, [pc, #148]	@ (8009104 <vTaskSwitchContext+0xac>)
 8009070:	2200      	movs	r2, #0
 8009072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009074:	4b24      	ldr	r3, [pc, #144]	@ (8009108 <vTaskSwitchContext+0xb0>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	60fb      	str	r3, [r7, #12]
 800907a:	e011      	b.n	80090a0 <vTaskSwitchContext+0x48>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10b      	bne.n	800909a <vTaskSwitchContext+0x42>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	607b      	str	r3, [r7, #4]
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	e7fd      	b.n	8009096 <vTaskSwitchContext+0x3e>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3b01      	subs	r3, #1
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	491a      	ldr	r1, [pc, #104]	@ (800910c <vTaskSwitchContext+0xb4>)
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0e3      	beq.n	800907c <vTaskSwitchContext+0x24>
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4613      	mov	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4a13      	ldr	r2, [pc, #76]	@ (800910c <vTaskSwitchContext+0xb4>)
 80090c0:	4413      	add	r3, r2
 80090c2:	60bb      	str	r3, [r7, #8]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	3308      	adds	r3, #8
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d104      	bne.n	80090e4 <vTaskSwitchContext+0x8c>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	605a      	str	r2, [r3, #4]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	4a09      	ldr	r2, [pc, #36]	@ (8009110 <vTaskSwitchContext+0xb8>)
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	4a06      	ldr	r2, [pc, #24]	@ (8009108 <vTaskSwitchContext+0xb0>)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6013      	str	r3, [r2, #0]
}
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	20001398 	.word	0x20001398
 8009104:	20001384 	.word	0x20001384
 8009108:	20001378 	.word	0x20001378
 800910c:	20000ea0 	.word	0x20000ea0
 8009110:	20000e9c 	.word	0x20000e9c

08009114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10b      	bne.n	800913c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	60fb      	str	r3, [r7, #12]
}
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	e7fd      	b.n	8009138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800913c:	4b07      	ldr	r3, [pc, #28]	@ (800915c <vTaskPlaceOnEventList+0x48>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3318      	adds	r3, #24
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fe fbd2 	bl	80078ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800914a:	2101      	movs	r1, #1
 800914c:	6838      	ldr	r0, [r7, #0]
 800914e:	f000 fb91 	bl	8009874 <prvAddCurrentTaskToDelayedList>
}
 8009152:	bf00      	nop
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000e9c 	.word	0x20000e9c

08009160 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10b      	bne.n	800918a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	617b      	str	r3, [r7, #20]
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	e7fd      	b.n	8009186 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800918a:	4b0a      	ldr	r3, [pc, #40]	@ (80091b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3318      	adds	r3, #24
 8009190:	4619      	mov	r1, r3
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7fe fb87 	bl	80078a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
 80091a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	68b8      	ldr	r0, [r7, #8]
 80091a8:	f000 fb64 	bl	8009874 <prvAddCurrentTaskToDelayedList>
	}
 80091ac:	bf00      	nop
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20000e9c 	.word	0x20000e9c

080091b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60fb      	str	r3, [r7, #12]
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	e7fd      	b.n	80091e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	3318      	adds	r3, #24
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe fbb8 	bl	8007960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009268 <xTaskRemoveFromEventList+0xb0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11d      	bne.n	8009234 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	3304      	adds	r3, #4
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe fbaf 	bl	8007960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009206:	4b19      	ldr	r3, [pc, #100]	@ (800926c <xTaskRemoveFromEventList+0xb4>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d903      	bls.n	8009216 <xTaskRemoveFromEventList+0x5e>
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009212:	4a16      	ldr	r2, [pc, #88]	@ (800926c <xTaskRemoveFromEventList+0xb4>)
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800921a:	4613      	mov	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4413      	add	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4a13      	ldr	r2, [pc, #76]	@ (8009270 <xTaskRemoveFromEventList+0xb8>)
 8009224:	441a      	add	r2, r3
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3304      	adds	r3, #4
 800922a:	4619      	mov	r1, r3
 800922c:	4610      	mov	r0, r2
 800922e:	f7fe fb3a 	bl	80078a6 <vListInsertEnd>
 8009232:	e005      	b.n	8009240 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	3318      	adds	r3, #24
 8009238:	4619      	mov	r1, r3
 800923a:	480e      	ldr	r0, [pc, #56]	@ (8009274 <xTaskRemoveFromEventList+0xbc>)
 800923c:	f7fe fb33 	bl	80078a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009244:	4b0c      	ldr	r3, [pc, #48]	@ (8009278 <xTaskRemoveFromEventList+0xc0>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924a:	429a      	cmp	r2, r3
 800924c:	d905      	bls.n	800925a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800924e:	2301      	movs	r3, #1
 8009250:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009252:	4b0a      	ldr	r3, [pc, #40]	@ (800927c <xTaskRemoveFromEventList+0xc4>)
 8009254:	2201      	movs	r2, #1
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	e001      	b.n	800925e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800925a:	2300      	movs	r3, #0
 800925c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800925e:	697b      	ldr	r3, [r7, #20]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20001398 	.word	0x20001398
 800926c:	20001378 	.word	0x20001378
 8009270:	20000ea0 	.word	0x20000ea0
 8009274:	20001330 	.word	0x20001330
 8009278:	20000e9c 	.word	0x20000e9c
 800927c:	20001384 	.word	0x20001384

08009280 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009288:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <vTaskInternalSetTimeOutState+0x24>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009290:	4b05      	ldr	r3, [pc, #20]	@ (80092a8 <vTaskInternalSetTimeOutState+0x28>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	605a      	str	r2, [r3, #4]
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	20001388 	.word	0x20001388
 80092a8:	20001374 	.word	0x20001374

080092ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	613b      	str	r3, [r7, #16]
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	e7fd      	b.n	80092d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	60fb      	str	r3, [r7, #12]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092f2:	f000 ffa1 	bl	800a238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092f6:	4b1d      	ldr	r3, [pc, #116]	@ (800936c <xTaskCheckForTimeOut+0xc0>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930e:	d102      	bne.n	8009316 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009310:	2300      	movs	r3, #0
 8009312:	61fb      	str	r3, [r7, #28]
 8009314:	e023      	b.n	800935e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b15      	ldr	r3, [pc, #84]	@ (8009370 <xTaskCheckForTimeOut+0xc4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d007      	beq.n	8009332 <xTaskCheckForTimeOut+0x86>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	429a      	cmp	r2, r3
 800932a:	d302      	bcc.n	8009332 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800932c:	2301      	movs	r3, #1
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	e015      	b.n	800935e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	429a      	cmp	r2, r3
 800933a:	d20b      	bcs.n	8009354 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f7ff ff99 	bl	8009280 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	e004      	b.n	800935e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800935a:	2301      	movs	r3, #1
 800935c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800935e:	f000 ff9d 	bl	800a29c <vPortExitCritical>

	return xReturn;
 8009362:	69fb      	ldr	r3, [r7, #28]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3720      	adds	r7, #32
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20001374 	.word	0x20001374
 8009370:	20001388 	.word	0x20001388

08009374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009378:	4b03      	ldr	r3, [pc, #12]	@ (8009388 <vTaskMissedYield+0x14>)
 800937a:	2201      	movs	r2, #1
 800937c:	601a      	str	r2, [r3, #0]
}
 800937e:	bf00      	nop
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	20001384 	.word	0x20001384

0800938c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009394:	f000 f852 	bl	800943c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009398:	4b06      	ldr	r3, [pc, #24]	@ (80093b4 <prvIdleTask+0x28>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d9f9      	bls.n	8009394 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093a0:	4b05      	ldr	r3, [pc, #20]	@ (80093b8 <prvIdleTask+0x2c>)
 80093a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093b0:	e7f0      	b.n	8009394 <prvIdleTask+0x8>
 80093b2:	bf00      	nop
 80093b4:	20000ea0 	.word	0x20000ea0
 80093b8:	e000ed04 	.word	0xe000ed04

080093bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093c2:	2300      	movs	r3, #0
 80093c4:	607b      	str	r3, [r7, #4]
 80093c6:	e00c      	b.n	80093e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4a12      	ldr	r2, [pc, #72]	@ (800941c <prvInitialiseTaskLists+0x60>)
 80093d4:	4413      	add	r3, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe fa38 	bl	800784c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3301      	adds	r3, #1
 80093e0:	607b      	str	r3, [r7, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b37      	cmp	r3, #55	@ 0x37
 80093e6:	d9ef      	bls.n	80093c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093e8:	480d      	ldr	r0, [pc, #52]	@ (8009420 <prvInitialiseTaskLists+0x64>)
 80093ea:	f7fe fa2f 	bl	800784c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093ee:	480d      	ldr	r0, [pc, #52]	@ (8009424 <prvInitialiseTaskLists+0x68>)
 80093f0:	f7fe fa2c 	bl	800784c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093f4:	480c      	ldr	r0, [pc, #48]	@ (8009428 <prvInitialiseTaskLists+0x6c>)
 80093f6:	f7fe fa29 	bl	800784c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093fa:	480c      	ldr	r0, [pc, #48]	@ (800942c <prvInitialiseTaskLists+0x70>)
 80093fc:	f7fe fa26 	bl	800784c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009400:	480b      	ldr	r0, [pc, #44]	@ (8009430 <prvInitialiseTaskLists+0x74>)
 8009402:	f7fe fa23 	bl	800784c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009406:	4b0b      	ldr	r3, [pc, #44]	@ (8009434 <prvInitialiseTaskLists+0x78>)
 8009408:	4a05      	ldr	r2, [pc, #20]	@ (8009420 <prvInitialiseTaskLists+0x64>)
 800940a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800940c:	4b0a      	ldr	r3, [pc, #40]	@ (8009438 <prvInitialiseTaskLists+0x7c>)
 800940e:	4a05      	ldr	r2, [pc, #20]	@ (8009424 <prvInitialiseTaskLists+0x68>)
 8009410:	601a      	str	r2, [r3, #0]
}
 8009412:	bf00      	nop
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20000ea0 	.word	0x20000ea0
 8009420:	20001300 	.word	0x20001300
 8009424:	20001314 	.word	0x20001314
 8009428:	20001330 	.word	0x20001330
 800942c:	20001344 	.word	0x20001344
 8009430:	2000135c 	.word	0x2000135c
 8009434:	20001328 	.word	0x20001328
 8009438:	2000132c 	.word	0x2000132c

0800943c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009442:	e019      	b.n	8009478 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009444:	f000 fef8 	bl	800a238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009448:	4b10      	ldr	r3, [pc, #64]	@ (800948c <prvCheckTasksWaitingTermination+0x50>)
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3304      	adds	r3, #4
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe fa83 	bl	8007960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800945a:	4b0d      	ldr	r3, [pc, #52]	@ (8009490 <prvCheckTasksWaitingTermination+0x54>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3b01      	subs	r3, #1
 8009460:	4a0b      	ldr	r2, [pc, #44]	@ (8009490 <prvCheckTasksWaitingTermination+0x54>)
 8009462:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009464:	4b0b      	ldr	r3, [pc, #44]	@ (8009494 <prvCheckTasksWaitingTermination+0x58>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3b01      	subs	r3, #1
 800946a:	4a0a      	ldr	r2, [pc, #40]	@ (8009494 <prvCheckTasksWaitingTermination+0x58>)
 800946c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800946e:	f000 ff15 	bl	800a29c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f810 	bl	8009498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009478:	4b06      	ldr	r3, [pc, #24]	@ (8009494 <prvCheckTasksWaitingTermination+0x58>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e1      	bne.n	8009444 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20001344 	.word	0x20001344
 8009490:	20001370 	.word	0x20001370
 8009494:	20001358 	.word	0x20001358

08009498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d108      	bne.n	80094bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ae:	4618      	mov	r0, r3
 80094b0:	f001 f8b2 	bl	800a618 <vPortFree>
				vPortFree( pxTCB );
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 f8af 	bl	800a618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094ba:	e019      	b.n	80094f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d103      	bne.n	80094ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 f8a6 	bl	800a618 <vPortFree>
	}
 80094cc:	e010      	b.n	80094f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d00b      	beq.n	80094f0 <prvDeleteTCB+0x58>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	60fb      	str	r3, [r7, #12]
}
 80094ea:	bf00      	nop
 80094ec:	bf00      	nop
 80094ee:	e7fd      	b.n	80094ec <prvDeleteTCB+0x54>
	}
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009530 <prvResetNextTaskUnblockTime+0x38>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d104      	bne.n	8009512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009508:	4b0a      	ldr	r3, [pc, #40]	@ (8009534 <prvResetNextTaskUnblockTime+0x3c>)
 800950a:	f04f 32ff 	mov.w	r2, #4294967295
 800950e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009510:	e008      	b.n	8009524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009512:	4b07      	ldr	r3, [pc, #28]	@ (8009530 <prvResetNextTaskUnblockTime+0x38>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4a04      	ldr	r2, [pc, #16]	@ (8009534 <prvResetNextTaskUnblockTime+0x3c>)
 8009522:	6013      	str	r3, [r2, #0]
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	20001328 	.word	0x20001328
 8009534:	20001390 	.word	0x20001390

08009538 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800953e:	4b05      	ldr	r3, [pc, #20]	@ (8009554 <xTaskGetCurrentTaskHandle+0x1c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009544:	687b      	ldr	r3, [r7, #4]
	}
 8009546:	4618      	mov	r0, r3
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	20000e9c 	.word	0x20000e9c

08009558 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800955e:	4b0b      	ldr	r3, [pc, #44]	@ (800958c <xTaskGetSchedulerState+0x34>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009566:	2301      	movs	r3, #1
 8009568:	607b      	str	r3, [r7, #4]
 800956a:	e008      	b.n	800957e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800956c:	4b08      	ldr	r3, [pc, #32]	@ (8009590 <xTaskGetSchedulerState+0x38>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d102      	bne.n	800957a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009574:	2302      	movs	r3, #2
 8009576:	607b      	str	r3, [r7, #4]
 8009578:	e001      	b.n	800957e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800957a:	2300      	movs	r3, #0
 800957c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800957e:	687b      	ldr	r3, [r7, #4]
	}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	2000137c 	.word	0x2000137c
 8009590:	20001398 	.word	0x20001398

08009594 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d051      	beq.n	800964e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009658 <xTaskPriorityInherit+0xc4>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d241      	bcs.n	800963c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	db06      	blt.n	80095ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c0:	4b25      	ldr	r3, [pc, #148]	@ (8009658 <xTaskPriorityInherit+0xc4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6959      	ldr	r1, [r3, #20]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4a1f      	ldr	r2, [pc, #124]	@ (800965c <xTaskPriorityInherit+0xc8>)
 80095e0:	4413      	add	r3, r2
 80095e2:	4299      	cmp	r1, r3
 80095e4:	d122      	bne.n	800962c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	3304      	adds	r3, #4
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe f9b8 	bl	8007960 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095f0:	4b19      	ldr	r3, [pc, #100]	@ (8009658 <xTaskPriorityInherit+0xc4>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095fe:	4b18      	ldr	r3, [pc, #96]	@ (8009660 <xTaskPriorityInherit+0xcc>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d903      	bls.n	800960e <xTaskPriorityInherit+0x7a>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960a:	4a15      	ldr	r2, [pc, #84]	@ (8009660 <xTaskPriorityInherit+0xcc>)
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4a10      	ldr	r2, [pc, #64]	@ (800965c <xTaskPriorityInherit+0xc8>)
 800961c:	441a      	add	r2, r3
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	3304      	adds	r3, #4
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f7fe f93e 	bl	80078a6 <vListInsertEnd>
 800962a:	e004      	b.n	8009636 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800962c:	4b0a      	ldr	r3, [pc, #40]	@ (8009658 <xTaskPriorityInherit+0xc4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009636:	2301      	movs	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	e008      	b.n	800964e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009640:	4b05      	ldr	r3, [pc, #20]	@ (8009658 <xTaskPriorityInherit+0xc4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009646:	429a      	cmp	r2, r3
 8009648:	d201      	bcs.n	800964e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800964a:	2301      	movs	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800964e:	68fb      	ldr	r3, [r7, #12]
	}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	20000e9c 	.word	0x20000e9c
 800965c:	20000ea0 	.word	0x20000ea0
 8009660:	20001378 	.word	0x20001378

08009664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009670:	2300      	movs	r3, #0
 8009672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d058      	beq.n	800972c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800967a:	4b2f      	ldr	r3, [pc, #188]	@ (8009738 <xTaskPriorityDisinherit+0xd4>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	429a      	cmp	r2, r3
 8009682:	d00b      	beq.n	800969c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	60fb      	str	r3, [r7, #12]
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10b      	bne.n	80096bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	60bb      	str	r3, [r7, #8]
}
 80096b6:	bf00      	nop
 80096b8:	bf00      	nop
 80096ba:	e7fd      	b.n	80096b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c0:	1e5a      	subs	r2, r3, #1
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d02c      	beq.n	800972c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d128      	bne.n	800972c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3304      	adds	r3, #4
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe f93e 	bl	8007960 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fc:	4b0f      	ldr	r3, [pc, #60]	@ (800973c <xTaskPriorityDisinherit+0xd8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d903      	bls.n	800970c <xTaskPriorityDisinherit+0xa8>
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009708:	4a0c      	ldr	r2, [pc, #48]	@ (800973c <xTaskPriorityDisinherit+0xd8>)
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4a09      	ldr	r2, [pc, #36]	@ (8009740 <xTaskPriorityDisinherit+0xdc>)
 800971a:	441a      	add	r2, r3
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	3304      	adds	r3, #4
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fe f8bf 	bl	80078a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800972c:	697b      	ldr	r3, [r7, #20]
	}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20000e9c 	.word	0x20000e9c
 800973c:	20001378 	.word	0x20001378
 8009740:	20000ea0 	.word	0x20000ea0

08009744 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009744:	b580      	push	{r7, lr}
 8009746:	b088      	sub	sp, #32
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009752:	2301      	movs	r3, #1
 8009754:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d06c      	beq.n	8009836 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10b      	bne.n	800977c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	60fb      	str	r3, [r7, #12]
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	e7fd      	b.n	8009778 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	429a      	cmp	r2, r3
 8009784:	d902      	bls.n	800978c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	61fb      	str	r3, [r7, #28]
 800978a:	e002      	b.n	8009792 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009790:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	429a      	cmp	r2, r3
 800979a:	d04c      	beq.n	8009836 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d147      	bne.n	8009836 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097a6:	4b26      	ldr	r3, [pc, #152]	@ (8009840 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d10b      	bne.n	80097c8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60bb      	str	r3, [r7, #8]
}
 80097c2:	bf00      	nop
 80097c4:	bf00      	nop
 80097c6:	e7fd      	b.n	80097c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	69fa      	ldr	r2, [r7, #28]
 80097d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	db04      	blt.n	80097e6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	6959      	ldr	r1, [r3, #20]
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4a13      	ldr	r2, [pc, #76]	@ (8009844 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80097f6:	4413      	add	r3, r2
 80097f8:	4299      	cmp	r1, r3
 80097fa:	d11c      	bne.n	8009836 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	3304      	adds	r3, #4
 8009800:	4618      	mov	r0, r3
 8009802:	f7fe f8ad 	bl	8007960 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800980a:	4b0f      	ldr	r3, [pc, #60]	@ (8009848 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	429a      	cmp	r2, r3
 8009810:	d903      	bls.n	800981a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009816:	4a0c      	ldr	r2, [pc, #48]	@ (8009848 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4a07      	ldr	r2, [pc, #28]	@ (8009844 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009828:	441a      	add	r2, r3
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	3304      	adds	r3, #4
 800982e:	4619      	mov	r1, r3
 8009830:	4610      	mov	r0, r2
 8009832:	f7fe f838 	bl	80078a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009836:	bf00      	nop
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000e9c 	.word	0x20000e9c
 8009844:	20000ea0 	.word	0x20000ea0
 8009848:	20001378 	.word	0x20001378

0800984c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009850:	4b07      	ldr	r3, [pc, #28]	@ (8009870 <pvTaskIncrementMutexHeldCount+0x24>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009858:	4b05      	ldr	r3, [pc, #20]	@ (8009870 <pvTaskIncrementMutexHeldCount+0x24>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800985e:	3201      	adds	r2, #1
 8009860:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009862:	4b03      	ldr	r3, [pc, #12]	@ (8009870 <pvTaskIncrementMutexHeldCount+0x24>)
 8009864:	681b      	ldr	r3, [r3, #0]
	}
 8009866:	4618      	mov	r0, r3
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	20000e9c 	.word	0x20000e9c

08009874 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800987e:	4b21      	ldr	r3, [pc, #132]	@ (8009904 <prvAddCurrentTaskToDelayedList+0x90>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009884:	4b20      	ldr	r3, [pc, #128]	@ (8009908 <prvAddCurrentTaskToDelayedList+0x94>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3304      	adds	r3, #4
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe f868 	bl	8007960 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009896:	d10a      	bne.n	80098ae <prvAddCurrentTaskToDelayedList+0x3a>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d007      	beq.n	80098ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800989e:	4b1a      	ldr	r3, [pc, #104]	@ (8009908 <prvAddCurrentTaskToDelayedList+0x94>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4619      	mov	r1, r3
 80098a6:	4819      	ldr	r0, [pc, #100]	@ (800990c <prvAddCurrentTaskToDelayedList+0x98>)
 80098a8:	f7fd fffd 	bl	80078a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098ac:	e026      	b.n	80098fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4413      	add	r3, r2
 80098b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098b6:	4b14      	ldr	r3, [pc, #80]	@ (8009908 <prvAddCurrentTaskToDelayedList+0x94>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d209      	bcs.n	80098da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098c6:	4b12      	ldr	r3, [pc, #72]	@ (8009910 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009908 <prvAddCurrentTaskToDelayedList+0x94>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3304      	adds	r3, #4
 80098d0:	4619      	mov	r1, r3
 80098d2:	4610      	mov	r0, r2
 80098d4:	f7fe f80b 	bl	80078ee <vListInsert>
}
 80098d8:	e010      	b.n	80098fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098da:	4b0e      	ldr	r3, [pc, #56]	@ (8009914 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	4b0a      	ldr	r3, [pc, #40]	@ (8009908 <prvAddCurrentTaskToDelayedList+0x94>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f7fe f801 	bl	80078ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009918 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d202      	bcs.n	80098fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098f6:	4a08      	ldr	r2, [pc, #32]	@ (8009918 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	6013      	str	r3, [r2, #0]
}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20001374 	.word	0x20001374
 8009908:	20000e9c 	.word	0x20000e9c
 800990c:	2000135c 	.word	0x2000135c
 8009910:	2000132c 	.word	0x2000132c
 8009914:	20001328 	.word	0x20001328
 8009918:	20001390 	.word	0x20001390

0800991c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b08a      	sub	sp, #40	@ 0x28
 8009920:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009922:	2300      	movs	r3, #0
 8009924:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009926:	f000 fb13 	bl	8009f50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800992a:	4b1d      	ldr	r3, [pc, #116]	@ (80099a0 <xTimerCreateTimerTask+0x84>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d021      	beq.n	8009976 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009936:	2300      	movs	r3, #0
 8009938:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800993a:	1d3a      	adds	r2, r7, #4
 800993c:	f107 0108 	add.w	r1, r7, #8
 8009940:	f107 030c 	add.w	r3, r7, #12
 8009944:	4618      	mov	r0, r3
 8009946:	f7fd ff67 	bl	8007818 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	9202      	str	r2, [sp, #8]
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	2302      	movs	r3, #2
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2300      	movs	r3, #0
 800995a:	460a      	mov	r2, r1
 800995c:	4911      	ldr	r1, [pc, #68]	@ (80099a4 <xTimerCreateTimerTask+0x88>)
 800995e:	4812      	ldr	r0, [pc, #72]	@ (80099a8 <xTimerCreateTimerTask+0x8c>)
 8009960:	f7fe ffc0 	bl	80088e4 <xTaskCreateStatic>
 8009964:	4603      	mov	r3, r0
 8009966:	4a11      	ldr	r2, [pc, #68]	@ (80099ac <xTimerCreateTimerTask+0x90>)
 8009968:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800996a:	4b10      	ldr	r3, [pc, #64]	@ (80099ac <xTimerCreateTimerTask+0x90>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009972:	2301      	movs	r3, #1
 8009974:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10b      	bne.n	8009994 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	613b      	str	r3, [r7, #16]
}
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	e7fd      	b.n	8009990 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009994:	697b      	ldr	r3, [r7, #20]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	200013cc 	.word	0x200013cc
 80099a4:	0800db3c 	.word	0x0800db3c
 80099a8:	08009ae9 	.word	0x08009ae9
 80099ac:	200013d0 	.word	0x200013d0

080099b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08a      	sub	sp, #40	@ 0x28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099be:	2300      	movs	r3, #0
 80099c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10b      	bne.n	80099e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	623b      	str	r3, [r7, #32]
}
 80099da:	bf00      	nop
 80099dc:	bf00      	nop
 80099de:	e7fd      	b.n	80099dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099e0:	4b19      	ldr	r3, [pc, #100]	@ (8009a48 <xTimerGenericCommand+0x98>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d02a      	beq.n	8009a3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	dc18      	bgt.n	8009a2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099fa:	f7ff fdad 	bl	8009558 <xTaskGetSchedulerState>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d109      	bne.n	8009a18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a04:	4b10      	ldr	r3, [pc, #64]	@ (8009a48 <xTimerGenericCommand+0x98>)
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	f107 0110 	add.w	r1, r7, #16
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a10:	f7fe f9ce 	bl	8007db0 <xQueueGenericSend>
 8009a14:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a16:	e012      	b.n	8009a3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a18:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <xTimerGenericCommand+0x98>)
 8009a1a:	6818      	ldr	r0, [r3, #0]
 8009a1c:	f107 0110 	add.w	r1, r7, #16
 8009a20:	2300      	movs	r3, #0
 8009a22:	2200      	movs	r2, #0
 8009a24:	f7fe f9c4 	bl	8007db0 <xQueueGenericSend>
 8009a28:	6278      	str	r0, [r7, #36]	@ 0x24
 8009a2a:	e008      	b.n	8009a3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a2c:	4b06      	ldr	r3, [pc, #24]	@ (8009a48 <xTimerGenericCommand+0x98>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	f107 0110 	add.w	r1, r7, #16
 8009a34:	2300      	movs	r3, #0
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	f7fe fabc 	bl	8007fb4 <xQueueGenericSendFromISR>
 8009a3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3728      	adds	r7, #40	@ 0x28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	200013cc 	.word	0x200013cc

08009a4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a56:	4b23      	ldr	r3, [pc, #140]	@ (8009ae4 <prvProcessExpiredTimer+0x98>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fd ff7b 	bl	8007960 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d023      	beq.n	8009ac0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	18d1      	adds	r1, r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	6978      	ldr	r0, [r7, #20]
 8009a86:	f000 f8d5 	bl	8009c34 <prvInsertTimerInActiveList>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d020      	beq.n	8009ad2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a90:	2300      	movs	r3, #0
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	2300      	movs	r3, #0
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6978      	ldr	r0, [r7, #20]
 8009a9c:	f7ff ff88 	bl	80099b0 <xTimerGenericCommand>
 8009aa0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d114      	bne.n	8009ad2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	60fb      	str	r3, [r7, #12]
}
 8009aba:	bf00      	nop
 8009abc:	bf00      	nop
 8009abe:	e7fd      	b.n	8009abc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ac6:	f023 0301 	bic.w	r3, r3, #1
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	6978      	ldr	r0, [r7, #20]
 8009ad8:	4798      	blx	r3
}
 8009ada:	bf00      	nop
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200013c4 	.word	0x200013c4

08009ae8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009af0:	f107 0308 	add.w	r3, r7, #8
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 f859 	bl	8009bac <prvGetNextExpireTime>
 8009afa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	4619      	mov	r1, r3
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 f805 	bl	8009b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b06:	f000 f8d7 	bl	8009cb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b0a:	bf00      	nop
 8009b0c:	e7f0      	b.n	8009af0 <prvTimerTask+0x8>
	...

08009b10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b1a:	f7ff f927 	bl	8008d6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b1e:	f107 0308 	add.w	r3, r7, #8
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 f866 	bl	8009bf4 <prvSampleTimeNow>
 8009b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d130      	bne.n	8009b92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10a      	bne.n	8009b4c <prvProcessTimerOrBlockTask+0x3c>
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d806      	bhi.n	8009b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b3e:	f7ff f923 	bl	8008d88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff ff81 	bl	8009a4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b4a:	e024      	b.n	8009b96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d008      	beq.n	8009b64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b52:	4b13      	ldr	r3, [pc, #76]	@ (8009ba0 <prvProcessTimerOrBlockTask+0x90>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <prvProcessTimerOrBlockTask+0x50>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e000      	b.n	8009b62 <prvProcessTimerOrBlockTask+0x52>
 8009b60:	2300      	movs	r3, #0
 8009b62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b64:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba4 <prvProcessTimerOrBlockTask+0x94>)
 8009b66:	6818      	ldr	r0, [r3, #0]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	4619      	mov	r1, r3
 8009b72:	f7fe fe83 	bl	800887c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b76:	f7ff f907 	bl	8008d88 <xTaskResumeAll>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b80:	4b09      	ldr	r3, [pc, #36]	@ (8009ba8 <prvProcessTimerOrBlockTask+0x98>)
 8009b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	f3bf 8f6f 	isb	sy
}
 8009b90:	e001      	b.n	8009b96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b92:	f7ff f8f9 	bl	8008d88 <xTaskResumeAll>
}
 8009b96:	bf00      	nop
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	200013c8 	.word	0x200013c8
 8009ba4:	200013cc 	.word	0x200013cc
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf0 <prvGetNextExpireTime+0x44>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <prvGetNextExpireTime+0x16>
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	e000      	b.n	8009bc4 <prvGetNextExpireTime+0x18>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d105      	bne.n	8009bdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bd0:	4b07      	ldr	r3, [pc, #28]	@ (8009bf0 <prvGetNextExpireTime+0x44>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	e001      	b.n	8009be0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009be0:	68fb      	ldr	r3, [r7, #12]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3714      	adds	r7, #20
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	200013c4 	.word	0x200013c4

08009bf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009bfc:	f7ff f962 	bl	8008ec4 <xTaskGetTickCount>
 8009c00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c02:	4b0b      	ldr	r3, [pc, #44]	@ (8009c30 <prvSampleTimeNow+0x3c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d205      	bcs.n	8009c18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c0c:	f000 f93a 	bl	8009e84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	e002      	b.n	8009c1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c1e:	4a04      	ldr	r2, [pc, #16]	@ (8009c30 <prvSampleTimeNow+0x3c>)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c24:	68fb      	ldr	r3, [r7, #12]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200013d4 	.word	0x200013d4

08009c34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c42:	2300      	movs	r3, #0
 8009c44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d812      	bhi.n	8009c80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	1ad2      	subs	r2, r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d302      	bcc.n	8009c6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	e01b      	b.n	8009ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c6e:	4b10      	ldr	r3, [pc, #64]	@ (8009cb0 <prvInsertTimerInActiveList+0x7c>)
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4619      	mov	r1, r3
 8009c78:	4610      	mov	r0, r2
 8009c7a:	f7fd fe38 	bl	80078ee <vListInsert>
 8009c7e:	e012      	b.n	8009ca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d206      	bcs.n	8009c96 <prvInsertTimerInActiveList+0x62>
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d302      	bcc.n	8009c96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c90:	2301      	movs	r3, #1
 8009c92:	617b      	str	r3, [r7, #20]
 8009c94:	e007      	b.n	8009ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c96:	4b07      	ldr	r3, [pc, #28]	@ (8009cb4 <prvInsertTimerInActiveList+0x80>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f7fd fe24 	bl	80078ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ca6:	697b      	ldr	r3, [r7, #20]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	200013c8 	.word	0x200013c8
 8009cb4:	200013c4 	.word	0x200013c4

08009cb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08e      	sub	sp, #56	@ 0x38
 8009cbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cbe:	e0ce      	b.n	8009e5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da19      	bge.n	8009cfa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cc6:	1d3b      	adds	r3, r7, #4
 8009cc8:	3304      	adds	r3, #4
 8009cca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10b      	bne.n	8009cea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	61fb      	str	r3, [r7, #28]
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop
 8009ce8:	e7fd      	b.n	8009ce6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf0:	6850      	ldr	r0, [r2, #4]
 8009cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf4:	6892      	ldr	r2, [r2, #8]
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f2c0 80ae 	blt.w	8009e5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d10:	3304      	adds	r3, #4
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fd fe24 	bl	8007960 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d18:	463b      	mov	r3, r7
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff ff6a 	bl	8009bf4 <prvSampleTimeNow>
 8009d20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b09      	cmp	r3, #9
 8009d26:	f200 8097 	bhi.w	8009e58 <prvProcessReceivedCommands+0x1a0>
 8009d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <prvProcessReceivedCommands+0x78>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d59 	.word	0x08009d59
 8009d34:	08009d59 	.word	0x08009d59
 8009d38:	08009d59 	.word	0x08009d59
 8009d3c:	08009dcf 	.word	0x08009dcf
 8009d40:	08009de3 	.word	0x08009de3
 8009d44:	08009e2f 	.word	0x08009e2f
 8009d48:	08009d59 	.word	0x08009d59
 8009d4c:	08009d59 	.word	0x08009d59
 8009d50:	08009dcf 	.word	0x08009dcf
 8009d54:	08009de3 	.word	0x08009de3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d5e:	f043 0301 	orr.w	r3, r3, #1
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	18d1      	adds	r1, r2, r3
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d78:	f7ff ff5c 	bl	8009c34 <prvInsertTimerInActiveList>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d06c      	beq.n	8009e5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d061      	beq.n	8009e5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	441a      	add	r2, r3
 8009da0:	2300      	movs	r3, #0
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2300      	movs	r3, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009daa:	f7ff fe01 	bl	80099b0 <xTimerGenericCommand>
 8009dae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d152      	bne.n	8009e5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	61bb      	str	r3, [r7, #24]
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	e7fd      	b.n	8009dca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ddc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009de0:	e03d      	b.n	8009e5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009de8:	f043 0301 	orr.w	r3, r3, #1
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10b      	bne.n	8009e1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	617b      	str	r3, [r7, #20]
}
 8009e14:	bf00      	nop
 8009e16:	bf00      	nop
 8009e18:	e7fd      	b.n	8009e16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1c:	699a      	ldr	r2, [r3, #24]
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	18d1      	adds	r1, r2, r3
 8009e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e28:	f7ff ff04 	bl	8009c34 <prvInsertTimerInActiveList>
					break;
 8009e2c:	e017      	b.n	8009e5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e3e:	f000 fbeb 	bl	800a618 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e42:	e00c      	b.n	8009e5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e4a:	f023 0301 	bic.w	r3, r3, #1
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e56:	e002      	b.n	8009e5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009e58:	bf00      	nop
 8009e5a:	e000      	b.n	8009e5e <prvProcessReceivedCommands+0x1a6>
					break;
 8009e5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e5e:	4b08      	ldr	r3, [pc, #32]	@ (8009e80 <prvProcessReceivedCommands+0x1c8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	1d39      	adds	r1, r7, #4
 8009e64:	2200      	movs	r2, #0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe f942 	bl	80080f0 <xQueueReceive>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f47f af26 	bne.w	8009cc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	3730      	adds	r7, #48	@ 0x30
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	200013cc 	.word	0x200013cc

08009e84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e8a:	e049      	b.n	8009f20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8009f48 <prvSwitchTimerLists+0xc4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e96:	4b2c      	ldr	r3, [pc, #176]	@ (8009f48 <prvSwitchTimerLists+0xc4>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fd fd5b 	bl	8007960 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d02f      	beq.n	8009f20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d90e      	bls.n	8009ef0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ede:	4b1a      	ldr	r3, [pc, #104]	@ (8009f48 <prvSwitchTimerLists+0xc4>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4610      	mov	r0, r2
 8009eea:	f7fd fd00 	bl	80078ee <vListInsert>
 8009eee:	e017      	b.n	8009f20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	2100      	movs	r1, #0
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff fd58 	bl	80099b0 <xTimerGenericCommand>
 8009f00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10b      	bne.n	8009f20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	603b      	str	r3, [r7, #0]
}
 8009f1a:	bf00      	nop
 8009f1c:	bf00      	nop
 8009f1e:	e7fd      	b.n	8009f1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f20:	4b09      	ldr	r3, [pc, #36]	@ (8009f48 <prvSwitchTimerLists+0xc4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1b0      	bne.n	8009e8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f2a:	4b07      	ldr	r3, [pc, #28]	@ (8009f48 <prvSwitchTimerLists+0xc4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f30:	4b06      	ldr	r3, [pc, #24]	@ (8009f4c <prvSwitchTimerLists+0xc8>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a04      	ldr	r2, [pc, #16]	@ (8009f48 <prvSwitchTimerLists+0xc4>)
 8009f36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f38:	4a04      	ldr	r2, [pc, #16]	@ (8009f4c <prvSwitchTimerLists+0xc8>)
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	6013      	str	r3, [r2, #0]
}
 8009f3e:	bf00      	nop
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200013c4 	.word	0x200013c4
 8009f4c:	200013c8 	.word	0x200013c8

08009f50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f56:	f000 f96f 	bl	800a238 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f5a:	4b15      	ldr	r3, [pc, #84]	@ (8009fb0 <prvCheckForValidListAndQueue+0x60>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d120      	bne.n	8009fa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f62:	4814      	ldr	r0, [pc, #80]	@ (8009fb4 <prvCheckForValidListAndQueue+0x64>)
 8009f64:	f7fd fc72 	bl	800784c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f68:	4813      	ldr	r0, [pc, #76]	@ (8009fb8 <prvCheckForValidListAndQueue+0x68>)
 8009f6a:	f7fd fc6f 	bl	800784c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f6e:	4b13      	ldr	r3, [pc, #76]	@ (8009fbc <prvCheckForValidListAndQueue+0x6c>)
 8009f70:	4a10      	ldr	r2, [pc, #64]	@ (8009fb4 <prvCheckForValidListAndQueue+0x64>)
 8009f72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f74:	4b12      	ldr	r3, [pc, #72]	@ (8009fc0 <prvCheckForValidListAndQueue+0x70>)
 8009f76:	4a10      	ldr	r2, [pc, #64]	@ (8009fb8 <prvCheckForValidListAndQueue+0x68>)
 8009f78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	4b11      	ldr	r3, [pc, #68]	@ (8009fc4 <prvCheckForValidListAndQueue+0x74>)
 8009f80:	4a11      	ldr	r2, [pc, #68]	@ (8009fc8 <prvCheckForValidListAndQueue+0x78>)
 8009f82:	2110      	movs	r1, #16
 8009f84:	200a      	movs	r0, #10
 8009f86:	f7fd fd7f 	bl	8007a88 <xQueueGenericCreateStatic>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	4a08      	ldr	r2, [pc, #32]	@ (8009fb0 <prvCheckForValidListAndQueue+0x60>)
 8009f8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f90:	4b07      	ldr	r3, [pc, #28]	@ (8009fb0 <prvCheckForValidListAndQueue+0x60>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f98:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <prvCheckForValidListAndQueue+0x60>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	490b      	ldr	r1, [pc, #44]	@ (8009fcc <prvCheckForValidListAndQueue+0x7c>)
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fc42 	bl	8008828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fa4:	f000 f97a 	bl	800a29c <vPortExitCritical>
}
 8009fa8:	bf00      	nop
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	200013cc 	.word	0x200013cc
 8009fb4:	2000139c 	.word	0x2000139c
 8009fb8:	200013b0 	.word	0x200013b0
 8009fbc:	200013c4 	.word	0x200013c4
 8009fc0:	200013c8 	.word	0x200013c8
 8009fc4:	20001478 	.word	0x20001478
 8009fc8:	200013d8 	.word	0x200013d8
 8009fcc:	0800db44 	.word	0x0800db44

08009fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3b04      	subs	r3, #4
 8009fe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3b04      	subs	r3, #4
 8009fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f023 0201 	bic.w	r2, r3, #1
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3b04      	subs	r3, #4
 8009ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a000:	4a0c      	ldr	r2, [pc, #48]	@ (800a034 <pxPortInitialiseStack+0x64>)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3b14      	subs	r3, #20
 800a00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3b04      	subs	r3, #4
 800a016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f06f 0202 	mvn.w	r2, #2
 800a01e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3b20      	subs	r3, #32
 800a024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a026:	68fb      	ldr	r3, [r7, #12]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	0800a039 	.word	0x0800a039

0800a038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a042:	4b13      	ldr	r3, [pc, #76]	@ (800a090 <prvTaskExitError+0x58>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04a:	d00b      	beq.n	800a064 <prvTaskExitError+0x2c>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	60fb      	str	r3, [r7, #12]
}
 800a05e:	bf00      	nop
 800a060:	bf00      	nop
 800a062:	e7fd      	b.n	800a060 <prvTaskExitError+0x28>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	60bb      	str	r3, [r7, #8]
}
 800a076:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a078:	bf00      	nop
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d0fc      	beq.n	800a07a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a080:	bf00      	nop
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	20000014 	.word	0x20000014
	...

0800a0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0a0:	4b07      	ldr	r3, [pc, #28]	@ (800a0c0 <pxCurrentTCBConst2>)
 800a0a2:	6819      	ldr	r1, [r3, #0]
 800a0a4:	6808      	ldr	r0, [r1, #0]
 800a0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0aa:	f380 8809 	msr	PSP, r0
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f04f 0000 	mov.w	r0, #0
 800a0b6:	f380 8811 	msr	BASEPRI, r0
 800a0ba:	4770      	bx	lr
 800a0bc:	f3af 8000 	nop.w

0800a0c0 <pxCurrentTCBConst2>:
 800a0c0:	20000e9c 	.word	0x20000e9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop

0800a0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0c8:	4808      	ldr	r0, [pc, #32]	@ (800a0ec <prvPortStartFirstTask+0x24>)
 800a0ca:	6800      	ldr	r0, [r0, #0]
 800a0cc:	6800      	ldr	r0, [r0, #0]
 800a0ce:	f380 8808 	msr	MSP, r0
 800a0d2:	f04f 0000 	mov.w	r0, #0
 800a0d6:	f380 8814 	msr	CONTROL, r0
 800a0da:	b662      	cpsie	i
 800a0dc:	b661      	cpsie	f
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	df00      	svc	0
 800a0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0ea:	bf00      	nop
 800a0ec:	e000ed08 	.word	0xe000ed08

0800a0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0f6:	4b47      	ldr	r3, [pc, #284]	@ (800a214 <xPortStartScheduler+0x124>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a47      	ldr	r2, [pc, #284]	@ (800a218 <xPortStartScheduler+0x128>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d10b      	bne.n	800a118 <xPortStartScheduler+0x28>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	613b      	str	r3, [r7, #16]
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	e7fd      	b.n	800a114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a118:	4b3e      	ldr	r3, [pc, #248]	@ (800a214 <xPortStartScheduler+0x124>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a3f      	ldr	r2, [pc, #252]	@ (800a21c <xPortStartScheduler+0x12c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d10b      	bne.n	800a13a <xPortStartScheduler+0x4a>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	60fb      	str	r3, [r7, #12]
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	e7fd      	b.n	800a136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a13a:	4b39      	ldr	r3, [pc, #228]	@ (800a220 <xPortStartScheduler+0x130>)
 800a13c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	22ff      	movs	r2, #255	@ 0xff
 800a14a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a154:	78fb      	ldrb	r3, [r7, #3]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	4b31      	ldr	r3, [pc, #196]	@ (800a224 <xPortStartScheduler+0x134>)
 800a160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a162:	4b31      	ldr	r3, [pc, #196]	@ (800a228 <xPortStartScheduler+0x138>)
 800a164:	2207      	movs	r2, #7
 800a166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a168:	e009      	b.n	800a17e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a16a:	4b2f      	ldr	r3, [pc, #188]	@ (800a228 <xPortStartScheduler+0x138>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3b01      	subs	r3, #1
 800a170:	4a2d      	ldr	r2, [pc, #180]	@ (800a228 <xPortStartScheduler+0x138>)
 800a172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a174:	78fb      	ldrb	r3, [r7, #3]
 800a176:	b2db      	uxtb	r3, r3
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a17e:	78fb      	ldrb	r3, [r7, #3]
 800a180:	b2db      	uxtb	r3, r3
 800a182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a186:	2b80      	cmp	r3, #128	@ 0x80
 800a188:	d0ef      	beq.n	800a16a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a18a:	4b27      	ldr	r3, [pc, #156]	@ (800a228 <xPortStartScheduler+0x138>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f1c3 0307 	rsb	r3, r3, #7
 800a192:	2b04      	cmp	r3, #4
 800a194:	d00b      	beq.n	800a1ae <xPortStartScheduler+0xbe>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	60bb      	str	r3, [r7, #8]
}
 800a1a8:	bf00      	nop
 800a1aa:	bf00      	nop
 800a1ac:	e7fd      	b.n	800a1aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a228 <xPortStartScheduler+0x138>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a228 <xPortStartScheduler+0x138>)
 800a1b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a228 <xPortStartScheduler+0x138>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a1c0:	4a19      	ldr	r2, [pc, #100]	@ (800a228 <xPortStartScheduler+0x138>)
 800a1c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1cc:	4b17      	ldr	r3, [pc, #92]	@ (800a22c <xPortStartScheduler+0x13c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a16      	ldr	r2, [pc, #88]	@ (800a22c <xPortStartScheduler+0x13c>)
 800a1d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a1d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1d8:	4b14      	ldr	r3, [pc, #80]	@ (800a22c <xPortStartScheduler+0x13c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a13      	ldr	r2, [pc, #76]	@ (800a22c <xPortStartScheduler+0x13c>)
 800a1de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a1e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1e4:	f000 f8da 	bl	800a39c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1e8:	4b11      	ldr	r3, [pc, #68]	@ (800a230 <xPortStartScheduler+0x140>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1ee:	f000 f8f9 	bl	800a3e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1f2:	4b10      	ldr	r3, [pc, #64]	@ (800a234 <xPortStartScheduler+0x144>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a234 <xPortStartScheduler+0x144>)
 800a1f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a1fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1fe:	f7ff ff63 	bl	800a0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a202:	f7fe ff29 	bl	8009058 <vTaskSwitchContext>
	prvTaskExitError();
 800a206:	f7ff ff17 	bl	800a038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	e000ed00 	.word	0xe000ed00
 800a218:	410fc271 	.word	0x410fc271
 800a21c:	410fc270 	.word	0x410fc270
 800a220:	e000e400 	.word	0xe000e400
 800a224:	200014c8 	.word	0x200014c8
 800a228:	200014cc 	.word	0x200014cc
 800a22c:	e000ed20 	.word	0xe000ed20
 800a230:	20000014 	.word	0x20000014
 800a234:	e000ef34 	.word	0xe000ef34

0800a238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	607b      	str	r3, [r7, #4]
}
 800a250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a252:	4b10      	ldr	r3, [pc, #64]	@ (800a294 <vPortEnterCritical+0x5c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3301      	adds	r3, #1
 800a258:	4a0e      	ldr	r2, [pc, #56]	@ (800a294 <vPortEnterCritical+0x5c>)
 800a25a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a25c:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <vPortEnterCritical+0x5c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d110      	bne.n	800a286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a264:	4b0c      	ldr	r3, [pc, #48]	@ (800a298 <vPortEnterCritical+0x60>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00b      	beq.n	800a286 <vPortEnterCritical+0x4e>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	603b      	str	r3, [r7, #0]
}
 800a280:	bf00      	nop
 800a282:	bf00      	nop
 800a284:	e7fd      	b.n	800a282 <vPortEnterCritical+0x4a>
	}
}
 800a286:	bf00      	nop
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000014 	.word	0x20000014
 800a298:	e000ed04 	.word	0xe000ed04

0800a29c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2a2:	4b12      	ldr	r3, [pc, #72]	@ (800a2ec <vPortExitCritical+0x50>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10b      	bne.n	800a2c2 <vPortExitCritical+0x26>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	607b      	str	r3, [r7, #4]
}
 800a2bc:	bf00      	nop
 800a2be:	bf00      	nop
 800a2c0:	e7fd      	b.n	800a2be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a2ec <vPortExitCritical+0x50>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	4a08      	ldr	r2, [pc, #32]	@ (800a2ec <vPortExitCritical+0x50>)
 800a2ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2cc:	4b07      	ldr	r3, [pc, #28]	@ (800a2ec <vPortExitCritical+0x50>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d105      	bne.n	800a2e0 <vPortExitCritical+0x44>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f383 8811 	msr	BASEPRI, r3
}
 800a2de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	20000014 	.word	0x20000014

0800a2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2f0:	f3ef 8009 	mrs	r0, PSP
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <pxCurrentTCBConst>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	f01e 0f10 	tst.w	lr, #16
 800a300:	bf08      	it	eq
 800a302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30a:	6010      	str	r0, [r2, #0]
 800a30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a314:	f380 8811 	msr	BASEPRI, r0
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f7fe fe9a 	bl	8009058 <vTaskSwitchContext>
 800a324:	f04f 0000 	mov.w	r0, #0
 800a328:	f380 8811 	msr	BASEPRI, r0
 800a32c:	bc09      	pop	{r0, r3}
 800a32e:	6819      	ldr	r1, [r3, #0]
 800a330:	6808      	ldr	r0, [r1, #0]
 800a332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a336:	f01e 0f10 	tst.w	lr, #16
 800a33a:	bf08      	it	eq
 800a33c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a340:	f380 8809 	msr	PSP, r0
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	f3af 8000 	nop.w

0800a350 <pxCurrentTCBConst>:
 800a350:	20000e9c 	.word	0x20000e9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop

0800a358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	607b      	str	r3, [r7, #4]
}
 800a370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a372:	f7fe fdb7 	bl	8008ee4 <xTaskIncrementTick>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d003      	beq.n	800a384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a37c:	4b06      	ldr	r3, [pc, #24]	@ (800a398 <xPortSysTickHandler+0x40>)
 800a37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	2300      	movs	r3, #0
 800a386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	f383 8811 	msr	BASEPRI, r3
}
 800a38e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	e000ed04 	.word	0xe000ed04

0800a39c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d0 <vPortSetupTimerInterrupt+0x34>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d4 <vPortSetupTimerInterrupt+0x38>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <vPortSetupTimerInterrupt+0x3c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a3dc <vPortSetupTimerInterrupt+0x40>)
 800a3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b6:	099b      	lsrs	r3, r3, #6
 800a3b8:	4a09      	ldr	r2, [pc, #36]	@ (800a3e0 <vPortSetupTimerInterrupt+0x44>)
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3be:	4b04      	ldr	r3, [pc, #16]	@ (800a3d0 <vPortSetupTimerInterrupt+0x34>)
 800a3c0:	2207      	movs	r2, #7
 800a3c2:	601a      	str	r2, [r3, #0]
}
 800a3c4:	bf00      	nop
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	e000e010 	.word	0xe000e010
 800a3d4:	e000e018 	.word	0xe000e018
 800a3d8:	20000008 	.word	0x20000008
 800a3dc:	10624dd3 	.word	0x10624dd3
 800a3e0:	e000e014 	.word	0xe000e014

0800a3e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a3f4 <vPortEnableVFP+0x10>
 800a3e8:	6801      	ldr	r1, [r0, #0]
 800a3ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a3ee:	6001      	str	r1, [r0, #0]
 800a3f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3f2:	bf00      	nop
 800a3f4:	e000ed88 	.word	0xe000ed88

0800a3f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3fe:	f3ef 8305 	mrs	r3, IPSR
 800a402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b0f      	cmp	r3, #15
 800a408:	d915      	bls.n	800a436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a40a:	4a18      	ldr	r2, [pc, #96]	@ (800a46c <vPortValidateInterruptPriority+0x74>)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4413      	add	r3, r2
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a414:	4b16      	ldr	r3, [pc, #88]	@ (800a470 <vPortValidateInterruptPriority+0x78>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	7afa      	ldrb	r2, [r7, #11]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d20b      	bcs.n	800a436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	607b      	str	r3, [r7, #4]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a436:	4b0f      	ldr	r3, [pc, #60]	@ (800a474 <vPortValidateInterruptPriority+0x7c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a43e:	4b0e      	ldr	r3, [pc, #56]	@ (800a478 <vPortValidateInterruptPriority+0x80>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d90b      	bls.n	800a45e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	603b      	str	r3, [r7, #0]
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	e7fd      	b.n	800a45a <vPortValidateInterruptPriority+0x62>
	}
 800a45e:	bf00      	nop
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	e000e3f0 	.word	0xe000e3f0
 800a470:	200014c8 	.word	0x200014c8
 800a474:	e000ed0c 	.word	0xe000ed0c
 800a478:	200014cc 	.word	0x200014cc

0800a47c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b08a      	sub	sp, #40	@ 0x28
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a484:	2300      	movs	r3, #0
 800a486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a488:	f7fe fc70 	bl	8008d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a48c:	4b5c      	ldr	r3, [pc, #368]	@ (800a600 <pvPortMalloc+0x184>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a494:	f000 f924 	bl	800a6e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a498:	4b5a      	ldr	r3, [pc, #360]	@ (800a604 <pvPortMalloc+0x188>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f040 8095 	bne.w	800a5d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d01e      	beq.n	800a4ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a4ac:	2208      	movs	r2, #8
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d015      	beq.n	800a4ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f023 0307 	bic.w	r3, r3, #7
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f003 0307 	and.w	r3, r3, #7
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <pvPortMalloc+0x6e>
	__asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d6:	f383 8811 	msr	BASEPRI, r3
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	617b      	str	r3, [r7, #20]
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
 800a4e8:	e7fd      	b.n	800a4e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d06f      	beq.n	800a5d0 <pvPortMalloc+0x154>
 800a4f0:	4b45      	ldr	r3, [pc, #276]	@ (800a608 <pvPortMalloc+0x18c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d86a      	bhi.n	800a5d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4fa:	4b44      	ldr	r3, [pc, #272]	@ (800a60c <pvPortMalloc+0x190>)
 800a4fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4fe:	4b43      	ldr	r3, [pc, #268]	@ (800a60c <pvPortMalloc+0x190>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a504:	e004      	b.n	800a510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	429a      	cmp	r2, r3
 800a518:	d903      	bls.n	800a522 <pvPortMalloc+0xa6>
 800a51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1f1      	bne.n	800a506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a522:	4b37      	ldr	r3, [pc, #220]	@ (800a600 <pvPortMalloc+0x184>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a528:	429a      	cmp	r2, r3
 800a52a:	d051      	beq.n	800a5d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a52c:	6a3b      	ldr	r3, [r7, #32]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2208      	movs	r2, #8
 800a532:	4413      	add	r3, r2
 800a534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	1ad2      	subs	r2, r2, r3
 800a546:	2308      	movs	r3, #8
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d920      	bls.n	800a590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a54e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	f003 0307 	and.w	r3, r3, #7
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00b      	beq.n	800a578 <pvPortMalloc+0xfc>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	613b      	str	r3, [r7, #16]
}
 800a572:	bf00      	nop
 800a574:	bf00      	nop
 800a576:	e7fd      	b.n	800a574 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	1ad2      	subs	r2, r2, r3
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a58a:	69b8      	ldr	r0, [r7, #24]
 800a58c:	f000 f90a 	bl	800a7a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a590:	4b1d      	ldr	r3, [pc, #116]	@ (800a608 <pvPortMalloc+0x18c>)
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	4a1b      	ldr	r2, [pc, #108]	@ (800a608 <pvPortMalloc+0x18c>)
 800a59c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a59e:	4b1a      	ldr	r3, [pc, #104]	@ (800a608 <pvPortMalloc+0x18c>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a610 <pvPortMalloc+0x194>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d203      	bcs.n	800a5b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5aa:	4b17      	ldr	r3, [pc, #92]	@ (800a608 <pvPortMalloc+0x18c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a18      	ldr	r2, [pc, #96]	@ (800a610 <pvPortMalloc+0x194>)
 800a5b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	4b13      	ldr	r3, [pc, #76]	@ (800a604 <pvPortMalloc+0x188>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5c6:	4b13      	ldr	r3, [pc, #76]	@ (800a614 <pvPortMalloc+0x198>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	4a11      	ldr	r2, [pc, #68]	@ (800a614 <pvPortMalloc+0x198>)
 800a5ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5d0:	f7fe fbda 	bl	8008d88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60fb      	str	r3, [r7, #12]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a5f6:	69fb      	ldr	r3, [r7, #28]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3728      	adds	r7, #40	@ 0x28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	200050d8 	.word	0x200050d8
 800a604:	200050ec 	.word	0x200050ec
 800a608:	200050dc 	.word	0x200050dc
 800a60c:	200050d0 	.word	0x200050d0
 800a610:	200050e0 	.word	0x200050e0
 800a614:	200050e4 	.word	0x200050e4

0800a618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d04f      	beq.n	800a6ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a62a:	2308      	movs	r3, #8
 800a62c:	425b      	negs	r3, r3
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	4413      	add	r3, r2
 800a632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	4b25      	ldr	r3, [pc, #148]	@ (800a6d4 <vPortFree+0xbc>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4013      	ands	r3, r2
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10b      	bne.n	800a65e <vPortFree+0x46>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	60fb      	str	r3, [r7, #12]
}
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
 800a65c:	e7fd      	b.n	800a65a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00b      	beq.n	800a67e <vPortFree+0x66>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	60bb      	str	r3, [r7, #8]
}
 800a678:	bf00      	nop
 800a67a:	bf00      	nop
 800a67c:	e7fd      	b.n	800a67a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	4b14      	ldr	r3, [pc, #80]	@ (800a6d4 <vPortFree+0xbc>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4013      	ands	r3, r2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01e      	beq.n	800a6ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d11a      	bne.n	800a6ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d4 <vPortFree+0xbc>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	43db      	mvns	r3, r3
 800a69e:	401a      	ands	r2, r3
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6a4:	f7fe fb62 	bl	8008d6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d8 <vPortFree+0xc0>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	4a09      	ldr	r2, [pc, #36]	@ (800a6d8 <vPortFree+0xc0>)
 800a6b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6b6:	6938      	ldr	r0, [r7, #16]
 800a6b8:	f000 f874 	bl	800a7a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6bc:	4b07      	ldr	r3, [pc, #28]	@ (800a6dc <vPortFree+0xc4>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	4a06      	ldr	r2, [pc, #24]	@ (800a6dc <vPortFree+0xc4>)
 800a6c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6c6:	f7fe fb5f 	bl	8008d88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6ca:	bf00      	nop
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	200050ec 	.word	0x200050ec
 800a6d8:	200050dc 	.word	0x200050dc
 800a6dc:	200050e8 	.word	0x200050e8

0800a6e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a6ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6ec:	4b27      	ldr	r3, [pc, #156]	@ (800a78c <prvHeapInit+0xac>)
 800a6ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f003 0307 	and.w	r3, r3, #7
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00c      	beq.n	800a714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3307      	adds	r3, #7
 800a6fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f023 0307 	bic.w	r3, r3, #7
 800a706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	4a1f      	ldr	r2, [pc, #124]	@ (800a78c <prvHeapInit+0xac>)
 800a710:	4413      	add	r3, r2
 800a712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a718:	4a1d      	ldr	r2, [pc, #116]	@ (800a790 <prvHeapInit+0xb0>)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a71e:	4b1c      	ldr	r3, [pc, #112]	@ (800a790 <prvHeapInit+0xb0>)
 800a720:	2200      	movs	r2, #0
 800a722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	4413      	add	r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a72c:	2208      	movs	r2, #8
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	1a9b      	subs	r3, r3, r2
 800a732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f023 0307 	bic.w	r3, r3, #7
 800a73a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4a15      	ldr	r2, [pc, #84]	@ (800a794 <prvHeapInit+0xb4>)
 800a740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a742:	4b14      	ldr	r3, [pc, #80]	@ (800a794 <prvHeapInit+0xb4>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2200      	movs	r2, #0
 800a748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a74a:	4b12      	ldr	r3, [pc, #72]	@ (800a794 <prvHeapInit+0xb4>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2200      	movs	r2, #0
 800a750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	1ad2      	subs	r2, r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a760:	4b0c      	ldr	r3, [pc, #48]	@ (800a794 <prvHeapInit+0xb4>)
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	4a0a      	ldr	r2, [pc, #40]	@ (800a798 <prvHeapInit+0xb8>)
 800a76e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	4a09      	ldr	r2, [pc, #36]	@ (800a79c <prvHeapInit+0xbc>)
 800a776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a778:	4b09      	ldr	r3, [pc, #36]	@ (800a7a0 <prvHeapInit+0xc0>)
 800a77a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a77e:	601a      	str	r2, [r3, #0]
}
 800a780:	bf00      	nop
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	200014d0 	.word	0x200014d0
 800a790:	200050d0 	.word	0x200050d0
 800a794:	200050d8 	.word	0x200050d8
 800a798:	200050e0 	.word	0x200050e0
 800a79c:	200050dc 	.word	0x200050dc
 800a7a0:	200050ec 	.word	0x200050ec

0800a7a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7ac:	4b28      	ldr	r3, [pc, #160]	@ (800a850 <prvInsertBlockIntoFreeList+0xac>)
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	e002      	b.n	800a7b8 <prvInsertBlockIntoFreeList+0x14>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	60fb      	str	r3, [r7, #12]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d8f7      	bhi.n	800a7b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d108      	bne.n	800a7e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	441a      	add	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	441a      	add	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d118      	bne.n	800a82c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	4b15      	ldr	r3, [pc, #84]	@ (800a854 <prvInsertBlockIntoFreeList+0xb0>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d00d      	beq.n	800a822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685a      	ldr	r2, [r3, #4]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	441a      	add	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	601a      	str	r2, [r3, #0]
 800a820:	e008      	b.n	800a834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a822:	4b0c      	ldr	r3, [pc, #48]	@ (800a854 <prvInsertBlockIntoFreeList+0xb0>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	e003      	b.n	800a834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d002      	beq.n	800a842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a842:	bf00      	nop
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	200050d0 	.word	0x200050d0
 800a854:	200050d8 	.word	0x200050d8

0800a858 <malloc>:
 800a858:	4b02      	ldr	r3, [pc, #8]	@ (800a864 <malloc+0xc>)
 800a85a:	4601      	mov	r1, r0
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	f000 b82d 	b.w	800a8bc <_malloc_r>
 800a862:	bf00      	nop
 800a864:	20000024 	.word	0x20000024

0800a868 <free>:
 800a868:	4b02      	ldr	r3, [pc, #8]	@ (800a874 <free+0xc>)
 800a86a:	4601      	mov	r1, r0
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	f001 be47 	b.w	800c500 <_free_r>
 800a872:	bf00      	nop
 800a874:	20000024 	.word	0x20000024

0800a878 <sbrk_aligned>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	4e0f      	ldr	r6, [pc, #60]	@ (800a8b8 <sbrk_aligned+0x40>)
 800a87c:	460c      	mov	r4, r1
 800a87e:	6831      	ldr	r1, [r6, #0]
 800a880:	4605      	mov	r5, r0
 800a882:	b911      	cbnz	r1, 800a88a <sbrk_aligned+0x12>
 800a884:	f000 ff92 	bl	800b7ac <_sbrk_r>
 800a888:	6030      	str	r0, [r6, #0]
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f000 ff8d 	bl	800b7ac <_sbrk_r>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	d103      	bne.n	800a89e <sbrk_aligned+0x26>
 800a896:	f04f 34ff 	mov.w	r4, #4294967295
 800a89a:	4620      	mov	r0, r4
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	1cc4      	adds	r4, r0, #3
 800a8a0:	f024 0403 	bic.w	r4, r4, #3
 800a8a4:	42a0      	cmp	r0, r4
 800a8a6:	d0f8      	beq.n	800a89a <sbrk_aligned+0x22>
 800a8a8:	1a21      	subs	r1, r4, r0
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f000 ff7e 	bl	800b7ac <_sbrk_r>
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	d1f2      	bne.n	800a89a <sbrk_aligned+0x22>
 800a8b4:	e7ef      	b.n	800a896 <sbrk_aligned+0x1e>
 800a8b6:	bf00      	nop
 800a8b8:	200050f0 	.word	0x200050f0

0800a8bc <_malloc_r>:
 800a8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	1ccd      	adds	r5, r1, #3
 800a8c2:	f025 0503 	bic.w	r5, r5, #3
 800a8c6:	3508      	adds	r5, #8
 800a8c8:	2d0c      	cmp	r5, #12
 800a8ca:	bf38      	it	cc
 800a8cc:	250c      	movcc	r5, #12
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	db01      	blt.n	800a8d8 <_malloc_r+0x1c>
 800a8d4:	42a9      	cmp	r1, r5
 800a8d6:	d904      	bls.n	800a8e2 <_malloc_r+0x26>
 800a8d8:	230c      	movs	r3, #12
 800a8da:	6033      	str	r3, [r6, #0]
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9b8 <_malloc_r+0xfc>
 800a8e6:	f000 f869 	bl	800a9bc <__malloc_lock>
 800a8ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ee:	461c      	mov	r4, r3
 800a8f0:	bb44      	cbnz	r4, 800a944 <_malloc_r+0x88>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f7ff ffbf 	bl	800a878 <sbrk_aligned>
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	d158      	bne.n	800a9b2 <_malloc_r+0xf6>
 800a900:	f8d8 4000 	ldr.w	r4, [r8]
 800a904:	4627      	mov	r7, r4
 800a906:	2f00      	cmp	r7, #0
 800a908:	d143      	bne.n	800a992 <_malloc_r+0xd6>
 800a90a:	2c00      	cmp	r4, #0
 800a90c:	d04b      	beq.n	800a9a6 <_malloc_r+0xea>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	4639      	mov	r1, r7
 800a912:	4630      	mov	r0, r6
 800a914:	eb04 0903 	add.w	r9, r4, r3
 800a918:	f000 ff48 	bl	800b7ac <_sbrk_r>
 800a91c:	4581      	cmp	r9, r0
 800a91e:	d142      	bne.n	800a9a6 <_malloc_r+0xea>
 800a920:	6821      	ldr	r1, [r4, #0]
 800a922:	1a6d      	subs	r5, r5, r1
 800a924:	4629      	mov	r1, r5
 800a926:	4630      	mov	r0, r6
 800a928:	f7ff ffa6 	bl	800a878 <sbrk_aligned>
 800a92c:	3001      	adds	r0, #1
 800a92e:	d03a      	beq.n	800a9a6 <_malloc_r+0xea>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	442b      	add	r3, r5
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	f8d8 3000 	ldr.w	r3, [r8]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	bb62      	cbnz	r2, 800a998 <_malloc_r+0xdc>
 800a93e:	f8c8 7000 	str.w	r7, [r8]
 800a942:	e00f      	b.n	800a964 <_malloc_r+0xa8>
 800a944:	6822      	ldr	r2, [r4, #0]
 800a946:	1b52      	subs	r2, r2, r5
 800a948:	d420      	bmi.n	800a98c <_malloc_r+0xd0>
 800a94a:	2a0b      	cmp	r2, #11
 800a94c:	d917      	bls.n	800a97e <_malloc_r+0xc2>
 800a94e:	1961      	adds	r1, r4, r5
 800a950:	42a3      	cmp	r3, r4
 800a952:	6025      	str	r5, [r4, #0]
 800a954:	bf18      	it	ne
 800a956:	6059      	strne	r1, [r3, #4]
 800a958:	6863      	ldr	r3, [r4, #4]
 800a95a:	bf08      	it	eq
 800a95c:	f8c8 1000 	streq.w	r1, [r8]
 800a960:	5162      	str	r2, [r4, r5]
 800a962:	604b      	str	r3, [r1, #4]
 800a964:	4630      	mov	r0, r6
 800a966:	f000 f82f 	bl	800a9c8 <__malloc_unlock>
 800a96a:	f104 000b 	add.w	r0, r4, #11
 800a96e:	1d23      	adds	r3, r4, #4
 800a970:	f020 0007 	bic.w	r0, r0, #7
 800a974:	1ac2      	subs	r2, r0, r3
 800a976:	bf1c      	itt	ne
 800a978:	1a1b      	subne	r3, r3, r0
 800a97a:	50a3      	strne	r3, [r4, r2]
 800a97c:	e7af      	b.n	800a8de <_malloc_r+0x22>
 800a97e:	6862      	ldr	r2, [r4, #4]
 800a980:	42a3      	cmp	r3, r4
 800a982:	bf0c      	ite	eq
 800a984:	f8c8 2000 	streq.w	r2, [r8]
 800a988:	605a      	strne	r2, [r3, #4]
 800a98a:	e7eb      	b.n	800a964 <_malloc_r+0xa8>
 800a98c:	4623      	mov	r3, r4
 800a98e:	6864      	ldr	r4, [r4, #4]
 800a990:	e7ae      	b.n	800a8f0 <_malloc_r+0x34>
 800a992:	463c      	mov	r4, r7
 800a994:	687f      	ldr	r7, [r7, #4]
 800a996:	e7b6      	b.n	800a906 <_malloc_r+0x4a>
 800a998:	461a      	mov	r2, r3
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	d1fb      	bne.n	800a998 <_malloc_r+0xdc>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	6053      	str	r3, [r2, #4]
 800a9a4:	e7de      	b.n	800a964 <_malloc_r+0xa8>
 800a9a6:	230c      	movs	r3, #12
 800a9a8:	6033      	str	r3, [r6, #0]
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f000 f80c 	bl	800a9c8 <__malloc_unlock>
 800a9b0:	e794      	b.n	800a8dc <_malloc_r+0x20>
 800a9b2:	6005      	str	r5, [r0, #0]
 800a9b4:	e7d6      	b.n	800a964 <_malloc_r+0xa8>
 800a9b6:	bf00      	nop
 800a9b8:	200050f4 	.word	0x200050f4

0800a9bc <__malloc_lock>:
 800a9bc:	4801      	ldr	r0, [pc, #4]	@ (800a9c4 <__malloc_lock+0x8>)
 800a9be:	f000 bf42 	b.w	800b846 <__retarget_lock_acquire_recursive>
 800a9c2:	bf00      	nop
 800a9c4:	20005238 	.word	0x20005238

0800a9c8 <__malloc_unlock>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	@ (800a9d0 <__malloc_unlock+0x8>)
 800a9ca:	f000 bf3d 	b.w	800b848 <__retarget_lock_release_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	20005238 	.word	0x20005238

0800a9d4 <__cvt>:
 800a9d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	ec57 6b10 	vmov	r6, r7, d0
 800a9dc:	2f00      	cmp	r7, #0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	bfbb      	ittet	lt
 800a9e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a9ea:	461f      	movlt	r7, r3
 800a9ec:	2300      	movge	r3, #0
 800a9ee:	232d      	movlt	r3, #45	@ 0x2d
 800a9f0:	700b      	strb	r3, [r1, #0]
 800a9f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a9f8:	4691      	mov	r9, r2
 800a9fa:	f023 0820 	bic.w	r8, r3, #32
 800a9fe:	bfbc      	itt	lt
 800aa00:	4632      	movlt	r2, r6
 800aa02:	4616      	movlt	r6, r2
 800aa04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa08:	d005      	beq.n	800aa16 <__cvt+0x42>
 800aa0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aa0e:	d100      	bne.n	800aa12 <__cvt+0x3e>
 800aa10:	3401      	adds	r4, #1
 800aa12:	2102      	movs	r1, #2
 800aa14:	e000      	b.n	800aa18 <__cvt+0x44>
 800aa16:	2103      	movs	r1, #3
 800aa18:	ab03      	add	r3, sp, #12
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	ab02      	add	r3, sp, #8
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	ec47 6b10 	vmov	d0, r6, r7
 800aa24:	4653      	mov	r3, sl
 800aa26:	4622      	mov	r2, r4
 800aa28:	f000 ffa6 	bl	800b978 <_dtoa_r>
 800aa2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa30:	4605      	mov	r5, r0
 800aa32:	d119      	bne.n	800aa68 <__cvt+0x94>
 800aa34:	f019 0f01 	tst.w	r9, #1
 800aa38:	d00e      	beq.n	800aa58 <__cvt+0x84>
 800aa3a:	eb00 0904 	add.w	r9, r0, r4
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2300      	movs	r3, #0
 800aa42:	4630      	mov	r0, r6
 800aa44:	4639      	mov	r1, r7
 800aa46:	f7f6 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa4a:	b108      	cbz	r0, 800aa50 <__cvt+0x7c>
 800aa4c:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa50:	2230      	movs	r2, #48	@ 0x30
 800aa52:	9b03      	ldr	r3, [sp, #12]
 800aa54:	454b      	cmp	r3, r9
 800aa56:	d31e      	bcc.n	800aa96 <__cvt+0xc2>
 800aa58:	9b03      	ldr	r3, [sp, #12]
 800aa5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa5c:	1b5b      	subs	r3, r3, r5
 800aa5e:	4628      	mov	r0, r5
 800aa60:	6013      	str	r3, [r2, #0]
 800aa62:	b004      	add	sp, #16
 800aa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa6c:	eb00 0904 	add.w	r9, r0, r4
 800aa70:	d1e5      	bne.n	800aa3e <__cvt+0x6a>
 800aa72:	7803      	ldrb	r3, [r0, #0]
 800aa74:	2b30      	cmp	r3, #48	@ 0x30
 800aa76:	d10a      	bne.n	800aa8e <__cvt+0xba>
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4639      	mov	r1, r7
 800aa80:	f7f6 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa84:	b918      	cbnz	r0, 800aa8e <__cvt+0xba>
 800aa86:	f1c4 0401 	rsb	r4, r4, #1
 800aa8a:	f8ca 4000 	str.w	r4, [sl]
 800aa8e:	f8da 3000 	ldr.w	r3, [sl]
 800aa92:	4499      	add	r9, r3
 800aa94:	e7d3      	b.n	800aa3e <__cvt+0x6a>
 800aa96:	1c59      	adds	r1, r3, #1
 800aa98:	9103      	str	r1, [sp, #12]
 800aa9a:	701a      	strb	r2, [r3, #0]
 800aa9c:	e7d9      	b.n	800aa52 <__cvt+0x7e>

0800aa9e <__exponent>:
 800aa9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaa0:	2900      	cmp	r1, #0
 800aaa2:	bfba      	itte	lt
 800aaa4:	4249      	neglt	r1, r1
 800aaa6:	232d      	movlt	r3, #45	@ 0x2d
 800aaa8:	232b      	movge	r3, #43	@ 0x2b
 800aaaa:	2909      	cmp	r1, #9
 800aaac:	7002      	strb	r2, [r0, #0]
 800aaae:	7043      	strb	r3, [r0, #1]
 800aab0:	dd29      	ble.n	800ab06 <__exponent+0x68>
 800aab2:	f10d 0307 	add.w	r3, sp, #7
 800aab6:	461d      	mov	r5, r3
 800aab8:	270a      	movs	r7, #10
 800aaba:	461a      	mov	r2, r3
 800aabc:	fbb1 f6f7 	udiv	r6, r1, r7
 800aac0:	fb07 1416 	mls	r4, r7, r6, r1
 800aac4:	3430      	adds	r4, #48	@ 0x30
 800aac6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aaca:	460c      	mov	r4, r1
 800aacc:	2c63      	cmp	r4, #99	@ 0x63
 800aace:	f103 33ff 	add.w	r3, r3, #4294967295
 800aad2:	4631      	mov	r1, r6
 800aad4:	dcf1      	bgt.n	800aaba <__exponent+0x1c>
 800aad6:	3130      	adds	r1, #48	@ 0x30
 800aad8:	1e94      	subs	r4, r2, #2
 800aada:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aade:	1c41      	adds	r1, r0, #1
 800aae0:	4623      	mov	r3, r4
 800aae2:	42ab      	cmp	r3, r5
 800aae4:	d30a      	bcc.n	800aafc <__exponent+0x5e>
 800aae6:	f10d 0309 	add.w	r3, sp, #9
 800aaea:	1a9b      	subs	r3, r3, r2
 800aaec:	42ac      	cmp	r4, r5
 800aaee:	bf88      	it	hi
 800aaf0:	2300      	movhi	r3, #0
 800aaf2:	3302      	adds	r3, #2
 800aaf4:	4403      	add	r3, r0
 800aaf6:	1a18      	subs	r0, r3, r0
 800aaf8:	b003      	add	sp, #12
 800aafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aafc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab00:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab04:	e7ed      	b.n	800aae2 <__exponent+0x44>
 800ab06:	2330      	movs	r3, #48	@ 0x30
 800ab08:	3130      	adds	r1, #48	@ 0x30
 800ab0a:	7083      	strb	r3, [r0, #2]
 800ab0c:	70c1      	strb	r1, [r0, #3]
 800ab0e:	1d03      	adds	r3, r0, #4
 800ab10:	e7f1      	b.n	800aaf6 <__exponent+0x58>
	...

0800ab14 <_printf_float>:
 800ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab18:	b08d      	sub	sp, #52	@ 0x34
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab20:	4616      	mov	r6, r2
 800ab22:	461f      	mov	r7, r3
 800ab24:	4605      	mov	r5, r0
 800ab26:	f000 fe09 	bl	800b73c <_localeconv_r>
 800ab2a:	6803      	ldr	r3, [r0, #0]
 800ab2c:	9304      	str	r3, [sp, #16]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7f5 fb9e 	bl	8000270 <strlen>
 800ab34:	2300      	movs	r3, #0
 800ab36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab38:	f8d8 3000 	ldr.w	r3, [r8]
 800ab3c:	9005      	str	r0, [sp, #20]
 800ab3e:	3307      	adds	r3, #7
 800ab40:	f023 0307 	bic.w	r3, r3, #7
 800ab44:	f103 0208 	add.w	r2, r3, #8
 800ab48:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab4c:	f8d4 b000 	ldr.w	fp, [r4]
 800ab50:	f8c8 2000 	str.w	r2, [r8]
 800ab54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ab5c:	9307      	str	r3, [sp, #28]
 800ab5e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ab66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab6a:	4b9c      	ldr	r3, [pc, #624]	@ (800addc <_printf_float+0x2c8>)
 800ab6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab70:	f7f5 ffdc 	bl	8000b2c <__aeabi_dcmpun>
 800ab74:	bb70      	cbnz	r0, 800abd4 <_printf_float+0xc0>
 800ab76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab7a:	4b98      	ldr	r3, [pc, #608]	@ (800addc <_printf_float+0x2c8>)
 800ab7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab80:	f7f5 ffb6 	bl	8000af0 <__aeabi_dcmple>
 800ab84:	bb30      	cbnz	r0, 800abd4 <_printf_float+0xc0>
 800ab86:	2200      	movs	r2, #0
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	f7f5 ffa5 	bl	8000adc <__aeabi_dcmplt>
 800ab92:	b110      	cbz	r0, 800ab9a <_printf_float+0x86>
 800ab94:	232d      	movs	r3, #45	@ 0x2d
 800ab96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab9a:	4a91      	ldr	r2, [pc, #580]	@ (800ade0 <_printf_float+0x2cc>)
 800ab9c:	4b91      	ldr	r3, [pc, #580]	@ (800ade4 <_printf_float+0x2d0>)
 800ab9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aba2:	bf94      	ite	ls
 800aba4:	4690      	movls	r8, r2
 800aba6:	4698      	movhi	r8, r3
 800aba8:	2303      	movs	r3, #3
 800abaa:	6123      	str	r3, [r4, #16]
 800abac:	f02b 0304 	bic.w	r3, fp, #4
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	f04f 0900 	mov.w	r9, #0
 800abb6:	9700      	str	r7, [sp, #0]
 800abb8:	4633      	mov	r3, r6
 800abba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800abbc:	4621      	mov	r1, r4
 800abbe:	4628      	mov	r0, r5
 800abc0:	f000 f9d2 	bl	800af68 <_printf_common>
 800abc4:	3001      	adds	r0, #1
 800abc6:	f040 808d 	bne.w	800ace4 <_printf_float+0x1d0>
 800abca:	f04f 30ff 	mov.w	r0, #4294967295
 800abce:	b00d      	add	sp, #52	@ 0x34
 800abd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd4:	4642      	mov	r2, r8
 800abd6:	464b      	mov	r3, r9
 800abd8:	4640      	mov	r0, r8
 800abda:	4649      	mov	r1, r9
 800abdc:	f7f5 ffa6 	bl	8000b2c <__aeabi_dcmpun>
 800abe0:	b140      	cbz	r0, 800abf4 <_printf_float+0xe0>
 800abe2:	464b      	mov	r3, r9
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	bfbc      	itt	lt
 800abe8:	232d      	movlt	r3, #45	@ 0x2d
 800abea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800abee:	4a7e      	ldr	r2, [pc, #504]	@ (800ade8 <_printf_float+0x2d4>)
 800abf0:	4b7e      	ldr	r3, [pc, #504]	@ (800adec <_printf_float+0x2d8>)
 800abf2:	e7d4      	b.n	800ab9e <_printf_float+0x8a>
 800abf4:	6863      	ldr	r3, [r4, #4]
 800abf6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800abfa:	9206      	str	r2, [sp, #24]
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	d13b      	bne.n	800ac78 <_printf_float+0x164>
 800ac00:	2306      	movs	r3, #6
 800ac02:	6063      	str	r3, [r4, #4]
 800ac04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ac08:	2300      	movs	r3, #0
 800ac0a:	6022      	str	r2, [r4, #0]
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac10:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ac14:	ab09      	add	r3, sp, #36	@ 0x24
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	6861      	ldr	r1, [r4, #4]
 800ac1a:	ec49 8b10 	vmov	d0, r8, r9
 800ac1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7ff fed6 	bl	800a9d4 <__cvt>
 800ac28:	9b06      	ldr	r3, [sp, #24]
 800ac2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac2c:	2b47      	cmp	r3, #71	@ 0x47
 800ac2e:	4680      	mov	r8, r0
 800ac30:	d129      	bne.n	800ac86 <_printf_float+0x172>
 800ac32:	1cc8      	adds	r0, r1, #3
 800ac34:	db02      	blt.n	800ac3c <_printf_float+0x128>
 800ac36:	6863      	ldr	r3, [r4, #4]
 800ac38:	4299      	cmp	r1, r3
 800ac3a:	dd41      	ble.n	800acc0 <_printf_float+0x1ac>
 800ac3c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac40:	fa5f fa8a 	uxtb.w	sl, sl
 800ac44:	3901      	subs	r1, #1
 800ac46:	4652      	mov	r2, sl
 800ac48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac4c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac4e:	f7ff ff26 	bl	800aa9e <__exponent>
 800ac52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac54:	1813      	adds	r3, r2, r0
 800ac56:	2a01      	cmp	r2, #1
 800ac58:	4681      	mov	r9, r0
 800ac5a:	6123      	str	r3, [r4, #16]
 800ac5c:	dc02      	bgt.n	800ac64 <_printf_float+0x150>
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	07d2      	lsls	r2, r2, #31
 800ac62:	d501      	bpl.n	800ac68 <_printf_float+0x154>
 800ac64:	3301      	adds	r3, #1
 800ac66:	6123      	str	r3, [r4, #16]
 800ac68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d0a2      	beq.n	800abb6 <_printf_float+0xa2>
 800ac70:	232d      	movs	r3, #45	@ 0x2d
 800ac72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac76:	e79e      	b.n	800abb6 <_printf_float+0xa2>
 800ac78:	9a06      	ldr	r2, [sp, #24]
 800ac7a:	2a47      	cmp	r2, #71	@ 0x47
 800ac7c:	d1c2      	bne.n	800ac04 <_printf_float+0xf0>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1c0      	bne.n	800ac04 <_printf_float+0xf0>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e7bd      	b.n	800ac02 <_printf_float+0xee>
 800ac86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac8a:	d9db      	bls.n	800ac44 <_printf_float+0x130>
 800ac8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ac90:	d118      	bne.n	800acc4 <_printf_float+0x1b0>
 800ac92:	2900      	cmp	r1, #0
 800ac94:	6863      	ldr	r3, [r4, #4]
 800ac96:	dd0b      	ble.n	800acb0 <_printf_float+0x19c>
 800ac98:	6121      	str	r1, [r4, #16]
 800ac9a:	b913      	cbnz	r3, 800aca2 <_printf_float+0x18e>
 800ac9c:	6822      	ldr	r2, [r4, #0]
 800ac9e:	07d0      	lsls	r0, r2, #31
 800aca0:	d502      	bpl.n	800aca8 <_printf_float+0x194>
 800aca2:	3301      	adds	r3, #1
 800aca4:	440b      	add	r3, r1
 800aca6:	6123      	str	r3, [r4, #16]
 800aca8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800acaa:	f04f 0900 	mov.w	r9, #0
 800acae:	e7db      	b.n	800ac68 <_printf_float+0x154>
 800acb0:	b913      	cbnz	r3, 800acb8 <_printf_float+0x1a4>
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	07d2      	lsls	r2, r2, #31
 800acb6:	d501      	bpl.n	800acbc <_printf_float+0x1a8>
 800acb8:	3302      	adds	r3, #2
 800acba:	e7f4      	b.n	800aca6 <_printf_float+0x192>
 800acbc:	2301      	movs	r3, #1
 800acbe:	e7f2      	b.n	800aca6 <_printf_float+0x192>
 800acc0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800acc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acc6:	4299      	cmp	r1, r3
 800acc8:	db05      	blt.n	800acd6 <_printf_float+0x1c2>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	6121      	str	r1, [r4, #16]
 800acce:	07d8      	lsls	r0, r3, #31
 800acd0:	d5ea      	bpl.n	800aca8 <_printf_float+0x194>
 800acd2:	1c4b      	adds	r3, r1, #1
 800acd4:	e7e7      	b.n	800aca6 <_printf_float+0x192>
 800acd6:	2900      	cmp	r1, #0
 800acd8:	bfd4      	ite	le
 800acda:	f1c1 0202 	rsble	r2, r1, #2
 800acde:	2201      	movgt	r2, #1
 800ace0:	4413      	add	r3, r2
 800ace2:	e7e0      	b.n	800aca6 <_printf_float+0x192>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	055a      	lsls	r2, r3, #21
 800ace8:	d407      	bmi.n	800acfa <_printf_float+0x1e6>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	4642      	mov	r2, r8
 800acee:	4631      	mov	r1, r6
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b8      	blx	r7
 800acf4:	3001      	adds	r0, #1
 800acf6:	d12b      	bne.n	800ad50 <_printf_float+0x23c>
 800acf8:	e767      	b.n	800abca <_printf_float+0xb6>
 800acfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800acfe:	f240 80dd 	bls.w	800aebc <_printf_float+0x3a8>
 800ad02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad06:	2200      	movs	r2, #0
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f7f5 fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d033      	beq.n	800ad7a <_printf_float+0x266>
 800ad12:	4a37      	ldr	r2, [pc, #220]	@ (800adf0 <_printf_float+0x2dc>)
 800ad14:	2301      	movs	r3, #1
 800ad16:	4631      	mov	r1, r6
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b8      	blx	r7
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	f43f af54 	beq.w	800abca <_printf_float+0xb6>
 800ad22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad26:	4543      	cmp	r3, r8
 800ad28:	db02      	blt.n	800ad30 <_printf_float+0x21c>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	07d8      	lsls	r0, r3, #31
 800ad2e:	d50f      	bpl.n	800ad50 <_printf_float+0x23c>
 800ad30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad34:	4631      	mov	r1, r6
 800ad36:	4628      	mov	r0, r5
 800ad38:	47b8      	blx	r7
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	f43f af45 	beq.w	800abca <_printf_float+0xb6>
 800ad40:	f04f 0900 	mov.w	r9, #0
 800ad44:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad48:	f104 0a1a 	add.w	sl, r4, #26
 800ad4c:	45c8      	cmp	r8, r9
 800ad4e:	dc09      	bgt.n	800ad64 <_printf_float+0x250>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	079b      	lsls	r3, r3, #30
 800ad54:	f100 8103 	bmi.w	800af5e <_printf_float+0x44a>
 800ad58:	68e0      	ldr	r0, [r4, #12]
 800ad5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad5c:	4298      	cmp	r0, r3
 800ad5e:	bfb8      	it	lt
 800ad60:	4618      	movlt	r0, r3
 800ad62:	e734      	b.n	800abce <_printf_float+0xba>
 800ad64:	2301      	movs	r3, #1
 800ad66:	4652      	mov	r2, sl
 800ad68:	4631      	mov	r1, r6
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	47b8      	blx	r7
 800ad6e:	3001      	adds	r0, #1
 800ad70:	f43f af2b 	beq.w	800abca <_printf_float+0xb6>
 800ad74:	f109 0901 	add.w	r9, r9, #1
 800ad78:	e7e8      	b.n	800ad4c <_printf_float+0x238>
 800ad7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dc39      	bgt.n	800adf4 <_printf_float+0x2e0>
 800ad80:	4a1b      	ldr	r2, [pc, #108]	@ (800adf0 <_printf_float+0x2dc>)
 800ad82:	2301      	movs	r3, #1
 800ad84:	4631      	mov	r1, r6
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f43f af1d 	beq.w	800abca <_printf_float+0xb6>
 800ad90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ad94:	ea59 0303 	orrs.w	r3, r9, r3
 800ad98:	d102      	bne.n	800ada0 <_printf_float+0x28c>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	07d9      	lsls	r1, r3, #31
 800ad9e:	d5d7      	bpl.n	800ad50 <_printf_float+0x23c>
 800ada0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ada4:	4631      	mov	r1, r6
 800ada6:	4628      	mov	r0, r5
 800ada8:	47b8      	blx	r7
 800adaa:	3001      	adds	r0, #1
 800adac:	f43f af0d 	beq.w	800abca <_printf_float+0xb6>
 800adb0:	f04f 0a00 	mov.w	sl, #0
 800adb4:	f104 0b1a 	add.w	fp, r4, #26
 800adb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adba:	425b      	negs	r3, r3
 800adbc:	4553      	cmp	r3, sl
 800adbe:	dc01      	bgt.n	800adc4 <_printf_float+0x2b0>
 800adc0:	464b      	mov	r3, r9
 800adc2:	e793      	b.n	800acec <_printf_float+0x1d8>
 800adc4:	2301      	movs	r3, #1
 800adc6:	465a      	mov	r2, fp
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	47b8      	blx	r7
 800adce:	3001      	adds	r0, #1
 800add0:	f43f aefb 	beq.w	800abca <_printf_float+0xb6>
 800add4:	f10a 0a01 	add.w	sl, sl, #1
 800add8:	e7ee      	b.n	800adb8 <_printf_float+0x2a4>
 800adda:	bf00      	nop
 800addc:	7fefffff 	.word	0x7fefffff
 800ade0:	0800e978 	.word	0x0800e978
 800ade4:	0800e97c 	.word	0x0800e97c
 800ade8:	0800e980 	.word	0x0800e980
 800adec:	0800e984 	.word	0x0800e984
 800adf0:	0800e988 	.word	0x0800e988
 800adf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800adf6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800adfa:	4553      	cmp	r3, sl
 800adfc:	bfa8      	it	ge
 800adfe:	4653      	movge	r3, sl
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	4699      	mov	r9, r3
 800ae04:	dc36      	bgt.n	800ae74 <_printf_float+0x360>
 800ae06:	f04f 0b00 	mov.w	fp, #0
 800ae0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae0e:	f104 021a 	add.w	r2, r4, #26
 800ae12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae14:	9306      	str	r3, [sp, #24]
 800ae16:	eba3 0309 	sub.w	r3, r3, r9
 800ae1a:	455b      	cmp	r3, fp
 800ae1c:	dc31      	bgt.n	800ae82 <_printf_float+0x36e>
 800ae1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae20:	459a      	cmp	sl, r3
 800ae22:	dc3a      	bgt.n	800ae9a <_printf_float+0x386>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	07da      	lsls	r2, r3, #31
 800ae28:	d437      	bmi.n	800ae9a <_printf_float+0x386>
 800ae2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae2c:	ebaa 0903 	sub.w	r9, sl, r3
 800ae30:	9b06      	ldr	r3, [sp, #24]
 800ae32:	ebaa 0303 	sub.w	r3, sl, r3
 800ae36:	4599      	cmp	r9, r3
 800ae38:	bfa8      	it	ge
 800ae3a:	4699      	movge	r9, r3
 800ae3c:	f1b9 0f00 	cmp.w	r9, #0
 800ae40:	dc33      	bgt.n	800aeaa <_printf_float+0x396>
 800ae42:	f04f 0800 	mov.w	r8, #0
 800ae46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae4a:	f104 0b1a 	add.w	fp, r4, #26
 800ae4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae50:	ebaa 0303 	sub.w	r3, sl, r3
 800ae54:	eba3 0309 	sub.w	r3, r3, r9
 800ae58:	4543      	cmp	r3, r8
 800ae5a:	f77f af79 	ble.w	800ad50 <_printf_float+0x23c>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	465a      	mov	r2, fp
 800ae62:	4631      	mov	r1, r6
 800ae64:	4628      	mov	r0, r5
 800ae66:	47b8      	blx	r7
 800ae68:	3001      	adds	r0, #1
 800ae6a:	f43f aeae 	beq.w	800abca <_printf_float+0xb6>
 800ae6e:	f108 0801 	add.w	r8, r8, #1
 800ae72:	e7ec      	b.n	800ae4e <_printf_float+0x33a>
 800ae74:	4642      	mov	r2, r8
 800ae76:	4631      	mov	r1, r6
 800ae78:	4628      	mov	r0, r5
 800ae7a:	47b8      	blx	r7
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d1c2      	bne.n	800ae06 <_printf_float+0x2f2>
 800ae80:	e6a3      	b.n	800abca <_printf_float+0xb6>
 800ae82:	2301      	movs	r3, #1
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	9206      	str	r2, [sp, #24]
 800ae8a:	47b8      	blx	r7
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	f43f ae9c 	beq.w	800abca <_printf_float+0xb6>
 800ae92:	9a06      	ldr	r2, [sp, #24]
 800ae94:	f10b 0b01 	add.w	fp, fp, #1
 800ae98:	e7bb      	b.n	800ae12 <_printf_float+0x2fe>
 800ae9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b8      	blx	r7
 800aea4:	3001      	adds	r0, #1
 800aea6:	d1c0      	bne.n	800ae2a <_printf_float+0x316>
 800aea8:	e68f      	b.n	800abca <_printf_float+0xb6>
 800aeaa:	9a06      	ldr	r2, [sp, #24]
 800aeac:	464b      	mov	r3, r9
 800aeae:	4442      	add	r2, r8
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	47b8      	blx	r7
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	d1c3      	bne.n	800ae42 <_printf_float+0x32e>
 800aeba:	e686      	b.n	800abca <_printf_float+0xb6>
 800aebc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aec0:	f1ba 0f01 	cmp.w	sl, #1
 800aec4:	dc01      	bgt.n	800aeca <_printf_float+0x3b6>
 800aec6:	07db      	lsls	r3, r3, #31
 800aec8:	d536      	bpl.n	800af38 <_printf_float+0x424>
 800aeca:	2301      	movs	r3, #1
 800aecc:	4642      	mov	r2, r8
 800aece:	4631      	mov	r1, r6
 800aed0:	4628      	mov	r0, r5
 800aed2:	47b8      	blx	r7
 800aed4:	3001      	adds	r0, #1
 800aed6:	f43f ae78 	beq.w	800abca <_printf_float+0xb6>
 800aeda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aede:	4631      	mov	r1, r6
 800aee0:	4628      	mov	r0, r5
 800aee2:	47b8      	blx	r7
 800aee4:	3001      	adds	r0, #1
 800aee6:	f43f ae70 	beq.w	800abca <_printf_float+0xb6>
 800aeea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aeee:	2200      	movs	r2, #0
 800aef0:	2300      	movs	r3, #0
 800aef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aef6:	f7f5 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 800aefa:	b9c0      	cbnz	r0, 800af2e <_printf_float+0x41a>
 800aefc:	4653      	mov	r3, sl
 800aefe:	f108 0201 	add.w	r2, r8, #1
 800af02:	4631      	mov	r1, r6
 800af04:	4628      	mov	r0, r5
 800af06:	47b8      	blx	r7
 800af08:	3001      	adds	r0, #1
 800af0a:	d10c      	bne.n	800af26 <_printf_float+0x412>
 800af0c:	e65d      	b.n	800abca <_printf_float+0xb6>
 800af0e:	2301      	movs	r3, #1
 800af10:	465a      	mov	r2, fp
 800af12:	4631      	mov	r1, r6
 800af14:	4628      	mov	r0, r5
 800af16:	47b8      	blx	r7
 800af18:	3001      	adds	r0, #1
 800af1a:	f43f ae56 	beq.w	800abca <_printf_float+0xb6>
 800af1e:	f108 0801 	add.w	r8, r8, #1
 800af22:	45d0      	cmp	r8, sl
 800af24:	dbf3      	blt.n	800af0e <_printf_float+0x3fa>
 800af26:	464b      	mov	r3, r9
 800af28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af2c:	e6df      	b.n	800acee <_printf_float+0x1da>
 800af2e:	f04f 0800 	mov.w	r8, #0
 800af32:	f104 0b1a 	add.w	fp, r4, #26
 800af36:	e7f4      	b.n	800af22 <_printf_float+0x40e>
 800af38:	2301      	movs	r3, #1
 800af3a:	4642      	mov	r2, r8
 800af3c:	e7e1      	b.n	800af02 <_printf_float+0x3ee>
 800af3e:	2301      	movs	r3, #1
 800af40:	464a      	mov	r2, r9
 800af42:	4631      	mov	r1, r6
 800af44:	4628      	mov	r0, r5
 800af46:	47b8      	blx	r7
 800af48:	3001      	adds	r0, #1
 800af4a:	f43f ae3e 	beq.w	800abca <_printf_float+0xb6>
 800af4e:	f108 0801 	add.w	r8, r8, #1
 800af52:	68e3      	ldr	r3, [r4, #12]
 800af54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af56:	1a5b      	subs	r3, r3, r1
 800af58:	4543      	cmp	r3, r8
 800af5a:	dcf0      	bgt.n	800af3e <_printf_float+0x42a>
 800af5c:	e6fc      	b.n	800ad58 <_printf_float+0x244>
 800af5e:	f04f 0800 	mov.w	r8, #0
 800af62:	f104 0919 	add.w	r9, r4, #25
 800af66:	e7f4      	b.n	800af52 <_printf_float+0x43e>

0800af68 <_printf_common>:
 800af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	4616      	mov	r6, r2
 800af6e:	4698      	mov	r8, r3
 800af70:	688a      	ldr	r2, [r1, #8]
 800af72:	690b      	ldr	r3, [r1, #16]
 800af74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af78:	4293      	cmp	r3, r2
 800af7a:	bfb8      	it	lt
 800af7c:	4613      	movlt	r3, r2
 800af7e:	6033      	str	r3, [r6, #0]
 800af80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af84:	4607      	mov	r7, r0
 800af86:	460c      	mov	r4, r1
 800af88:	b10a      	cbz	r2, 800af8e <_printf_common+0x26>
 800af8a:	3301      	adds	r3, #1
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	0699      	lsls	r1, r3, #26
 800af92:	bf42      	ittt	mi
 800af94:	6833      	ldrmi	r3, [r6, #0]
 800af96:	3302      	addmi	r3, #2
 800af98:	6033      	strmi	r3, [r6, #0]
 800af9a:	6825      	ldr	r5, [r4, #0]
 800af9c:	f015 0506 	ands.w	r5, r5, #6
 800afa0:	d106      	bne.n	800afb0 <_printf_common+0x48>
 800afa2:	f104 0a19 	add.w	sl, r4, #25
 800afa6:	68e3      	ldr	r3, [r4, #12]
 800afa8:	6832      	ldr	r2, [r6, #0]
 800afaa:	1a9b      	subs	r3, r3, r2
 800afac:	42ab      	cmp	r3, r5
 800afae:	dc26      	bgt.n	800affe <_printf_common+0x96>
 800afb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afb4:	6822      	ldr	r2, [r4, #0]
 800afb6:	3b00      	subs	r3, #0
 800afb8:	bf18      	it	ne
 800afba:	2301      	movne	r3, #1
 800afbc:	0692      	lsls	r2, r2, #26
 800afbe:	d42b      	bmi.n	800b018 <_printf_common+0xb0>
 800afc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afc4:	4641      	mov	r1, r8
 800afc6:	4638      	mov	r0, r7
 800afc8:	47c8      	blx	r9
 800afca:	3001      	adds	r0, #1
 800afcc:	d01e      	beq.n	800b00c <_printf_common+0xa4>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	6922      	ldr	r2, [r4, #16]
 800afd2:	f003 0306 	and.w	r3, r3, #6
 800afd6:	2b04      	cmp	r3, #4
 800afd8:	bf02      	ittt	eq
 800afda:	68e5      	ldreq	r5, [r4, #12]
 800afdc:	6833      	ldreq	r3, [r6, #0]
 800afde:	1aed      	subeq	r5, r5, r3
 800afe0:	68a3      	ldr	r3, [r4, #8]
 800afe2:	bf0c      	ite	eq
 800afe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afe8:	2500      	movne	r5, #0
 800afea:	4293      	cmp	r3, r2
 800afec:	bfc4      	itt	gt
 800afee:	1a9b      	subgt	r3, r3, r2
 800aff0:	18ed      	addgt	r5, r5, r3
 800aff2:	2600      	movs	r6, #0
 800aff4:	341a      	adds	r4, #26
 800aff6:	42b5      	cmp	r5, r6
 800aff8:	d11a      	bne.n	800b030 <_printf_common+0xc8>
 800affa:	2000      	movs	r0, #0
 800affc:	e008      	b.n	800b010 <_printf_common+0xa8>
 800affe:	2301      	movs	r3, #1
 800b000:	4652      	mov	r2, sl
 800b002:	4641      	mov	r1, r8
 800b004:	4638      	mov	r0, r7
 800b006:	47c8      	blx	r9
 800b008:	3001      	adds	r0, #1
 800b00a:	d103      	bne.n	800b014 <_printf_common+0xac>
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295
 800b010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b014:	3501      	adds	r5, #1
 800b016:	e7c6      	b.n	800afa6 <_printf_common+0x3e>
 800b018:	18e1      	adds	r1, r4, r3
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	2030      	movs	r0, #48	@ 0x30
 800b01e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b022:	4422      	add	r2, r4
 800b024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b02c:	3302      	adds	r3, #2
 800b02e:	e7c7      	b.n	800afc0 <_printf_common+0x58>
 800b030:	2301      	movs	r3, #1
 800b032:	4622      	mov	r2, r4
 800b034:	4641      	mov	r1, r8
 800b036:	4638      	mov	r0, r7
 800b038:	47c8      	blx	r9
 800b03a:	3001      	adds	r0, #1
 800b03c:	d0e6      	beq.n	800b00c <_printf_common+0xa4>
 800b03e:	3601      	adds	r6, #1
 800b040:	e7d9      	b.n	800aff6 <_printf_common+0x8e>
	...

0800b044 <_printf_i>:
 800b044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b048:	7e0f      	ldrb	r7, [r1, #24]
 800b04a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b04c:	2f78      	cmp	r7, #120	@ 0x78
 800b04e:	4691      	mov	r9, r2
 800b050:	4680      	mov	r8, r0
 800b052:	460c      	mov	r4, r1
 800b054:	469a      	mov	sl, r3
 800b056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b05a:	d807      	bhi.n	800b06c <_printf_i+0x28>
 800b05c:	2f62      	cmp	r7, #98	@ 0x62
 800b05e:	d80a      	bhi.n	800b076 <_printf_i+0x32>
 800b060:	2f00      	cmp	r7, #0
 800b062:	f000 80d2 	beq.w	800b20a <_printf_i+0x1c6>
 800b066:	2f58      	cmp	r7, #88	@ 0x58
 800b068:	f000 80b9 	beq.w	800b1de <_printf_i+0x19a>
 800b06c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b074:	e03a      	b.n	800b0ec <_printf_i+0xa8>
 800b076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b07a:	2b15      	cmp	r3, #21
 800b07c:	d8f6      	bhi.n	800b06c <_printf_i+0x28>
 800b07e:	a101      	add	r1, pc, #4	@ (adr r1, 800b084 <_printf_i+0x40>)
 800b080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b084:	0800b0dd 	.word	0x0800b0dd
 800b088:	0800b0f1 	.word	0x0800b0f1
 800b08c:	0800b06d 	.word	0x0800b06d
 800b090:	0800b06d 	.word	0x0800b06d
 800b094:	0800b06d 	.word	0x0800b06d
 800b098:	0800b06d 	.word	0x0800b06d
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b06d 	.word	0x0800b06d
 800b0a4:	0800b06d 	.word	0x0800b06d
 800b0a8:	0800b06d 	.word	0x0800b06d
 800b0ac:	0800b06d 	.word	0x0800b06d
 800b0b0:	0800b1f1 	.word	0x0800b1f1
 800b0b4:	0800b11b 	.word	0x0800b11b
 800b0b8:	0800b1ab 	.word	0x0800b1ab
 800b0bc:	0800b06d 	.word	0x0800b06d
 800b0c0:	0800b06d 	.word	0x0800b06d
 800b0c4:	0800b213 	.word	0x0800b213
 800b0c8:	0800b06d 	.word	0x0800b06d
 800b0cc:	0800b11b 	.word	0x0800b11b
 800b0d0:	0800b06d 	.word	0x0800b06d
 800b0d4:	0800b06d 	.word	0x0800b06d
 800b0d8:	0800b1b3 	.word	0x0800b1b3
 800b0dc:	6833      	ldr	r3, [r6, #0]
 800b0de:	1d1a      	adds	r2, r3, #4
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6032      	str	r2, [r6, #0]
 800b0e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e09d      	b.n	800b22c <_printf_i+0x1e8>
 800b0f0:	6833      	ldr	r3, [r6, #0]
 800b0f2:	6820      	ldr	r0, [r4, #0]
 800b0f4:	1d19      	adds	r1, r3, #4
 800b0f6:	6031      	str	r1, [r6, #0]
 800b0f8:	0606      	lsls	r6, r0, #24
 800b0fa:	d501      	bpl.n	800b100 <_printf_i+0xbc>
 800b0fc:	681d      	ldr	r5, [r3, #0]
 800b0fe:	e003      	b.n	800b108 <_printf_i+0xc4>
 800b100:	0645      	lsls	r5, r0, #25
 800b102:	d5fb      	bpl.n	800b0fc <_printf_i+0xb8>
 800b104:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b108:	2d00      	cmp	r5, #0
 800b10a:	da03      	bge.n	800b114 <_printf_i+0xd0>
 800b10c:	232d      	movs	r3, #45	@ 0x2d
 800b10e:	426d      	negs	r5, r5
 800b110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b114:	4859      	ldr	r0, [pc, #356]	@ (800b27c <_printf_i+0x238>)
 800b116:	230a      	movs	r3, #10
 800b118:	e011      	b.n	800b13e <_printf_i+0xfa>
 800b11a:	6821      	ldr	r1, [r4, #0]
 800b11c:	6833      	ldr	r3, [r6, #0]
 800b11e:	0608      	lsls	r0, r1, #24
 800b120:	f853 5b04 	ldr.w	r5, [r3], #4
 800b124:	d402      	bmi.n	800b12c <_printf_i+0xe8>
 800b126:	0649      	lsls	r1, r1, #25
 800b128:	bf48      	it	mi
 800b12a:	b2ad      	uxthmi	r5, r5
 800b12c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b12e:	4853      	ldr	r0, [pc, #332]	@ (800b27c <_printf_i+0x238>)
 800b130:	6033      	str	r3, [r6, #0]
 800b132:	bf14      	ite	ne
 800b134:	230a      	movne	r3, #10
 800b136:	2308      	moveq	r3, #8
 800b138:	2100      	movs	r1, #0
 800b13a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b13e:	6866      	ldr	r6, [r4, #4]
 800b140:	60a6      	str	r6, [r4, #8]
 800b142:	2e00      	cmp	r6, #0
 800b144:	bfa2      	ittt	ge
 800b146:	6821      	ldrge	r1, [r4, #0]
 800b148:	f021 0104 	bicge.w	r1, r1, #4
 800b14c:	6021      	strge	r1, [r4, #0]
 800b14e:	b90d      	cbnz	r5, 800b154 <_printf_i+0x110>
 800b150:	2e00      	cmp	r6, #0
 800b152:	d04b      	beq.n	800b1ec <_printf_i+0x1a8>
 800b154:	4616      	mov	r6, r2
 800b156:	fbb5 f1f3 	udiv	r1, r5, r3
 800b15a:	fb03 5711 	mls	r7, r3, r1, r5
 800b15e:	5dc7      	ldrb	r7, [r0, r7]
 800b160:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b164:	462f      	mov	r7, r5
 800b166:	42bb      	cmp	r3, r7
 800b168:	460d      	mov	r5, r1
 800b16a:	d9f4      	bls.n	800b156 <_printf_i+0x112>
 800b16c:	2b08      	cmp	r3, #8
 800b16e:	d10b      	bne.n	800b188 <_printf_i+0x144>
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	07df      	lsls	r7, r3, #31
 800b174:	d508      	bpl.n	800b188 <_printf_i+0x144>
 800b176:	6923      	ldr	r3, [r4, #16]
 800b178:	6861      	ldr	r1, [r4, #4]
 800b17a:	4299      	cmp	r1, r3
 800b17c:	bfde      	ittt	le
 800b17e:	2330      	movle	r3, #48	@ 0x30
 800b180:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b184:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b188:	1b92      	subs	r2, r2, r6
 800b18a:	6122      	str	r2, [r4, #16]
 800b18c:	f8cd a000 	str.w	sl, [sp]
 800b190:	464b      	mov	r3, r9
 800b192:	aa03      	add	r2, sp, #12
 800b194:	4621      	mov	r1, r4
 800b196:	4640      	mov	r0, r8
 800b198:	f7ff fee6 	bl	800af68 <_printf_common>
 800b19c:	3001      	adds	r0, #1
 800b19e:	d14a      	bne.n	800b236 <_printf_i+0x1f2>
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	b004      	add	sp, #16
 800b1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	f043 0320 	orr.w	r3, r3, #32
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	4833      	ldr	r0, [pc, #204]	@ (800b280 <_printf_i+0x23c>)
 800b1b4:	2778      	movs	r7, #120	@ 0x78
 800b1b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	6831      	ldr	r1, [r6, #0]
 800b1be:	061f      	lsls	r7, r3, #24
 800b1c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1c4:	d402      	bmi.n	800b1cc <_printf_i+0x188>
 800b1c6:	065f      	lsls	r7, r3, #25
 800b1c8:	bf48      	it	mi
 800b1ca:	b2ad      	uxthmi	r5, r5
 800b1cc:	6031      	str	r1, [r6, #0]
 800b1ce:	07d9      	lsls	r1, r3, #31
 800b1d0:	bf44      	itt	mi
 800b1d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b1d6:	6023      	strmi	r3, [r4, #0]
 800b1d8:	b11d      	cbz	r5, 800b1e2 <_printf_i+0x19e>
 800b1da:	2310      	movs	r3, #16
 800b1dc:	e7ac      	b.n	800b138 <_printf_i+0xf4>
 800b1de:	4827      	ldr	r0, [pc, #156]	@ (800b27c <_printf_i+0x238>)
 800b1e0:	e7e9      	b.n	800b1b6 <_printf_i+0x172>
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	f023 0320 	bic.w	r3, r3, #32
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	e7f6      	b.n	800b1da <_printf_i+0x196>
 800b1ec:	4616      	mov	r6, r2
 800b1ee:	e7bd      	b.n	800b16c <_printf_i+0x128>
 800b1f0:	6833      	ldr	r3, [r6, #0]
 800b1f2:	6825      	ldr	r5, [r4, #0]
 800b1f4:	6961      	ldr	r1, [r4, #20]
 800b1f6:	1d18      	adds	r0, r3, #4
 800b1f8:	6030      	str	r0, [r6, #0]
 800b1fa:	062e      	lsls	r6, r5, #24
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	d501      	bpl.n	800b204 <_printf_i+0x1c0>
 800b200:	6019      	str	r1, [r3, #0]
 800b202:	e002      	b.n	800b20a <_printf_i+0x1c6>
 800b204:	0668      	lsls	r0, r5, #25
 800b206:	d5fb      	bpl.n	800b200 <_printf_i+0x1bc>
 800b208:	8019      	strh	r1, [r3, #0]
 800b20a:	2300      	movs	r3, #0
 800b20c:	6123      	str	r3, [r4, #16]
 800b20e:	4616      	mov	r6, r2
 800b210:	e7bc      	b.n	800b18c <_printf_i+0x148>
 800b212:	6833      	ldr	r3, [r6, #0]
 800b214:	1d1a      	adds	r2, r3, #4
 800b216:	6032      	str	r2, [r6, #0]
 800b218:	681e      	ldr	r6, [r3, #0]
 800b21a:	6862      	ldr	r2, [r4, #4]
 800b21c:	2100      	movs	r1, #0
 800b21e:	4630      	mov	r0, r6
 800b220:	f7f4 ffd6 	bl	80001d0 <memchr>
 800b224:	b108      	cbz	r0, 800b22a <_printf_i+0x1e6>
 800b226:	1b80      	subs	r0, r0, r6
 800b228:	6060      	str	r0, [r4, #4]
 800b22a:	6863      	ldr	r3, [r4, #4]
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	2300      	movs	r3, #0
 800b230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b234:	e7aa      	b.n	800b18c <_printf_i+0x148>
 800b236:	6923      	ldr	r3, [r4, #16]
 800b238:	4632      	mov	r2, r6
 800b23a:	4649      	mov	r1, r9
 800b23c:	4640      	mov	r0, r8
 800b23e:	47d0      	blx	sl
 800b240:	3001      	adds	r0, #1
 800b242:	d0ad      	beq.n	800b1a0 <_printf_i+0x15c>
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	079b      	lsls	r3, r3, #30
 800b248:	d413      	bmi.n	800b272 <_printf_i+0x22e>
 800b24a:	68e0      	ldr	r0, [r4, #12]
 800b24c:	9b03      	ldr	r3, [sp, #12]
 800b24e:	4298      	cmp	r0, r3
 800b250:	bfb8      	it	lt
 800b252:	4618      	movlt	r0, r3
 800b254:	e7a6      	b.n	800b1a4 <_printf_i+0x160>
 800b256:	2301      	movs	r3, #1
 800b258:	4632      	mov	r2, r6
 800b25a:	4649      	mov	r1, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	47d0      	blx	sl
 800b260:	3001      	adds	r0, #1
 800b262:	d09d      	beq.n	800b1a0 <_printf_i+0x15c>
 800b264:	3501      	adds	r5, #1
 800b266:	68e3      	ldr	r3, [r4, #12]
 800b268:	9903      	ldr	r1, [sp, #12]
 800b26a:	1a5b      	subs	r3, r3, r1
 800b26c:	42ab      	cmp	r3, r5
 800b26e:	dcf2      	bgt.n	800b256 <_printf_i+0x212>
 800b270:	e7eb      	b.n	800b24a <_printf_i+0x206>
 800b272:	2500      	movs	r5, #0
 800b274:	f104 0619 	add.w	r6, r4, #25
 800b278:	e7f5      	b.n	800b266 <_printf_i+0x222>
 800b27a:	bf00      	nop
 800b27c:	0800e98a 	.word	0x0800e98a
 800b280:	0800e99b 	.word	0x0800e99b

0800b284 <std>:
 800b284:	2300      	movs	r3, #0
 800b286:	b510      	push	{r4, lr}
 800b288:	4604      	mov	r4, r0
 800b28a:	e9c0 3300 	strd	r3, r3, [r0]
 800b28e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b292:	6083      	str	r3, [r0, #8]
 800b294:	8181      	strh	r1, [r0, #12]
 800b296:	6643      	str	r3, [r0, #100]	@ 0x64
 800b298:	81c2      	strh	r2, [r0, #14]
 800b29a:	6183      	str	r3, [r0, #24]
 800b29c:	4619      	mov	r1, r3
 800b29e:	2208      	movs	r2, #8
 800b2a0:	305c      	adds	r0, #92	@ 0x5c
 800b2a2:	f000 fa2d 	bl	800b700 <memset>
 800b2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2dc <std+0x58>)
 800b2a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e0 <std+0x5c>)
 800b2ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e4 <std+0x60>)
 800b2b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e8 <std+0x64>)
 800b2b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ec <std+0x68>)
 800b2b8:	6224      	str	r4, [r4, #32]
 800b2ba:	429c      	cmp	r4, r3
 800b2bc:	d006      	beq.n	800b2cc <std+0x48>
 800b2be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2c2:	4294      	cmp	r4, r2
 800b2c4:	d002      	beq.n	800b2cc <std+0x48>
 800b2c6:	33d0      	adds	r3, #208	@ 0xd0
 800b2c8:	429c      	cmp	r4, r3
 800b2ca:	d105      	bne.n	800b2d8 <std+0x54>
 800b2cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d4:	f000 bab6 	b.w	800b844 <__retarget_lock_init_recursive>
 800b2d8:	bd10      	pop	{r4, pc}
 800b2da:	bf00      	nop
 800b2dc:	0800b551 	.word	0x0800b551
 800b2e0:	0800b573 	.word	0x0800b573
 800b2e4:	0800b5ab 	.word	0x0800b5ab
 800b2e8:	0800b5cf 	.word	0x0800b5cf
 800b2ec:	200050f8 	.word	0x200050f8

0800b2f0 <stdio_exit_handler>:
 800b2f0:	4a02      	ldr	r2, [pc, #8]	@ (800b2fc <stdio_exit_handler+0xc>)
 800b2f2:	4903      	ldr	r1, [pc, #12]	@ (800b300 <stdio_exit_handler+0x10>)
 800b2f4:	4803      	ldr	r0, [pc, #12]	@ (800b304 <stdio_exit_handler+0x14>)
 800b2f6:	f000 b869 	b.w	800b3cc <_fwalk_sglue>
 800b2fa:	bf00      	nop
 800b2fc:	20000018 	.word	0x20000018
 800b300:	0800d2d5 	.word	0x0800d2d5
 800b304:	20000028 	.word	0x20000028

0800b308 <cleanup_stdio>:
 800b308:	6841      	ldr	r1, [r0, #4]
 800b30a:	4b0c      	ldr	r3, [pc, #48]	@ (800b33c <cleanup_stdio+0x34>)
 800b30c:	4299      	cmp	r1, r3
 800b30e:	b510      	push	{r4, lr}
 800b310:	4604      	mov	r4, r0
 800b312:	d001      	beq.n	800b318 <cleanup_stdio+0x10>
 800b314:	f001 ffde 	bl	800d2d4 <_fflush_r>
 800b318:	68a1      	ldr	r1, [r4, #8]
 800b31a:	4b09      	ldr	r3, [pc, #36]	@ (800b340 <cleanup_stdio+0x38>)
 800b31c:	4299      	cmp	r1, r3
 800b31e:	d002      	beq.n	800b326 <cleanup_stdio+0x1e>
 800b320:	4620      	mov	r0, r4
 800b322:	f001 ffd7 	bl	800d2d4 <_fflush_r>
 800b326:	68e1      	ldr	r1, [r4, #12]
 800b328:	4b06      	ldr	r3, [pc, #24]	@ (800b344 <cleanup_stdio+0x3c>)
 800b32a:	4299      	cmp	r1, r3
 800b32c:	d004      	beq.n	800b338 <cleanup_stdio+0x30>
 800b32e:	4620      	mov	r0, r4
 800b330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b334:	f001 bfce 	b.w	800d2d4 <_fflush_r>
 800b338:	bd10      	pop	{r4, pc}
 800b33a:	bf00      	nop
 800b33c:	200050f8 	.word	0x200050f8
 800b340:	20005160 	.word	0x20005160
 800b344:	200051c8 	.word	0x200051c8

0800b348 <global_stdio_init.part.0>:
 800b348:	b510      	push	{r4, lr}
 800b34a:	4b0b      	ldr	r3, [pc, #44]	@ (800b378 <global_stdio_init.part.0+0x30>)
 800b34c:	4c0b      	ldr	r4, [pc, #44]	@ (800b37c <global_stdio_init.part.0+0x34>)
 800b34e:	4a0c      	ldr	r2, [pc, #48]	@ (800b380 <global_stdio_init.part.0+0x38>)
 800b350:	601a      	str	r2, [r3, #0]
 800b352:	4620      	mov	r0, r4
 800b354:	2200      	movs	r2, #0
 800b356:	2104      	movs	r1, #4
 800b358:	f7ff ff94 	bl	800b284 <std>
 800b35c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b360:	2201      	movs	r2, #1
 800b362:	2109      	movs	r1, #9
 800b364:	f7ff ff8e 	bl	800b284 <std>
 800b368:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b36c:	2202      	movs	r2, #2
 800b36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b372:	2112      	movs	r1, #18
 800b374:	f7ff bf86 	b.w	800b284 <std>
 800b378:	20005230 	.word	0x20005230
 800b37c:	200050f8 	.word	0x200050f8
 800b380:	0800b2f1 	.word	0x0800b2f1

0800b384 <__sfp_lock_acquire>:
 800b384:	4801      	ldr	r0, [pc, #4]	@ (800b38c <__sfp_lock_acquire+0x8>)
 800b386:	f000 ba5e 	b.w	800b846 <__retarget_lock_acquire_recursive>
 800b38a:	bf00      	nop
 800b38c:	20005239 	.word	0x20005239

0800b390 <__sfp_lock_release>:
 800b390:	4801      	ldr	r0, [pc, #4]	@ (800b398 <__sfp_lock_release+0x8>)
 800b392:	f000 ba59 	b.w	800b848 <__retarget_lock_release_recursive>
 800b396:	bf00      	nop
 800b398:	20005239 	.word	0x20005239

0800b39c <__sinit>:
 800b39c:	b510      	push	{r4, lr}
 800b39e:	4604      	mov	r4, r0
 800b3a0:	f7ff fff0 	bl	800b384 <__sfp_lock_acquire>
 800b3a4:	6a23      	ldr	r3, [r4, #32]
 800b3a6:	b11b      	cbz	r3, 800b3b0 <__sinit+0x14>
 800b3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3ac:	f7ff bff0 	b.w	800b390 <__sfp_lock_release>
 800b3b0:	4b04      	ldr	r3, [pc, #16]	@ (800b3c4 <__sinit+0x28>)
 800b3b2:	6223      	str	r3, [r4, #32]
 800b3b4:	4b04      	ldr	r3, [pc, #16]	@ (800b3c8 <__sinit+0x2c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1f5      	bne.n	800b3a8 <__sinit+0xc>
 800b3bc:	f7ff ffc4 	bl	800b348 <global_stdio_init.part.0>
 800b3c0:	e7f2      	b.n	800b3a8 <__sinit+0xc>
 800b3c2:	bf00      	nop
 800b3c4:	0800b309 	.word	0x0800b309
 800b3c8:	20005230 	.word	0x20005230

0800b3cc <_fwalk_sglue>:
 800b3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	4688      	mov	r8, r1
 800b3d4:	4614      	mov	r4, r2
 800b3d6:	2600      	movs	r6, #0
 800b3d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b3e0:	d505      	bpl.n	800b3ee <_fwalk_sglue+0x22>
 800b3e2:	6824      	ldr	r4, [r4, #0]
 800b3e4:	2c00      	cmp	r4, #0
 800b3e6:	d1f7      	bne.n	800b3d8 <_fwalk_sglue+0xc>
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ee:	89ab      	ldrh	r3, [r5, #12]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d907      	bls.n	800b404 <_fwalk_sglue+0x38>
 800b3f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	d003      	beq.n	800b404 <_fwalk_sglue+0x38>
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	4638      	mov	r0, r7
 800b400:	47c0      	blx	r8
 800b402:	4306      	orrs	r6, r0
 800b404:	3568      	adds	r5, #104	@ 0x68
 800b406:	e7e9      	b.n	800b3dc <_fwalk_sglue+0x10>

0800b408 <iprintf>:
 800b408:	b40f      	push	{r0, r1, r2, r3}
 800b40a:	b507      	push	{r0, r1, r2, lr}
 800b40c:	4906      	ldr	r1, [pc, #24]	@ (800b428 <iprintf+0x20>)
 800b40e:	ab04      	add	r3, sp, #16
 800b410:	6808      	ldr	r0, [r1, #0]
 800b412:	f853 2b04 	ldr.w	r2, [r3], #4
 800b416:	6881      	ldr	r1, [r0, #8]
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	f001 fdbf 	bl	800cf9c <_vfiprintf_r>
 800b41e:	b003      	add	sp, #12
 800b420:	f85d eb04 	ldr.w	lr, [sp], #4
 800b424:	b004      	add	sp, #16
 800b426:	4770      	bx	lr
 800b428:	20000024 	.word	0x20000024

0800b42c <_puts_r>:
 800b42c:	6a03      	ldr	r3, [r0, #32]
 800b42e:	b570      	push	{r4, r5, r6, lr}
 800b430:	6884      	ldr	r4, [r0, #8]
 800b432:	4605      	mov	r5, r0
 800b434:	460e      	mov	r6, r1
 800b436:	b90b      	cbnz	r3, 800b43c <_puts_r+0x10>
 800b438:	f7ff ffb0 	bl	800b39c <__sinit>
 800b43c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b43e:	07db      	lsls	r3, r3, #31
 800b440:	d405      	bmi.n	800b44e <_puts_r+0x22>
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	0598      	lsls	r0, r3, #22
 800b446:	d402      	bmi.n	800b44e <_puts_r+0x22>
 800b448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b44a:	f000 f9fc 	bl	800b846 <__retarget_lock_acquire_recursive>
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	0719      	lsls	r1, r3, #28
 800b452:	d502      	bpl.n	800b45a <_puts_r+0x2e>
 800b454:	6923      	ldr	r3, [r4, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d135      	bne.n	800b4c6 <_puts_r+0x9a>
 800b45a:	4621      	mov	r1, r4
 800b45c:	4628      	mov	r0, r5
 800b45e:	f000 f8f9 	bl	800b654 <__swsetup_r>
 800b462:	b380      	cbz	r0, 800b4c6 <_puts_r+0x9a>
 800b464:	f04f 35ff 	mov.w	r5, #4294967295
 800b468:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b46a:	07da      	lsls	r2, r3, #31
 800b46c:	d405      	bmi.n	800b47a <_puts_r+0x4e>
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	059b      	lsls	r3, r3, #22
 800b472:	d402      	bmi.n	800b47a <_puts_r+0x4e>
 800b474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b476:	f000 f9e7 	bl	800b848 <__retarget_lock_release_recursive>
 800b47a:	4628      	mov	r0, r5
 800b47c:	bd70      	pop	{r4, r5, r6, pc}
 800b47e:	2b00      	cmp	r3, #0
 800b480:	da04      	bge.n	800b48c <_puts_r+0x60>
 800b482:	69a2      	ldr	r2, [r4, #24]
 800b484:	429a      	cmp	r2, r3
 800b486:	dc17      	bgt.n	800b4b8 <_puts_r+0x8c>
 800b488:	290a      	cmp	r1, #10
 800b48a:	d015      	beq.n	800b4b8 <_puts_r+0x8c>
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	1c5a      	adds	r2, r3, #1
 800b490:	6022      	str	r2, [r4, #0]
 800b492:	7019      	strb	r1, [r3, #0]
 800b494:	68a3      	ldr	r3, [r4, #8]
 800b496:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b49a:	3b01      	subs	r3, #1
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d1ed      	bne.n	800b47e <_puts_r+0x52>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da11      	bge.n	800b4ca <_puts_r+0x9e>
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	210a      	movs	r1, #10
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f000 f893 	bl	800b5d6 <__swbuf_r>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d0d7      	beq.n	800b464 <_puts_r+0x38>
 800b4b4:	250a      	movs	r5, #10
 800b4b6:	e7d7      	b.n	800b468 <_puts_r+0x3c>
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f000 f88b 	bl	800b5d6 <__swbuf_r>
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d1e7      	bne.n	800b494 <_puts_r+0x68>
 800b4c4:	e7ce      	b.n	800b464 <_puts_r+0x38>
 800b4c6:	3e01      	subs	r6, #1
 800b4c8:	e7e4      	b.n	800b494 <_puts_r+0x68>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	1c5a      	adds	r2, r3, #1
 800b4ce:	6022      	str	r2, [r4, #0]
 800b4d0:	220a      	movs	r2, #10
 800b4d2:	701a      	strb	r2, [r3, #0]
 800b4d4:	e7ee      	b.n	800b4b4 <_puts_r+0x88>
	...

0800b4d8 <puts>:
 800b4d8:	4b02      	ldr	r3, [pc, #8]	@ (800b4e4 <puts+0xc>)
 800b4da:	4601      	mov	r1, r0
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f7ff bfa5 	b.w	800b42c <_puts_r>
 800b4e2:	bf00      	nop
 800b4e4:	20000024 	.word	0x20000024

0800b4e8 <sniprintf>:
 800b4e8:	b40c      	push	{r2, r3}
 800b4ea:	b530      	push	{r4, r5, lr}
 800b4ec:	4b17      	ldr	r3, [pc, #92]	@ (800b54c <sniprintf+0x64>)
 800b4ee:	1e0c      	subs	r4, r1, #0
 800b4f0:	681d      	ldr	r5, [r3, #0]
 800b4f2:	b09d      	sub	sp, #116	@ 0x74
 800b4f4:	da08      	bge.n	800b508 <sniprintf+0x20>
 800b4f6:	238b      	movs	r3, #139	@ 0x8b
 800b4f8:	602b      	str	r3, [r5, #0]
 800b4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fe:	b01d      	add	sp, #116	@ 0x74
 800b500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b504:	b002      	add	sp, #8
 800b506:	4770      	bx	lr
 800b508:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b50c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b510:	bf14      	ite	ne
 800b512:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b516:	4623      	moveq	r3, r4
 800b518:	9304      	str	r3, [sp, #16]
 800b51a:	9307      	str	r3, [sp, #28]
 800b51c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b520:	9002      	str	r0, [sp, #8]
 800b522:	9006      	str	r0, [sp, #24]
 800b524:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b528:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b52a:	ab21      	add	r3, sp, #132	@ 0x84
 800b52c:	a902      	add	r1, sp, #8
 800b52e:	4628      	mov	r0, r5
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	f001 fc0d 	bl	800cd50 <_svfiprintf_r>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	bfbc      	itt	lt
 800b53a:	238b      	movlt	r3, #139	@ 0x8b
 800b53c:	602b      	strlt	r3, [r5, #0]
 800b53e:	2c00      	cmp	r4, #0
 800b540:	d0dd      	beq.n	800b4fe <sniprintf+0x16>
 800b542:	9b02      	ldr	r3, [sp, #8]
 800b544:	2200      	movs	r2, #0
 800b546:	701a      	strb	r2, [r3, #0]
 800b548:	e7d9      	b.n	800b4fe <sniprintf+0x16>
 800b54a:	bf00      	nop
 800b54c:	20000024 	.word	0x20000024

0800b550 <__sread>:
 800b550:	b510      	push	{r4, lr}
 800b552:	460c      	mov	r4, r1
 800b554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b558:	f000 f916 	bl	800b788 <_read_r>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	bfab      	itete	ge
 800b560:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b562:	89a3      	ldrhlt	r3, [r4, #12]
 800b564:	181b      	addge	r3, r3, r0
 800b566:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b56a:	bfac      	ite	ge
 800b56c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b56e:	81a3      	strhlt	r3, [r4, #12]
 800b570:	bd10      	pop	{r4, pc}

0800b572 <__swrite>:
 800b572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b576:	461f      	mov	r7, r3
 800b578:	898b      	ldrh	r3, [r1, #12]
 800b57a:	05db      	lsls	r3, r3, #23
 800b57c:	4605      	mov	r5, r0
 800b57e:	460c      	mov	r4, r1
 800b580:	4616      	mov	r6, r2
 800b582:	d505      	bpl.n	800b590 <__swrite+0x1e>
 800b584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b588:	2302      	movs	r3, #2
 800b58a:	2200      	movs	r2, #0
 800b58c:	f000 f8ea 	bl	800b764 <_lseek_r>
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b596:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b59a:	81a3      	strh	r3, [r4, #12]
 800b59c:	4632      	mov	r2, r6
 800b59e:	463b      	mov	r3, r7
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a6:	f000 b911 	b.w	800b7cc <_write_r>

0800b5aa <__sseek>:
 800b5aa:	b510      	push	{r4, lr}
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b2:	f000 f8d7 	bl	800b764 <_lseek_r>
 800b5b6:	1c43      	adds	r3, r0, #1
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	bf15      	itete	ne
 800b5bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5c6:	81a3      	strheq	r3, [r4, #12]
 800b5c8:	bf18      	it	ne
 800b5ca:	81a3      	strhne	r3, [r4, #12]
 800b5cc:	bd10      	pop	{r4, pc}

0800b5ce <__sclose>:
 800b5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d2:	f000 b8b7 	b.w	800b744 <_close_r>

0800b5d6 <__swbuf_r>:
 800b5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d8:	460e      	mov	r6, r1
 800b5da:	4614      	mov	r4, r2
 800b5dc:	4605      	mov	r5, r0
 800b5de:	b118      	cbz	r0, 800b5e8 <__swbuf_r+0x12>
 800b5e0:	6a03      	ldr	r3, [r0, #32]
 800b5e2:	b90b      	cbnz	r3, 800b5e8 <__swbuf_r+0x12>
 800b5e4:	f7ff feda 	bl	800b39c <__sinit>
 800b5e8:	69a3      	ldr	r3, [r4, #24]
 800b5ea:	60a3      	str	r3, [r4, #8]
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	071a      	lsls	r2, r3, #28
 800b5f0:	d501      	bpl.n	800b5f6 <__swbuf_r+0x20>
 800b5f2:	6923      	ldr	r3, [r4, #16]
 800b5f4:	b943      	cbnz	r3, 800b608 <__swbuf_r+0x32>
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f000 f82b 	bl	800b654 <__swsetup_r>
 800b5fe:	b118      	cbz	r0, 800b608 <__swbuf_r+0x32>
 800b600:	f04f 37ff 	mov.w	r7, #4294967295
 800b604:	4638      	mov	r0, r7
 800b606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	6922      	ldr	r2, [r4, #16]
 800b60c:	1a98      	subs	r0, r3, r2
 800b60e:	6963      	ldr	r3, [r4, #20]
 800b610:	b2f6      	uxtb	r6, r6
 800b612:	4283      	cmp	r3, r0
 800b614:	4637      	mov	r7, r6
 800b616:	dc05      	bgt.n	800b624 <__swbuf_r+0x4e>
 800b618:	4621      	mov	r1, r4
 800b61a:	4628      	mov	r0, r5
 800b61c:	f001 fe5a 	bl	800d2d4 <_fflush_r>
 800b620:	2800      	cmp	r0, #0
 800b622:	d1ed      	bne.n	800b600 <__swbuf_r+0x2a>
 800b624:	68a3      	ldr	r3, [r4, #8]
 800b626:	3b01      	subs	r3, #1
 800b628:	60a3      	str	r3, [r4, #8]
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	6022      	str	r2, [r4, #0]
 800b630:	701e      	strb	r6, [r3, #0]
 800b632:	6962      	ldr	r2, [r4, #20]
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	429a      	cmp	r2, r3
 800b638:	d004      	beq.n	800b644 <__swbuf_r+0x6e>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	07db      	lsls	r3, r3, #31
 800b63e:	d5e1      	bpl.n	800b604 <__swbuf_r+0x2e>
 800b640:	2e0a      	cmp	r6, #10
 800b642:	d1df      	bne.n	800b604 <__swbuf_r+0x2e>
 800b644:	4621      	mov	r1, r4
 800b646:	4628      	mov	r0, r5
 800b648:	f001 fe44 	bl	800d2d4 <_fflush_r>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d0d9      	beq.n	800b604 <__swbuf_r+0x2e>
 800b650:	e7d6      	b.n	800b600 <__swbuf_r+0x2a>
	...

0800b654 <__swsetup_r>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	4b29      	ldr	r3, [pc, #164]	@ (800b6fc <__swsetup_r+0xa8>)
 800b658:	4605      	mov	r5, r0
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	460c      	mov	r4, r1
 800b65e:	b118      	cbz	r0, 800b668 <__swsetup_r+0x14>
 800b660:	6a03      	ldr	r3, [r0, #32]
 800b662:	b90b      	cbnz	r3, 800b668 <__swsetup_r+0x14>
 800b664:	f7ff fe9a 	bl	800b39c <__sinit>
 800b668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b66c:	0719      	lsls	r1, r3, #28
 800b66e:	d422      	bmi.n	800b6b6 <__swsetup_r+0x62>
 800b670:	06da      	lsls	r2, r3, #27
 800b672:	d407      	bmi.n	800b684 <__swsetup_r+0x30>
 800b674:	2209      	movs	r2, #9
 800b676:	602a      	str	r2, [r5, #0]
 800b678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295
 800b682:	e033      	b.n	800b6ec <__swsetup_r+0x98>
 800b684:	0758      	lsls	r0, r3, #29
 800b686:	d512      	bpl.n	800b6ae <__swsetup_r+0x5a>
 800b688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b68a:	b141      	cbz	r1, 800b69e <__swsetup_r+0x4a>
 800b68c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b690:	4299      	cmp	r1, r3
 800b692:	d002      	beq.n	800b69a <__swsetup_r+0x46>
 800b694:	4628      	mov	r0, r5
 800b696:	f000 ff33 	bl	800c500 <_free_r>
 800b69a:	2300      	movs	r3, #0
 800b69c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	6923      	ldr	r3, [r4, #16]
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f043 0308 	orr.w	r3, r3, #8
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	b94b      	cbnz	r3, 800b6ce <__swsetup_r+0x7a>
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6c4:	d003      	beq.n	800b6ce <__swsetup_r+0x7a>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f001 fe51 	bl	800d370 <__smakebuf_r>
 800b6ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d2:	f013 0201 	ands.w	r2, r3, #1
 800b6d6:	d00a      	beq.n	800b6ee <__swsetup_r+0x9a>
 800b6d8:	2200      	movs	r2, #0
 800b6da:	60a2      	str	r2, [r4, #8]
 800b6dc:	6962      	ldr	r2, [r4, #20]
 800b6de:	4252      	negs	r2, r2
 800b6e0:	61a2      	str	r2, [r4, #24]
 800b6e2:	6922      	ldr	r2, [r4, #16]
 800b6e4:	b942      	cbnz	r2, 800b6f8 <__swsetup_r+0xa4>
 800b6e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6ea:	d1c5      	bne.n	800b678 <__swsetup_r+0x24>
 800b6ec:	bd38      	pop	{r3, r4, r5, pc}
 800b6ee:	0799      	lsls	r1, r3, #30
 800b6f0:	bf58      	it	pl
 800b6f2:	6962      	ldrpl	r2, [r4, #20]
 800b6f4:	60a2      	str	r2, [r4, #8]
 800b6f6:	e7f4      	b.n	800b6e2 <__swsetup_r+0x8e>
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	e7f7      	b.n	800b6ec <__swsetup_r+0x98>
 800b6fc:	20000024 	.word	0x20000024

0800b700 <memset>:
 800b700:	4402      	add	r2, r0
 800b702:	4603      	mov	r3, r0
 800b704:	4293      	cmp	r3, r2
 800b706:	d100      	bne.n	800b70a <memset+0xa>
 800b708:	4770      	bx	lr
 800b70a:	f803 1b01 	strb.w	r1, [r3], #1
 800b70e:	e7f9      	b.n	800b704 <memset+0x4>

0800b710 <strstr>:
 800b710:	780a      	ldrb	r2, [r1, #0]
 800b712:	b570      	push	{r4, r5, r6, lr}
 800b714:	b96a      	cbnz	r2, 800b732 <strstr+0x22>
 800b716:	bd70      	pop	{r4, r5, r6, pc}
 800b718:	429a      	cmp	r2, r3
 800b71a:	d109      	bne.n	800b730 <strstr+0x20>
 800b71c:	460c      	mov	r4, r1
 800b71e:	4605      	mov	r5, r0
 800b720:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b724:	2b00      	cmp	r3, #0
 800b726:	d0f6      	beq.n	800b716 <strstr+0x6>
 800b728:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b72c:	429e      	cmp	r6, r3
 800b72e:	d0f7      	beq.n	800b720 <strstr+0x10>
 800b730:	3001      	adds	r0, #1
 800b732:	7803      	ldrb	r3, [r0, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1ef      	bne.n	800b718 <strstr+0x8>
 800b738:	4618      	mov	r0, r3
 800b73a:	e7ec      	b.n	800b716 <strstr+0x6>

0800b73c <_localeconv_r>:
 800b73c:	4800      	ldr	r0, [pc, #0]	@ (800b740 <_localeconv_r+0x4>)
 800b73e:	4770      	bx	lr
 800b740:	20000164 	.word	0x20000164

0800b744 <_close_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d06      	ldr	r5, [pc, #24]	@ (800b760 <_close_r+0x1c>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	f7f8 fb78 	bl	8003e44 <_close>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_close_r+0x1a>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_close_r+0x1a>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20005234 	.word	0x20005234

0800b764 <_lseek_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	@ (800b784 <_lseek_r+0x20>)
 800b768:	4604      	mov	r4, r0
 800b76a:	4608      	mov	r0, r1
 800b76c:	4611      	mov	r1, r2
 800b76e:	2200      	movs	r2, #0
 800b770:	602a      	str	r2, [r5, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	f7f8 fb8d 	bl	8003e92 <_lseek>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_lseek_r+0x1e>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_lseek_r+0x1e>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	20005234 	.word	0x20005234

0800b788 <_read_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d07      	ldr	r5, [pc, #28]	@ (800b7a8 <_read_r+0x20>)
 800b78c:	4604      	mov	r4, r0
 800b78e:	4608      	mov	r0, r1
 800b790:	4611      	mov	r1, r2
 800b792:	2200      	movs	r2, #0
 800b794:	602a      	str	r2, [r5, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	f7f8 fb37 	bl	8003e0a <_read>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d102      	bne.n	800b7a6 <_read_r+0x1e>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	b103      	cbz	r3, 800b7a6 <_read_r+0x1e>
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	bd38      	pop	{r3, r4, r5, pc}
 800b7a8:	20005234 	.word	0x20005234

0800b7ac <_sbrk_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	@ (800b7c8 <_sbrk_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f8 fb78 	bl	8003eac <_sbrk>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_sbrk_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_sbrk_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20005234 	.word	0x20005234

0800b7cc <_write_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	@ (800b7ec <_write_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f7 fa1e 	bl	8002c1c <_write>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_write_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_write_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20005234 	.word	0x20005234

0800b7f0 <__errno>:
 800b7f0:	4b01      	ldr	r3, [pc, #4]	@ (800b7f8 <__errno+0x8>)
 800b7f2:	6818      	ldr	r0, [r3, #0]
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	20000024 	.word	0x20000024

0800b7fc <__libc_init_array>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	4d0d      	ldr	r5, [pc, #52]	@ (800b834 <__libc_init_array+0x38>)
 800b800:	4c0d      	ldr	r4, [pc, #52]	@ (800b838 <__libc_init_array+0x3c>)
 800b802:	1b64      	subs	r4, r4, r5
 800b804:	10a4      	asrs	r4, r4, #2
 800b806:	2600      	movs	r6, #0
 800b808:	42a6      	cmp	r6, r4
 800b80a:	d109      	bne.n	800b820 <__libc_init_array+0x24>
 800b80c:	4d0b      	ldr	r5, [pc, #44]	@ (800b83c <__libc_init_array+0x40>)
 800b80e:	4c0c      	ldr	r4, [pc, #48]	@ (800b840 <__libc_init_array+0x44>)
 800b810:	f001 ff0c 	bl	800d62c <_init>
 800b814:	1b64      	subs	r4, r4, r5
 800b816:	10a4      	asrs	r4, r4, #2
 800b818:	2600      	movs	r6, #0
 800b81a:	42a6      	cmp	r6, r4
 800b81c:	d105      	bne.n	800b82a <__libc_init_array+0x2e>
 800b81e:	bd70      	pop	{r4, r5, r6, pc}
 800b820:	f855 3b04 	ldr.w	r3, [r5], #4
 800b824:	4798      	blx	r3
 800b826:	3601      	adds	r6, #1
 800b828:	e7ee      	b.n	800b808 <__libc_init_array+0xc>
 800b82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b82e:	4798      	blx	r3
 800b830:	3601      	adds	r6, #1
 800b832:	e7f2      	b.n	800b81a <__libc_init_array+0x1e>
 800b834:	0800ecf0 	.word	0x0800ecf0
 800b838:	0800ecf0 	.word	0x0800ecf0
 800b83c:	0800ecf0 	.word	0x0800ecf0
 800b840:	0800ecf4 	.word	0x0800ecf4

0800b844 <__retarget_lock_init_recursive>:
 800b844:	4770      	bx	lr

0800b846 <__retarget_lock_acquire_recursive>:
 800b846:	4770      	bx	lr

0800b848 <__retarget_lock_release_recursive>:
 800b848:	4770      	bx	lr

0800b84a <memcpy>:
 800b84a:	440a      	add	r2, r1
 800b84c:	4291      	cmp	r1, r2
 800b84e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b852:	d100      	bne.n	800b856 <memcpy+0xc>
 800b854:	4770      	bx	lr
 800b856:	b510      	push	{r4, lr}
 800b858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b85c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b860:	4291      	cmp	r1, r2
 800b862:	d1f9      	bne.n	800b858 <memcpy+0xe>
 800b864:	bd10      	pop	{r4, pc}

0800b866 <quorem>:
 800b866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86a:	6903      	ldr	r3, [r0, #16]
 800b86c:	690c      	ldr	r4, [r1, #16]
 800b86e:	42a3      	cmp	r3, r4
 800b870:	4607      	mov	r7, r0
 800b872:	db7e      	blt.n	800b972 <quorem+0x10c>
 800b874:	3c01      	subs	r4, #1
 800b876:	f101 0814 	add.w	r8, r1, #20
 800b87a:	00a3      	lsls	r3, r4, #2
 800b87c:	f100 0514 	add.w	r5, r0, #20
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b88c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b890:	3301      	adds	r3, #1
 800b892:	429a      	cmp	r2, r3
 800b894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b898:	fbb2 f6f3 	udiv	r6, r2, r3
 800b89c:	d32e      	bcc.n	800b8fc <quorem+0x96>
 800b89e:	f04f 0a00 	mov.w	sl, #0
 800b8a2:	46c4      	mov	ip, r8
 800b8a4:	46ae      	mov	lr, r5
 800b8a6:	46d3      	mov	fp, sl
 800b8a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b8ac:	b298      	uxth	r0, r3
 800b8ae:	fb06 a000 	mla	r0, r6, r0, sl
 800b8b2:	0c02      	lsrs	r2, r0, #16
 800b8b4:	0c1b      	lsrs	r3, r3, #16
 800b8b6:	fb06 2303 	mla	r3, r6, r3, r2
 800b8ba:	f8de 2000 	ldr.w	r2, [lr]
 800b8be:	b280      	uxth	r0, r0
 800b8c0:	b292      	uxth	r2, r2
 800b8c2:	1a12      	subs	r2, r2, r0
 800b8c4:	445a      	add	r2, fp
 800b8c6:	f8de 0000 	ldr.w	r0, [lr]
 800b8ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b8d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b8d8:	b292      	uxth	r2, r2
 800b8da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8de:	45e1      	cmp	r9, ip
 800b8e0:	f84e 2b04 	str.w	r2, [lr], #4
 800b8e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b8e8:	d2de      	bcs.n	800b8a8 <quorem+0x42>
 800b8ea:	9b00      	ldr	r3, [sp, #0]
 800b8ec:	58eb      	ldr	r3, [r5, r3]
 800b8ee:	b92b      	cbnz	r3, 800b8fc <quorem+0x96>
 800b8f0:	9b01      	ldr	r3, [sp, #4]
 800b8f2:	3b04      	subs	r3, #4
 800b8f4:	429d      	cmp	r5, r3
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	d32f      	bcc.n	800b95a <quorem+0xf4>
 800b8fa:	613c      	str	r4, [r7, #16]
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	f001 f8c3 	bl	800ca88 <__mcmp>
 800b902:	2800      	cmp	r0, #0
 800b904:	db25      	blt.n	800b952 <quorem+0xec>
 800b906:	4629      	mov	r1, r5
 800b908:	2000      	movs	r0, #0
 800b90a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b90e:	f8d1 c000 	ldr.w	ip, [r1]
 800b912:	fa1f fe82 	uxth.w	lr, r2
 800b916:	fa1f f38c 	uxth.w	r3, ip
 800b91a:	eba3 030e 	sub.w	r3, r3, lr
 800b91e:	4403      	add	r3, r0
 800b920:	0c12      	lsrs	r2, r2, #16
 800b922:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b926:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b930:	45c1      	cmp	r9, r8
 800b932:	f841 3b04 	str.w	r3, [r1], #4
 800b936:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b93a:	d2e6      	bcs.n	800b90a <quorem+0xa4>
 800b93c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b940:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b944:	b922      	cbnz	r2, 800b950 <quorem+0xea>
 800b946:	3b04      	subs	r3, #4
 800b948:	429d      	cmp	r5, r3
 800b94a:	461a      	mov	r2, r3
 800b94c:	d30b      	bcc.n	800b966 <quorem+0x100>
 800b94e:	613c      	str	r4, [r7, #16]
 800b950:	3601      	adds	r6, #1
 800b952:	4630      	mov	r0, r6
 800b954:	b003      	add	sp, #12
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95a:	6812      	ldr	r2, [r2, #0]
 800b95c:	3b04      	subs	r3, #4
 800b95e:	2a00      	cmp	r2, #0
 800b960:	d1cb      	bne.n	800b8fa <quorem+0x94>
 800b962:	3c01      	subs	r4, #1
 800b964:	e7c6      	b.n	800b8f4 <quorem+0x8e>
 800b966:	6812      	ldr	r2, [r2, #0]
 800b968:	3b04      	subs	r3, #4
 800b96a:	2a00      	cmp	r2, #0
 800b96c:	d1ef      	bne.n	800b94e <quorem+0xe8>
 800b96e:	3c01      	subs	r4, #1
 800b970:	e7ea      	b.n	800b948 <quorem+0xe2>
 800b972:	2000      	movs	r0, #0
 800b974:	e7ee      	b.n	800b954 <quorem+0xee>
	...

0800b978 <_dtoa_r>:
 800b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	69c7      	ldr	r7, [r0, #28]
 800b97e:	b099      	sub	sp, #100	@ 0x64
 800b980:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b984:	ec55 4b10 	vmov	r4, r5, d0
 800b988:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b98a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b98c:	4683      	mov	fp, r0
 800b98e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b990:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b992:	b97f      	cbnz	r7, 800b9b4 <_dtoa_r+0x3c>
 800b994:	2010      	movs	r0, #16
 800b996:	f7fe ff5f 	bl	800a858 <malloc>
 800b99a:	4602      	mov	r2, r0
 800b99c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b9a0:	b920      	cbnz	r0, 800b9ac <_dtoa_r+0x34>
 800b9a2:	4ba7      	ldr	r3, [pc, #668]	@ (800bc40 <_dtoa_r+0x2c8>)
 800b9a4:	21ef      	movs	r1, #239	@ 0xef
 800b9a6:	48a7      	ldr	r0, [pc, #668]	@ (800bc44 <_dtoa_r+0x2cc>)
 800b9a8:	f001 fd5a 	bl	800d460 <__assert_func>
 800b9ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b9b0:	6007      	str	r7, [r0, #0]
 800b9b2:	60c7      	str	r7, [r0, #12]
 800b9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9b8:	6819      	ldr	r1, [r3, #0]
 800b9ba:	b159      	cbz	r1, 800b9d4 <_dtoa_r+0x5c>
 800b9bc:	685a      	ldr	r2, [r3, #4]
 800b9be:	604a      	str	r2, [r1, #4]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	4093      	lsls	r3, r2
 800b9c4:	608b      	str	r3, [r1, #8]
 800b9c6:	4658      	mov	r0, fp
 800b9c8:	f000 fe24 	bl	800c614 <_Bfree>
 800b9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	1e2b      	subs	r3, r5, #0
 800b9d6:	bfb9      	ittee	lt
 800b9d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b9dc:	9303      	strlt	r3, [sp, #12]
 800b9de:	2300      	movge	r3, #0
 800b9e0:	6033      	strge	r3, [r6, #0]
 800b9e2:	9f03      	ldr	r7, [sp, #12]
 800b9e4:	4b98      	ldr	r3, [pc, #608]	@ (800bc48 <_dtoa_r+0x2d0>)
 800b9e6:	bfbc      	itt	lt
 800b9e8:	2201      	movlt	r2, #1
 800b9ea:	6032      	strlt	r2, [r6, #0]
 800b9ec:	43bb      	bics	r3, r7
 800b9ee:	d112      	bne.n	800ba16 <_dtoa_r+0x9e>
 800b9f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9fc:	4323      	orrs	r3, r4
 800b9fe:	f000 854d 	beq.w	800c49c <_dtoa_r+0xb24>
 800ba02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bc5c <_dtoa_r+0x2e4>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 854f 	beq.w	800c4ac <_dtoa_r+0xb34>
 800ba0e:	f10a 0303 	add.w	r3, sl, #3
 800ba12:	f000 bd49 	b.w	800c4a8 <_dtoa_r+0xb30>
 800ba16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	ec51 0b17 	vmov	r0, r1, d7
 800ba20:	2300      	movs	r3, #0
 800ba22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ba26:	f7f5 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba2a:	4680      	mov	r8, r0
 800ba2c:	b158      	cbz	r0, 800ba46 <_dtoa_r+0xce>
 800ba2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ba30:	2301      	movs	r3, #1
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba36:	b113      	cbz	r3, 800ba3e <_dtoa_r+0xc6>
 800ba38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba3a:	4b84      	ldr	r3, [pc, #528]	@ (800bc4c <_dtoa_r+0x2d4>)
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bc60 <_dtoa_r+0x2e8>
 800ba42:	f000 bd33 	b.w	800c4ac <_dtoa_r+0xb34>
 800ba46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ba4a:	aa16      	add	r2, sp, #88	@ 0x58
 800ba4c:	a917      	add	r1, sp, #92	@ 0x5c
 800ba4e:	4658      	mov	r0, fp
 800ba50:	f001 f8ca 	bl	800cbe8 <__d2b>
 800ba54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ba58:	4681      	mov	r9, r0
 800ba5a:	2e00      	cmp	r6, #0
 800ba5c:	d077      	beq.n	800bb4e <_dtoa_r+0x1d6>
 800ba5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ba64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ba70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba78:	4619      	mov	r1, r3
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	4b74      	ldr	r3, [pc, #464]	@ (800bc50 <_dtoa_r+0x2d8>)
 800ba7e:	f7f4 fc03 	bl	8000288 <__aeabi_dsub>
 800ba82:	a369      	add	r3, pc, #420	@ (adr r3, 800bc28 <_dtoa_r+0x2b0>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f7f4 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ba8c:	a368      	add	r3, pc, #416	@ (adr r3, 800bc30 <_dtoa_r+0x2b8>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f7f4 fbfb 	bl	800028c <__adddf3>
 800ba96:	4604      	mov	r4, r0
 800ba98:	4630      	mov	r0, r6
 800ba9a:	460d      	mov	r5, r1
 800ba9c:	f7f4 fd42 	bl	8000524 <__aeabi_i2d>
 800baa0:	a365      	add	r3, pc, #404	@ (adr r3, 800bc38 <_dtoa_r+0x2c0>)
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	f7f4 fda7 	bl	80005f8 <__aeabi_dmul>
 800baaa:	4602      	mov	r2, r0
 800baac:	460b      	mov	r3, r1
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	f7f4 fbeb 	bl	800028c <__adddf3>
 800bab6:	4604      	mov	r4, r0
 800bab8:	460d      	mov	r5, r1
 800baba:	f7f5 f84d 	bl	8000b58 <__aeabi_d2iz>
 800babe:	2200      	movs	r2, #0
 800bac0:	4607      	mov	r7, r0
 800bac2:	2300      	movs	r3, #0
 800bac4:	4620      	mov	r0, r4
 800bac6:	4629      	mov	r1, r5
 800bac8:	f7f5 f808 	bl	8000adc <__aeabi_dcmplt>
 800bacc:	b140      	cbz	r0, 800bae0 <_dtoa_r+0x168>
 800bace:	4638      	mov	r0, r7
 800bad0:	f7f4 fd28 	bl	8000524 <__aeabi_i2d>
 800bad4:	4622      	mov	r2, r4
 800bad6:	462b      	mov	r3, r5
 800bad8:	f7f4 fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 800badc:	b900      	cbnz	r0, 800bae0 <_dtoa_r+0x168>
 800bade:	3f01      	subs	r7, #1
 800bae0:	2f16      	cmp	r7, #22
 800bae2:	d851      	bhi.n	800bb88 <_dtoa_r+0x210>
 800bae4:	4b5b      	ldr	r3, [pc, #364]	@ (800bc54 <_dtoa_r+0x2dc>)
 800bae6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800baf2:	f7f4 fff3 	bl	8000adc <__aeabi_dcmplt>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d048      	beq.n	800bb8c <_dtoa_r+0x214>
 800bafa:	3f01      	subs	r7, #1
 800bafc:	2300      	movs	r3, #0
 800bafe:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bb02:	1b9b      	subs	r3, r3, r6
 800bb04:	1e5a      	subs	r2, r3, #1
 800bb06:	bf44      	itt	mi
 800bb08:	f1c3 0801 	rsbmi	r8, r3, #1
 800bb0c:	2300      	movmi	r3, #0
 800bb0e:	9208      	str	r2, [sp, #32]
 800bb10:	bf54      	ite	pl
 800bb12:	f04f 0800 	movpl.w	r8, #0
 800bb16:	9308      	strmi	r3, [sp, #32]
 800bb18:	2f00      	cmp	r7, #0
 800bb1a:	db39      	blt.n	800bb90 <_dtoa_r+0x218>
 800bb1c:	9b08      	ldr	r3, [sp, #32]
 800bb1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bb20:	443b      	add	r3, r7
 800bb22:	9308      	str	r3, [sp, #32]
 800bb24:	2300      	movs	r3, #0
 800bb26:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2a:	2b09      	cmp	r3, #9
 800bb2c:	d864      	bhi.n	800bbf8 <_dtoa_r+0x280>
 800bb2e:	2b05      	cmp	r3, #5
 800bb30:	bfc4      	itt	gt
 800bb32:	3b04      	subgt	r3, #4
 800bb34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb38:	f1a3 0302 	sub.w	r3, r3, #2
 800bb3c:	bfcc      	ite	gt
 800bb3e:	2400      	movgt	r4, #0
 800bb40:	2401      	movle	r4, #1
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d863      	bhi.n	800bc0e <_dtoa_r+0x296>
 800bb46:	e8df f003 	tbb	[pc, r3]
 800bb4a:	372a      	.short	0x372a
 800bb4c:	5535      	.short	0x5535
 800bb4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bb52:	441e      	add	r6, r3
 800bb54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bb58:	2b20      	cmp	r3, #32
 800bb5a:	bfc1      	itttt	gt
 800bb5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bb60:	409f      	lslgt	r7, r3
 800bb62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bb66:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bb6a:	bfd6      	itet	le
 800bb6c:	f1c3 0320 	rsble	r3, r3, #32
 800bb70:	ea47 0003 	orrgt.w	r0, r7, r3
 800bb74:	fa04 f003 	lslle.w	r0, r4, r3
 800bb78:	f7f4 fcc4 	bl	8000504 <__aeabi_ui2d>
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb82:	3e01      	subs	r6, #1
 800bb84:	9214      	str	r2, [sp, #80]	@ 0x50
 800bb86:	e777      	b.n	800ba78 <_dtoa_r+0x100>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e7b8      	b.n	800bafe <_dtoa_r+0x186>
 800bb8c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bb8e:	e7b7      	b.n	800bb00 <_dtoa_r+0x188>
 800bb90:	427b      	negs	r3, r7
 800bb92:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb94:	2300      	movs	r3, #0
 800bb96:	eba8 0807 	sub.w	r8, r8, r7
 800bb9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb9c:	e7c4      	b.n	800bb28 <_dtoa_r+0x1b0>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	dc35      	bgt.n	800bc14 <_dtoa_r+0x29c>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	9307      	str	r3, [sp, #28]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbb2:	e00b      	b.n	800bbcc <_dtoa_r+0x254>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e7f3      	b.n	800bba0 <_dtoa_r+0x228>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbbe:	18fb      	adds	r3, r7, r3
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	9307      	str	r3, [sp, #28]
 800bbc8:	bfb8      	it	lt
 800bbca:	2301      	movlt	r3, #1
 800bbcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	2204      	movs	r2, #4
 800bbd4:	f102 0514 	add.w	r5, r2, #20
 800bbd8:	429d      	cmp	r5, r3
 800bbda:	d91f      	bls.n	800bc1c <_dtoa_r+0x2a4>
 800bbdc:	6041      	str	r1, [r0, #4]
 800bbde:	4658      	mov	r0, fp
 800bbe0:	f000 fcd8 	bl	800c594 <_Balloc>
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d13c      	bne.n	800bc64 <_dtoa_r+0x2ec>
 800bbea:	4b1b      	ldr	r3, [pc, #108]	@ (800bc58 <_dtoa_r+0x2e0>)
 800bbec:	4602      	mov	r2, r0
 800bbee:	f240 11af 	movw	r1, #431	@ 0x1af
 800bbf2:	e6d8      	b.n	800b9a6 <_dtoa_r+0x2e>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e7e0      	b.n	800bbba <_dtoa_r+0x242>
 800bbf8:	2401      	movs	r4, #1
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc00:	f04f 33ff 	mov.w	r3, #4294967295
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	9307      	str	r3, [sp, #28]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	2312      	movs	r3, #18
 800bc0c:	e7d0      	b.n	800bbb0 <_dtoa_r+0x238>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc12:	e7f5      	b.n	800bc00 <_dtoa_r+0x288>
 800bc14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	9307      	str	r3, [sp, #28]
 800bc1a:	e7d7      	b.n	800bbcc <_dtoa_r+0x254>
 800bc1c:	3101      	adds	r1, #1
 800bc1e:	0052      	lsls	r2, r2, #1
 800bc20:	e7d8      	b.n	800bbd4 <_dtoa_r+0x25c>
 800bc22:	bf00      	nop
 800bc24:	f3af 8000 	nop.w
 800bc28:	636f4361 	.word	0x636f4361
 800bc2c:	3fd287a7 	.word	0x3fd287a7
 800bc30:	8b60c8b3 	.word	0x8b60c8b3
 800bc34:	3fc68a28 	.word	0x3fc68a28
 800bc38:	509f79fb 	.word	0x509f79fb
 800bc3c:	3fd34413 	.word	0x3fd34413
 800bc40:	0800e9b9 	.word	0x0800e9b9
 800bc44:	0800e9d0 	.word	0x0800e9d0
 800bc48:	7ff00000 	.word	0x7ff00000
 800bc4c:	0800e989 	.word	0x0800e989
 800bc50:	3ff80000 	.word	0x3ff80000
 800bc54:	0800eac8 	.word	0x0800eac8
 800bc58:	0800ea28 	.word	0x0800ea28
 800bc5c:	0800e9b5 	.word	0x0800e9b5
 800bc60:	0800e988 	.word	0x0800e988
 800bc64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc68:	6018      	str	r0, [r3, #0]
 800bc6a:	9b07      	ldr	r3, [sp, #28]
 800bc6c:	2b0e      	cmp	r3, #14
 800bc6e:	f200 80a4 	bhi.w	800bdba <_dtoa_r+0x442>
 800bc72:	2c00      	cmp	r4, #0
 800bc74:	f000 80a1 	beq.w	800bdba <_dtoa_r+0x442>
 800bc78:	2f00      	cmp	r7, #0
 800bc7a:	dd33      	ble.n	800bce4 <_dtoa_r+0x36c>
 800bc7c:	4bad      	ldr	r3, [pc, #692]	@ (800bf34 <_dtoa_r+0x5bc>)
 800bc7e:	f007 020f 	and.w	r2, r7, #15
 800bc82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc86:	ed93 7b00 	vldr	d7, [r3]
 800bc8a:	05f8      	lsls	r0, r7, #23
 800bc8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc90:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc94:	d516      	bpl.n	800bcc4 <_dtoa_r+0x34c>
 800bc96:	4ba8      	ldr	r3, [pc, #672]	@ (800bf38 <_dtoa_r+0x5c0>)
 800bc98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bca0:	f7f4 fdd4 	bl	800084c <__aeabi_ddiv>
 800bca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bca8:	f004 040f 	and.w	r4, r4, #15
 800bcac:	2603      	movs	r6, #3
 800bcae:	4da2      	ldr	r5, [pc, #648]	@ (800bf38 <_dtoa_r+0x5c0>)
 800bcb0:	b954      	cbnz	r4, 800bcc8 <_dtoa_r+0x350>
 800bcb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcba:	f7f4 fdc7 	bl	800084c <__aeabi_ddiv>
 800bcbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcc2:	e028      	b.n	800bd16 <_dtoa_r+0x39e>
 800bcc4:	2602      	movs	r6, #2
 800bcc6:	e7f2      	b.n	800bcae <_dtoa_r+0x336>
 800bcc8:	07e1      	lsls	r1, r4, #31
 800bcca:	d508      	bpl.n	800bcde <_dtoa_r+0x366>
 800bccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcd4:	f7f4 fc90 	bl	80005f8 <__aeabi_dmul>
 800bcd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcdc:	3601      	adds	r6, #1
 800bcde:	1064      	asrs	r4, r4, #1
 800bce0:	3508      	adds	r5, #8
 800bce2:	e7e5      	b.n	800bcb0 <_dtoa_r+0x338>
 800bce4:	f000 80d2 	beq.w	800be8c <_dtoa_r+0x514>
 800bce8:	427c      	negs	r4, r7
 800bcea:	4b92      	ldr	r3, [pc, #584]	@ (800bf34 <_dtoa_r+0x5bc>)
 800bcec:	4d92      	ldr	r5, [pc, #584]	@ (800bf38 <_dtoa_r+0x5c0>)
 800bcee:	f004 020f 	and.w	r2, r4, #15
 800bcf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcfe:	f7f4 fc7b 	bl	80005f8 <__aeabi_dmul>
 800bd02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd06:	1124      	asrs	r4, r4, #4
 800bd08:	2300      	movs	r3, #0
 800bd0a:	2602      	movs	r6, #2
 800bd0c:	2c00      	cmp	r4, #0
 800bd0e:	f040 80b2 	bne.w	800be76 <_dtoa_r+0x4fe>
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1d3      	bne.n	800bcbe <_dtoa_r+0x346>
 800bd16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 80b7 	beq.w	800be90 <_dtoa_r+0x518>
 800bd22:	4b86      	ldr	r3, [pc, #536]	@ (800bf3c <_dtoa_r+0x5c4>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	4620      	mov	r0, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7f4 fed7 	bl	8000adc <__aeabi_dcmplt>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	f000 80ae 	beq.w	800be90 <_dtoa_r+0x518>
 800bd34:	9b07      	ldr	r3, [sp, #28]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 80aa 	beq.w	800be90 <_dtoa_r+0x518>
 800bd3c:	9b00      	ldr	r3, [sp, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	dd37      	ble.n	800bdb2 <_dtoa_r+0x43a>
 800bd42:	1e7b      	subs	r3, r7, #1
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	4620      	mov	r0, r4
 800bd48:	4b7d      	ldr	r3, [pc, #500]	@ (800bf40 <_dtoa_r+0x5c8>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	f7f4 fc53 	bl	80005f8 <__aeabi_dmul>
 800bd52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd56:	9c00      	ldr	r4, [sp, #0]
 800bd58:	3601      	adds	r6, #1
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f7f4 fbe2 	bl	8000524 <__aeabi_i2d>
 800bd60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd64:	f7f4 fc48 	bl	80005f8 <__aeabi_dmul>
 800bd68:	4b76      	ldr	r3, [pc, #472]	@ (800bf44 <_dtoa_r+0x5cc>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f7f4 fa8e 	bl	800028c <__adddf3>
 800bd70:	4605      	mov	r5, r0
 800bd72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd76:	2c00      	cmp	r4, #0
 800bd78:	f040 808d 	bne.w	800be96 <_dtoa_r+0x51e>
 800bd7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd80:	4b71      	ldr	r3, [pc, #452]	@ (800bf48 <_dtoa_r+0x5d0>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	f7f4 fa80 	bl	8000288 <__aeabi_dsub>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd90:	462a      	mov	r2, r5
 800bd92:	4633      	mov	r3, r6
 800bd94:	f7f4 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	f040 828b 	bne.w	800c2b4 <_dtoa_r+0x93c>
 800bd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bda2:	462a      	mov	r2, r5
 800bda4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bda8:	f7f4 fe98 	bl	8000adc <__aeabi_dcmplt>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	f040 8128 	bne.w	800c002 <_dtoa_r+0x68a>
 800bdb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bdb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bdba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f2c0 815a 	blt.w	800c076 <_dtoa_r+0x6fe>
 800bdc2:	2f0e      	cmp	r7, #14
 800bdc4:	f300 8157 	bgt.w	800c076 <_dtoa_r+0x6fe>
 800bdc8:	4b5a      	ldr	r3, [pc, #360]	@ (800bf34 <_dtoa_r+0x5bc>)
 800bdca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdce:	ed93 7b00 	vldr	d7, [r3]
 800bdd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	ed8d 7b00 	vstr	d7, [sp]
 800bdda:	da03      	bge.n	800bde4 <_dtoa_r+0x46c>
 800bddc:	9b07      	ldr	r3, [sp, #28]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f340 8101 	ble.w	800bfe6 <_dtoa_r+0x66e>
 800bde4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bde8:	4656      	mov	r6, sl
 800bdea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdee:	4620      	mov	r0, r4
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	f7f4 fd2b 	bl	800084c <__aeabi_ddiv>
 800bdf6:	f7f4 feaf 	bl	8000b58 <__aeabi_d2iz>
 800bdfa:	4680      	mov	r8, r0
 800bdfc:	f7f4 fb92 	bl	8000524 <__aeabi_i2d>
 800be00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be04:	f7f4 fbf8 	bl	80005f8 <__aeabi_dmul>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4620      	mov	r0, r4
 800be0e:	4629      	mov	r1, r5
 800be10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800be14:	f7f4 fa38 	bl	8000288 <__aeabi_dsub>
 800be18:	f806 4b01 	strb.w	r4, [r6], #1
 800be1c:	9d07      	ldr	r5, [sp, #28]
 800be1e:	eba6 040a 	sub.w	r4, r6, sl
 800be22:	42a5      	cmp	r5, r4
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	f040 8117 	bne.w	800c05a <_dtoa_r+0x6e2>
 800be2c:	f7f4 fa2e 	bl	800028c <__adddf3>
 800be30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be34:	4604      	mov	r4, r0
 800be36:	460d      	mov	r5, r1
 800be38:	f7f4 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	f040 80f9 	bne.w	800c034 <_dtoa_r+0x6bc>
 800be42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be4e:	b118      	cbz	r0, 800be58 <_dtoa_r+0x4e0>
 800be50:	f018 0f01 	tst.w	r8, #1
 800be54:	f040 80ee 	bne.w	800c034 <_dtoa_r+0x6bc>
 800be58:	4649      	mov	r1, r9
 800be5a:	4658      	mov	r0, fp
 800be5c:	f000 fbda 	bl	800c614 <_Bfree>
 800be60:	2300      	movs	r3, #0
 800be62:	7033      	strb	r3, [r6, #0]
 800be64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be66:	3701      	adds	r7, #1
 800be68:	601f      	str	r7, [r3, #0]
 800be6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 831d 	beq.w	800c4ac <_dtoa_r+0xb34>
 800be72:	601e      	str	r6, [r3, #0]
 800be74:	e31a      	b.n	800c4ac <_dtoa_r+0xb34>
 800be76:	07e2      	lsls	r2, r4, #31
 800be78:	d505      	bpl.n	800be86 <_dtoa_r+0x50e>
 800be7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	3601      	adds	r6, #1
 800be84:	2301      	movs	r3, #1
 800be86:	1064      	asrs	r4, r4, #1
 800be88:	3508      	adds	r5, #8
 800be8a:	e73f      	b.n	800bd0c <_dtoa_r+0x394>
 800be8c:	2602      	movs	r6, #2
 800be8e:	e742      	b.n	800bd16 <_dtoa_r+0x39e>
 800be90:	9c07      	ldr	r4, [sp, #28]
 800be92:	9704      	str	r7, [sp, #16]
 800be94:	e761      	b.n	800bd5a <_dtoa_r+0x3e2>
 800be96:	4b27      	ldr	r3, [pc, #156]	@ (800bf34 <_dtoa_r+0x5bc>)
 800be98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bea2:	4454      	add	r4, sl
 800bea4:	2900      	cmp	r1, #0
 800bea6:	d053      	beq.n	800bf50 <_dtoa_r+0x5d8>
 800bea8:	4928      	ldr	r1, [pc, #160]	@ (800bf4c <_dtoa_r+0x5d4>)
 800beaa:	2000      	movs	r0, #0
 800beac:	f7f4 fcce 	bl	800084c <__aeabi_ddiv>
 800beb0:	4633      	mov	r3, r6
 800beb2:	462a      	mov	r2, r5
 800beb4:	f7f4 f9e8 	bl	8000288 <__aeabi_dsub>
 800beb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bebc:	4656      	mov	r6, sl
 800bebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec2:	f7f4 fe49 	bl	8000b58 <__aeabi_d2iz>
 800bec6:	4605      	mov	r5, r0
 800bec8:	f7f4 fb2c 	bl	8000524 <__aeabi_i2d>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bed4:	f7f4 f9d8 	bl	8000288 <__aeabi_dsub>
 800bed8:	3530      	adds	r5, #48	@ 0x30
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bee2:	f806 5b01 	strb.w	r5, [r6], #1
 800bee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800beea:	f7f4 fdf7 	bl	8000adc <__aeabi_dcmplt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d171      	bne.n	800bfd6 <_dtoa_r+0x65e>
 800bef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bef6:	4911      	ldr	r1, [pc, #68]	@ (800bf3c <_dtoa_r+0x5c4>)
 800bef8:	2000      	movs	r0, #0
 800befa:	f7f4 f9c5 	bl	8000288 <__aeabi_dsub>
 800befe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf02:	f7f4 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f040 8095 	bne.w	800c036 <_dtoa_r+0x6be>
 800bf0c:	42a6      	cmp	r6, r4
 800bf0e:	f43f af50 	beq.w	800bdb2 <_dtoa_r+0x43a>
 800bf12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf16:	4b0a      	ldr	r3, [pc, #40]	@ (800bf40 <_dtoa_r+0x5c8>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f7f4 fb6d 	bl	80005f8 <__aeabi_dmul>
 800bf1e:	4b08      	ldr	r3, [pc, #32]	@ (800bf40 <_dtoa_r+0x5c8>)
 800bf20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf24:	2200      	movs	r2, #0
 800bf26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf2a:	f7f4 fb65 	bl	80005f8 <__aeabi_dmul>
 800bf2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf32:	e7c4      	b.n	800bebe <_dtoa_r+0x546>
 800bf34:	0800eac8 	.word	0x0800eac8
 800bf38:	0800eaa0 	.word	0x0800eaa0
 800bf3c:	3ff00000 	.word	0x3ff00000
 800bf40:	40240000 	.word	0x40240000
 800bf44:	401c0000 	.word	0x401c0000
 800bf48:	40140000 	.word	0x40140000
 800bf4c:	3fe00000 	.word	0x3fe00000
 800bf50:	4631      	mov	r1, r6
 800bf52:	4628      	mov	r0, r5
 800bf54:	f7f4 fb50 	bl	80005f8 <__aeabi_dmul>
 800bf58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf5c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bf5e:	4656      	mov	r6, sl
 800bf60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf64:	f7f4 fdf8 	bl	8000b58 <__aeabi_d2iz>
 800bf68:	4605      	mov	r5, r0
 800bf6a:	f7f4 fadb 	bl	8000524 <__aeabi_i2d>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf76:	f7f4 f987 	bl	8000288 <__aeabi_dsub>
 800bf7a:	3530      	adds	r5, #48	@ 0x30
 800bf7c:	f806 5b01 	strb.w	r5, [r6], #1
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	42a6      	cmp	r6, r4
 800bf86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf8a:	f04f 0200 	mov.w	r2, #0
 800bf8e:	d124      	bne.n	800bfda <_dtoa_r+0x662>
 800bf90:	4bac      	ldr	r3, [pc, #688]	@ (800c244 <_dtoa_r+0x8cc>)
 800bf92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf96:	f7f4 f979 	bl	800028c <__adddf3>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfa2:	f7f4 fdb9 	bl	8000b18 <__aeabi_dcmpgt>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d145      	bne.n	800c036 <_dtoa_r+0x6be>
 800bfaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bfae:	49a5      	ldr	r1, [pc, #660]	@ (800c244 <_dtoa_r+0x8cc>)
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	f7f4 f969 	bl	8000288 <__aeabi_dsub>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfbe:	f7f4 fd8d 	bl	8000adc <__aeabi_dcmplt>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	f43f aef5 	beq.w	800bdb2 <_dtoa_r+0x43a>
 800bfc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bfca:	1e73      	subs	r3, r6, #1
 800bfcc:	9315      	str	r3, [sp, #84]	@ 0x54
 800bfce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bfd2:	2b30      	cmp	r3, #48	@ 0x30
 800bfd4:	d0f8      	beq.n	800bfc8 <_dtoa_r+0x650>
 800bfd6:	9f04      	ldr	r7, [sp, #16]
 800bfd8:	e73e      	b.n	800be58 <_dtoa_r+0x4e0>
 800bfda:	4b9b      	ldr	r3, [pc, #620]	@ (800c248 <_dtoa_r+0x8d0>)
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe4:	e7bc      	b.n	800bf60 <_dtoa_r+0x5e8>
 800bfe6:	d10c      	bne.n	800c002 <_dtoa_r+0x68a>
 800bfe8:	4b98      	ldr	r3, [pc, #608]	@ (800c24c <_dtoa_r+0x8d4>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bff0:	f7f4 fb02 	bl	80005f8 <__aeabi_dmul>
 800bff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bff8:	f7f4 fd84 	bl	8000b04 <__aeabi_dcmpge>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	f000 8157 	beq.w	800c2b0 <_dtoa_r+0x938>
 800c002:	2400      	movs	r4, #0
 800c004:	4625      	mov	r5, r4
 800c006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c008:	43db      	mvns	r3, r3
 800c00a:	9304      	str	r3, [sp, #16]
 800c00c:	4656      	mov	r6, sl
 800c00e:	2700      	movs	r7, #0
 800c010:	4621      	mov	r1, r4
 800c012:	4658      	mov	r0, fp
 800c014:	f000 fafe 	bl	800c614 <_Bfree>
 800c018:	2d00      	cmp	r5, #0
 800c01a:	d0dc      	beq.n	800bfd6 <_dtoa_r+0x65e>
 800c01c:	b12f      	cbz	r7, 800c02a <_dtoa_r+0x6b2>
 800c01e:	42af      	cmp	r7, r5
 800c020:	d003      	beq.n	800c02a <_dtoa_r+0x6b2>
 800c022:	4639      	mov	r1, r7
 800c024:	4658      	mov	r0, fp
 800c026:	f000 faf5 	bl	800c614 <_Bfree>
 800c02a:	4629      	mov	r1, r5
 800c02c:	4658      	mov	r0, fp
 800c02e:	f000 faf1 	bl	800c614 <_Bfree>
 800c032:	e7d0      	b.n	800bfd6 <_dtoa_r+0x65e>
 800c034:	9704      	str	r7, [sp, #16]
 800c036:	4633      	mov	r3, r6
 800c038:	461e      	mov	r6, r3
 800c03a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c03e:	2a39      	cmp	r2, #57	@ 0x39
 800c040:	d107      	bne.n	800c052 <_dtoa_r+0x6da>
 800c042:	459a      	cmp	sl, r3
 800c044:	d1f8      	bne.n	800c038 <_dtoa_r+0x6c0>
 800c046:	9a04      	ldr	r2, [sp, #16]
 800c048:	3201      	adds	r2, #1
 800c04a:	9204      	str	r2, [sp, #16]
 800c04c:	2230      	movs	r2, #48	@ 0x30
 800c04e:	f88a 2000 	strb.w	r2, [sl]
 800c052:	781a      	ldrb	r2, [r3, #0]
 800c054:	3201      	adds	r2, #1
 800c056:	701a      	strb	r2, [r3, #0]
 800c058:	e7bd      	b.n	800bfd6 <_dtoa_r+0x65e>
 800c05a:	4b7b      	ldr	r3, [pc, #492]	@ (800c248 <_dtoa_r+0x8d0>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	f7f4 facb 	bl	80005f8 <__aeabi_dmul>
 800c062:	2200      	movs	r2, #0
 800c064:	2300      	movs	r3, #0
 800c066:	4604      	mov	r4, r0
 800c068:	460d      	mov	r5, r1
 800c06a:	f7f4 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c06e:	2800      	cmp	r0, #0
 800c070:	f43f aebb 	beq.w	800bdea <_dtoa_r+0x472>
 800c074:	e6f0      	b.n	800be58 <_dtoa_r+0x4e0>
 800c076:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c078:	2a00      	cmp	r2, #0
 800c07a:	f000 80db 	beq.w	800c234 <_dtoa_r+0x8bc>
 800c07e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c080:	2a01      	cmp	r2, #1
 800c082:	f300 80bf 	bgt.w	800c204 <_dtoa_r+0x88c>
 800c086:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c088:	2a00      	cmp	r2, #0
 800c08a:	f000 80b7 	beq.w	800c1fc <_dtoa_r+0x884>
 800c08e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c092:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c094:	4646      	mov	r6, r8
 800c096:	9a08      	ldr	r2, [sp, #32]
 800c098:	2101      	movs	r1, #1
 800c09a:	441a      	add	r2, r3
 800c09c:	4658      	mov	r0, fp
 800c09e:	4498      	add	r8, r3
 800c0a0:	9208      	str	r2, [sp, #32]
 800c0a2:	f000 fb6b 	bl	800c77c <__i2b>
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	b15e      	cbz	r6, 800c0c2 <_dtoa_r+0x74a>
 800c0aa:	9b08      	ldr	r3, [sp, #32]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	dd08      	ble.n	800c0c2 <_dtoa_r+0x74a>
 800c0b0:	42b3      	cmp	r3, r6
 800c0b2:	9a08      	ldr	r2, [sp, #32]
 800c0b4:	bfa8      	it	ge
 800c0b6:	4633      	movge	r3, r6
 800c0b8:	eba8 0803 	sub.w	r8, r8, r3
 800c0bc:	1af6      	subs	r6, r6, r3
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	9308      	str	r3, [sp, #32]
 800c0c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c4:	b1f3      	cbz	r3, 800c104 <_dtoa_r+0x78c>
 800c0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 80b7 	beq.w	800c23c <_dtoa_r+0x8c4>
 800c0ce:	b18c      	cbz	r4, 800c0f4 <_dtoa_r+0x77c>
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	4658      	mov	r0, fp
 800c0d6:	f000 fc11 	bl	800c8fc <__pow5mult>
 800c0da:	464a      	mov	r2, r9
 800c0dc:	4601      	mov	r1, r0
 800c0de:	4605      	mov	r5, r0
 800c0e0:	4658      	mov	r0, fp
 800c0e2:	f000 fb61 	bl	800c7a8 <__multiply>
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	9004      	str	r0, [sp, #16]
 800c0ea:	4658      	mov	r0, fp
 800c0ec:	f000 fa92 	bl	800c614 <_Bfree>
 800c0f0:	9b04      	ldr	r3, [sp, #16]
 800c0f2:	4699      	mov	r9, r3
 800c0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0f6:	1b1a      	subs	r2, r3, r4
 800c0f8:	d004      	beq.n	800c104 <_dtoa_r+0x78c>
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	4658      	mov	r0, fp
 800c0fe:	f000 fbfd 	bl	800c8fc <__pow5mult>
 800c102:	4681      	mov	r9, r0
 800c104:	2101      	movs	r1, #1
 800c106:	4658      	mov	r0, fp
 800c108:	f000 fb38 	bl	800c77c <__i2b>
 800c10c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c10e:	4604      	mov	r4, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 81cf 	beq.w	800c4b4 <_dtoa_r+0xb3c>
 800c116:	461a      	mov	r2, r3
 800c118:	4601      	mov	r1, r0
 800c11a:	4658      	mov	r0, fp
 800c11c:	f000 fbee 	bl	800c8fc <__pow5mult>
 800c120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c122:	2b01      	cmp	r3, #1
 800c124:	4604      	mov	r4, r0
 800c126:	f300 8095 	bgt.w	800c254 <_dtoa_r+0x8dc>
 800c12a:	9b02      	ldr	r3, [sp, #8]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f040 8087 	bne.w	800c240 <_dtoa_r+0x8c8>
 800c132:	9b03      	ldr	r3, [sp, #12]
 800c134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f040 8089 	bne.w	800c250 <_dtoa_r+0x8d8>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c144:	0d1b      	lsrs	r3, r3, #20
 800c146:	051b      	lsls	r3, r3, #20
 800c148:	b12b      	cbz	r3, 800c156 <_dtoa_r+0x7de>
 800c14a:	9b08      	ldr	r3, [sp, #32]
 800c14c:	3301      	adds	r3, #1
 800c14e:	9308      	str	r3, [sp, #32]
 800c150:	f108 0801 	add.w	r8, r8, #1
 800c154:	2301      	movs	r3, #1
 800c156:	930a      	str	r3, [sp, #40]	@ 0x28
 800c158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 81b0 	beq.w	800c4c0 <_dtoa_r+0xb48>
 800c160:	6923      	ldr	r3, [r4, #16]
 800c162:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c166:	6918      	ldr	r0, [r3, #16]
 800c168:	f000 fabc 	bl	800c6e4 <__hi0bits>
 800c16c:	f1c0 0020 	rsb	r0, r0, #32
 800c170:	9b08      	ldr	r3, [sp, #32]
 800c172:	4418      	add	r0, r3
 800c174:	f010 001f 	ands.w	r0, r0, #31
 800c178:	d077      	beq.n	800c26a <_dtoa_r+0x8f2>
 800c17a:	f1c0 0320 	rsb	r3, r0, #32
 800c17e:	2b04      	cmp	r3, #4
 800c180:	dd6b      	ble.n	800c25a <_dtoa_r+0x8e2>
 800c182:	9b08      	ldr	r3, [sp, #32]
 800c184:	f1c0 001c 	rsb	r0, r0, #28
 800c188:	4403      	add	r3, r0
 800c18a:	4480      	add	r8, r0
 800c18c:	4406      	add	r6, r0
 800c18e:	9308      	str	r3, [sp, #32]
 800c190:	f1b8 0f00 	cmp.w	r8, #0
 800c194:	dd05      	ble.n	800c1a2 <_dtoa_r+0x82a>
 800c196:	4649      	mov	r1, r9
 800c198:	4642      	mov	r2, r8
 800c19a:	4658      	mov	r0, fp
 800c19c:	f000 fc08 	bl	800c9b0 <__lshift>
 800c1a0:	4681      	mov	r9, r0
 800c1a2:	9b08      	ldr	r3, [sp, #32]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd05      	ble.n	800c1b4 <_dtoa_r+0x83c>
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	4658      	mov	r0, fp
 800c1ae:	f000 fbff 	bl	800c9b0 <__lshift>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d059      	beq.n	800c26e <_dtoa_r+0x8f6>
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4648      	mov	r0, r9
 800c1be:	f000 fc63 	bl	800ca88 <__mcmp>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	da53      	bge.n	800c26e <_dtoa_r+0x8f6>
 800c1c6:	1e7b      	subs	r3, r7, #1
 800c1c8:	9304      	str	r3, [sp, #16]
 800c1ca:	4649      	mov	r1, r9
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	220a      	movs	r2, #10
 800c1d0:	4658      	mov	r0, fp
 800c1d2:	f000 fa41 	bl	800c658 <__multadd>
 800c1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1d8:	4681      	mov	r9, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 8172 	beq.w	800c4c4 <_dtoa_r+0xb4c>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	220a      	movs	r2, #10
 800c1e6:	4658      	mov	r0, fp
 800c1e8:	f000 fa36 	bl	800c658 <__multadd>
 800c1ec:	9b00      	ldr	r3, [sp, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	dc67      	bgt.n	800c2c4 <_dtoa_r+0x94c>
 800c1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	dc41      	bgt.n	800c27e <_dtoa_r+0x906>
 800c1fa:	e063      	b.n	800c2c4 <_dtoa_r+0x94c>
 800c1fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c202:	e746      	b.n	800c092 <_dtoa_r+0x71a>
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	1e5c      	subs	r4, r3, #1
 800c208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	bfbf      	itttt	lt
 800c20e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c210:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c212:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c214:	1ae3      	sublt	r3, r4, r3
 800c216:	bfb4      	ite	lt
 800c218:	18d2      	addlt	r2, r2, r3
 800c21a:	1b1c      	subge	r4, r3, r4
 800c21c:	9b07      	ldr	r3, [sp, #28]
 800c21e:	bfbc      	itt	lt
 800c220:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c222:	2400      	movlt	r4, #0
 800c224:	2b00      	cmp	r3, #0
 800c226:	bfb5      	itete	lt
 800c228:	eba8 0603 	sublt.w	r6, r8, r3
 800c22c:	9b07      	ldrge	r3, [sp, #28]
 800c22e:	2300      	movlt	r3, #0
 800c230:	4646      	movge	r6, r8
 800c232:	e730      	b.n	800c096 <_dtoa_r+0x71e>
 800c234:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c236:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c238:	4646      	mov	r6, r8
 800c23a:	e735      	b.n	800c0a8 <_dtoa_r+0x730>
 800c23c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c23e:	e75c      	b.n	800c0fa <_dtoa_r+0x782>
 800c240:	2300      	movs	r3, #0
 800c242:	e788      	b.n	800c156 <_dtoa_r+0x7de>
 800c244:	3fe00000 	.word	0x3fe00000
 800c248:	40240000 	.word	0x40240000
 800c24c:	40140000 	.word	0x40140000
 800c250:	9b02      	ldr	r3, [sp, #8]
 800c252:	e780      	b.n	800c156 <_dtoa_r+0x7de>
 800c254:	2300      	movs	r3, #0
 800c256:	930a      	str	r3, [sp, #40]	@ 0x28
 800c258:	e782      	b.n	800c160 <_dtoa_r+0x7e8>
 800c25a:	d099      	beq.n	800c190 <_dtoa_r+0x818>
 800c25c:	9a08      	ldr	r2, [sp, #32]
 800c25e:	331c      	adds	r3, #28
 800c260:	441a      	add	r2, r3
 800c262:	4498      	add	r8, r3
 800c264:	441e      	add	r6, r3
 800c266:	9208      	str	r2, [sp, #32]
 800c268:	e792      	b.n	800c190 <_dtoa_r+0x818>
 800c26a:	4603      	mov	r3, r0
 800c26c:	e7f6      	b.n	800c25c <_dtoa_r+0x8e4>
 800c26e:	9b07      	ldr	r3, [sp, #28]
 800c270:	9704      	str	r7, [sp, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	dc20      	bgt.n	800c2b8 <_dtoa_r+0x940>
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	dd1e      	ble.n	800c2bc <_dtoa_r+0x944>
 800c27e:	9b00      	ldr	r3, [sp, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	f47f aec0 	bne.w	800c006 <_dtoa_r+0x68e>
 800c286:	4621      	mov	r1, r4
 800c288:	2205      	movs	r2, #5
 800c28a:	4658      	mov	r0, fp
 800c28c:	f000 f9e4 	bl	800c658 <__multadd>
 800c290:	4601      	mov	r1, r0
 800c292:	4604      	mov	r4, r0
 800c294:	4648      	mov	r0, r9
 800c296:	f000 fbf7 	bl	800ca88 <__mcmp>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	f77f aeb3 	ble.w	800c006 <_dtoa_r+0x68e>
 800c2a0:	4656      	mov	r6, sl
 800c2a2:	2331      	movs	r3, #49	@ 0x31
 800c2a4:	f806 3b01 	strb.w	r3, [r6], #1
 800c2a8:	9b04      	ldr	r3, [sp, #16]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	e6ae      	b.n	800c00e <_dtoa_r+0x696>
 800c2b0:	9c07      	ldr	r4, [sp, #28]
 800c2b2:	9704      	str	r7, [sp, #16]
 800c2b4:	4625      	mov	r5, r4
 800c2b6:	e7f3      	b.n	800c2a0 <_dtoa_r+0x928>
 800c2b8:	9b07      	ldr	r3, [sp, #28]
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 8104 	beq.w	800c4cc <_dtoa_r+0xb54>
 800c2c4:	2e00      	cmp	r6, #0
 800c2c6:	dd05      	ble.n	800c2d4 <_dtoa_r+0x95c>
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4632      	mov	r2, r6
 800c2cc:	4658      	mov	r0, fp
 800c2ce:	f000 fb6f 	bl	800c9b0 <__lshift>
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d05a      	beq.n	800c390 <_dtoa_r+0xa18>
 800c2da:	6869      	ldr	r1, [r5, #4]
 800c2dc:	4658      	mov	r0, fp
 800c2de:	f000 f959 	bl	800c594 <_Balloc>
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	b928      	cbnz	r0, 800c2f2 <_dtoa_r+0x97a>
 800c2e6:	4b84      	ldr	r3, [pc, #528]	@ (800c4f8 <_dtoa_r+0xb80>)
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c2ee:	f7ff bb5a 	b.w	800b9a6 <_dtoa_r+0x2e>
 800c2f2:	692a      	ldr	r2, [r5, #16]
 800c2f4:	3202      	adds	r2, #2
 800c2f6:	0092      	lsls	r2, r2, #2
 800c2f8:	f105 010c 	add.w	r1, r5, #12
 800c2fc:	300c      	adds	r0, #12
 800c2fe:	f7ff faa4 	bl	800b84a <memcpy>
 800c302:	2201      	movs	r2, #1
 800c304:	4631      	mov	r1, r6
 800c306:	4658      	mov	r0, fp
 800c308:	f000 fb52 	bl	800c9b0 <__lshift>
 800c30c:	f10a 0301 	add.w	r3, sl, #1
 800c310:	9307      	str	r3, [sp, #28]
 800c312:	9b00      	ldr	r3, [sp, #0]
 800c314:	4453      	add	r3, sl
 800c316:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c318:	9b02      	ldr	r3, [sp, #8]
 800c31a:	f003 0301 	and.w	r3, r3, #1
 800c31e:	462f      	mov	r7, r5
 800c320:	930a      	str	r3, [sp, #40]	@ 0x28
 800c322:	4605      	mov	r5, r0
 800c324:	9b07      	ldr	r3, [sp, #28]
 800c326:	4621      	mov	r1, r4
 800c328:	3b01      	subs	r3, #1
 800c32a:	4648      	mov	r0, r9
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	f7ff fa9a 	bl	800b866 <quorem>
 800c332:	4639      	mov	r1, r7
 800c334:	9002      	str	r0, [sp, #8]
 800c336:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c33a:	4648      	mov	r0, r9
 800c33c:	f000 fba4 	bl	800ca88 <__mcmp>
 800c340:	462a      	mov	r2, r5
 800c342:	9008      	str	r0, [sp, #32]
 800c344:	4621      	mov	r1, r4
 800c346:	4658      	mov	r0, fp
 800c348:	f000 fbba 	bl	800cac0 <__mdiff>
 800c34c:	68c2      	ldr	r2, [r0, #12]
 800c34e:	4606      	mov	r6, r0
 800c350:	bb02      	cbnz	r2, 800c394 <_dtoa_r+0xa1c>
 800c352:	4601      	mov	r1, r0
 800c354:	4648      	mov	r0, r9
 800c356:	f000 fb97 	bl	800ca88 <__mcmp>
 800c35a:	4602      	mov	r2, r0
 800c35c:	4631      	mov	r1, r6
 800c35e:	4658      	mov	r0, fp
 800c360:	920e      	str	r2, [sp, #56]	@ 0x38
 800c362:	f000 f957 	bl	800c614 <_Bfree>
 800c366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c36a:	9e07      	ldr	r6, [sp, #28]
 800c36c:	ea43 0102 	orr.w	r1, r3, r2
 800c370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c372:	4319      	orrs	r1, r3
 800c374:	d110      	bne.n	800c398 <_dtoa_r+0xa20>
 800c376:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c37a:	d029      	beq.n	800c3d0 <_dtoa_r+0xa58>
 800c37c:	9b08      	ldr	r3, [sp, #32]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	dd02      	ble.n	800c388 <_dtoa_r+0xa10>
 800c382:	9b02      	ldr	r3, [sp, #8]
 800c384:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	f883 8000 	strb.w	r8, [r3]
 800c38e:	e63f      	b.n	800c010 <_dtoa_r+0x698>
 800c390:	4628      	mov	r0, r5
 800c392:	e7bb      	b.n	800c30c <_dtoa_r+0x994>
 800c394:	2201      	movs	r2, #1
 800c396:	e7e1      	b.n	800c35c <_dtoa_r+0x9e4>
 800c398:	9b08      	ldr	r3, [sp, #32]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	db04      	blt.n	800c3a8 <_dtoa_r+0xa30>
 800c39e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3a0:	430b      	orrs	r3, r1
 800c3a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	d120      	bne.n	800c3ea <_dtoa_r+0xa72>
 800c3a8:	2a00      	cmp	r2, #0
 800c3aa:	dded      	ble.n	800c388 <_dtoa_r+0xa10>
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	4658      	mov	r0, fp
 800c3b2:	f000 fafd 	bl	800c9b0 <__lshift>
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4681      	mov	r9, r0
 800c3ba:	f000 fb65 	bl	800ca88 <__mcmp>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	dc03      	bgt.n	800c3ca <_dtoa_r+0xa52>
 800c3c2:	d1e1      	bne.n	800c388 <_dtoa_r+0xa10>
 800c3c4:	f018 0f01 	tst.w	r8, #1
 800c3c8:	d0de      	beq.n	800c388 <_dtoa_r+0xa10>
 800c3ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3ce:	d1d8      	bne.n	800c382 <_dtoa_r+0xa0a>
 800c3d0:	9a00      	ldr	r2, [sp, #0]
 800c3d2:	2339      	movs	r3, #57	@ 0x39
 800c3d4:	7013      	strb	r3, [r2, #0]
 800c3d6:	4633      	mov	r3, r6
 800c3d8:	461e      	mov	r6, r3
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c3e0:	2a39      	cmp	r2, #57	@ 0x39
 800c3e2:	d052      	beq.n	800c48a <_dtoa_r+0xb12>
 800c3e4:	3201      	adds	r2, #1
 800c3e6:	701a      	strb	r2, [r3, #0]
 800c3e8:	e612      	b.n	800c010 <_dtoa_r+0x698>
 800c3ea:	2a00      	cmp	r2, #0
 800c3ec:	dd07      	ble.n	800c3fe <_dtoa_r+0xa86>
 800c3ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c3f2:	d0ed      	beq.n	800c3d0 <_dtoa_r+0xa58>
 800c3f4:	9a00      	ldr	r2, [sp, #0]
 800c3f6:	f108 0301 	add.w	r3, r8, #1
 800c3fa:	7013      	strb	r3, [r2, #0]
 800c3fc:	e608      	b.n	800c010 <_dtoa_r+0x698>
 800c3fe:	9b07      	ldr	r3, [sp, #28]
 800c400:	9a07      	ldr	r2, [sp, #28]
 800c402:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c408:	4293      	cmp	r3, r2
 800c40a:	d028      	beq.n	800c45e <_dtoa_r+0xae6>
 800c40c:	4649      	mov	r1, r9
 800c40e:	2300      	movs	r3, #0
 800c410:	220a      	movs	r2, #10
 800c412:	4658      	mov	r0, fp
 800c414:	f000 f920 	bl	800c658 <__multadd>
 800c418:	42af      	cmp	r7, r5
 800c41a:	4681      	mov	r9, r0
 800c41c:	f04f 0300 	mov.w	r3, #0
 800c420:	f04f 020a 	mov.w	r2, #10
 800c424:	4639      	mov	r1, r7
 800c426:	4658      	mov	r0, fp
 800c428:	d107      	bne.n	800c43a <_dtoa_r+0xac2>
 800c42a:	f000 f915 	bl	800c658 <__multadd>
 800c42e:	4607      	mov	r7, r0
 800c430:	4605      	mov	r5, r0
 800c432:	9b07      	ldr	r3, [sp, #28]
 800c434:	3301      	adds	r3, #1
 800c436:	9307      	str	r3, [sp, #28]
 800c438:	e774      	b.n	800c324 <_dtoa_r+0x9ac>
 800c43a:	f000 f90d 	bl	800c658 <__multadd>
 800c43e:	4629      	mov	r1, r5
 800c440:	4607      	mov	r7, r0
 800c442:	2300      	movs	r3, #0
 800c444:	220a      	movs	r2, #10
 800c446:	4658      	mov	r0, fp
 800c448:	f000 f906 	bl	800c658 <__multadd>
 800c44c:	4605      	mov	r5, r0
 800c44e:	e7f0      	b.n	800c432 <_dtoa_r+0xaba>
 800c450:	9b00      	ldr	r3, [sp, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	bfcc      	ite	gt
 800c456:	461e      	movgt	r6, r3
 800c458:	2601      	movle	r6, #1
 800c45a:	4456      	add	r6, sl
 800c45c:	2700      	movs	r7, #0
 800c45e:	4649      	mov	r1, r9
 800c460:	2201      	movs	r2, #1
 800c462:	4658      	mov	r0, fp
 800c464:	f000 faa4 	bl	800c9b0 <__lshift>
 800c468:	4621      	mov	r1, r4
 800c46a:	4681      	mov	r9, r0
 800c46c:	f000 fb0c 	bl	800ca88 <__mcmp>
 800c470:	2800      	cmp	r0, #0
 800c472:	dcb0      	bgt.n	800c3d6 <_dtoa_r+0xa5e>
 800c474:	d102      	bne.n	800c47c <_dtoa_r+0xb04>
 800c476:	f018 0f01 	tst.w	r8, #1
 800c47a:	d1ac      	bne.n	800c3d6 <_dtoa_r+0xa5e>
 800c47c:	4633      	mov	r3, r6
 800c47e:	461e      	mov	r6, r3
 800c480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c484:	2a30      	cmp	r2, #48	@ 0x30
 800c486:	d0fa      	beq.n	800c47e <_dtoa_r+0xb06>
 800c488:	e5c2      	b.n	800c010 <_dtoa_r+0x698>
 800c48a:	459a      	cmp	sl, r3
 800c48c:	d1a4      	bne.n	800c3d8 <_dtoa_r+0xa60>
 800c48e:	9b04      	ldr	r3, [sp, #16]
 800c490:	3301      	adds	r3, #1
 800c492:	9304      	str	r3, [sp, #16]
 800c494:	2331      	movs	r3, #49	@ 0x31
 800c496:	f88a 3000 	strb.w	r3, [sl]
 800c49a:	e5b9      	b.n	800c010 <_dtoa_r+0x698>
 800c49c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c49e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c4fc <_dtoa_r+0xb84>
 800c4a2:	b11b      	cbz	r3, 800c4ac <_dtoa_r+0xb34>
 800c4a4:	f10a 0308 	add.w	r3, sl, #8
 800c4a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c4aa:	6013      	str	r3, [r2, #0]
 800c4ac:	4650      	mov	r0, sl
 800c4ae:	b019      	add	sp, #100	@ 0x64
 800c4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	f77f ae37 	ble.w	800c12a <_dtoa_r+0x7b2>
 800c4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4c0:	2001      	movs	r0, #1
 800c4c2:	e655      	b.n	800c170 <_dtoa_r+0x7f8>
 800c4c4:	9b00      	ldr	r3, [sp, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f77f aed6 	ble.w	800c278 <_dtoa_r+0x900>
 800c4cc:	4656      	mov	r6, sl
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	4648      	mov	r0, r9
 800c4d2:	f7ff f9c8 	bl	800b866 <quorem>
 800c4d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4da:	f806 8b01 	strb.w	r8, [r6], #1
 800c4de:	9b00      	ldr	r3, [sp, #0]
 800c4e0:	eba6 020a 	sub.w	r2, r6, sl
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	ddb3      	ble.n	800c450 <_dtoa_r+0xad8>
 800c4e8:	4649      	mov	r1, r9
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	220a      	movs	r2, #10
 800c4ee:	4658      	mov	r0, fp
 800c4f0:	f000 f8b2 	bl	800c658 <__multadd>
 800c4f4:	4681      	mov	r9, r0
 800c4f6:	e7ea      	b.n	800c4ce <_dtoa_r+0xb56>
 800c4f8:	0800ea28 	.word	0x0800ea28
 800c4fc:	0800e9ac 	.word	0x0800e9ac

0800c500 <_free_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4605      	mov	r5, r0
 800c504:	2900      	cmp	r1, #0
 800c506:	d041      	beq.n	800c58c <_free_r+0x8c>
 800c508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c50c:	1f0c      	subs	r4, r1, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bfb8      	it	lt
 800c512:	18e4      	addlt	r4, r4, r3
 800c514:	f7fe fa52 	bl	800a9bc <__malloc_lock>
 800c518:	4a1d      	ldr	r2, [pc, #116]	@ (800c590 <_free_r+0x90>)
 800c51a:	6813      	ldr	r3, [r2, #0]
 800c51c:	b933      	cbnz	r3, 800c52c <_free_r+0x2c>
 800c51e:	6063      	str	r3, [r4, #4]
 800c520:	6014      	str	r4, [r2, #0]
 800c522:	4628      	mov	r0, r5
 800c524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c528:	f7fe ba4e 	b.w	800a9c8 <__malloc_unlock>
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	d908      	bls.n	800c542 <_free_r+0x42>
 800c530:	6820      	ldr	r0, [r4, #0]
 800c532:	1821      	adds	r1, r4, r0
 800c534:	428b      	cmp	r3, r1
 800c536:	bf01      	itttt	eq
 800c538:	6819      	ldreq	r1, [r3, #0]
 800c53a:	685b      	ldreq	r3, [r3, #4]
 800c53c:	1809      	addeq	r1, r1, r0
 800c53e:	6021      	streq	r1, [r4, #0]
 800c540:	e7ed      	b.n	800c51e <_free_r+0x1e>
 800c542:	461a      	mov	r2, r3
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	b10b      	cbz	r3, 800c54c <_free_r+0x4c>
 800c548:	42a3      	cmp	r3, r4
 800c54a:	d9fa      	bls.n	800c542 <_free_r+0x42>
 800c54c:	6811      	ldr	r1, [r2, #0]
 800c54e:	1850      	adds	r0, r2, r1
 800c550:	42a0      	cmp	r0, r4
 800c552:	d10b      	bne.n	800c56c <_free_r+0x6c>
 800c554:	6820      	ldr	r0, [r4, #0]
 800c556:	4401      	add	r1, r0
 800c558:	1850      	adds	r0, r2, r1
 800c55a:	4283      	cmp	r3, r0
 800c55c:	6011      	str	r1, [r2, #0]
 800c55e:	d1e0      	bne.n	800c522 <_free_r+0x22>
 800c560:	6818      	ldr	r0, [r3, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	6053      	str	r3, [r2, #4]
 800c566:	4408      	add	r0, r1
 800c568:	6010      	str	r0, [r2, #0]
 800c56a:	e7da      	b.n	800c522 <_free_r+0x22>
 800c56c:	d902      	bls.n	800c574 <_free_r+0x74>
 800c56e:	230c      	movs	r3, #12
 800c570:	602b      	str	r3, [r5, #0]
 800c572:	e7d6      	b.n	800c522 <_free_r+0x22>
 800c574:	6820      	ldr	r0, [r4, #0]
 800c576:	1821      	adds	r1, r4, r0
 800c578:	428b      	cmp	r3, r1
 800c57a:	bf04      	itt	eq
 800c57c:	6819      	ldreq	r1, [r3, #0]
 800c57e:	685b      	ldreq	r3, [r3, #4]
 800c580:	6063      	str	r3, [r4, #4]
 800c582:	bf04      	itt	eq
 800c584:	1809      	addeq	r1, r1, r0
 800c586:	6021      	streq	r1, [r4, #0]
 800c588:	6054      	str	r4, [r2, #4]
 800c58a:	e7ca      	b.n	800c522 <_free_r+0x22>
 800c58c:	bd38      	pop	{r3, r4, r5, pc}
 800c58e:	bf00      	nop
 800c590:	200050f4 	.word	0x200050f4

0800c594 <_Balloc>:
 800c594:	b570      	push	{r4, r5, r6, lr}
 800c596:	69c6      	ldr	r6, [r0, #28]
 800c598:	4604      	mov	r4, r0
 800c59a:	460d      	mov	r5, r1
 800c59c:	b976      	cbnz	r6, 800c5bc <_Balloc+0x28>
 800c59e:	2010      	movs	r0, #16
 800c5a0:	f7fe f95a 	bl	800a858 <malloc>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	61e0      	str	r0, [r4, #28]
 800c5a8:	b920      	cbnz	r0, 800c5b4 <_Balloc+0x20>
 800c5aa:	4b18      	ldr	r3, [pc, #96]	@ (800c60c <_Balloc+0x78>)
 800c5ac:	4818      	ldr	r0, [pc, #96]	@ (800c610 <_Balloc+0x7c>)
 800c5ae:	216b      	movs	r1, #107	@ 0x6b
 800c5b0:	f000 ff56 	bl	800d460 <__assert_func>
 800c5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5b8:	6006      	str	r6, [r0, #0]
 800c5ba:	60c6      	str	r6, [r0, #12]
 800c5bc:	69e6      	ldr	r6, [r4, #28]
 800c5be:	68f3      	ldr	r3, [r6, #12]
 800c5c0:	b183      	cbz	r3, 800c5e4 <_Balloc+0x50>
 800c5c2:	69e3      	ldr	r3, [r4, #28]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5ca:	b9b8      	cbnz	r0, 800c5fc <_Balloc+0x68>
 800c5cc:	2101      	movs	r1, #1
 800c5ce:	fa01 f605 	lsl.w	r6, r1, r5
 800c5d2:	1d72      	adds	r2, r6, #5
 800c5d4:	0092      	lsls	r2, r2, #2
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f000 ff60 	bl	800d49c <_calloc_r>
 800c5dc:	b160      	cbz	r0, 800c5f8 <_Balloc+0x64>
 800c5de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5e2:	e00e      	b.n	800c602 <_Balloc+0x6e>
 800c5e4:	2221      	movs	r2, #33	@ 0x21
 800c5e6:	2104      	movs	r1, #4
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f000 ff57 	bl	800d49c <_calloc_r>
 800c5ee:	69e3      	ldr	r3, [r4, #28]
 800c5f0:	60f0      	str	r0, [r6, #12]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1e4      	bne.n	800c5c2 <_Balloc+0x2e>
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	6802      	ldr	r2, [r0, #0]
 800c5fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c602:	2300      	movs	r3, #0
 800c604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c608:	e7f7      	b.n	800c5fa <_Balloc+0x66>
 800c60a:	bf00      	nop
 800c60c:	0800e9b9 	.word	0x0800e9b9
 800c610:	0800ea39 	.word	0x0800ea39

0800c614 <_Bfree>:
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	69c6      	ldr	r6, [r0, #28]
 800c618:	4605      	mov	r5, r0
 800c61a:	460c      	mov	r4, r1
 800c61c:	b976      	cbnz	r6, 800c63c <_Bfree+0x28>
 800c61e:	2010      	movs	r0, #16
 800c620:	f7fe f91a 	bl	800a858 <malloc>
 800c624:	4602      	mov	r2, r0
 800c626:	61e8      	str	r0, [r5, #28]
 800c628:	b920      	cbnz	r0, 800c634 <_Bfree+0x20>
 800c62a:	4b09      	ldr	r3, [pc, #36]	@ (800c650 <_Bfree+0x3c>)
 800c62c:	4809      	ldr	r0, [pc, #36]	@ (800c654 <_Bfree+0x40>)
 800c62e:	218f      	movs	r1, #143	@ 0x8f
 800c630:	f000 ff16 	bl	800d460 <__assert_func>
 800c634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c638:	6006      	str	r6, [r0, #0]
 800c63a:	60c6      	str	r6, [r0, #12]
 800c63c:	b13c      	cbz	r4, 800c64e <_Bfree+0x3a>
 800c63e:	69eb      	ldr	r3, [r5, #28]
 800c640:	6862      	ldr	r2, [r4, #4]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c648:	6021      	str	r1, [r4, #0]
 800c64a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	0800e9b9 	.word	0x0800e9b9
 800c654:	0800ea39 	.word	0x0800ea39

0800c658 <__multadd>:
 800c658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c65c:	690d      	ldr	r5, [r1, #16]
 800c65e:	4607      	mov	r7, r0
 800c660:	460c      	mov	r4, r1
 800c662:	461e      	mov	r6, r3
 800c664:	f101 0c14 	add.w	ip, r1, #20
 800c668:	2000      	movs	r0, #0
 800c66a:	f8dc 3000 	ldr.w	r3, [ip]
 800c66e:	b299      	uxth	r1, r3
 800c670:	fb02 6101 	mla	r1, r2, r1, r6
 800c674:	0c1e      	lsrs	r6, r3, #16
 800c676:	0c0b      	lsrs	r3, r1, #16
 800c678:	fb02 3306 	mla	r3, r2, r6, r3
 800c67c:	b289      	uxth	r1, r1
 800c67e:	3001      	adds	r0, #1
 800c680:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c684:	4285      	cmp	r5, r0
 800c686:	f84c 1b04 	str.w	r1, [ip], #4
 800c68a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c68e:	dcec      	bgt.n	800c66a <__multadd+0x12>
 800c690:	b30e      	cbz	r6, 800c6d6 <__multadd+0x7e>
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	42ab      	cmp	r3, r5
 800c696:	dc19      	bgt.n	800c6cc <__multadd+0x74>
 800c698:	6861      	ldr	r1, [r4, #4]
 800c69a:	4638      	mov	r0, r7
 800c69c:	3101      	adds	r1, #1
 800c69e:	f7ff ff79 	bl	800c594 <_Balloc>
 800c6a2:	4680      	mov	r8, r0
 800c6a4:	b928      	cbnz	r0, 800c6b2 <__multadd+0x5a>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c6dc <__multadd+0x84>)
 800c6aa:	480d      	ldr	r0, [pc, #52]	@ (800c6e0 <__multadd+0x88>)
 800c6ac:	21ba      	movs	r1, #186	@ 0xba
 800c6ae:	f000 fed7 	bl	800d460 <__assert_func>
 800c6b2:	6922      	ldr	r2, [r4, #16]
 800c6b4:	3202      	adds	r2, #2
 800c6b6:	f104 010c 	add.w	r1, r4, #12
 800c6ba:	0092      	lsls	r2, r2, #2
 800c6bc:	300c      	adds	r0, #12
 800c6be:	f7ff f8c4 	bl	800b84a <memcpy>
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	f7ff ffa5 	bl	800c614 <_Bfree>
 800c6ca:	4644      	mov	r4, r8
 800c6cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6d0:	3501      	adds	r5, #1
 800c6d2:	615e      	str	r6, [r3, #20]
 800c6d4:	6125      	str	r5, [r4, #16]
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6dc:	0800ea28 	.word	0x0800ea28
 800c6e0:	0800ea39 	.word	0x0800ea39

0800c6e4 <__hi0bits>:
 800c6e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	bf36      	itet	cc
 800c6ec:	0403      	lslcc	r3, r0, #16
 800c6ee:	2000      	movcs	r0, #0
 800c6f0:	2010      	movcc	r0, #16
 800c6f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c6f6:	bf3c      	itt	cc
 800c6f8:	021b      	lslcc	r3, r3, #8
 800c6fa:	3008      	addcc	r0, #8
 800c6fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c700:	bf3c      	itt	cc
 800c702:	011b      	lslcc	r3, r3, #4
 800c704:	3004      	addcc	r0, #4
 800c706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c70a:	bf3c      	itt	cc
 800c70c:	009b      	lslcc	r3, r3, #2
 800c70e:	3002      	addcc	r0, #2
 800c710:	2b00      	cmp	r3, #0
 800c712:	db05      	blt.n	800c720 <__hi0bits+0x3c>
 800c714:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c718:	f100 0001 	add.w	r0, r0, #1
 800c71c:	bf08      	it	eq
 800c71e:	2020      	moveq	r0, #32
 800c720:	4770      	bx	lr

0800c722 <__lo0bits>:
 800c722:	6803      	ldr	r3, [r0, #0]
 800c724:	4602      	mov	r2, r0
 800c726:	f013 0007 	ands.w	r0, r3, #7
 800c72a:	d00b      	beq.n	800c744 <__lo0bits+0x22>
 800c72c:	07d9      	lsls	r1, r3, #31
 800c72e:	d421      	bmi.n	800c774 <__lo0bits+0x52>
 800c730:	0798      	lsls	r0, r3, #30
 800c732:	bf49      	itett	mi
 800c734:	085b      	lsrmi	r3, r3, #1
 800c736:	089b      	lsrpl	r3, r3, #2
 800c738:	2001      	movmi	r0, #1
 800c73a:	6013      	strmi	r3, [r2, #0]
 800c73c:	bf5c      	itt	pl
 800c73e:	6013      	strpl	r3, [r2, #0]
 800c740:	2002      	movpl	r0, #2
 800c742:	4770      	bx	lr
 800c744:	b299      	uxth	r1, r3
 800c746:	b909      	cbnz	r1, 800c74c <__lo0bits+0x2a>
 800c748:	0c1b      	lsrs	r3, r3, #16
 800c74a:	2010      	movs	r0, #16
 800c74c:	b2d9      	uxtb	r1, r3
 800c74e:	b909      	cbnz	r1, 800c754 <__lo0bits+0x32>
 800c750:	3008      	adds	r0, #8
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	0719      	lsls	r1, r3, #28
 800c756:	bf04      	itt	eq
 800c758:	091b      	lsreq	r3, r3, #4
 800c75a:	3004      	addeq	r0, #4
 800c75c:	0799      	lsls	r1, r3, #30
 800c75e:	bf04      	itt	eq
 800c760:	089b      	lsreq	r3, r3, #2
 800c762:	3002      	addeq	r0, #2
 800c764:	07d9      	lsls	r1, r3, #31
 800c766:	d403      	bmi.n	800c770 <__lo0bits+0x4e>
 800c768:	085b      	lsrs	r3, r3, #1
 800c76a:	f100 0001 	add.w	r0, r0, #1
 800c76e:	d003      	beq.n	800c778 <__lo0bits+0x56>
 800c770:	6013      	str	r3, [r2, #0]
 800c772:	4770      	bx	lr
 800c774:	2000      	movs	r0, #0
 800c776:	4770      	bx	lr
 800c778:	2020      	movs	r0, #32
 800c77a:	4770      	bx	lr

0800c77c <__i2b>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	460c      	mov	r4, r1
 800c780:	2101      	movs	r1, #1
 800c782:	f7ff ff07 	bl	800c594 <_Balloc>
 800c786:	4602      	mov	r2, r0
 800c788:	b928      	cbnz	r0, 800c796 <__i2b+0x1a>
 800c78a:	4b05      	ldr	r3, [pc, #20]	@ (800c7a0 <__i2b+0x24>)
 800c78c:	4805      	ldr	r0, [pc, #20]	@ (800c7a4 <__i2b+0x28>)
 800c78e:	f240 1145 	movw	r1, #325	@ 0x145
 800c792:	f000 fe65 	bl	800d460 <__assert_func>
 800c796:	2301      	movs	r3, #1
 800c798:	6144      	str	r4, [r0, #20]
 800c79a:	6103      	str	r3, [r0, #16]
 800c79c:	bd10      	pop	{r4, pc}
 800c79e:	bf00      	nop
 800c7a0:	0800ea28 	.word	0x0800ea28
 800c7a4:	0800ea39 	.word	0x0800ea39

0800c7a8 <__multiply>:
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	690a      	ldr	r2, [r1, #16]
 800c7b0:	6923      	ldr	r3, [r4, #16]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	bfa8      	it	ge
 800c7b6:	4623      	movge	r3, r4
 800c7b8:	460f      	mov	r7, r1
 800c7ba:	bfa4      	itt	ge
 800c7bc:	460c      	movge	r4, r1
 800c7be:	461f      	movge	r7, r3
 800c7c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c7c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c7c8:	68a3      	ldr	r3, [r4, #8]
 800c7ca:	6861      	ldr	r1, [r4, #4]
 800c7cc:	eb0a 0609 	add.w	r6, sl, r9
 800c7d0:	42b3      	cmp	r3, r6
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	bfb8      	it	lt
 800c7d6:	3101      	addlt	r1, #1
 800c7d8:	f7ff fedc 	bl	800c594 <_Balloc>
 800c7dc:	b930      	cbnz	r0, 800c7ec <__multiply+0x44>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	4b44      	ldr	r3, [pc, #272]	@ (800c8f4 <__multiply+0x14c>)
 800c7e2:	4845      	ldr	r0, [pc, #276]	@ (800c8f8 <__multiply+0x150>)
 800c7e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c7e8:	f000 fe3a 	bl	800d460 <__assert_func>
 800c7ec:	f100 0514 	add.w	r5, r0, #20
 800c7f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7f4:	462b      	mov	r3, r5
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	4543      	cmp	r3, r8
 800c7fa:	d321      	bcc.n	800c840 <__multiply+0x98>
 800c7fc:	f107 0114 	add.w	r1, r7, #20
 800c800:	f104 0214 	add.w	r2, r4, #20
 800c804:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c808:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c80c:	9302      	str	r3, [sp, #8]
 800c80e:	1b13      	subs	r3, r2, r4
 800c810:	3b15      	subs	r3, #21
 800c812:	f023 0303 	bic.w	r3, r3, #3
 800c816:	3304      	adds	r3, #4
 800c818:	f104 0715 	add.w	r7, r4, #21
 800c81c:	42ba      	cmp	r2, r7
 800c81e:	bf38      	it	cc
 800c820:	2304      	movcc	r3, #4
 800c822:	9301      	str	r3, [sp, #4]
 800c824:	9b02      	ldr	r3, [sp, #8]
 800c826:	9103      	str	r1, [sp, #12]
 800c828:	428b      	cmp	r3, r1
 800c82a:	d80c      	bhi.n	800c846 <__multiply+0x9e>
 800c82c:	2e00      	cmp	r6, #0
 800c82e:	dd03      	ble.n	800c838 <__multiply+0x90>
 800c830:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c834:	2b00      	cmp	r3, #0
 800c836:	d05b      	beq.n	800c8f0 <__multiply+0x148>
 800c838:	6106      	str	r6, [r0, #16]
 800c83a:	b005      	add	sp, #20
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c840:	f843 2b04 	str.w	r2, [r3], #4
 800c844:	e7d8      	b.n	800c7f8 <__multiply+0x50>
 800c846:	f8b1 a000 	ldrh.w	sl, [r1]
 800c84a:	f1ba 0f00 	cmp.w	sl, #0
 800c84e:	d024      	beq.n	800c89a <__multiply+0xf2>
 800c850:	f104 0e14 	add.w	lr, r4, #20
 800c854:	46a9      	mov	r9, r5
 800c856:	f04f 0c00 	mov.w	ip, #0
 800c85a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c85e:	f8d9 3000 	ldr.w	r3, [r9]
 800c862:	fa1f fb87 	uxth.w	fp, r7
 800c866:	b29b      	uxth	r3, r3
 800c868:	fb0a 330b 	mla	r3, sl, fp, r3
 800c86c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c870:	f8d9 7000 	ldr.w	r7, [r9]
 800c874:	4463      	add	r3, ip
 800c876:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c87a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c87e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c882:	b29b      	uxth	r3, r3
 800c884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c888:	4572      	cmp	r2, lr
 800c88a:	f849 3b04 	str.w	r3, [r9], #4
 800c88e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c892:	d8e2      	bhi.n	800c85a <__multiply+0xb2>
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	f845 c003 	str.w	ip, [r5, r3]
 800c89a:	9b03      	ldr	r3, [sp, #12]
 800c89c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8a0:	3104      	adds	r1, #4
 800c8a2:	f1b9 0f00 	cmp.w	r9, #0
 800c8a6:	d021      	beq.n	800c8ec <__multiply+0x144>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	f104 0c14 	add.w	ip, r4, #20
 800c8ae:	46ae      	mov	lr, r5
 800c8b0:	f04f 0a00 	mov.w	sl, #0
 800c8b4:	f8bc b000 	ldrh.w	fp, [ip]
 800c8b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c8bc:	fb09 770b 	mla	r7, r9, fp, r7
 800c8c0:	4457      	add	r7, sl
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8c8:	f84e 3b04 	str.w	r3, [lr], #4
 800c8cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8d4:	f8be 3000 	ldrh.w	r3, [lr]
 800c8d8:	fb09 330a 	mla	r3, r9, sl, r3
 800c8dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c8e0:	4562      	cmp	r2, ip
 800c8e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8e6:	d8e5      	bhi.n	800c8b4 <__multiply+0x10c>
 800c8e8:	9f01      	ldr	r7, [sp, #4]
 800c8ea:	51eb      	str	r3, [r5, r7]
 800c8ec:	3504      	adds	r5, #4
 800c8ee:	e799      	b.n	800c824 <__multiply+0x7c>
 800c8f0:	3e01      	subs	r6, #1
 800c8f2:	e79b      	b.n	800c82c <__multiply+0x84>
 800c8f4:	0800ea28 	.word	0x0800ea28
 800c8f8:	0800ea39 	.word	0x0800ea39

0800c8fc <__pow5mult>:
 800c8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c900:	4615      	mov	r5, r2
 800c902:	f012 0203 	ands.w	r2, r2, #3
 800c906:	4607      	mov	r7, r0
 800c908:	460e      	mov	r6, r1
 800c90a:	d007      	beq.n	800c91c <__pow5mult+0x20>
 800c90c:	4c25      	ldr	r4, [pc, #148]	@ (800c9a4 <__pow5mult+0xa8>)
 800c90e:	3a01      	subs	r2, #1
 800c910:	2300      	movs	r3, #0
 800c912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c916:	f7ff fe9f 	bl	800c658 <__multadd>
 800c91a:	4606      	mov	r6, r0
 800c91c:	10ad      	asrs	r5, r5, #2
 800c91e:	d03d      	beq.n	800c99c <__pow5mult+0xa0>
 800c920:	69fc      	ldr	r4, [r7, #28]
 800c922:	b97c      	cbnz	r4, 800c944 <__pow5mult+0x48>
 800c924:	2010      	movs	r0, #16
 800c926:	f7fd ff97 	bl	800a858 <malloc>
 800c92a:	4602      	mov	r2, r0
 800c92c:	61f8      	str	r0, [r7, #28]
 800c92e:	b928      	cbnz	r0, 800c93c <__pow5mult+0x40>
 800c930:	4b1d      	ldr	r3, [pc, #116]	@ (800c9a8 <__pow5mult+0xac>)
 800c932:	481e      	ldr	r0, [pc, #120]	@ (800c9ac <__pow5mult+0xb0>)
 800c934:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c938:	f000 fd92 	bl	800d460 <__assert_func>
 800c93c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c940:	6004      	str	r4, [r0, #0]
 800c942:	60c4      	str	r4, [r0, #12]
 800c944:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c948:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c94c:	b94c      	cbnz	r4, 800c962 <__pow5mult+0x66>
 800c94e:	f240 2171 	movw	r1, #625	@ 0x271
 800c952:	4638      	mov	r0, r7
 800c954:	f7ff ff12 	bl	800c77c <__i2b>
 800c958:	2300      	movs	r3, #0
 800c95a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c95e:	4604      	mov	r4, r0
 800c960:	6003      	str	r3, [r0, #0]
 800c962:	f04f 0900 	mov.w	r9, #0
 800c966:	07eb      	lsls	r3, r5, #31
 800c968:	d50a      	bpl.n	800c980 <__pow5mult+0x84>
 800c96a:	4631      	mov	r1, r6
 800c96c:	4622      	mov	r2, r4
 800c96e:	4638      	mov	r0, r7
 800c970:	f7ff ff1a 	bl	800c7a8 <__multiply>
 800c974:	4631      	mov	r1, r6
 800c976:	4680      	mov	r8, r0
 800c978:	4638      	mov	r0, r7
 800c97a:	f7ff fe4b 	bl	800c614 <_Bfree>
 800c97e:	4646      	mov	r6, r8
 800c980:	106d      	asrs	r5, r5, #1
 800c982:	d00b      	beq.n	800c99c <__pow5mult+0xa0>
 800c984:	6820      	ldr	r0, [r4, #0]
 800c986:	b938      	cbnz	r0, 800c998 <__pow5mult+0x9c>
 800c988:	4622      	mov	r2, r4
 800c98a:	4621      	mov	r1, r4
 800c98c:	4638      	mov	r0, r7
 800c98e:	f7ff ff0b 	bl	800c7a8 <__multiply>
 800c992:	6020      	str	r0, [r4, #0]
 800c994:	f8c0 9000 	str.w	r9, [r0]
 800c998:	4604      	mov	r4, r0
 800c99a:	e7e4      	b.n	800c966 <__pow5mult+0x6a>
 800c99c:	4630      	mov	r0, r6
 800c99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a2:	bf00      	nop
 800c9a4:	0800ea94 	.word	0x0800ea94
 800c9a8:	0800e9b9 	.word	0x0800e9b9
 800c9ac:	0800ea39 	.word	0x0800ea39

0800c9b0 <__lshift>:
 800c9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	6849      	ldr	r1, [r1, #4]
 800c9b8:	6923      	ldr	r3, [r4, #16]
 800c9ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	4607      	mov	r7, r0
 800c9c2:	4691      	mov	r9, r2
 800c9c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9c8:	f108 0601 	add.w	r6, r8, #1
 800c9cc:	42b3      	cmp	r3, r6
 800c9ce:	db0b      	blt.n	800c9e8 <__lshift+0x38>
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	f7ff fddf 	bl	800c594 <_Balloc>
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	b948      	cbnz	r0, 800c9ee <__lshift+0x3e>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	4b28      	ldr	r3, [pc, #160]	@ (800ca80 <__lshift+0xd0>)
 800c9de:	4829      	ldr	r0, [pc, #164]	@ (800ca84 <__lshift+0xd4>)
 800c9e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c9e4:	f000 fd3c 	bl	800d460 <__assert_func>
 800c9e8:	3101      	adds	r1, #1
 800c9ea:	005b      	lsls	r3, r3, #1
 800c9ec:	e7ee      	b.n	800c9cc <__lshift+0x1c>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	f100 0114 	add.w	r1, r0, #20
 800c9f4:	f100 0210 	add.w	r2, r0, #16
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	4553      	cmp	r3, sl
 800c9fc:	db33      	blt.n	800ca66 <__lshift+0xb6>
 800c9fe:	6920      	ldr	r0, [r4, #16]
 800ca00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca04:	f104 0314 	add.w	r3, r4, #20
 800ca08:	f019 091f 	ands.w	r9, r9, #31
 800ca0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca14:	d02b      	beq.n	800ca6e <__lshift+0xbe>
 800ca16:	f1c9 0e20 	rsb	lr, r9, #32
 800ca1a:	468a      	mov	sl, r1
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	6818      	ldr	r0, [r3, #0]
 800ca20:	fa00 f009 	lsl.w	r0, r0, r9
 800ca24:	4310      	orrs	r0, r2
 800ca26:	f84a 0b04 	str.w	r0, [sl], #4
 800ca2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2e:	459c      	cmp	ip, r3
 800ca30:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca34:	d8f3      	bhi.n	800ca1e <__lshift+0x6e>
 800ca36:	ebac 0304 	sub.w	r3, ip, r4
 800ca3a:	3b15      	subs	r3, #21
 800ca3c:	f023 0303 	bic.w	r3, r3, #3
 800ca40:	3304      	adds	r3, #4
 800ca42:	f104 0015 	add.w	r0, r4, #21
 800ca46:	4584      	cmp	ip, r0
 800ca48:	bf38      	it	cc
 800ca4a:	2304      	movcc	r3, #4
 800ca4c:	50ca      	str	r2, [r1, r3]
 800ca4e:	b10a      	cbz	r2, 800ca54 <__lshift+0xa4>
 800ca50:	f108 0602 	add.w	r6, r8, #2
 800ca54:	3e01      	subs	r6, #1
 800ca56:	4638      	mov	r0, r7
 800ca58:	612e      	str	r6, [r5, #16]
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	f7ff fdda 	bl	800c614 <_Bfree>
 800ca60:	4628      	mov	r0, r5
 800ca62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca66:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	e7c5      	b.n	800c9fa <__lshift+0x4a>
 800ca6e:	3904      	subs	r1, #4
 800ca70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca74:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca78:	459c      	cmp	ip, r3
 800ca7a:	d8f9      	bhi.n	800ca70 <__lshift+0xc0>
 800ca7c:	e7ea      	b.n	800ca54 <__lshift+0xa4>
 800ca7e:	bf00      	nop
 800ca80:	0800ea28 	.word	0x0800ea28
 800ca84:	0800ea39 	.word	0x0800ea39

0800ca88 <__mcmp>:
 800ca88:	690a      	ldr	r2, [r1, #16]
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	6900      	ldr	r0, [r0, #16]
 800ca8e:	1a80      	subs	r0, r0, r2
 800ca90:	b530      	push	{r4, r5, lr}
 800ca92:	d10e      	bne.n	800cab2 <__mcmp+0x2a>
 800ca94:	3314      	adds	r3, #20
 800ca96:	3114      	adds	r1, #20
 800ca98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800caa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800caa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800caa8:	4295      	cmp	r5, r2
 800caaa:	d003      	beq.n	800cab4 <__mcmp+0x2c>
 800caac:	d205      	bcs.n	800caba <__mcmp+0x32>
 800caae:	f04f 30ff 	mov.w	r0, #4294967295
 800cab2:	bd30      	pop	{r4, r5, pc}
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	d3f3      	bcc.n	800caa0 <__mcmp+0x18>
 800cab8:	e7fb      	b.n	800cab2 <__mcmp+0x2a>
 800caba:	2001      	movs	r0, #1
 800cabc:	e7f9      	b.n	800cab2 <__mcmp+0x2a>
	...

0800cac0 <__mdiff>:
 800cac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	4689      	mov	r9, r1
 800cac6:	4606      	mov	r6, r0
 800cac8:	4611      	mov	r1, r2
 800caca:	4648      	mov	r0, r9
 800cacc:	4614      	mov	r4, r2
 800cace:	f7ff ffdb 	bl	800ca88 <__mcmp>
 800cad2:	1e05      	subs	r5, r0, #0
 800cad4:	d112      	bne.n	800cafc <__mdiff+0x3c>
 800cad6:	4629      	mov	r1, r5
 800cad8:	4630      	mov	r0, r6
 800cada:	f7ff fd5b 	bl	800c594 <_Balloc>
 800cade:	4602      	mov	r2, r0
 800cae0:	b928      	cbnz	r0, 800caee <__mdiff+0x2e>
 800cae2:	4b3f      	ldr	r3, [pc, #252]	@ (800cbe0 <__mdiff+0x120>)
 800cae4:	f240 2137 	movw	r1, #567	@ 0x237
 800cae8:	483e      	ldr	r0, [pc, #248]	@ (800cbe4 <__mdiff+0x124>)
 800caea:	f000 fcb9 	bl	800d460 <__assert_func>
 800caee:	2301      	movs	r3, #1
 800caf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800caf4:	4610      	mov	r0, r2
 800caf6:	b003      	add	sp, #12
 800caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cafc:	bfbc      	itt	lt
 800cafe:	464b      	movlt	r3, r9
 800cb00:	46a1      	movlt	r9, r4
 800cb02:	4630      	mov	r0, r6
 800cb04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb08:	bfba      	itte	lt
 800cb0a:	461c      	movlt	r4, r3
 800cb0c:	2501      	movlt	r5, #1
 800cb0e:	2500      	movge	r5, #0
 800cb10:	f7ff fd40 	bl	800c594 <_Balloc>
 800cb14:	4602      	mov	r2, r0
 800cb16:	b918      	cbnz	r0, 800cb20 <__mdiff+0x60>
 800cb18:	4b31      	ldr	r3, [pc, #196]	@ (800cbe0 <__mdiff+0x120>)
 800cb1a:	f240 2145 	movw	r1, #581	@ 0x245
 800cb1e:	e7e3      	b.n	800cae8 <__mdiff+0x28>
 800cb20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb24:	6926      	ldr	r6, [r4, #16]
 800cb26:	60c5      	str	r5, [r0, #12]
 800cb28:	f109 0310 	add.w	r3, r9, #16
 800cb2c:	f109 0514 	add.w	r5, r9, #20
 800cb30:	f104 0e14 	add.w	lr, r4, #20
 800cb34:	f100 0b14 	add.w	fp, r0, #20
 800cb38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	46d9      	mov	r9, fp
 800cb44:	f04f 0c00 	mov.w	ip, #0
 800cb48:	9b01      	ldr	r3, [sp, #4]
 800cb4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	fa1f f38a 	uxth.w	r3, sl
 800cb58:	4619      	mov	r1, r3
 800cb5a:	b283      	uxth	r3, r0
 800cb5c:	1acb      	subs	r3, r1, r3
 800cb5e:	0c00      	lsrs	r0, r0, #16
 800cb60:	4463      	add	r3, ip
 800cb62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb70:	4576      	cmp	r6, lr
 800cb72:	f849 3b04 	str.w	r3, [r9], #4
 800cb76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb7a:	d8e5      	bhi.n	800cb48 <__mdiff+0x88>
 800cb7c:	1b33      	subs	r3, r6, r4
 800cb7e:	3b15      	subs	r3, #21
 800cb80:	f023 0303 	bic.w	r3, r3, #3
 800cb84:	3415      	adds	r4, #21
 800cb86:	3304      	adds	r3, #4
 800cb88:	42a6      	cmp	r6, r4
 800cb8a:	bf38      	it	cc
 800cb8c:	2304      	movcc	r3, #4
 800cb8e:	441d      	add	r5, r3
 800cb90:	445b      	add	r3, fp
 800cb92:	461e      	mov	r6, r3
 800cb94:	462c      	mov	r4, r5
 800cb96:	4544      	cmp	r4, r8
 800cb98:	d30e      	bcc.n	800cbb8 <__mdiff+0xf8>
 800cb9a:	f108 0103 	add.w	r1, r8, #3
 800cb9e:	1b49      	subs	r1, r1, r5
 800cba0:	f021 0103 	bic.w	r1, r1, #3
 800cba4:	3d03      	subs	r5, #3
 800cba6:	45a8      	cmp	r8, r5
 800cba8:	bf38      	it	cc
 800cbaa:	2100      	movcc	r1, #0
 800cbac:	440b      	add	r3, r1
 800cbae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbb2:	b191      	cbz	r1, 800cbda <__mdiff+0x11a>
 800cbb4:	6117      	str	r7, [r2, #16]
 800cbb6:	e79d      	b.n	800caf4 <__mdiff+0x34>
 800cbb8:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbbc:	46e6      	mov	lr, ip
 800cbbe:	0c08      	lsrs	r0, r1, #16
 800cbc0:	fa1c fc81 	uxtah	ip, ip, r1
 800cbc4:	4471      	add	r1, lr
 800cbc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cbca:	b289      	uxth	r1, r1
 800cbcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbd0:	f846 1b04 	str.w	r1, [r6], #4
 800cbd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbd8:	e7dd      	b.n	800cb96 <__mdiff+0xd6>
 800cbda:	3f01      	subs	r7, #1
 800cbdc:	e7e7      	b.n	800cbae <__mdiff+0xee>
 800cbde:	bf00      	nop
 800cbe0:	0800ea28 	.word	0x0800ea28
 800cbe4:	0800ea39 	.word	0x0800ea39

0800cbe8 <__d2b>:
 800cbe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbec:	460f      	mov	r7, r1
 800cbee:	2101      	movs	r1, #1
 800cbf0:	ec59 8b10 	vmov	r8, r9, d0
 800cbf4:	4616      	mov	r6, r2
 800cbf6:	f7ff fccd 	bl	800c594 <_Balloc>
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	b930      	cbnz	r0, 800cc0c <__d2b+0x24>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	4b23      	ldr	r3, [pc, #140]	@ (800cc90 <__d2b+0xa8>)
 800cc02:	4824      	ldr	r0, [pc, #144]	@ (800cc94 <__d2b+0xac>)
 800cc04:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc08:	f000 fc2a 	bl	800d460 <__assert_func>
 800cc0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc14:	b10d      	cbz	r5, 800cc1a <__d2b+0x32>
 800cc16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	f1b8 0300 	subs.w	r3, r8, #0
 800cc20:	d023      	beq.n	800cc6a <__d2b+0x82>
 800cc22:	4668      	mov	r0, sp
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	f7ff fd7c 	bl	800c722 <__lo0bits>
 800cc2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc2e:	b1d0      	cbz	r0, 800cc66 <__d2b+0x7e>
 800cc30:	f1c0 0320 	rsb	r3, r0, #32
 800cc34:	fa02 f303 	lsl.w	r3, r2, r3
 800cc38:	430b      	orrs	r3, r1
 800cc3a:	40c2      	lsrs	r2, r0
 800cc3c:	6163      	str	r3, [r4, #20]
 800cc3e:	9201      	str	r2, [sp, #4]
 800cc40:	9b01      	ldr	r3, [sp, #4]
 800cc42:	61a3      	str	r3, [r4, #24]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	bf0c      	ite	eq
 800cc48:	2201      	moveq	r2, #1
 800cc4a:	2202      	movne	r2, #2
 800cc4c:	6122      	str	r2, [r4, #16]
 800cc4e:	b1a5      	cbz	r5, 800cc7a <__d2b+0x92>
 800cc50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc54:	4405      	add	r5, r0
 800cc56:	603d      	str	r5, [r7, #0]
 800cc58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc5c:	6030      	str	r0, [r6, #0]
 800cc5e:	4620      	mov	r0, r4
 800cc60:	b003      	add	sp, #12
 800cc62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc66:	6161      	str	r1, [r4, #20]
 800cc68:	e7ea      	b.n	800cc40 <__d2b+0x58>
 800cc6a:	a801      	add	r0, sp, #4
 800cc6c:	f7ff fd59 	bl	800c722 <__lo0bits>
 800cc70:	9b01      	ldr	r3, [sp, #4]
 800cc72:	6163      	str	r3, [r4, #20]
 800cc74:	3020      	adds	r0, #32
 800cc76:	2201      	movs	r2, #1
 800cc78:	e7e8      	b.n	800cc4c <__d2b+0x64>
 800cc7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc82:	6038      	str	r0, [r7, #0]
 800cc84:	6918      	ldr	r0, [r3, #16]
 800cc86:	f7ff fd2d 	bl	800c6e4 <__hi0bits>
 800cc8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc8e:	e7e5      	b.n	800cc5c <__d2b+0x74>
 800cc90:	0800ea28 	.word	0x0800ea28
 800cc94:	0800ea39 	.word	0x0800ea39

0800cc98 <__ssputs_r>:
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	688e      	ldr	r6, [r1, #8]
 800cc9e:	461f      	mov	r7, r3
 800cca0:	42be      	cmp	r6, r7
 800cca2:	680b      	ldr	r3, [r1, #0]
 800cca4:	4682      	mov	sl, r0
 800cca6:	460c      	mov	r4, r1
 800cca8:	4690      	mov	r8, r2
 800ccaa:	d82d      	bhi.n	800cd08 <__ssputs_r+0x70>
 800ccac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ccb4:	d026      	beq.n	800cd04 <__ssputs_r+0x6c>
 800ccb6:	6965      	ldr	r5, [r4, #20]
 800ccb8:	6909      	ldr	r1, [r1, #16]
 800ccba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccbe:	eba3 0901 	sub.w	r9, r3, r1
 800ccc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccc6:	1c7b      	adds	r3, r7, #1
 800ccc8:	444b      	add	r3, r9
 800ccca:	106d      	asrs	r5, r5, #1
 800cccc:	429d      	cmp	r5, r3
 800ccce:	bf38      	it	cc
 800ccd0:	461d      	movcc	r5, r3
 800ccd2:	0553      	lsls	r3, r2, #21
 800ccd4:	d527      	bpl.n	800cd26 <__ssputs_r+0x8e>
 800ccd6:	4629      	mov	r1, r5
 800ccd8:	f7fd fdf0 	bl	800a8bc <_malloc_r>
 800ccdc:	4606      	mov	r6, r0
 800ccde:	b360      	cbz	r0, 800cd3a <__ssputs_r+0xa2>
 800cce0:	6921      	ldr	r1, [r4, #16]
 800cce2:	464a      	mov	r2, r9
 800cce4:	f7fe fdb1 	bl	800b84a <memcpy>
 800cce8:	89a3      	ldrh	r3, [r4, #12]
 800ccea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ccee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccf2:	81a3      	strh	r3, [r4, #12]
 800ccf4:	6126      	str	r6, [r4, #16]
 800ccf6:	6165      	str	r5, [r4, #20]
 800ccf8:	444e      	add	r6, r9
 800ccfa:	eba5 0509 	sub.w	r5, r5, r9
 800ccfe:	6026      	str	r6, [r4, #0]
 800cd00:	60a5      	str	r5, [r4, #8]
 800cd02:	463e      	mov	r6, r7
 800cd04:	42be      	cmp	r6, r7
 800cd06:	d900      	bls.n	800cd0a <__ssputs_r+0x72>
 800cd08:	463e      	mov	r6, r7
 800cd0a:	6820      	ldr	r0, [r4, #0]
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	4641      	mov	r1, r8
 800cd10:	f000 fb6a 	bl	800d3e8 <memmove>
 800cd14:	68a3      	ldr	r3, [r4, #8]
 800cd16:	1b9b      	subs	r3, r3, r6
 800cd18:	60a3      	str	r3, [r4, #8]
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	4433      	add	r3, r6
 800cd1e:	6023      	str	r3, [r4, #0]
 800cd20:	2000      	movs	r0, #0
 800cd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd26:	462a      	mov	r2, r5
 800cd28:	f000 fbde 	bl	800d4e8 <_realloc_r>
 800cd2c:	4606      	mov	r6, r0
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d1e0      	bne.n	800ccf4 <__ssputs_r+0x5c>
 800cd32:	6921      	ldr	r1, [r4, #16]
 800cd34:	4650      	mov	r0, sl
 800cd36:	f7ff fbe3 	bl	800c500 <_free_r>
 800cd3a:	230c      	movs	r3, #12
 800cd3c:	f8ca 3000 	str.w	r3, [sl]
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	e7e9      	b.n	800cd22 <__ssputs_r+0x8a>
	...

0800cd50 <_svfiprintf_r>:
 800cd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	4698      	mov	r8, r3
 800cd56:	898b      	ldrh	r3, [r1, #12]
 800cd58:	061b      	lsls	r3, r3, #24
 800cd5a:	b09d      	sub	sp, #116	@ 0x74
 800cd5c:	4607      	mov	r7, r0
 800cd5e:	460d      	mov	r5, r1
 800cd60:	4614      	mov	r4, r2
 800cd62:	d510      	bpl.n	800cd86 <_svfiprintf_r+0x36>
 800cd64:	690b      	ldr	r3, [r1, #16]
 800cd66:	b973      	cbnz	r3, 800cd86 <_svfiprintf_r+0x36>
 800cd68:	2140      	movs	r1, #64	@ 0x40
 800cd6a:	f7fd fda7 	bl	800a8bc <_malloc_r>
 800cd6e:	6028      	str	r0, [r5, #0]
 800cd70:	6128      	str	r0, [r5, #16]
 800cd72:	b930      	cbnz	r0, 800cd82 <_svfiprintf_r+0x32>
 800cd74:	230c      	movs	r3, #12
 800cd76:	603b      	str	r3, [r7, #0]
 800cd78:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7c:	b01d      	add	sp, #116	@ 0x74
 800cd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd82:	2340      	movs	r3, #64	@ 0x40
 800cd84:	616b      	str	r3, [r5, #20]
 800cd86:	2300      	movs	r3, #0
 800cd88:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd8a:	2320      	movs	r3, #32
 800cd8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd90:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd94:	2330      	movs	r3, #48	@ 0x30
 800cd96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf34 <_svfiprintf_r+0x1e4>
 800cd9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd9e:	f04f 0901 	mov.w	r9, #1
 800cda2:	4623      	mov	r3, r4
 800cda4:	469a      	mov	sl, r3
 800cda6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdaa:	b10a      	cbz	r2, 800cdb0 <_svfiprintf_r+0x60>
 800cdac:	2a25      	cmp	r2, #37	@ 0x25
 800cdae:	d1f9      	bne.n	800cda4 <_svfiprintf_r+0x54>
 800cdb0:	ebba 0b04 	subs.w	fp, sl, r4
 800cdb4:	d00b      	beq.n	800cdce <_svfiprintf_r+0x7e>
 800cdb6:	465b      	mov	r3, fp
 800cdb8:	4622      	mov	r2, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	f7ff ff6b 	bl	800cc98 <__ssputs_r>
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	f000 80a7 	beq.w	800cf16 <_svfiprintf_r+0x1c6>
 800cdc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdca:	445a      	add	r2, fp
 800cdcc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdce:	f89a 3000 	ldrb.w	r3, [sl]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f000 809f 	beq.w	800cf16 <_svfiprintf_r+0x1c6>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f04f 32ff 	mov.w	r2, #4294967295
 800cdde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cde2:	f10a 0a01 	add.w	sl, sl, #1
 800cde6:	9304      	str	r3, [sp, #16]
 800cde8:	9307      	str	r3, [sp, #28]
 800cdea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdee:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdf0:	4654      	mov	r4, sl
 800cdf2:	2205      	movs	r2, #5
 800cdf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf8:	484e      	ldr	r0, [pc, #312]	@ (800cf34 <_svfiprintf_r+0x1e4>)
 800cdfa:	f7f3 f9e9 	bl	80001d0 <memchr>
 800cdfe:	9a04      	ldr	r2, [sp, #16]
 800ce00:	b9d8      	cbnz	r0, 800ce3a <_svfiprintf_r+0xea>
 800ce02:	06d0      	lsls	r0, r2, #27
 800ce04:	bf44      	itt	mi
 800ce06:	2320      	movmi	r3, #32
 800ce08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce0c:	0711      	lsls	r1, r2, #28
 800ce0e:	bf44      	itt	mi
 800ce10:	232b      	movmi	r3, #43	@ 0x2b
 800ce12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce16:	f89a 3000 	ldrb.w	r3, [sl]
 800ce1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce1c:	d015      	beq.n	800ce4a <_svfiprintf_r+0xfa>
 800ce1e:	9a07      	ldr	r2, [sp, #28]
 800ce20:	4654      	mov	r4, sl
 800ce22:	2000      	movs	r0, #0
 800ce24:	f04f 0c0a 	mov.w	ip, #10
 800ce28:	4621      	mov	r1, r4
 800ce2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce2e:	3b30      	subs	r3, #48	@ 0x30
 800ce30:	2b09      	cmp	r3, #9
 800ce32:	d94b      	bls.n	800cecc <_svfiprintf_r+0x17c>
 800ce34:	b1b0      	cbz	r0, 800ce64 <_svfiprintf_r+0x114>
 800ce36:	9207      	str	r2, [sp, #28]
 800ce38:	e014      	b.n	800ce64 <_svfiprintf_r+0x114>
 800ce3a:	eba0 0308 	sub.w	r3, r0, r8
 800ce3e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce42:	4313      	orrs	r3, r2
 800ce44:	9304      	str	r3, [sp, #16]
 800ce46:	46a2      	mov	sl, r4
 800ce48:	e7d2      	b.n	800cdf0 <_svfiprintf_r+0xa0>
 800ce4a:	9b03      	ldr	r3, [sp, #12]
 800ce4c:	1d19      	adds	r1, r3, #4
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	9103      	str	r1, [sp, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bfbb      	ittet	lt
 800ce56:	425b      	neglt	r3, r3
 800ce58:	f042 0202 	orrlt.w	r2, r2, #2
 800ce5c:	9307      	strge	r3, [sp, #28]
 800ce5e:	9307      	strlt	r3, [sp, #28]
 800ce60:	bfb8      	it	lt
 800ce62:	9204      	strlt	r2, [sp, #16]
 800ce64:	7823      	ldrb	r3, [r4, #0]
 800ce66:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce68:	d10a      	bne.n	800ce80 <_svfiprintf_r+0x130>
 800ce6a:	7863      	ldrb	r3, [r4, #1]
 800ce6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce6e:	d132      	bne.n	800ced6 <_svfiprintf_r+0x186>
 800ce70:	9b03      	ldr	r3, [sp, #12]
 800ce72:	1d1a      	adds	r2, r3, #4
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	9203      	str	r2, [sp, #12]
 800ce78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce7c:	3402      	adds	r4, #2
 800ce7e:	9305      	str	r3, [sp, #20]
 800ce80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf44 <_svfiprintf_r+0x1f4>
 800ce84:	7821      	ldrb	r1, [r4, #0]
 800ce86:	2203      	movs	r2, #3
 800ce88:	4650      	mov	r0, sl
 800ce8a:	f7f3 f9a1 	bl	80001d0 <memchr>
 800ce8e:	b138      	cbz	r0, 800cea0 <_svfiprintf_r+0x150>
 800ce90:	9b04      	ldr	r3, [sp, #16]
 800ce92:	eba0 000a 	sub.w	r0, r0, sl
 800ce96:	2240      	movs	r2, #64	@ 0x40
 800ce98:	4082      	lsls	r2, r0
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	3401      	adds	r4, #1
 800ce9e:	9304      	str	r3, [sp, #16]
 800cea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea4:	4824      	ldr	r0, [pc, #144]	@ (800cf38 <_svfiprintf_r+0x1e8>)
 800cea6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ceaa:	2206      	movs	r2, #6
 800ceac:	f7f3 f990 	bl	80001d0 <memchr>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d036      	beq.n	800cf22 <_svfiprintf_r+0x1d2>
 800ceb4:	4b21      	ldr	r3, [pc, #132]	@ (800cf3c <_svfiprintf_r+0x1ec>)
 800ceb6:	bb1b      	cbnz	r3, 800cf00 <_svfiprintf_r+0x1b0>
 800ceb8:	9b03      	ldr	r3, [sp, #12]
 800ceba:	3307      	adds	r3, #7
 800cebc:	f023 0307 	bic.w	r3, r3, #7
 800cec0:	3308      	adds	r3, #8
 800cec2:	9303      	str	r3, [sp, #12]
 800cec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec6:	4433      	add	r3, r6
 800cec8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceca:	e76a      	b.n	800cda2 <_svfiprintf_r+0x52>
 800cecc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ced0:	460c      	mov	r4, r1
 800ced2:	2001      	movs	r0, #1
 800ced4:	e7a8      	b.n	800ce28 <_svfiprintf_r+0xd8>
 800ced6:	2300      	movs	r3, #0
 800ced8:	3401      	adds	r4, #1
 800ceda:	9305      	str	r3, [sp, #20]
 800cedc:	4619      	mov	r1, r3
 800cede:	f04f 0c0a 	mov.w	ip, #10
 800cee2:	4620      	mov	r0, r4
 800cee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cee8:	3a30      	subs	r2, #48	@ 0x30
 800ceea:	2a09      	cmp	r2, #9
 800ceec:	d903      	bls.n	800cef6 <_svfiprintf_r+0x1a6>
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d0c6      	beq.n	800ce80 <_svfiprintf_r+0x130>
 800cef2:	9105      	str	r1, [sp, #20]
 800cef4:	e7c4      	b.n	800ce80 <_svfiprintf_r+0x130>
 800cef6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cefa:	4604      	mov	r4, r0
 800cefc:	2301      	movs	r3, #1
 800cefe:	e7f0      	b.n	800cee2 <_svfiprintf_r+0x192>
 800cf00:	ab03      	add	r3, sp, #12
 800cf02:	9300      	str	r3, [sp, #0]
 800cf04:	462a      	mov	r2, r5
 800cf06:	4b0e      	ldr	r3, [pc, #56]	@ (800cf40 <_svfiprintf_r+0x1f0>)
 800cf08:	a904      	add	r1, sp, #16
 800cf0a:	4638      	mov	r0, r7
 800cf0c:	f7fd fe02 	bl	800ab14 <_printf_float>
 800cf10:	1c42      	adds	r2, r0, #1
 800cf12:	4606      	mov	r6, r0
 800cf14:	d1d6      	bne.n	800cec4 <_svfiprintf_r+0x174>
 800cf16:	89ab      	ldrh	r3, [r5, #12]
 800cf18:	065b      	lsls	r3, r3, #25
 800cf1a:	f53f af2d 	bmi.w	800cd78 <_svfiprintf_r+0x28>
 800cf1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf20:	e72c      	b.n	800cd7c <_svfiprintf_r+0x2c>
 800cf22:	ab03      	add	r3, sp, #12
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	462a      	mov	r2, r5
 800cf28:	4b05      	ldr	r3, [pc, #20]	@ (800cf40 <_svfiprintf_r+0x1f0>)
 800cf2a:	a904      	add	r1, sp, #16
 800cf2c:	4638      	mov	r0, r7
 800cf2e:	f7fe f889 	bl	800b044 <_printf_i>
 800cf32:	e7ed      	b.n	800cf10 <_svfiprintf_r+0x1c0>
 800cf34:	0800eb90 	.word	0x0800eb90
 800cf38:	0800eb9a 	.word	0x0800eb9a
 800cf3c:	0800ab15 	.word	0x0800ab15
 800cf40:	0800cc99 	.word	0x0800cc99
 800cf44:	0800eb96 	.word	0x0800eb96

0800cf48 <__sfputc_r>:
 800cf48:	6893      	ldr	r3, [r2, #8]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	b410      	push	{r4}
 800cf50:	6093      	str	r3, [r2, #8]
 800cf52:	da08      	bge.n	800cf66 <__sfputc_r+0x1e>
 800cf54:	6994      	ldr	r4, [r2, #24]
 800cf56:	42a3      	cmp	r3, r4
 800cf58:	db01      	blt.n	800cf5e <__sfputc_r+0x16>
 800cf5a:	290a      	cmp	r1, #10
 800cf5c:	d103      	bne.n	800cf66 <__sfputc_r+0x1e>
 800cf5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf62:	f7fe bb38 	b.w	800b5d6 <__swbuf_r>
 800cf66:	6813      	ldr	r3, [r2, #0]
 800cf68:	1c58      	adds	r0, r3, #1
 800cf6a:	6010      	str	r0, [r2, #0]
 800cf6c:	7019      	strb	r1, [r3, #0]
 800cf6e:	4608      	mov	r0, r1
 800cf70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <__sfputs_r>:
 800cf76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf78:	4606      	mov	r6, r0
 800cf7a:	460f      	mov	r7, r1
 800cf7c:	4614      	mov	r4, r2
 800cf7e:	18d5      	adds	r5, r2, r3
 800cf80:	42ac      	cmp	r4, r5
 800cf82:	d101      	bne.n	800cf88 <__sfputs_r+0x12>
 800cf84:	2000      	movs	r0, #0
 800cf86:	e007      	b.n	800cf98 <__sfputs_r+0x22>
 800cf88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf8c:	463a      	mov	r2, r7
 800cf8e:	4630      	mov	r0, r6
 800cf90:	f7ff ffda 	bl	800cf48 <__sfputc_r>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d1f3      	bne.n	800cf80 <__sfputs_r+0xa>
 800cf98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf9c <_vfiprintf_r>:
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	460d      	mov	r5, r1
 800cfa2:	b09d      	sub	sp, #116	@ 0x74
 800cfa4:	4614      	mov	r4, r2
 800cfa6:	4698      	mov	r8, r3
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	b118      	cbz	r0, 800cfb4 <_vfiprintf_r+0x18>
 800cfac:	6a03      	ldr	r3, [r0, #32]
 800cfae:	b90b      	cbnz	r3, 800cfb4 <_vfiprintf_r+0x18>
 800cfb0:	f7fe f9f4 	bl	800b39c <__sinit>
 800cfb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfb6:	07d9      	lsls	r1, r3, #31
 800cfb8:	d405      	bmi.n	800cfc6 <_vfiprintf_r+0x2a>
 800cfba:	89ab      	ldrh	r3, [r5, #12]
 800cfbc:	059a      	lsls	r2, r3, #22
 800cfbe:	d402      	bmi.n	800cfc6 <_vfiprintf_r+0x2a>
 800cfc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfc2:	f7fe fc40 	bl	800b846 <__retarget_lock_acquire_recursive>
 800cfc6:	89ab      	ldrh	r3, [r5, #12]
 800cfc8:	071b      	lsls	r3, r3, #28
 800cfca:	d501      	bpl.n	800cfd0 <_vfiprintf_r+0x34>
 800cfcc:	692b      	ldr	r3, [r5, #16]
 800cfce:	b99b      	cbnz	r3, 800cff8 <_vfiprintf_r+0x5c>
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f7fe fb3e 	bl	800b654 <__swsetup_r>
 800cfd8:	b170      	cbz	r0, 800cff8 <_vfiprintf_r+0x5c>
 800cfda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfdc:	07dc      	lsls	r4, r3, #31
 800cfde:	d504      	bpl.n	800cfea <_vfiprintf_r+0x4e>
 800cfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe4:	b01d      	add	sp, #116	@ 0x74
 800cfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	0598      	lsls	r0, r3, #22
 800cfee:	d4f7      	bmi.n	800cfe0 <_vfiprintf_r+0x44>
 800cff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cff2:	f7fe fc29 	bl	800b848 <__retarget_lock_release_recursive>
 800cff6:	e7f3      	b.n	800cfe0 <_vfiprintf_r+0x44>
 800cff8:	2300      	movs	r3, #0
 800cffa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cffc:	2320      	movs	r3, #32
 800cffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d002:	f8cd 800c 	str.w	r8, [sp, #12]
 800d006:	2330      	movs	r3, #48	@ 0x30
 800d008:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d1b8 <_vfiprintf_r+0x21c>
 800d00c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d010:	f04f 0901 	mov.w	r9, #1
 800d014:	4623      	mov	r3, r4
 800d016:	469a      	mov	sl, r3
 800d018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d01c:	b10a      	cbz	r2, 800d022 <_vfiprintf_r+0x86>
 800d01e:	2a25      	cmp	r2, #37	@ 0x25
 800d020:	d1f9      	bne.n	800d016 <_vfiprintf_r+0x7a>
 800d022:	ebba 0b04 	subs.w	fp, sl, r4
 800d026:	d00b      	beq.n	800d040 <_vfiprintf_r+0xa4>
 800d028:	465b      	mov	r3, fp
 800d02a:	4622      	mov	r2, r4
 800d02c:	4629      	mov	r1, r5
 800d02e:	4630      	mov	r0, r6
 800d030:	f7ff ffa1 	bl	800cf76 <__sfputs_r>
 800d034:	3001      	adds	r0, #1
 800d036:	f000 80a7 	beq.w	800d188 <_vfiprintf_r+0x1ec>
 800d03a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d03c:	445a      	add	r2, fp
 800d03e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d040:	f89a 3000 	ldrb.w	r3, [sl]
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 809f 	beq.w	800d188 <_vfiprintf_r+0x1ec>
 800d04a:	2300      	movs	r3, #0
 800d04c:	f04f 32ff 	mov.w	r2, #4294967295
 800d050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d054:	f10a 0a01 	add.w	sl, sl, #1
 800d058:	9304      	str	r3, [sp, #16]
 800d05a:	9307      	str	r3, [sp, #28]
 800d05c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d060:	931a      	str	r3, [sp, #104]	@ 0x68
 800d062:	4654      	mov	r4, sl
 800d064:	2205      	movs	r2, #5
 800d066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d06a:	4853      	ldr	r0, [pc, #332]	@ (800d1b8 <_vfiprintf_r+0x21c>)
 800d06c:	f7f3 f8b0 	bl	80001d0 <memchr>
 800d070:	9a04      	ldr	r2, [sp, #16]
 800d072:	b9d8      	cbnz	r0, 800d0ac <_vfiprintf_r+0x110>
 800d074:	06d1      	lsls	r1, r2, #27
 800d076:	bf44      	itt	mi
 800d078:	2320      	movmi	r3, #32
 800d07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d07e:	0713      	lsls	r3, r2, #28
 800d080:	bf44      	itt	mi
 800d082:	232b      	movmi	r3, #43	@ 0x2b
 800d084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d088:	f89a 3000 	ldrb.w	r3, [sl]
 800d08c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d08e:	d015      	beq.n	800d0bc <_vfiprintf_r+0x120>
 800d090:	9a07      	ldr	r2, [sp, #28]
 800d092:	4654      	mov	r4, sl
 800d094:	2000      	movs	r0, #0
 800d096:	f04f 0c0a 	mov.w	ip, #10
 800d09a:	4621      	mov	r1, r4
 800d09c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0a0:	3b30      	subs	r3, #48	@ 0x30
 800d0a2:	2b09      	cmp	r3, #9
 800d0a4:	d94b      	bls.n	800d13e <_vfiprintf_r+0x1a2>
 800d0a6:	b1b0      	cbz	r0, 800d0d6 <_vfiprintf_r+0x13a>
 800d0a8:	9207      	str	r2, [sp, #28]
 800d0aa:	e014      	b.n	800d0d6 <_vfiprintf_r+0x13a>
 800d0ac:	eba0 0308 	sub.w	r3, r0, r8
 800d0b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	9304      	str	r3, [sp, #16]
 800d0b8:	46a2      	mov	sl, r4
 800d0ba:	e7d2      	b.n	800d062 <_vfiprintf_r+0xc6>
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	1d19      	adds	r1, r3, #4
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	9103      	str	r1, [sp, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	bfbb      	ittet	lt
 800d0c8:	425b      	neglt	r3, r3
 800d0ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ce:	9307      	strge	r3, [sp, #28]
 800d0d0:	9307      	strlt	r3, [sp, #28]
 800d0d2:	bfb8      	it	lt
 800d0d4:	9204      	strlt	r2, [sp, #16]
 800d0d6:	7823      	ldrb	r3, [r4, #0]
 800d0d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0da:	d10a      	bne.n	800d0f2 <_vfiprintf_r+0x156>
 800d0dc:	7863      	ldrb	r3, [r4, #1]
 800d0de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0e0:	d132      	bne.n	800d148 <_vfiprintf_r+0x1ac>
 800d0e2:	9b03      	ldr	r3, [sp, #12]
 800d0e4:	1d1a      	adds	r2, r3, #4
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	9203      	str	r2, [sp, #12]
 800d0ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0ee:	3402      	adds	r4, #2
 800d0f0:	9305      	str	r3, [sp, #20]
 800d0f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1c8 <_vfiprintf_r+0x22c>
 800d0f6:	7821      	ldrb	r1, [r4, #0]
 800d0f8:	2203      	movs	r2, #3
 800d0fa:	4650      	mov	r0, sl
 800d0fc:	f7f3 f868 	bl	80001d0 <memchr>
 800d100:	b138      	cbz	r0, 800d112 <_vfiprintf_r+0x176>
 800d102:	9b04      	ldr	r3, [sp, #16]
 800d104:	eba0 000a 	sub.w	r0, r0, sl
 800d108:	2240      	movs	r2, #64	@ 0x40
 800d10a:	4082      	lsls	r2, r0
 800d10c:	4313      	orrs	r3, r2
 800d10e:	3401      	adds	r4, #1
 800d110:	9304      	str	r3, [sp, #16]
 800d112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d116:	4829      	ldr	r0, [pc, #164]	@ (800d1bc <_vfiprintf_r+0x220>)
 800d118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d11c:	2206      	movs	r2, #6
 800d11e:	f7f3 f857 	bl	80001d0 <memchr>
 800d122:	2800      	cmp	r0, #0
 800d124:	d03f      	beq.n	800d1a6 <_vfiprintf_r+0x20a>
 800d126:	4b26      	ldr	r3, [pc, #152]	@ (800d1c0 <_vfiprintf_r+0x224>)
 800d128:	bb1b      	cbnz	r3, 800d172 <_vfiprintf_r+0x1d6>
 800d12a:	9b03      	ldr	r3, [sp, #12]
 800d12c:	3307      	adds	r3, #7
 800d12e:	f023 0307 	bic.w	r3, r3, #7
 800d132:	3308      	adds	r3, #8
 800d134:	9303      	str	r3, [sp, #12]
 800d136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d138:	443b      	add	r3, r7
 800d13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d13c:	e76a      	b.n	800d014 <_vfiprintf_r+0x78>
 800d13e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d142:	460c      	mov	r4, r1
 800d144:	2001      	movs	r0, #1
 800d146:	e7a8      	b.n	800d09a <_vfiprintf_r+0xfe>
 800d148:	2300      	movs	r3, #0
 800d14a:	3401      	adds	r4, #1
 800d14c:	9305      	str	r3, [sp, #20]
 800d14e:	4619      	mov	r1, r3
 800d150:	f04f 0c0a 	mov.w	ip, #10
 800d154:	4620      	mov	r0, r4
 800d156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d15a:	3a30      	subs	r2, #48	@ 0x30
 800d15c:	2a09      	cmp	r2, #9
 800d15e:	d903      	bls.n	800d168 <_vfiprintf_r+0x1cc>
 800d160:	2b00      	cmp	r3, #0
 800d162:	d0c6      	beq.n	800d0f2 <_vfiprintf_r+0x156>
 800d164:	9105      	str	r1, [sp, #20]
 800d166:	e7c4      	b.n	800d0f2 <_vfiprintf_r+0x156>
 800d168:	fb0c 2101 	mla	r1, ip, r1, r2
 800d16c:	4604      	mov	r4, r0
 800d16e:	2301      	movs	r3, #1
 800d170:	e7f0      	b.n	800d154 <_vfiprintf_r+0x1b8>
 800d172:	ab03      	add	r3, sp, #12
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	462a      	mov	r2, r5
 800d178:	4b12      	ldr	r3, [pc, #72]	@ (800d1c4 <_vfiprintf_r+0x228>)
 800d17a:	a904      	add	r1, sp, #16
 800d17c:	4630      	mov	r0, r6
 800d17e:	f7fd fcc9 	bl	800ab14 <_printf_float>
 800d182:	4607      	mov	r7, r0
 800d184:	1c78      	adds	r0, r7, #1
 800d186:	d1d6      	bne.n	800d136 <_vfiprintf_r+0x19a>
 800d188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d18a:	07d9      	lsls	r1, r3, #31
 800d18c:	d405      	bmi.n	800d19a <_vfiprintf_r+0x1fe>
 800d18e:	89ab      	ldrh	r3, [r5, #12]
 800d190:	059a      	lsls	r2, r3, #22
 800d192:	d402      	bmi.n	800d19a <_vfiprintf_r+0x1fe>
 800d194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d196:	f7fe fb57 	bl	800b848 <__retarget_lock_release_recursive>
 800d19a:	89ab      	ldrh	r3, [r5, #12]
 800d19c:	065b      	lsls	r3, r3, #25
 800d19e:	f53f af1f 	bmi.w	800cfe0 <_vfiprintf_r+0x44>
 800d1a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1a4:	e71e      	b.n	800cfe4 <_vfiprintf_r+0x48>
 800d1a6:	ab03      	add	r3, sp, #12
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	462a      	mov	r2, r5
 800d1ac:	4b05      	ldr	r3, [pc, #20]	@ (800d1c4 <_vfiprintf_r+0x228>)
 800d1ae:	a904      	add	r1, sp, #16
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	f7fd ff47 	bl	800b044 <_printf_i>
 800d1b6:	e7e4      	b.n	800d182 <_vfiprintf_r+0x1e6>
 800d1b8:	0800eb90 	.word	0x0800eb90
 800d1bc:	0800eb9a 	.word	0x0800eb9a
 800d1c0:	0800ab15 	.word	0x0800ab15
 800d1c4:	0800cf77 	.word	0x0800cf77
 800d1c8:	0800eb96 	.word	0x0800eb96

0800d1cc <__sflush_r>:
 800d1cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d4:	0716      	lsls	r6, r2, #28
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	460c      	mov	r4, r1
 800d1da:	d454      	bmi.n	800d286 <__sflush_r+0xba>
 800d1dc:	684b      	ldr	r3, [r1, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	dc02      	bgt.n	800d1e8 <__sflush_r+0x1c>
 800d1e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	dd48      	ble.n	800d27a <__sflush_r+0xae>
 800d1e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d1ea:	2e00      	cmp	r6, #0
 800d1ec:	d045      	beq.n	800d27a <__sflush_r+0xae>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d1f4:	682f      	ldr	r7, [r5, #0]
 800d1f6:	6a21      	ldr	r1, [r4, #32]
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	d030      	beq.n	800d25e <__sflush_r+0x92>
 800d1fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d1fe:	89a3      	ldrh	r3, [r4, #12]
 800d200:	0759      	lsls	r1, r3, #29
 800d202:	d505      	bpl.n	800d210 <__sflush_r+0x44>
 800d204:	6863      	ldr	r3, [r4, #4]
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d20a:	b10b      	cbz	r3, 800d210 <__sflush_r+0x44>
 800d20c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d20e:	1ad2      	subs	r2, r2, r3
 800d210:	2300      	movs	r3, #0
 800d212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d214:	6a21      	ldr	r1, [r4, #32]
 800d216:	4628      	mov	r0, r5
 800d218:	47b0      	blx	r6
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	d106      	bne.n	800d22e <__sflush_r+0x62>
 800d220:	6829      	ldr	r1, [r5, #0]
 800d222:	291d      	cmp	r1, #29
 800d224:	d82b      	bhi.n	800d27e <__sflush_r+0xb2>
 800d226:	4a2a      	ldr	r2, [pc, #168]	@ (800d2d0 <__sflush_r+0x104>)
 800d228:	410a      	asrs	r2, r1
 800d22a:	07d6      	lsls	r6, r2, #31
 800d22c:	d427      	bmi.n	800d27e <__sflush_r+0xb2>
 800d22e:	2200      	movs	r2, #0
 800d230:	6062      	str	r2, [r4, #4]
 800d232:	04d9      	lsls	r1, r3, #19
 800d234:	6922      	ldr	r2, [r4, #16]
 800d236:	6022      	str	r2, [r4, #0]
 800d238:	d504      	bpl.n	800d244 <__sflush_r+0x78>
 800d23a:	1c42      	adds	r2, r0, #1
 800d23c:	d101      	bne.n	800d242 <__sflush_r+0x76>
 800d23e:	682b      	ldr	r3, [r5, #0]
 800d240:	b903      	cbnz	r3, 800d244 <__sflush_r+0x78>
 800d242:	6560      	str	r0, [r4, #84]	@ 0x54
 800d244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d246:	602f      	str	r7, [r5, #0]
 800d248:	b1b9      	cbz	r1, 800d27a <__sflush_r+0xae>
 800d24a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d24e:	4299      	cmp	r1, r3
 800d250:	d002      	beq.n	800d258 <__sflush_r+0x8c>
 800d252:	4628      	mov	r0, r5
 800d254:	f7ff f954 	bl	800c500 <_free_r>
 800d258:	2300      	movs	r3, #0
 800d25a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d25c:	e00d      	b.n	800d27a <__sflush_r+0xae>
 800d25e:	2301      	movs	r3, #1
 800d260:	4628      	mov	r0, r5
 800d262:	47b0      	blx	r6
 800d264:	4602      	mov	r2, r0
 800d266:	1c50      	adds	r0, r2, #1
 800d268:	d1c9      	bne.n	800d1fe <__sflush_r+0x32>
 800d26a:	682b      	ldr	r3, [r5, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d0c6      	beq.n	800d1fe <__sflush_r+0x32>
 800d270:	2b1d      	cmp	r3, #29
 800d272:	d001      	beq.n	800d278 <__sflush_r+0xac>
 800d274:	2b16      	cmp	r3, #22
 800d276:	d11e      	bne.n	800d2b6 <__sflush_r+0xea>
 800d278:	602f      	str	r7, [r5, #0]
 800d27a:	2000      	movs	r0, #0
 800d27c:	e022      	b.n	800d2c4 <__sflush_r+0xf8>
 800d27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d282:	b21b      	sxth	r3, r3
 800d284:	e01b      	b.n	800d2be <__sflush_r+0xf2>
 800d286:	690f      	ldr	r7, [r1, #16]
 800d288:	2f00      	cmp	r7, #0
 800d28a:	d0f6      	beq.n	800d27a <__sflush_r+0xae>
 800d28c:	0793      	lsls	r3, r2, #30
 800d28e:	680e      	ldr	r6, [r1, #0]
 800d290:	bf08      	it	eq
 800d292:	694b      	ldreq	r3, [r1, #20]
 800d294:	600f      	str	r7, [r1, #0]
 800d296:	bf18      	it	ne
 800d298:	2300      	movne	r3, #0
 800d29a:	eba6 0807 	sub.w	r8, r6, r7
 800d29e:	608b      	str	r3, [r1, #8]
 800d2a0:	f1b8 0f00 	cmp.w	r8, #0
 800d2a4:	dde9      	ble.n	800d27a <__sflush_r+0xae>
 800d2a6:	6a21      	ldr	r1, [r4, #32]
 800d2a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d2aa:	4643      	mov	r3, r8
 800d2ac:	463a      	mov	r2, r7
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b0      	blx	r6
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	dc08      	bgt.n	800d2c8 <__sflush_r+0xfc>
 800d2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2be:	81a3      	strh	r3, [r4, #12]
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c8:	4407      	add	r7, r0
 800d2ca:	eba8 0800 	sub.w	r8, r8, r0
 800d2ce:	e7e7      	b.n	800d2a0 <__sflush_r+0xd4>
 800d2d0:	dfbffffe 	.word	0xdfbffffe

0800d2d4 <_fflush_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	690b      	ldr	r3, [r1, #16]
 800d2d8:	4605      	mov	r5, r0
 800d2da:	460c      	mov	r4, r1
 800d2dc:	b913      	cbnz	r3, 800d2e4 <_fflush_r+0x10>
 800d2de:	2500      	movs	r5, #0
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	b118      	cbz	r0, 800d2ee <_fflush_r+0x1a>
 800d2e6:	6a03      	ldr	r3, [r0, #32]
 800d2e8:	b90b      	cbnz	r3, 800d2ee <_fflush_r+0x1a>
 800d2ea:	f7fe f857 	bl	800b39c <__sinit>
 800d2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d0f3      	beq.n	800d2de <_fflush_r+0xa>
 800d2f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d2f8:	07d0      	lsls	r0, r2, #31
 800d2fa:	d404      	bmi.n	800d306 <_fflush_r+0x32>
 800d2fc:	0599      	lsls	r1, r3, #22
 800d2fe:	d402      	bmi.n	800d306 <_fflush_r+0x32>
 800d300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d302:	f7fe faa0 	bl	800b846 <__retarget_lock_acquire_recursive>
 800d306:	4628      	mov	r0, r5
 800d308:	4621      	mov	r1, r4
 800d30a:	f7ff ff5f 	bl	800d1cc <__sflush_r>
 800d30e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d310:	07da      	lsls	r2, r3, #31
 800d312:	4605      	mov	r5, r0
 800d314:	d4e4      	bmi.n	800d2e0 <_fflush_r+0xc>
 800d316:	89a3      	ldrh	r3, [r4, #12]
 800d318:	059b      	lsls	r3, r3, #22
 800d31a:	d4e1      	bmi.n	800d2e0 <_fflush_r+0xc>
 800d31c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d31e:	f7fe fa93 	bl	800b848 <__retarget_lock_release_recursive>
 800d322:	e7dd      	b.n	800d2e0 <_fflush_r+0xc>

0800d324 <__swhatbuf_r>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	460c      	mov	r4, r1
 800d328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32c:	2900      	cmp	r1, #0
 800d32e:	b096      	sub	sp, #88	@ 0x58
 800d330:	4615      	mov	r5, r2
 800d332:	461e      	mov	r6, r3
 800d334:	da0d      	bge.n	800d352 <__swhatbuf_r+0x2e>
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d33c:	f04f 0100 	mov.w	r1, #0
 800d340:	bf14      	ite	ne
 800d342:	2340      	movne	r3, #64	@ 0x40
 800d344:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d348:	2000      	movs	r0, #0
 800d34a:	6031      	str	r1, [r6, #0]
 800d34c:	602b      	str	r3, [r5, #0]
 800d34e:	b016      	add	sp, #88	@ 0x58
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	466a      	mov	r2, sp
 800d354:	f000 f862 	bl	800d41c <_fstat_r>
 800d358:	2800      	cmp	r0, #0
 800d35a:	dbec      	blt.n	800d336 <__swhatbuf_r+0x12>
 800d35c:	9901      	ldr	r1, [sp, #4]
 800d35e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d362:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d366:	4259      	negs	r1, r3
 800d368:	4159      	adcs	r1, r3
 800d36a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d36e:	e7eb      	b.n	800d348 <__swhatbuf_r+0x24>

0800d370 <__smakebuf_r>:
 800d370:	898b      	ldrh	r3, [r1, #12]
 800d372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d374:	079d      	lsls	r5, r3, #30
 800d376:	4606      	mov	r6, r0
 800d378:	460c      	mov	r4, r1
 800d37a:	d507      	bpl.n	800d38c <__smakebuf_r+0x1c>
 800d37c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d380:	6023      	str	r3, [r4, #0]
 800d382:	6123      	str	r3, [r4, #16]
 800d384:	2301      	movs	r3, #1
 800d386:	6163      	str	r3, [r4, #20]
 800d388:	b003      	add	sp, #12
 800d38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d38c:	ab01      	add	r3, sp, #4
 800d38e:	466a      	mov	r2, sp
 800d390:	f7ff ffc8 	bl	800d324 <__swhatbuf_r>
 800d394:	9f00      	ldr	r7, [sp, #0]
 800d396:	4605      	mov	r5, r0
 800d398:	4639      	mov	r1, r7
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7fd fa8e 	bl	800a8bc <_malloc_r>
 800d3a0:	b948      	cbnz	r0, 800d3b6 <__smakebuf_r+0x46>
 800d3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a6:	059a      	lsls	r2, r3, #22
 800d3a8:	d4ee      	bmi.n	800d388 <__smakebuf_r+0x18>
 800d3aa:	f023 0303 	bic.w	r3, r3, #3
 800d3ae:	f043 0302 	orr.w	r3, r3, #2
 800d3b2:	81a3      	strh	r3, [r4, #12]
 800d3b4:	e7e2      	b.n	800d37c <__smakebuf_r+0xc>
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	6020      	str	r0, [r4, #0]
 800d3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3be:	81a3      	strh	r3, [r4, #12]
 800d3c0:	9b01      	ldr	r3, [sp, #4]
 800d3c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3c6:	b15b      	cbz	r3, 800d3e0 <__smakebuf_r+0x70>
 800d3c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	f000 f837 	bl	800d440 <_isatty_r>
 800d3d2:	b128      	cbz	r0, 800d3e0 <__smakebuf_r+0x70>
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	f043 0301 	orr.w	r3, r3, #1
 800d3de:	81a3      	strh	r3, [r4, #12]
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	431d      	orrs	r5, r3
 800d3e4:	81a5      	strh	r5, [r4, #12]
 800d3e6:	e7cf      	b.n	800d388 <__smakebuf_r+0x18>

0800d3e8 <memmove>:
 800d3e8:	4288      	cmp	r0, r1
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	eb01 0402 	add.w	r4, r1, r2
 800d3f0:	d902      	bls.n	800d3f8 <memmove+0x10>
 800d3f2:	4284      	cmp	r4, r0
 800d3f4:	4623      	mov	r3, r4
 800d3f6:	d807      	bhi.n	800d408 <memmove+0x20>
 800d3f8:	1e43      	subs	r3, r0, #1
 800d3fa:	42a1      	cmp	r1, r4
 800d3fc:	d008      	beq.n	800d410 <memmove+0x28>
 800d3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d406:	e7f8      	b.n	800d3fa <memmove+0x12>
 800d408:	4402      	add	r2, r0
 800d40a:	4601      	mov	r1, r0
 800d40c:	428a      	cmp	r2, r1
 800d40e:	d100      	bne.n	800d412 <memmove+0x2a>
 800d410:	bd10      	pop	{r4, pc}
 800d412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d41a:	e7f7      	b.n	800d40c <memmove+0x24>

0800d41c <_fstat_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4d07      	ldr	r5, [pc, #28]	@ (800d43c <_fstat_r+0x20>)
 800d420:	2300      	movs	r3, #0
 800d422:	4604      	mov	r4, r0
 800d424:	4608      	mov	r0, r1
 800d426:	4611      	mov	r1, r2
 800d428:	602b      	str	r3, [r5, #0]
 800d42a:	f7f6 fd17 	bl	8003e5c <_fstat>
 800d42e:	1c43      	adds	r3, r0, #1
 800d430:	d102      	bne.n	800d438 <_fstat_r+0x1c>
 800d432:	682b      	ldr	r3, [r5, #0]
 800d434:	b103      	cbz	r3, 800d438 <_fstat_r+0x1c>
 800d436:	6023      	str	r3, [r4, #0]
 800d438:	bd38      	pop	{r3, r4, r5, pc}
 800d43a:	bf00      	nop
 800d43c:	20005234 	.word	0x20005234

0800d440 <_isatty_r>:
 800d440:	b538      	push	{r3, r4, r5, lr}
 800d442:	4d06      	ldr	r5, [pc, #24]	@ (800d45c <_isatty_r+0x1c>)
 800d444:	2300      	movs	r3, #0
 800d446:	4604      	mov	r4, r0
 800d448:	4608      	mov	r0, r1
 800d44a:	602b      	str	r3, [r5, #0]
 800d44c:	f7f6 fd16 	bl	8003e7c <_isatty>
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	d102      	bne.n	800d45a <_isatty_r+0x1a>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	b103      	cbz	r3, 800d45a <_isatty_r+0x1a>
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	20005234 	.word	0x20005234

0800d460 <__assert_func>:
 800d460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d462:	4614      	mov	r4, r2
 800d464:	461a      	mov	r2, r3
 800d466:	4b09      	ldr	r3, [pc, #36]	@ (800d48c <__assert_func+0x2c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4605      	mov	r5, r0
 800d46c:	68d8      	ldr	r0, [r3, #12]
 800d46e:	b954      	cbnz	r4, 800d486 <__assert_func+0x26>
 800d470:	4b07      	ldr	r3, [pc, #28]	@ (800d490 <__assert_func+0x30>)
 800d472:	461c      	mov	r4, r3
 800d474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d478:	9100      	str	r1, [sp, #0]
 800d47a:	462b      	mov	r3, r5
 800d47c:	4905      	ldr	r1, [pc, #20]	@ (800d494 <__assert_func+0x34>)
 800d47e:	f000 f86f 	bl	800d560 <fiprintf>
 800d482:	f000 f87f 	bl	800d584 <abort>
 800d486:	4b04      	ldr	r3, [pc, #16]	@ (800d498 <__assert_func+0x38>)
 800d488:	e7f4      	b.n	800d474 <__assert_func+0x14>
 800d48a:	bf00      	nop
 800d48c:	20000024 	.word	0x20000024
 800d490:	0800ebe6 	.word	0x0800ebe6
 800d494:	0800ebb8 	.word	0x0800ebb8
 800d498:	0800ebab 	.word	0x0800ebab

0800d49c <_calloc_r>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	fba1 5402 	umull	r5, r4, r1, r2
 800d4a2:	b93c      	cbnz	r4, 800d4b4 <_calloc_r+0x18>
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	f7fd fa09 	bl	800a8bc <_malloc_r>
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	b928      	cbnz	r0, 800d4ba <_calloc_r+0x1e>
 800d4ae:	2600      	movs	r6, #0
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
 800d4b4:	220c      	movs	r2, #12
 800d4b6:	6002      	str	r2, [r0, #0]
 800d4b8:	e7f9      	b.n	800d4ae <_calloc_r+0x12>
 800d4ba:	462a      	mov	r2, r5
 800d4bc:	4621      	mov	r1, r4
 800d4be:	f7fe f91f 	bl	800b700 <memset>
 800d4c2:	e7f5      	b.n	800d4b0 <_calloc_r+0x14>

0800d4c4 <__ascii_mbtowc>:
 800d4c4:	b082      	sub	sp, #8
 800d4c6:	b901      	cbnz	r1, 800d4ca <__ascii_mbtowc+0x6>
 800d4c8:	a901      	add	r1, sp, #4
 800d4ca:	b142      	cbz	r2, 800d4de <__ascii_mbtowc+0x1a>
 800d4cc:	b14b      	cbz	r3, 800d4e2 <__ascii_mbtowc+0x1e>
 800d4ce:	7813      	ldrb	r3, [r2, #0]
 800d4d0:	600b      	str	r3, [r1, #0]
 800d4d2:	7812      	ldrb	r2, [r2, #0]
 800d4d4:	1e10      	subs	r0, r2, #0
 800d4d6:	bf18      	it	ne
 800d4d8:	2001      	movne	r0, #1
 800d4da:	b002      	add	sp, #8
 800d4dc:	4770      	bx	lr
 800d4de:	4610      	mov	r0, r2
 800d4e0:	e7fb      	b.n	800d4da <__ascii_mbtowc+0x16>
 800d4e2:	f06f 0001 	mvn.w	r0, #1
 800d4e6:	e7f8      	b.n	800d4da <__ascii_mbtowc+0x16>

0800d4e8 <_realloc_r>:
 800d4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ec:	4680      	mov	r8, r0
 800d4ee:	4615      	mov	r5, r2
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	b921      	cbnz	r1, 800d4fe <_realloc_r+0x16>
 800d4f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	f7fd b9df 	b.w	800a8bc <_malloc_r>
 800d4fe:	b92a      	cbnz	r2, 800d50c <_realloc_r+0x24>
 800d500:	f7fe fffe 	bl	800c500 <_free_r>
 800d504:	2400      	movs	r4, #0
 800d506:	4620      	mov	r0, r4
 800d508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d50c:	f000 f841 	bl	800d592 <_malloc_usable_size_r>
 800d510:	4285      	cmp	r5, r0
 800d512:	4606      	mov	r6, r0
 800d514:	d802      	bhi.n	800d51c <_realloc_r+0x34>
 800d516:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d51a:	d8f4      	bhi.n	800d506 <_realloc_r+0x1e>
 800d51c:	4629      	mov	r1, r5
 800d51e:	4640      	mov	r0, r8
 800d520:	f7fd f9cc 	bl	800a8bc <_malloc_r>
 800d524:	4607      	mov	r7, r0
 800d526:	2800      	cmp	r0, #0
 800d528:	d0ec      	beq.n	800d504 <_realloc_r+0x1c>
 800d52a:	42b5      	cmp	r5, r6
 800d52c:	462a      	mov	r2, r5
 800d52e:	4621      	mov	r1, r4
 800d530:	bf28      	it	cs
 800d532:	4632      	movcs	r2, r6
 800d534:	f7fe f989 	bl	800b84a <memcpy>
 800d538:	4621      	mov	r1, r4
 800d53a:	4640      	mov	r0, r8
 800d53c:	f7fe ffe0 	bl	800c500 <_free_r>
 800d540:	463c      	mov	r4, r7
 800d542:	e7e0      	b.n	800d506 <_realloc_r+0x1e>

0800d544 <__ascii_wctomb>:
 800d544:	4603      	mov	r3, r0
 800d546:	4608      	mov	r0, r1
 800d548:	b141      	cbz	r1, 800d55c <__ascii_wctomb+0x18>
 800d54a:	2aff      	cmp	r2, #255	@ 0xff
 800d54c:	d904      	bls.n	800d558 <__ascii_wctomb+0x14>
 800d54e:	228a      	movs	r2, #138	@ 0x8a
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	f04f 30ff 	mov.w	r0, #4294967295
 800d556:	4770      	bx	lr
 800d558:	700a      	strb	r2, [r1, #0]
 800d55a:	2001      	movs	r0, #1
 800d55c:	4770      	bx	lr
	...

0800d560 <fiprintf>:
 800d560:	b40e      	push	{r1, r2, r3}
 800d562:	b503      	push	{r0, r1, lr}
 800d564:	4601      	mov	r1, r0
 800d566:	ab03      	add	r3, sp, #12
 800d568:	4805      	ldr	r0, [pc, #20]	@ (800d580 <fiprintf+0x20>)
 800d56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d56e:	6800      	ldr	r0, [r0, #0]
 800d570:	9301      	str	r3, [sp, #4]
 800d572:	f7ff fd13 	bl	800cf9c <_vfiprintf_r>
 800d576:	b002      	add	sp, #8
 800d578:	f85d eb04 	ldr.w	lr, [sp], #4
 800d57c:	b003      	add	sp, #12
 800d57e:	4770      	bx	lr
 800d580:	20000024 	.word	0x20000024

0800d584 <abort>:
 800d584:	b508      	push	{r3, lr}
 800d586:	2006      	movs	r0, #6
 800d588:	f000 f834 	bl	800d5f4 <raise>
 800d58c:	2001      	movs	r0, #1
 800d58e:	f7f6 fc31 	bl	8003df4 <_exit>

0800d592 <_malloc_usable_size_r>:
 800d592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d596:	1f18      	subs	r0, r3, #4
 800d598:	2b00      	cmp	r3, #0
 800d59a:	bfbc      	itt	lt
 800d59c:	580b      	ldrlt	r3, [r1, r0]
 800d59e:	18c0      	addlt	r0, r0, r3
 800d5a0:	4770      	bx	lr

0800d5a2 <_raise_r>:
 800d5a2:	291f      	cmp	r1, #31
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4605      	mov	r5, r0
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	d904      	bls.n	800d5b6 <_raise_r+0x14>
 800d5ac:	2316      	movs	r3, #22
 800d5ae:	6003      	str	r3, [r0, #0]
 800d5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b4:	bd38      	pop	{r3, r4, r5, pc}
 800d5b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5b8:	b112      	cbz	r2, 800d5c0 <_raise_r+0x1e>
 800d5ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5be:	b94b      	cbnz	r3, 800d5d4 <_raise_r+0x32>
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	f000 f831 	bl	800d628 <_getpid_r>
 800d5c6:	4622      	mov	r2, r4
 800d5c8:	4601      	mov	r1, r0
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5d0:	f000 b818 	b.w	800d604 <_kill_r>
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d00a      	beq.n	800d5ee <_raise_r+0x4c>
 800d5d8:	1c59      	adds	r1, r3, #1
 800d5da:	d103      	bne.n	800d5e4 <_raise_r+0x42>
 800d5dc:	2316      	movs	r3, #22
 800d5de:	6003      	str	r3, [r0, #0]
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	e7e7      	b.n	800d5b4 <_raise_r+0x12>
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	4798      	blx	r3
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	e7e0      	b.n	800d5b4 <_raise_r+0x12>
	...

0800d5f4 <raise>:
 800d5f4:	4b02      	ldr	r3, [pc, #8]	@ (800d600 <raise+0xc>)
 800d5f6:	4601      	mov	r1, r0
 800d5f8:	6818      	ldr	r0, [r3, #0]
 800d5fa:	f7ff bfd2 	b.w	800d5a2 <_raise_r>
 800d5fe:	bf00      	nop
 800d600:	20000024 	.word	0x20000024

0800d604 <_kill_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4d07      	ldr	r5, [pc, #28]	@ (800d624 <_kill_r+0x20>)
 800d608:	2300      	movs	r3, #0
 800d60a:	4604      	mov	r4, r0
 800d60c:	4608      	mov	r0, r1
 800d60e:	4611      	mov	r1, r2
 800d610:	602b      	str	r3, [r5, #0]
 800d612:	f7f6 fbdf 	bl	8003dd4 <_kill>
 800d616:	1c43      	adds	r3, r0, #1
 800d618:	d102      	bne.n	800d620 <_kill_r+0x1c>
 800d61a:	682b      	ldr	r3, [r5, #0]
 800d61c:	b103      	cbz	r3, 800d620 <_kill_r+0x1c>
 800d61e:	6023      	str	r3, [r4, #0]
 800d620:	bd38      	pop	{r3, r4, r5, pc}
 800d622:	bf00      	nop
 800d624:	20005234 	.word	0x20005234

0800d628 <_getpid_r>:
 800d628:	f7f6 bbcc 	b.w	8003dc4 <_getpid>

0800d62c <_init>:
 800d62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62e:	bf00      	nop
 800d630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d632:	bc08      	pop	{r3}
 800d634:	469e      	mov	lr, r3
 800d636:	4770      	bx	lr

0800d638 <_fini>:
 800d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63a:	bf00      	nop
 800d63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63e:	bc08      	pop	{r3}
 800d640:	469e      	mov	lr, r3
 800d642:	4770      	bx	lr
