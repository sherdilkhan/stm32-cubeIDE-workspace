
weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800b378  0800b378  0000c378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b800  0800b800  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b800  0800b800  0000c800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b808  0800b808  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b808  0800b808  0000c808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b80c  0800b80c  0000c80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b810  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          00004c08  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004de0  20004de0  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa56  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037b2  00000000  00000000  00027c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  0002b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001317  00000000  00000000  0002cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005ee8  00000000  00000000  0002df87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3da  00000000  00000000  00033e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db091  00000000  00000000  0004f249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a2da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000078f8  00000000  00000000  0012a320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00131c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b35c 	.word	0x0800b35c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b35c 	.word	0x0800b35c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9b5 	b.w	8000f34 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f40:	2305      	movs	r3, #5
 8000f42:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f001 facb 	bl	80024e4 <null_ptr_check>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d133      	bne.n	8000fc2 <bme280_init+0x8a>
		while (try_count) {
 8000f5a:	e028      	b.n	8000fae <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f5c:	f107 010d 	add.w	r1, r7, #13
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	20d0      	movs	r0, #208	@ 0xd0
 8000f66:	f000 f832 	bl	8000fce <bme280_get_regs>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d114      	bne.n	8000fa0 <bme280_init+0x68>
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	2b60      	cmp	r3, #96	@ 0x60
 8000f7a:	d111      	bne.n	8000fa0 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f7c:	7b7a      	ldrb	r2, [r7, #13]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f978 	bl	8001278 <bme280_soft_reset>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d110      	bne.n	8000fb6 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f001 f919 	bl	80021cc <get_calib_data>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000f9e:	e00a      	b.n	8000fb6 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	4798      	blx	r3
			--try_count;
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1d3      	bne.n	8000f5c <bme280_init+0x24>
 8000fb4:	e000      	b.n	8000fb8 <bme280_init+0x80>
				break;
 8000fb6:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fbe:	23fe      	movs	r3, #254	@ 0xfe
 8000fc0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fce:	b590      	push	{r4, r7, lr}
 8000fd0:	b087      	sub	sp, #28
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fa7f 	bl	80024e4 <null_ptr_check>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d117      	bne.n	8001022 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	789b      	ldrb	r3, [r3, #2]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d003      	beq.n	8001002 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001000:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685c      	ldr	r4, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7858      	ldrb	r0, [r3, #1]
 800100a:	89bb      	ldrh	r3, [r7, #12]
 800100c:	7bf9      	ldrb	r1, [r7, #15]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	47a0      	blx	r4
 8001012:	4603      	mov	r3, r0
 8001014:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8001016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800101e:	23fc      	movs	r3, #252	@ 0xfc
 8001020:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001026:	4618      	mov	r0, r3
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}

0800102e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800102e:	b590      	push	{r4, r7, lr}
 8001030:	b08d      	sub	sp, #52	@ 0x34
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4613      	mov	r3, r2
 800103c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b0a      	cmp	r3, #10
 8001042:	d901      	bls.n	8001048 <bme280_set_regs+0x1a>
		len = 10;
 8001044:	230a      	movs	r3, #10
 8001046:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f001 fa4b 	bl	80024e4 <null_ptr_check>
 800104e:	4603      	mov	r3, r0
 8001050:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8001054:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001058:	2b00      	cmp	r3, #0
 800105a:	d156      	bne.n	800110a <bme280_set_regs+0xdc>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d053      	beq.n	800110a <bme280_set_regs+0xdc>
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d050      	beq.n	800110a <bme280_set_regs+0xdc>
		if (len != 0) {
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d049      	beq.n	8001102 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	789b      	ldrb	r3, [r3, #2]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d01a      	beq.n	80010b2 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800107c:	2300      	movs	r3, #0
 800107e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001082:	e011      	b.n	80010a8 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001084:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001092:	68f9      	ldr	r1, [r7, #12]
 8001094:	440b      	add	r3, r1
 8001096:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800109e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80010a8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3e8      	bcc.n	8001084 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d90d      	bls.n	80010d4 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f107 0114 	add.w	r1, r7, #20
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f001 f8c8 	bl	8002256 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b01      	subs	r3, #1
 80010d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80010d2:	e001      	b.n	80010d8 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689c      	ldr	r4, [r3, #8]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	7858      	ldrb	r0, [r3, #1]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	7819      	ldrb	r1, [r3, #0]
 80010e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010e6:	f107 0214 	add.w	r2, r7, #20
 80010ea:	47a0      	blx	r4
 80010ec:	4603      	mov	r3, r0
 80010ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80010fa:	23fc      	movs	r3, #252	@ 0xfc
 80010fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 8001100:	e007      	b.n	8001112 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001102:	23fd      	movs	r3, #253	@ 0xfd
 8001104:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 8001108:	e003      	b.n	8001112 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800110a:	23ff      	movs	r3, #255	@ 0xff
 800110c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001110:	e000      	b.n	8001114 <bme280_set_regs+0xe6>
		if (len != 0) {
 8001112:	bf00      	nop
	}


	return rslt;
 8001114:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001118:	4618      	mov	r0, r3
 800111a:	3734      	adds	r7, #52	@ 0x34
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}

08001120 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f001 f9d9 	bl	80024e4 <null_ptr_check>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d13f      	bne.n	80011be <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800113e:	f107 030e 	add.w	r3, r7, #14
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f874 	bl	8001232 <bme280_get_sensor_mode>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d107      	bne.n	8001166 <bme280_set_sensor_settings+0x46>
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d004      	beq.n	8001166 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f000 fb36 	bl	80017ce <put_device_to_sleep>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d127      	bne.n	80011be <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4619      	mov	r1, r3
 8001172:	2007      	movs	r0, #7
 8001174:	f001 f99a 	bl	80024ac <are_settings_changed>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f972 	bl	8001472 <set_osr_settings>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d111      	bne.n	80011be <bme280_set_sensor_settings+0x9e>
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4619      	mov	r1, r3
 800119e:	2018      	movs	r0, #24
 80011a0:	f001 f984 	bl	80024ac <are_settings_changed>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f9f9 	bl	80015ac <set_filter_standby_settings>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	6039      	str	r1, [r7, #0]
 80011d4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011d6:	6838      	ldr	r0, [r7, #0]
 80011d8:	f001 f984 	bl	80024e4 <null_ptr_check>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d11e      	bne.n	8001226 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011e8:	f107 030e 	add.w	r3, r7, #14
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f81f 	bl	8001232 <bme280_get_sensor_mode>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d107      	bne.n	8001210 <bme280_set_sensor_mode+0x46>
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8001206:	6838      	ldr	r0, [r7, #0]
 8001208:	f000 fae1 	bl	80017ce <put_device_to_sleep>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d106      	bne.n	8001226 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 faa3 	bl	8001768 <write_power_mode>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f001 f951 	bl	80024e4 <null_ptr_check>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10e      	bne.n	800126c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	20f4      	movs	r0, #244	@ 0xf4
 8001256:	f7ff feba 	bl	8000fce <bme280_get_regs>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800126c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001280:	23e0      	movs	r3, #224	@ 0xe0
 8001282:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001284:	23b6      	movs	r3, #182	@ 0xb6
 8001286:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f001 f92b 	bl	80024e4 <null_ptr_check>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10d      	bne.n	80012b6 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800129a:	f107 010d 	add.w	r1, r7, #13
 800129e:	f107 000e 	add.w	r0, r7, #14
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f7ff fec2 	bl	800102e <bme280_set_regs>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2002      	movs	r0, #2
 80012b4:	4798      	blx	r3
	}

	return rslt;
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b08a      	sub	sp, #40	@ 0x28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 f8fd 	bl	80024e4 <null_ptr_check>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d124      	bne.n	8001342 <bme280_get_sensor_data+0x80>
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d021      	beq.n	8001342 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80012fe:	f107 011c 	add.w	r1, r7, #28
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2208      	movs	r2, #8
 8001306:	20f7      	movs	r0, #247	@ 0xf7
 8001308:	f7ff fe61 	bl	8000fce <bme280_get_regs>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 8001312:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800131a:	f107 0210 	add.w	r2, r7, #16
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f815 	bl	8001354 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3310      	adds	r3, #16
 800132e:	f107 0110 	add.w	r1, r7, #16
 8001332:	7bf8      	ldrb	r0, [r7, #15]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	f000 f853 	bl	80013e0 <bme280_compensate_data>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 8001340:	e002      	b.n	8001348 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001342:	23ff      	movs	r3, #255	@ 0xff
 8001344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001348:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800134c:	4618      	mov	r0, r3
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	031b      	lsls	r3, r3, #12
 8001364:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3302      	adds	r3, #2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	b2db      	uxtb	r3, r3
 800137a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	431a      	orrs	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	431a      	orrs	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3303      	adds	r3, #3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	031b      	lsls	r3, r3, #12
 8001392:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3304      	adds	r3, #4
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3305      	adds	r3, #5
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3306      	adds	r3, #6
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3307      	adds	r3, #7
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	431a      	orrs	r2, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	609a      	str	r2, [r3, #8]
}
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d033      	beq.n	8001462 <bme280_compensate_data+0x82>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d030      	beq.n	8001462 <bme280_compensate_data+0x82>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d02d      	beq.n	8001462 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001422:	6839      	ldr	r1, [r7, #0]
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f000 fa1f 	bl	8001868 <compensate_temperature>
 800142a:	4602      	mov	r2, r0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f000 fa75 	bl	800192c <compensate_pressure>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f000 fe0d 	bl	8002074 <compensate_humidity>
 800145a:	4602      	mov	r2, r0
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001460:	e001      	b.n	8001466 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	@ 0xff
 8001464:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001480:	2301      	movs	r3, #1
 8001482:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	68b8      	ldr	r0, [r7, #8]
 8001492:	f000 f815 	bl	80014c0 <set_osr_humidity_settings>
 8001496:	4603      	mov	r3, r0
 8001498:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f842 	bl	8001534 <set_osr_press_temp_settings>
 80014b0:	4603      	mov	r3, r0
 80014b2:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014ca:	23f2      	movs	r3, #242	@ 0xf2
 80014cc:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80014da:	f107 010e 	add.w	r1, r7, #14
 80014de:	f107 000c 	add.w	r0, r7, #12
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f7ff fda2 	bl	800102e <bme280_set_regs>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80014f6:	23f4      	movs	r3, #244	@ 0xf4
 80014f8:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80014fa:	7b38      	ldrb	r0, [r7, #12]
 80014fc:	f107 010d 	add.w	r1, r7, #13
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2201      	movs	r2, #1
 8001504:	f7ff fd63 	bl	8000fce <bme280_get_regs>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001514:	f107 010d 	add.w	r1, r7, #13
 8001518:	f107 000c 	add.w	r0, r7, #12
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2201      	movs	r2, #1
 8001520:	f7ff fd85 	bl	800102e <bme280_set_regs>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001542:	23f4      	movs	r3, #244	@ 0xf4
 8001544:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001546:	7db8      	ldrb	r0, [r7, #22]
 8001548:	f107 0115 	add.w	r1, r7, #21
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f7ff fd3d 	bl	8000fce <bme280_get_regs>
 8001554:	4603      	mov	r3, r0
 8001556:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001558:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d11f      	bne.n	80015a0 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800156a:	f107 0315 	add.w	r3, r7, #21
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f88e 	bl	8001692 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001580:	f107 0315 	add.w	r3, r7, #21
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f8a0 	bl	80016cc <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800158c:	f107 0115 	add.w	r1, r7, #21
 8001590:	f107 0016 	add.w	r0, r7, #22
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f7ff fd49 	bl	800102e <bme280_set_regs>
 800159c:	4603      	mov	r3, r0
 800159e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80015ba:	23f5      	movs	r3, #245	@ 0xf5
 80015bc:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015be:	7db8      	ldrb	r0, [r7, #22]
 80015c0:	f107 0115 	add.w	r1, r7, #21
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f7ff fd01 	bl	8000fce <bme280_get_regs>
 80015cc:	4603      	mov	r3, r0
 80015ce:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11f      	bne.n	8001618 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80015e2:	f107 0315 	add.w	r3, r7, #21
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f81b 	bl	8001624 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80015f8:	f107 0315 	add.w	r3, r7, #21
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f82d 	bl	800165e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001604:	f107 0115 	add.w	r1, r7, #21
 8001608:	f107 0016 	add.w	r0, r7, #22
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f7ff fd0d 	bl	800102e <bme280_set_regs>
 8001614:	4603      	mov	r3, r0
 8001616:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001618:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b25b      	sxtb	r3, r3
 8001634:	f023 031c 	bic.w	r3, r3, #28
 8001638:	b25a      	sxtb	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	78db      	ldrb	r3, [r3, #3]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	b25b      	sxtb	r3, r3
 8001642:	f003 031c 	and.w	r3, r3, #28
 8001646:	b25b      	sxtb	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	701a      	strb	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b25b      	sxtb	r3, r3
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	b25a      	sxtb	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	791b      	ldrb	r3, [r3, #4]
 8001678:	015b      	lsls	r3, r3, #5
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f023 031c 	bic.w	r3, r3, #28
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	f003 031c 	and.w	r3, r3, #28
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	701a      	strb	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	015b      	lsls	r3, r3, #5
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	b2da      	uxtb	r2, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3302      	adds	r3, #2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	109b      	asrs	r3, r3, #2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	b2da      	uxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3302      	adds	r3, #2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	b2da      	uxtb	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3303      	adds	r3, #3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	109b      	asrs	r3, r3, #2
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	b2da      	uxtb	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3303      	adds	r3, #3
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	095b      	lsrs	r3, r3, #5
 8001756:	b2da      	uxtb	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	711a      	strb	r2, [r3, #4]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001774:	23f4      	movs	r3, #244	@ 0xf4
 8001776:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001778:	7bb8      	ldrb	r0, [r7, #14]
 800177a:	f107 010d 	add.w	r1, r7, #13
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	f7ff fc24 	bl	8000fce <bme280_get_regs>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d117      	bne.n	80017c2 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001792:	7b7b      	ldrb	r3, [r7, #13]
 8001794:	b25b      	sxtb	r3, r3
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	b25a      	sxtb	r2, r3
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017ae:	f107 010d 	add.w	r1, r7, #13
 80017b2:	f107 000e 	add.w	r0, r7, #14
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f7ff fc38 	bl	800102e <bme280_set_regs>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80017d6:	f107 0110 	add.w	r1, r7, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2204      	movs	r2, #4
 80017de:	20f2      	movs	r0, #242	@ 0xf2
 80017e0:	f7ff fbf5 	bl	8000fce <bme280_get_regs>
 80017e4:	4603      	mov	r3, r0
 80017e6:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80017e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d118      	bne.n	8001822 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80017f0:	f107 0208 	add.w	r2, r7, #8
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4611      	mov	r1, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff80 	bl	8001700 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fd39 	bl	8001278 <bme280_soft_reset>
 8001806:	4603      	mov	r3, r0
 8001808:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800180a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d107      	bne.n	8001822 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f808 	bl	800182e <reload_device_settings>
 800181e:	4603      	mov	r3, r0
 8001820:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	201f      	movs	r0, #31
 800183e:	f7ff fe18 	bl	8001472 <set_osr_settings>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	201f      	movs	r0, #31
 8001854:	f7ff feaa 	bl	80015ac <set_filter_standby_settings>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 8001872:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <compensate_temperature+0xc0>)
 8001874:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 8001876:	f242 1334 	movw	r3, #8500	@ 0x2134
 800187a:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	8812      	ldrh	r2, [r2, #0]
 8001886:	0052      	lsls	r2, r2, #1
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001892:	461a      	mov	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	da01      	bge.n	80018a2 <compensate_temperature+0x3a>
 800189e:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80018a2:	12db      	asrs	r3, r3, #11
 80018a4:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	8812      	ldrh	r2, [r2, #0]
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	fb03 f303 	mul.w	r3, r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da01      	bge.n	80018c2 <compensate_temperature+0x5a>
 80018be:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80018c2:	131b      	asrs	r3, r3, #12
 80018c4:	461a      	mov	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da02      	bge.n	80018da <compensate_temperature+0x72>
 80018d4:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80018d8:	333f      	adds	r3, #63	@ 0x3f
 80018da:	139b      	asrs	r3, r3, #14
 80018dc:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	441a      	add	r2, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3380      	adds	r3, #128	@ 0x80
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	da00      	bge.n	80018fa <compensate_temperature+0x92>
 80018f8:	33ff      	adds	r3, #255	@ 0xff
 80018fa:	121b      	asrs	r3, r3, #8
 80018fc:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	429a      	cmp	r2, r3
 8001904:	da02      	bge.n	800190c <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e005      	b.n	8001918 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	dd01      	ble.n	8001918 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001918:	69fb      	ldr	r3, [r7, #28]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	@ 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	fffff060 	.word	0xfffff060

0800192c <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 800192c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001930:	b0ea      	sub	sp, #424	@ 0x1a8
 8001932:	af00      	add	r7, sp, #0
 8001934:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001938:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 800193c:	4bbf      	ldr	r3, [pc, #764]	@ (8001c3c <compensate_pressure+0x310>)
 800193e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 8001942:	4bbf      	ldr	r3, [pc, #764]	@ (8001c40 <compensate_pressure+0x314>)
 8001944:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001948:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	17da      	asrs	r2, r3, #31
 8001950:	4698      	mov	r8, r3
 8001952:	4691      	mov	r9, r2
 8001954:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001958:	f149 3bff 	adc.w	fp, r9, #4294967295
 800195c:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001960:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001964:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001968:	fb03 f102 	mul.w	r1, r3, r2
 800196c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001970:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	18ca      	adds	r2, r1, r3
 800197a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800197e:	fba3 4503 	umull	r4, r5, r3, r3
 8001982:	1953      	adds	r3, r2, r5
 8001984:	461d      	mov	r5, r3
 8001986:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800198a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800198e:	b21b      	sxth	r3, r3
 8001990:	17da      	asrs	r2, r3, #31
 8001992:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001996:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 800199a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800199e:	4603      	mov	r3, r0
 80019a0:	fb03 f205 	mul.w	r2, r3, r5
 80019a4:	460b      	mov	r3, r1
 80019a6:	fb04 f303 	mul.w	r3, r4, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	4602      	mov	r2, r0
 80019ae:	fba4 1202 	umull	r1, r2, r4, r2
 80019b2:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80019b6:	460a      	mov	r2, r1
 80019b8:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 80019bc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019c0:	4413      	add	r3, r2
 80019c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80019c6:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 80019ca:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 80019ce:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 80019d2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80019d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019da:	b21b      	sxth	r3, r3
 80019dc:	17da      	asrs	r2, r3, #31
 80019de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80019e2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80019e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80019ea:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80019ee:	462a      	mov	r2, r5
 80019f0:	fb02 f203 	mul.w	r2, r2, r3
 80019f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80019f8:	4621      	mov	r1, r4
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	441a      	add	r2, r3
 8001a00:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a04:	4621      	mov	r1, r4
 8001a06:	fba3 1301 	umull	r1, r3, r3, r1
 8001a0a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001a0e:	460b      	mov	r3, r1
 8001a10:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001a14:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001a18:	18d3      	adds	r3, r2, r3
 8001a1a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	0459      	lsls	r1, r3, #17
 8001a2e:	4623      	mov	r3, r4
 8001a30:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001a34:	4623      	mov	r3, r4
 8001a36:	0458      	lsls	r0, r3, #17
 8001a38:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001a3c:	1814      	adds	r4, r2, r0
 8001a3e:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001a42:	414b      	adcs	r3, r1
 8001a44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001a48:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001a4c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001a50:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	17da      	asrs	r2, r3, #31
 8001a5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001a60:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a70:	00d9      	lsls	r1, r3, #3
 8001a72:	2000      	movs	r0, #0
 8001a74:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001a78:	1814      	adds	r4, r2, r0
 8001a7a:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001a7e:	414b      	adcs	r3, r1
 8001a80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001a84:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001a88:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001a8c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a90:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a94:	fb03 f102 	mul.w	r1, r3, r2
 8001a98:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	18ca      	adds	r2, r1, r3
 8001aa6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001aaa:	fba3 1303 	umull	r1, r3, r3, r3
 8001aae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001ab8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001abc:	18d3      	adds	r3, r2, r3
 8001abe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001ac2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001ac6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	17da      	asrs	r2, r3, #31
 8001ace:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001ad2:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001ad6:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001ada:	462b      	mov	r3, r5
 8001adc:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001ae0:	4642      	mov	r2, r8
 8001ae2:	fb02 f203 	mul.w	r2, r2, r3
 8001ae6:	464b      	mov	r3, r9
 8001ae8:	4621      	mov	r1, r4
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	4622      	mov	r2, r4
 8001af2:	4641      	mov	r1, r8
 8001af4:	fba2 1201 	umull	r1, r2, r2, r1
 8001af8:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001afc:	460a      	mov	r2, r1
 8001afe:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001b02:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001b06:	4413      	add	r3, r2
 8001b08:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001b0c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da09      	bge.n	8001b28 <compensate_pressure+0x1fc>
 8001b14:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001b18:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001b1c:	f143 0300 	adc.w	r3, r3, #0
 8001b20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001b24:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001b28:	f04f 0000 	mov.w	r0, #0
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	0a10      	lsrs	r0, r2, #8
 8001b32:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b36:	1219      	asrs	r1, r3, #8
 8001b38:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	17da      	asrs	r2, r3, #31
 8001b44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001b48:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b4c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b50:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001b54:	464a      	mov	r2, r9
 8001b56:	fb02 f203 	mul.w	r2, r2, r3
 8001b5a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b5e:	4644      	mov	r4, r8
 8001b60:	fb04 f303 	mul.w	r3, r4, r3
 8001b64:	441a      	add	r2, r3
 8001b66:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b6a:	4644      	mov	r4, r8
 8001b6c:	fba3 4304 	umull	r4, r3, r3, r4
 8001b70:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b74:	4623      	mov	r3, r4
 8001b76:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b7e:	18d3      	adds	r3, r2, r3
 8001b80:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001b90:	464c      	mov	r4, r9
 8001b92:	0323      	lsls	r3, r4, #12
 8001b94:	4644      	mov	r4, r8
 8001b96:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b9a:	4644      	mov	r4, r8
 8001b9c:	0322      	lsls	r2, r4, #12
 8001b9e:	1884      	adds	r4, r0, r2
 8001ba0:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001ba4:	eb41 0303 	adc.w	r3, r1, r3
 8001ba8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bac:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001bb0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bbc:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001bc0:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001bc4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001bc8:	1884      	adds	r4, r0, r2
 8001bca:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001bce:	eb41 0303 	adc.w	r3, r1, r3
 8001bd2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001bd6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bda:	88db      	ldrh	r3, [r3, #6]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2200      	movs	r2, #0
 8001be0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001be4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001be8:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001bec:	462b      	mov	r3, r5
 8001bee:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001bf2:	4642      	mov	r2, r8
 8001bf4:	fb02 f203 	mul.w	r2, r2, r3
 8001bf8:	464b      	mov	r3, r9
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	4622      	mov	r2, r4
 8001c04:	4641      	mov	r1, r8
 8001c06:	fba2 1201 	umull	r1, r2, r2, r1
 8001c0a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001c0e:	460a      	mov	r2, r1
 8001c10:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c14:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001c18:	4413      	add	r3, r2
 8001c1a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c1e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da0e      	bge.n	8001c44 <compensate_pressure+0x318>
 8001c26:	1e51      	subs	r1, r2, #1
 8001c28:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001c2c:	f143 0301 	adc.w	r3, r3, #1
 8001c30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c38:	e004      	b.n	8001c44 <compensate_pressure+0x318>
 8001c3a:	bf00      	nop
 8001c3c:	002dc6c0 	.word	0x002dc6c0
 8001c40:	00a7d8c0 	.word	0x00a7d8c0
 8001c44:	f04f 0000 	mov.w	r0, #0
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	1058      	asrs	r0, r3, #1
 8001c4e:	17d9      	asrs	r1, r3, #31
 8001c50:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001c54:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f000 81fc 	beq.w	8002056 <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001c5e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c6e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c72:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001c76:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001c7a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	07d9      	lsls	r1, r3, #31
 8001c88:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8c:	07d0      	lsls	r0, r2, #31
 8001c8e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001c92:	1a84      	subs	r4, r0, r2
 8001c94:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001c98:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001ca0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001ca4:	4622      	mov	r2, r4
 8001ca6:	462b      	mov	r3, r5
 8001ca8:	1891      	adds	r1, r2, r2
 8001caa:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001cac:	415b      	adcs	r3, r3
 8001cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cb0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	1851      	adds	r1, r2, r1
 8001cb8:	6739      	str	r1, [r7, #112]	@ 0x70
 8001cba:	4629      	mov	r1, r5
 8001cbc:	414b      	adcs	r3, r1
 8001cbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001ccc:	4649      	mov	r1, r9
 8001cce:	018b      	lsls	r3, r1, #6
 8001cd0:	4641      	mov	r1, r8
 8001cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd6:	4641      	mov	r1, r8
 8001cd8:	018a      	lsls	r2, r1, #6
 8001cda:	4641      	mov	r1, r8
 8001cdc:	1889      	adds	r1, r1, r2
 8001cde:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001ce0:	4649      	mov	r1, r9
 8001ce2:	eb43 0101 	adc.w	r1, r3, r1
 8001ce6:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	008b      	lsls	r3, r1, #2
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfe:	4641      	mov	r1, r8
 8001d00:	008a      	lsls	r2, r1, #2
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	4622      	mov	r2, r4
 8001d0a:	189b      	adds	r3, r3, r2
 8001d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d0e:	460b      	mov	r3, r1
 8001d10:	462a      	mov	r2, r5
 8001d12:	eb42 0303 	adc.w	r3, r2, r3
 8001d16:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001d24:	4649      	mov	r1, r9
 8001d26:	008b      	lsls	r3, r1, #2
 8001d28:	4641      	mov	r1, r8
 8001d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2e:	4641      	mov	r1, r8
 8001d30:	008a      	lsls	r2, r1, #2
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	4622      	mov	r2, r4
 8001d3a:	189b      	adds	r3, r3, r2
 8001d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d40:	462b      	mov	r3, r5
 8001d42:	460a      	mov	r2, r1
 8001d44:	eb42 0303 	adc.w	r3, r2, r3
 8001d48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d4c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d54:	f7fe ff28 	bl	8000ba8 <__aeabi_ldivmod>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001d60:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d70:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d74:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da08      	bge.n	8001d8e <compensate_pressure+0x462>
 8001d7c:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001d80:	1851      	adds	r1, r2, r1
 8001d82:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d84:	f143 0300 	adc.w	r3, r3, #0
 8001d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d8e:	f04f 0000 	mov.w	r0, #0
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	0b50      	lsrs	r0, r2, #13
 8001d98:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d9c:	1359      	asrs	r1, r3, #13
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001da6:	4629      	mov	r1, r5
 8001da8:	fb02 f001 	mul.w	r0, r2, r1
 8001dac:	4621      	mov	r1, r4
 8001dae:	fb01 f103 	mul.w	r1, r1, r3
 8001db2:	4401      	add	r1, r0
 8001db4:	4620      	mov	r0, r4
 8001db6:	fba0 2302 	umull	r2, r3, r0, r2
 8001dba:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001dc4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001dc8:	18cb      	adds	r3, r1, r3
 8001dca:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001dce:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da08      	bge.n	8001de8 <compensate_pressure+0x4bc>
 8001dd6:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001dda:	1851      	adds	r1, r2, r1
 8001ddc:	6539      	str	r1, [r7, #80]	@ 0x50
 8001dde:	f143 0300 	adc.w	r3, r3, #0
 8001de2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001de4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	0b50      	lsrs	r0, r2, #13
 8001df2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001df6:	1359      	asrs	r1, r3, #13
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001e00:	4629      	mov	r1, r5
 8001e02:	fb02 f001 	mul.w	r0, r2, r1
 8001e06:	4621      	mov	r1, r4
 8001e08:	fb01 f103 	mul.w	r1, r1, r3
 8001e0c:	4401      	add	r1, r0
 8001e0e:	4620      	mov	r0, r4
 8001e10:	fba0 2302 	umull	r2, r3, r0, r2
 8001e14:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001e18:	4613      	mov	r3, r2
 8001e1a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001e1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001e22:	18cb      	adds	r3, r1, r3
 8001e24:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001e28:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da08      	bge.n	8001e42 <compensate_pressure+0x516>
 8001e30:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001e34:	1851      	adds	r1, r2, r1
 8001e36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e38:	f143 0300 	adc.w	r3, r3, #0
 8001e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	f04f 0100 	mov.w	r1, #0
 8001e4a:	0e50      	lsrs	r0, r2, #25
 8001e4c:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001e50:	1659      	asrs	r1, r3, #25
 8001e52:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001e56:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001e5a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	17da      	asrs	r2, r3, #31
 8001e62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e66:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e6a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001e6e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001e72:	462a      	mov	r2, r5
 8001e74:	fb02 f203 	mul.w	r2, r2, r3
 8001e78:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	441a      	add	r2, r3
 8001e84:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001e88:	4621      	mov	r1, r4
 8001e8a:	fba3 1301 	umull	r1, r3, r3, r1
 8001e8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001e92:	460b      	mov	r3, r1
 8001e94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001e9c:	18d3      	adds	r3, r2, r3
 8001e9e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001ea2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da07      	bge.n	8001eba <compensate_pressure+0x58e>
 8001eaa:	4971      	ldr	r1, [pc, #452]	@ (8002070 <compensate_pressure+0x744>)
 8001eac:	1851      	adds	r1, r2, r1
 8001eae:	6439      	str	r1, [r7, #64]	@ 0x40
 8001eb0:	f143 0300 	adc.w	r3, r3, #0
 8001eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001eba:	f04f 0000 	mov.w	r0, #0
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	0cd0      	lsrs	r0, r2, #19
 8001ec4:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001ec8:	14d9      	asrs	r1, r3, #19
 8001eca:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001ece:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001ed2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001ed6:	1884      	adds	r4, r0, r2
 8001ed8:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001edc:	eb41 0303 	adc.w	r3, r1, r3
 8001ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ee4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001ee8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001eec:	4621      	mov	r1, r4
 8001eee:	1889      	adds	r1, r1, r2
 8001ef0:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	eb43 0101 	adc.w	r1, r3, r1
 8001efa:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001efe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da07      	bge.n	8001f16 <compensate_pressure+0x5ea>
 8001f06:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001f0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f0c:	f143 0300 	adc.w	r3, r3, #0
 8001f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f16:	f04f 0000 	mov.w	r0, #0
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	0a10      	lsrs	r0, r2, #8
 8001f20:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f24:	1219      	asrs	r1, r3, #8
 8001f26:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001f2a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	17da      	asrs	r2, r3, #31
 8001f32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f36:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f46:	464c      	mov	r4, r9
 8001f48:	0123      	lsls	r3, r4, #4
 8001f4a:	4644      	mov	r4, r8
 8001f4c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f50:	4644      	mov	r4, r8
 8001f52:	0122      	lsls	r2, r4, #4
 8001f54:	1884      	adds	r4, r0, r2
 8001f56:	633c      	str	r4, [r7, #48]	@ 0x30
 8001f58:	eb41 0303 	adc.w	r3, r1, r3
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001f62:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001f66:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001f6a:	0fd9      	lsrs	r1, r3, #31
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f70:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001f72:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001f76:	4621      	mov	r1, r4
 8001f78:	1889      	adds	r1, r1, r2
 8001f7a:	6239      	str	r1, [r7, #32]
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	eb43 0101 	adc.w	r1, r3, r1
 8001f82:	6279      	str	r1, [r7, #36]	@ 0x24
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f90:	4621      	mov	r1, r4
 8001f92:	084a      	lsrs	r2, r1, #1
 8001f94:	4629      	mov	r1, r5
 8001f96:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	104b      	asrs	r3, r1, #1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	1894      	adds	r4, r2, r2
 8001fa8:	61bc      	str	r4, [r7, #24]
 8001faa:	415b      	adcs	r3, r3
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fb2:	1814      	adds	r4, r2, r0
 8001fb4:	613c      	str	r4, [r7, #16]
 8001fb6:	414b      	adcs	r3, r1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001fc6:	464c      	mov	r4, r9
 8001fc8:	0163      	lsls	r3, r4, #5
 8001fca:	4644      	mov	r4, r8
 8001fcc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001fd0:	4644      	mov	r4, r8
 8001fd2:	0162      	lsls	r2, r4, #5
 8001fd4:	4644      	mov	r4, r8
 8001fd6:	18a4      	adds	r4, r4, r2
 8001fd8:	60bc      	str	r4, [r7, #8]
 8001fda:	464c      	mov	r4, r9
 8001fdc:	eb43 0404 	adc.w	r4, r3, r4
 8001fe0:	60fc      	str	r4, [r7, #12]
 8001fe2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	181b      	adds	r3, r3, r0
 8001fea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fee:	462b      	mov	r3, r5
 8001ff0:	eb41 0303 	adc.w	r3, r1, r3
 8001ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ff8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da07      	bge.n	8002010 <compensate_pressure+0x6e4>
 8002000:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	f143 0300 	adc.w	r3, r3, #0
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002010:	f04f 0000 	mov.w	r0, #0
 8002014:	f04f 0100 	mov.w	r1, #0
 8002018:	09d0      	lsrs	r0, r2, #7
 800201a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800201e:	11d9      	asrs	r1, r3, #7
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 800202a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800202e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002032:	429a      	cmp	r2, r3
 8002034:	d204      	bcs.n	8002040 <compensate_pressure+0x714>
			pressure = pressure_min;
 8002036:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800203a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800203e:	e00e      	b.n	800205e <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 8002040:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002044:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002048:	429a      	cmp	r2, r3
 800204a:	d908      	bls.n	800205e <compensate_pressure+0x732>
			pressure = pressure_max;
 800204c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002050:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002054:	e003      	b.n	800205e <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 8002056:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800205a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 800205e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 8002062:	4618      	mov	r0, r3
 8002064:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8002068:	46bd      	mov	sp, r7
 800206a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800206e:	bf00      	nop
 8002070:	0007ffff 	.word	0x0007ffff

08002074 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8002074:	b480      	push	{r7}
 8002076:	b08b      	sub	sp, #44	@ 0x2c
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 800207e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8002082:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800208c:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	039b      	lsls	r3, r3, #14
 8002094:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800209c:	051b      	lsls	r3, r3, #20
 800209e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80020a6:	461a      	mov	r2, r3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad2      	subs	r2, r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da02      	bge.n	80020c8 <compensate_humidity+0x54>
 80020c2:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80020c6:	337f      	adds	r3, #127	@ 0x7f
 80020c8:	13db      	asrs	r3, r3, #15
 80020ca:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80020d2:	461a      	mov	r2, r3
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	da01      	bge.n	80020e2 <compensate_humidity+0x6e>
 80020de:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80020e2:	129b      	asrs	r3, r3, #10
 80020e4:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	7f1b      	ldrb	r3, [r3, #28]
 80020ea:	461a      	mov	r2, r3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da01      	bge.n	80020fa <compensate_humidity+0x86>
 80020f6:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80020fa:	12db      	asrs	r3, r3, #11
 80020fc:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	da01      	bge.n	8002112 <compensate_humidity+0x9e>
 800210e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002112:	129b      	asrs	r3, r3, #10
 8002114:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8002118:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002120:	461a      	mov	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	da02      	bge.n	8002136 <compensate_humidity+0xc2>
 8002130:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8002134:	333f      	adds	r3, #63	@ 0x3f
 8002136:	139b      	asrs	r3, r3, #14
 8002138:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	da02      	bge.n	8002150 <compensate_humidity+0xdc>
 800214a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800214e:	337f      	adds	r3, #127	@ 0x7f
 8002150:	13db      	asrs	r3, r3, #15
 8002152:	461a      	mov	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	da02      	bge.n	8002160 <compensate_humidity+0xec>
 800215a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800215e:	337f      	adds	r3, #127	@ 0x7f
 8002160:	13db      	asrs	r3, r3, #15
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	da00      	bge.n	800216c <compensate_humidity+0xf8>
 800216a:	337f      	adds	r3, #127	@ 0x7f
 800216c:	11db      	asrs	r3, r3, #7
 800216e:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	7e1b      	ldrb	r3, [r3, #24]
 8002174:	461a      	mov	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	da00      	bge.n	8002182 <compensate_humidity+0x10e>
 8002180:	330f      	adds	r3, #15
 8002182:	111b      	asrs	r3, r3, #4
 8002184:	425b      	negs	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002194:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800219c:	bfa8      	it	ge
 800219e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80021a2:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da01      	bge.n	80021ae <compensate_humidity+0x13a>
 80021aa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80021ae:	131b      	asrs	r3, r3, #12
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 80021b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d901      	bls.n	80021be <compensate_humidity+0x14a>
		humidity = humidity_max;
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	372c      	adds	r7, #44	@ 0x2c
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80021d4:	2388      	movs	r3, #136	@ 0x88
 80021d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80021f0:	f107 010c 	add.w	r1, r7, #12
 80021f4:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	221a      	movs	r2, #26
 80021fc:	f7fe fee7 	bl	8000fce <bme280_get_regs>
 8002200:	4603      	mov	r3, r0
 8002202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 8002206:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11d      	bne.n	800224a <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f84a 	bl	80022ae <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800221a:	23e1      	movs	r3, #225	@ 0xe1
 800221c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002220:	f107 010c 	add.w	r1, r7, #12
 8002224:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2207      	movs	r2, #7
 800222c:	f7fe fecf 	bl	8000fce <bme280_get_regs>
 8002230:	4603      	mov	r3, r0
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 8002236:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f8e2 	bl	800240e <parse_humidity_calib_data>
		}
	}

	return rslt;
 800224a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800224e:	4618      	mov	r0, r3
 8002250:	3728      	adds	r7, #40	@ 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002256:	b480      	push	{r7}
 8002258:	b087      	sub	sp, #28
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8002264:	2301      	movs	r3, #1
 8002266:	75fb      	strb	r3, [r7, #23]
 8002268:	e016      	b.n	8002298 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	441a      	add	r2, r3
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	3b01      	subs	r3, #1
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	440b      	add	r3, r1
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	441a      	add	r2, r3
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4619      	mov	r1, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	440b      	add	r3, r1
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	3301      	adds	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
 8002298:	7dfa      	ldrb	r2, [r7, #23]
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	429a      	cmp	r2, r3
 800229e:	d3e4      	bcc.n	800226a <interleave_reg_addr+0x14>
	}
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	3310      	adds	r3, #16
 80022bc:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3301      	adds	r3, #1
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3303      	adds	r3, #3
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3302      	adds	r3, #2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3305      	adds	r3, #5
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b21b      	sxth	r3, r3
 8002304:	4313      	orrs	r3, r2
 8002306:	b21a      	sxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3307      	adds	r3, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b21a      	sxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3306      	adds	r3, #6
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b21b      	sxth	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b21b      	sxth	r3, r3
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3309      	adds	r3, #9
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3308      	adds	r3, #8
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b21b      	sxth	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b21a      	sxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	330b      	adds	r3, #11
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	b21a      	sxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	330a      	adds	r3, #10
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b21b      	sxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b21a      	sxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	330d      	adds	r3, #13
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21a      	sxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	330c      	adds	r3, #12
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21a      	sxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	330f      	adds	r3, #15
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21a      	sxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	330e      	adds	r3, #14
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b21b      	sxth	r3, r3
 8002388:	4313      	orrs	r3, r2
 800238a:	b21a      	sxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3311      	adds	r3, #17
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b21a      	sxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3310      	adds	r3, #16
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3313      	adds	r3, #19
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	b21a      	sxth	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3312      	adds	r3, #18
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b21a      	sxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3315      	adds	r3, #21
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3314      	adds	r3, #20
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21a      	sxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3317      	adds	r3, #23
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3316      	adds	r3, #22
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3319      	adds	r3, #25
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	761a      	strb	r2, [r3, #24]

}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800240e:	b480      	push	{r7}
 8002410:	b087      	sub	sp, #28
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	3310      	adds	r3, #16
 800241c:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3301      	adds	r3, #1
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21a      	sxth	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3302      	adds	r3, #2
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3303      	adds	r3, #3
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	b25b      	sxtb	r3, r3
 8002448:	b29b      	uxth	r3, r3
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	b29b      	uxth	r3, r3
 800244e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b21b      	sxth	r3, r3
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800245e:	8a7a      	ldrh	r2, [r7, #18]
 8002460:	8a3b      	ldrh	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	b21a      	sxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3305      	adds	r3, #5
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25b      	sxtb	r3, r3
 8002472:	b29b      	uxth	r3, r3
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	b29b      	uxth	r3, r3
 8002478:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	b2db      	uxtb	r3, r3
 8002484:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002486:	89fa      	ldrh	r2, [r7, #14]
 8002488:	89bb      	ldrh	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	b21a      	sxth	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3306      	adds	r3, #6
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	b25a      	sxtb	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	460a      	mov	r2, r1
 80024b6:	71fb      	strb	r3, [r7, #7]
 80024b8:	4613      	mov	r3, r2
 80024ba:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 80024c0:	79fa      	ldrb	r2, [r7, #7]
 80024c2:	79bb      	ldrb	r3, [r7, #6]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e001      	b.n	80024d6 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <null_ptr_check+0x26>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <null_ptr_check+0x26>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <null_ptr_check+0x26>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800250a:	23ff      	movs	r3, #255	@ 0xff
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e001      	b.n	8002514 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <user_i2c_read>:
struct bme280_dev dev;
struct bme280_data comp_data;
int8_t rslt;


int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af02      	add	r7, sp, #8
 800252a:	603a      	str	r2, [r7, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
 8002532:	460b      	mov	r3, r1
 8002534:	71bb      	strb	r3, [r7, #6]
 8002536:	4613      	mov	r3, r2
 8002538:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK)
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	b29b      	uxth	r3, r3
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	b299      	uxth	r1, r3
 8002542:	1dba      	adds	r2, r7, #6
 8002544:	230a      	movs	r3, #10
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2301      	movs	r3, #1
 800254a:	4811      	ldr	r0, [pc, #68]	@ (8002590 <user_i2c_read+0x6c>)
 800254c:	f001 fa1a 	bl	8003984 <HAL_I2C_Master_Transmit>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <user_i2c_read+0x38>
		return -1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e014      	b.n	8002586 <user_i2c_read+0x62>
	if (HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	b21b      	sxth	r3, r3
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	b21b      	sxth	r3, r3
 8002568:	b299      	uxth	r1, r3
 800256a:	88bb      	ldrh	r3, [r7, #4]
 800256c:	220a      	movs	r2, #10
 800256e:	9200      	str	r2, [sp, #0]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	4807      	ldr	r0, [pc, #28]	@ (8002590 <user_i2c_read+0x6c>)
 8002574:	f001 fb04 	bl	8003b80 <HAL_I2C_Master_Receive>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <user_i2c_read+0x60>
			!= HAL_OK)
		return -1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	e000      	b.n	8002586 <user_i2c_read+0x62>

	return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200001f4 	.word	0x200001f4

08002594 <user_delay_ms>:


void user_delay_ms(uint32_t period) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

	HAL_Delay(period);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fdf1 	bl	8003184 <HAL_Delay>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <user_i2c_write>:



int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	603a      	str	r2, [r7, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	460b      	mov	r3, r1
 80025bc:	71bb      	strb	r3, [r7, #6]
 80025be:	4613      	mov	r3, r2
 80025c0:	80bb      	strh	r3, [r7, #4]
	int8_t *buf;
	buf = malloc(len + 1);
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	3301      	adds	r3, #1
 80025c6:	4618      	mov	r0, r3
 80025c8:	f006 f9ce 	bl	8008968 <malloc>
 80025cc:	4603      	mov	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]
	buf[0] = reg_addr;
 80025d0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, data, len);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3301      	adds	r3, #1
 80025dc:	88ba      	ldrh	r2, [r7, #4]
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f007 f970 	bl	80098c6 <memcpy>

	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	b299      	uxth	r1, r3
 80025ee:	88bb      	ldrh	r3, [r7, #4]
 80025f0:	3301      	adds	r3, #1
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f04f 32ff 	mov.w	r2, #4294967295
 80025f8:	9200      	str	r2, [sp, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4808      	ldr	r0, [pc, #32]	@ (8002620 <user_i2c_write+0x74>)
 80025fe:	f001 f9c1 	bl	8003984 <HAL_I2C_Master_Transmit>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <user_i2c_write+0x62>
	HAL_MAX_DELAY) != HAL_OK)
		return -1;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
 800260c:	e003      	b.n	8002616 <user_i2c_write+0x6a>

	free(buf);
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f006 f9b2 	bl	8008978 <free>
	return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200001f4 	.word	0x200001f4

08002624 <_write>:


// for printf() redirection to USART2
int _write(int file, char *data, int len)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	b29a      	uxth	r2, r3
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	4807      	ldr	r0, [pc, #28]	@ (8002658 <_write+0x34>)
 800263c:	f003 f814 	bl	8005668 <HAL_UART_Transmit>
 8002640:	4603      	mov	r3, r0
 8002642:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK ? len : 0);
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <_write+0x2a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	e000      	b.n	8002650 <_write+0x2c>
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000248 	.word	0x20000248

0800265c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002660:	f000 fd4e 	bl	8003100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002664:	f000 f87c 	bl	8002760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002668:	f000 f93c 	bl	80028e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800266c:	f000 f8e2 	bl	8002834 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002670:	f000 f90e 	bl	8002890 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* BME280 초기화 */
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002674:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <main+0xd0>)
 8002676:	2276      	movs	r2, #118	@ 0x76
 8002678:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 800267a:	4b2c      	ldr	r3, [pc, #176]	@ (800272c <main+0xd0>)
 800267c:	2201      	movs	r2, #1
 800267e:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <main+0xd0>)
 8002682:	4a2b      	ldr	r2, [pc, #172]	@ (8002730 <main+0xd4>)
 8002684:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8002686:	4b29      	ldr	r3, [pc, #164]	@ (800272c <main+0xd0>)
 8002688:	4a2a      	ldr	r2, [pc, #168]	@ (8002734 <main+0xd8>)
 800268a:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <main+0xd0>)
 800268e:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <main+0xdc>)
 8002690:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev); // Initialize the sensor
 8002692:	4826      	ldr	r0, [pc, #152]	@ (800272c <main+0xd0>)
 8002694:	f7fe fc50 	bl	8000f38 <bme280_init>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	4b27      	ldr	r3, [pc, #156]	@ (800273c <main+0xe0>)
 800269e:	701a      	strb	r2, [r3, #0]

	// Configure the sensor
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80026a0:	4b22      	ldr	r3, [pc, #136]	@ (800272c <main+0xd0>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80026a8:	4b20      	ldr	r3, [pc, #128]	@ (800272c <main+0xd0>)
 80026aa:	2205      	movs	r2, #5
 80026ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80026b0:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <main+0xd0>)
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 80026b8:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <main+0xd0>)
 80026ba:	2204      	movs	r2, #4
 80026bc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	rslt = bme280_set_sensor_settings(
 80026c0:	491a      	ldr	r1, [pc, #104]	@ (800272c <main+0xd0>)
 80026c2:	200f      	movs	r0, #15
 80026c4:	f7fe fd2c 	bl	8001120 <bme280_set_sensor_settings>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <main+0xe0>)
 80026ce:	701a      	strb	r2, [r3, #0]
			BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL
					| BME280_FILTER_SEL, &dev);
	//rslt = bme280_set_sensor_settings(BME280_ALL_SETTINGS_SEL, &dev); this can also be used in place of above

    if (rslt == BME280_OK) {
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <main+0xe0>)
 80026d2:	f993 3000 	ldrsb.w	r3, [r3]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <main+0x84>
    	printf("Sensor Initialization Failed\n");
 80026da:	4819      	ldr	r0, [pc, #100]	@ (8002740 <main+0xe4>)
 80026dc:	f006 ff84 	bl	80095e8 <puts>
    }

    rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80026e0:	4912      	ldr	r1, [pc, #72]	@ (800272c <main+0xd0>)
 80026e2:	2003      	movs	r0, #3
 80026e4:	f7fe fd71 	bl	80011ca <bme280_set_sensor_mode>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b13      	ldr	r3, [pc, #76]	@ (800273c <main+0xe0>)
 80026ee:	701a      	strb	r2, [r3, #0]
    if (rslt != BME280_OK) {
 80026f0:	4b12      	ldr	r3, [pc, #72]	@ (800273c <main+0xe0>)
 80026f2:	f993 3000 	ldrsb.w	r3, [r3]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <main+0xa4>
        printf("Mode Initialization Failed\n");
 80026fa:	4812      	ldr	r0, [pc, #72]	@ (8002744 <main+0xe8>)
 80026fc:	f006 ff74 	bl	80095e8 <puts>
    }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002700:	f003 fbb2 	bl	8005e68 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002704:	4a10      	ldr	r2, [pc, #64]	@ (8002748 <main+0xec>)
 8002706:	2100      	movs	r1, #0
 8002708:	4810      	ldr	r0, [pc, #64]	@ (800274c <main+0xf0>)
 800270a:	f003 fbf7 	bl	8005efc <osThreadNew>
 800270e:	4603      	mov	r3, r0
 8002710:	4a0f      	ldr	r2, [pc, #60]	@ (8002750 <main+0xf4>)
 8002712:	6013      	str	r3, [r2, #0]

  /* creation of bme280Task */
  bme280TaskHandle = osThreadNew(Startbme280Task, NULL, &bme280Task_attributes);
 8002714:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <main+0xf8>)
 8002716:	2100      	movs	r1, #0
 8002718:	480f      	ldr	r0, [pc, #60]	@ (8002758 <main+0xfc>)
 800271a:	f003 fbef 	bl	8005efc <osThreadNew>
 800271e:	4603      	mov	r3, r0
 8002720:	4a0e      	ldr	r2, [pc, #56]	@ (800275c <main+0x100>)
 8002722:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002724:	f003 fbc4 	bl	8005eb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <main+0xcc>
 800272c:	200002a4 	.word	0x200002a4
 8002730:	08002525 	.word	0x08002525
 8002734:	080025ad 	.word	0x080025ad
 8002738:	08002595 	.word	0x08002595
 800273c:	200002f0 	.word	0x200002f0
 8002740:	0800b390 	.word	0x0800b390
 8002744:	0800b3b0 	.word	0x0800b3b0
 8002748:	0800b42c 	.word	0x0800b42c
 800274c:	08002b7d 	.word	0x08002b7d
 8002750:	20000290 	.word	0x20000290
 8002754:	0800b450 	.word	0x0800b450
 8002758:	08002b8d 	.word	0x08002b8d
 800275c:	20000294 	.word	0x20000294

08002760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b094      	sub	sp, #80	@ 0x50
 8002764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002766:	f107 0320 	add.w	r3, r7, #32
 800276a:	2230      	movs	r2, #48	@ 0x30
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f007 f81a 	bl	80097a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	4b28      	ldr	r3, [pc, #160]	@ (800282c <SystemClock_Config+0xcc>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	4a27      	ldr	r2, [pc, #156]	@ (800282c <SystemClock_Config+0xcc>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002792:	6413      	str	r3, [r2, #64]	@ 0x40
 8002794:	4b25      	ldr	r3, [pc, #148]	@ (800282c <SystemClock_Config+0xcc>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a0:	2300      	movs	r3, #0
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	4b22      	ldr	r3, [pc, #136]	@ (8002830 <SystemClock_Config+0xd0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a21      	ldr	r2, [pc, #132]	@ (8002830 <SystemClock_Config+0xd0>)
 80027aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <SystemClock_Config+0xd0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027bc:	2302      	movs	r3, #2
 80027be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c4:	2310      	movs	r3, #16
 80027c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c8:	2302      	movs	r3, #2
 80027ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027cc:	2300      	movs	r3, #0
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027d0:	2308      	movs	r3, #8
 80027d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80027d4:	2332      	movs	r3, #50	@ 0x32
 80027d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027d8:	2304      	movs	r3, #4
 80027da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027dc:	2307      	movs	r3, #7
 80027de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e0:	f107 0320 	add.w	r3, r7, #32
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 ff83 	bl	80046f0 <HAL_RCC_OscConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027f0:	f000 fa3c 	bl	8002c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f4:	230f      	movs	r3, #15
 80027f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f8:	2302      	movs	r3, #2
 80027fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800280a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f002 f9e4 	bl	8004be0 <HAL_RCC_ClockConfig>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800281e:	f000 fa25 	bl	8002c6c <Error_Handler>
  }
}
 8002822:	bf00      	nop
 8002824:	3750      	adds	r7, #80	@ 0x50
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000

08002834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002838:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <MX_I2C1_Init+0x50>)
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <MX_I2C1_Init+0x54>)
 800283c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800283e:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <MX_I2C1_Init+0x50>)
 8002840:	4a12      	ldr	r2, [pc, #72]	@ (800288c <MX_I2C1_Init+0x58>)
 8002842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <MX_I2C1_Init+0x50>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <MX_I2C1_Init+0x50>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002850:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <MX_I2C1_Init+0x50>)
 8002852:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002856:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <MX_I2C1_Init+0x50>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800285e:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <MX_I2C1_Init+0x50>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002864:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <MX_I2C1_Init+0x50>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <MX_I2C1_Init+0x50>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002870:	4804      	ldr	r0, [pc, #16]	@ (8002884 <MX_I2C1_Init+0x50>)
 8002872:	f000 ff43 	bl	80036fc <HAL_I2C_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800287c:	f000 f9f6 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200001f4 	.word	0x200001f4
 8002888:	40005400 	.word	0x40005400
 800288c:	000186a0 	.word	0x000186a0

08002890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002894:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 8002896:	4a12      	ldr	r2, [pc, #72]	@ (80028e0 <MX_USART2_UART_Init+0x50>)
 8002898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 800289c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028c6:	4805      	ldr	r0, [pc, #20]	@ (80028dc <MX_USART2_UART_Init+0x4c>)
 80028c8:	f002 fe7e 	bl	80055c8 <HAL_UART_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028d2:	f000 f9cb 	bl	8002c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000248 	.word	0x20000248
 80028e0:	40004400 	.word	0x40004400

080028e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	@ 0x30
 80028e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	4b99      	ldr	r3, [pc, #612]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	4a98      	ldr	r2, [pc, #608]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002904:	f043 0310 	orr.w	r3, r3, #16
 8002908:	6313      	str	r3, [r2, #48]	@ 0x30
 800290a:	4b96      	ldr	r3, [pc, #600]	@ (8002b64 <MX_GPIO_Init+0x280>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	4b92      	ldr	r3, [pc, #584]	@ (8002b64 <MX_GPIO_Init+0x280>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	4a91      	ldr	r2, [pc, #580]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6313      	str	r3, [r2, #48]	@ 0x30
 8002926:	4b8f      	ldr	r3, [pc, #572]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b8b      	ldr	r3, [pc, #556]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	4a8a      	ldr	r2, [pc, #552]	@ (8002b64 <MX_GPIO_Init+0x280>)
 800293c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002940:	6313      	str	r3, [r2, #48]	@ 0x30
 8002942:	4b88      	ldr	r3, [pc, #544]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b84      	ldr	r3, [pc, #528]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a83      	ldr	r2, [pc, #524]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b81      	ldr	r3, [pc, #516]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a7c      	ldr	r2, [pc, #496]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b64 <MX_GPIO_Init+0x280>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	4b76      	ldr	r3, [pc, #472]	@ (8002b64 <MX_GPIO_Init+0x280>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	4a75      	ldr	r2, [pc, #468]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002990:	f043 0308 	orr.w	r3, r3, #8
 8002994:	6313      	str	r3, [r2, #48]	@ 0x30
 8002996:	4b73      	ldr	r3, [pc, #460]	@ (8002b64 <MX_GPIO_Init+0x280>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2108      	movs	r1, #8
 80029a6:	4870      	ldr	r0, [pc, #448]	@ (8002b68 <MX_GPIO_Init+0x284>)
 80029a8:	f000 fe8e 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80029ac:	2201      	movs	r2, #1
 80029ae:	2101      	movs	r1, #1
 80029b0:	486e      	ldr	r0, [pc, #440]	@ (8002b6c <MX_GPIO_Init+0x288>)
 80029b2:	f000 fe89 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80029b6:	2200      	movs	r2, #0
 80029b8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80029bc:	486c      	ldr	r0, [pc, #432]	@ (8002b70 <MX_GPIO_Init+0x28c>)
 80029be:	f000 fe83 	bl	80036c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80029c2:	2308      	movs	r3, #8
 80029c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	4863      	ldr	r0, [pc, #396]	@ (8002b68 <MX_GPIO_Init+0x284>)
 80029da:	f000 fcd9 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80029de:	2301      	movs	r3, #1
 80029e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	485d      	ldr	r0, [pc, #372]	@ (8002b6c <MX_GPIO_Init+0x288>)
 80029f6:	f000 fccb 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80029fa:	2308      	movs	r3, #8
 80029fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a0e:	f107 031c 	add.w	r3, r7, #28
 8002a12:	4619      	mov	r1, r3
 8002a14:	4855      	ldr	r0, [pc, #340]	@ (8002b6c <MX_GPIO_Init+0x288>)
 8002a16:	f000 fcbb 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4851      	ldr	r0, [pc, #324]	@ (8002b74 <MX_GPIO_Init+0x290>)
 8002a30:	f000 fcae 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002a34:	2310      	movs	r3, #16
 8002a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a44:	2306      	movs	r3, #6
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4849      	ldr	r0, [pc, #292]	@ (8002b74 <MX_GPIO_Init+0x290>)
 8002a50:	f000 fc9e 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002a54:	23e0      	movs	r3, #224	@ 0xe0
 8002a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a64:	2305      	movs	r3, #5
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4841      	ldr	r0, [pc, #260]	@ (8002b74 <MX_GPIO_Init+0x290>)
 8002a70:	f000 fc8e 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a74:	2304      	movs	r3, #4
 8002a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	483c      	ldr	r0, [pc, #240]	@ (8002b78 <MX_GPIO_Init+0x294>)
 8002a88:	f000 fc82 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002a8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4833      	ldr	r0, [pc, #204]	@ (8002b78 <MX_GPIO_Init+0x294>)
 8002aaa:	f000 fc71 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002aae:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002ab2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	482a      	ldr	r0, [pc, #168]	@ (8002b70 <MX_GPIO_Init+0x28c>)
 8002ac8:	f000 fc62 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002acc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ade:	2306      	movs	r3, #6
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae2:	f107 031c 	add.w	r3, r7, #28
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4820      	ldr	r0, [pc, #128]	@ (8002b6c <MX_GPIO_Init+0x288>)
 8002aea:	f000 fc51 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af4:	2300      	movs	r3, #0
 8002af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	481c      	ldr	r0, [pc, #112]	@ (8002b74 <MX_GPIO_Init+0x290>)
 8002b04:	f000 fc44 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002b08:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b1a:	230a      	movs	r3, #10
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f107 031c 	add.w	r3, r7, #28
 8002b22:	4619      	mov	r1, r3
 8002b24:	4813      	ldr	r0, [pc, #76]	@ (8002b74 <MX_GPIO_Init+0x290>)
 8002b26:	f000 fc33 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b36:	f107 031c 	add.w	r3, r7, #28
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	480c      	ldr	r0, [pc, #48]	@ (8002b70 <MX_GPIO_Init+0x28c>)
 8002b3e:	f000 fc27 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	4804      	ldr	r0, [pc, #16]	@ (8002b68 <MX_GPIO_Init+0x284>)
 8002b58:	f000 fc1a 	bl	8003390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3730      	adds	r7, #48	@ 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020c00 	.word	0x40020c00
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400

08002b7c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f003 fa4b 	bl	8006020 <osDelay>
 8002b8a:	e7fb      	b.n	8002b84 <StartDefaultTask+0x8>

08002b8c <Startbme280Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Startbme280Task */
void Startbme280Task(void *argument)
{
 8002b8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af04      	add	r7, sp, #16
 8002b94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startbme280Task */
	/* Infinite loop */
	for (;;) {
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002b96:	4a25      	ldr	r2, [pc, #148]	@ (8002c2c <Startbme280Task+0xa0>)
 8002b98:	4925      	ldr	r1, [pc, #148]	@ (8002c30 <Startbme280Task+0xa4>)
 8002b9a:	2007      	movs	r0, #7
 8002b9c:	f7fe fb91 	bl	80012c2 <bme280_get_sensor_data>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4b23      	ldr	r3, [pc, #140]	@ (8002c34 <Startbme280Task+0xa8>)
 8002ba6:	701a      	strb	r2, [r3, #0]
		if (rslt == BME280_OK) {
 8002ba8:	4b22      	ldr	r3, [pc, #136]	@ (8002c34 <Startbme280Task+0xa8>)
 8002baa:	f993 3000 	ldrsb.w	r3, [r3]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f1      	bne.n	8002b96 <Startbme280Task+0xa>
			temperature = comp_data.temperature;
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <Startbme280Task+0xa4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002c38 <Startbme280Task+0xac>)
 8002bc0:	edc3 7a00 	vstr	s15, [r3]
			pressure = comp_data.pressure;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <Startbme280Task+0xa4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <Startbme280Task+0xb0>)
 8002bd2:	edc3 7a00 	vstr	s15, [r3]
			humidity = comp_data.humidity;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <Startbme280Task+0xa4>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be2:	4b17      	ldr	r3, [pc, #92]	@ (8002c40 <Startbme280Task+0xb4>)
 8002be4:	edc3 7a00 	vstr	s15, [r3]
			osDelay(100);
 8002be8:	2064      	movs	r0, #100	@ 0x64
 8002bea:	f003 fa19 	bl	8006020 <osDelay>
			printf("Sensor Data:\nTemperature: %.2f°C\nHumidity: %.2f%%\nPressure: %.2f hPa\n", temperature, humidity, pressure);
 8002bee:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <Startbme280Task+0xac>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fca8 	bl	8000548 <__aeabi_f2d>
 8002bf8:	4680      	mov	r8, r0
 8002bfa:	4689      	mov	r9, r1
 8002bfc:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <Startbme280Task+0xb4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fca1 	bl	8000548 <__aeabi_f2d>
 8002c06:	4604      	mov	r4, r0
 8002c08:	460d      	mov	r5, r1
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <Startbme280Task+0xb0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fc9a 	bl	8000548 <__aeabi_f2d>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c1c:	e9cd 4500 	strd	r4, r5, [sp]
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	4807      	ldr	r0, [pc, #28]	@ (8002c44 <Startbme280Task+0xb8>)
 8002c26:	f006 fc77 	bl	8009518 <iprintf>
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002c2a:	e7b4      	b.n	8002b96 <Startbme280Task+0xa>
 8002c2c:	200002a4 	.word	0x200002a4
 8002c30:	200002e4 	.word	0x200002e4
 8002c34:	200002f0 	.word	0x200002f0
 8002c38:	20000298 	.word	0x20000298
 8002c3c:	200002a0 	.word	0x200002a0
 8002c40:	2000029c 	.word	0x2000029c
 8002c44:	0800b3cc 	.word	0x0800b3cc

08002c48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c5a:	f000 fa73 	bl	8003144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40001000 	.word	0x40001000

08002c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c70:	b672      	cpsid	i
}
 8002c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <Error_Handler+0x8>

08002c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_MspInit+0x54>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4a11      	ldr	r2, [pc, #68]	@ (8002ccc <HAL_MspInit+0x54>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <HAL_MspInit+0x54>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_MspInit+0x54>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <HAL_MspInit+0x54>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_MspInit+0x54>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	210f      	movs	r1, #15
 8002cba:	f06f 0001 	mvn.w	r0, #1
 8002cbe:	f000 fb3d 	bl	800333c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a19      	ldr	r2, [pc, #100]	@ (8002d54 <HAL_I2C_MspInit+0x84>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d12c      	bne.n	8002d4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <HAL_I2C_MspInit+0x88>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	4a17      	ldr	r2, [pc, #92]	@ (8002d58 <HAL_I2C_MspInit+0x88>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <HAL_I2C_MspInit+0x88>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002d0e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d14:	2312      	movs	r3, #18
 8002d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d20:	2304      	movs	r3, #4
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480c      	ldr	r0, [pc, #48]	@ (8002d5c <HAL_I2C_MspInit+0x8c>)
 8002d2c:	f000 fb30 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <HAL_I2C_MspInit+0x88>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	4a07      	ldr	r2, [pc, #28]	@ (8002d58 <HAL_I2C_MspInit+0x88>)
 8002d3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d40:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_I2C_MspInit+0x88>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3728      	adds	r7, #40	@ 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40005400 	.word	0x40005400
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020400 	.word	0x40020400

08002d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	@ 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	@ (8002de4 <HAL_UART_MspInit+0x84>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12b      	bne.n	8002dda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b18      	ldr	r3, [pc, #96]	@ (8002de8 <HAL_UART_MspInit+0x88>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a17      	ldr	r2, [pc, #92]	@ (8002de8 <HAL_UART_MspInit+0x88>)
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <HAL_UART_MspInit+0x88>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <HAL_UART_MspInit+0x88>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4a10      	ldr	r2, [pc, #64]	@ (8002de8 <HAL_UART_MspInit+0x88>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <HAL_UART_MspInit+0x88>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dba:	230c      	movs	r3, #12
 8002dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dca:	2307      	movs	r3, #7
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	@ (8002dec <HAL_UART_MspInit+0x8c>)
 8002dd6:	f000 fadb 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dda:	bf00      	nop
 8002ddc:	3728      	adds	r7, #40	@ 0x28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40004400 	.word	0x40004400
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40020000 	.word	0x40020000

08002df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08e      	sub	sp, #56	@ 0x38
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	4b33      	ldr	r3, [pc, #204]	@ (8002ed4 <HAL_InitTick+0xe4>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	4a32      	ldr	r2, [pc, #200]	@ (8002ed4 <HAL_InitTick+0xe4>)
 8002e0a:	f043 0310 	orr.w	r3, r3, #16
 8002e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e10:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <HAL_InitTick+0xe4>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e1c:	f107 0210 	add.w	r2, r7, #16
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 f8fa 	bl	8005020 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e36:	f002 f8cb 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8002e3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8002e3c:	e004      	b.n	8002e48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e3e:	f002 f8c7 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8002e42:	4603      	mov	r3, r0
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4a:	4a23      	ldr	r2, [pc, #140]	@ (8002ed8 <HAL_InitTick+0xe8>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	3b01      	subs	r3, #1
 8002e54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e56:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <HAL_InitTick+0xec>)
 8002e58:	4a21      	ldr	r2, [pc, #132]	@ (8002ee0 <HAL_InitTick+0xf0>)
 8002e5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002edc <HAL_InitTick+0xec>)
 8002e5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e64:	4a1d      	ldr	r2, [pc, #116]	@ (8002edc <HAL_InitTick+0xec>)
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002edc <HAL_InitTick+0xec>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <HAL_InitTick+0xec>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e76:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <HAL_InitTick+0xec>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002e7c:	4817      	ldr	r0, [pc, #92]	@ (8002edc <HAL_InitTick+0xec>)
 8002e7e:	f002 f901 	bl	8005084 <HAL_TIM_Base_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002e88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002e90:	4812      	ldr	r0, [pc, #72]	@ (8002edc <HAL_InitTick+0xec>)
 8002e92:	f002 f951 	bl	8005138 <HAL_TIM_Base_Start_IT>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ea4:	2036      	movs	r0, #54	@ 0x36
 8002ea6:	f000 fa65 	bl	8003374 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d808      	bhi.n	8002ec2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	2036      	movs	r0, #54	@ 0x36
 8002eb6:	f000 fa41 	bl	800333c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002eba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <HAL_InitTick+0xf4>)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e002      	b.n	8002ec8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ec8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3738      	adds	r7, #56	@ 0x38
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	431bde83 	.word	0x431bde83
 8002edc:	200002f4 	.word	0x200002f4
 8002ee0:	40001000 	.word	0x40001000
 8002ee4:	20000004 	.word	0x20000004

08002ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <NMI_Handler+0x4>

08002ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef4:	bf00      	nop
 8002ef6:	e7fd      	b.n	8002ef4 <HardFault_Handler+0x4>

08002ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <MemManage_Handler+0x4>

08002f00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <BusFault_Handler+0x4>

08002f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <UsageFault_Handler+0x4>

08002f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f24:	4802      	ldr	r0, [pc, #8]	@ (8002f30 <TIM6_DAC_IRQHandler+0x10>)
 8002f26:	f002 f977 	bl	8005218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200002f4 	.word	0x200002f4

08002f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return 1;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <_kill>:

int _kill(int pid, int sig)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f4e:	f006 fc8d 	bl	800986c <__errno>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2216      	movs	r2, #22
 8002f56:	601a      	str	r2, [r3, #0]
  return -1;
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <_exit>:

void _exit (int status)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ffe7 	bl	8002f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <_exit+0x12>

08002f7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e00a      	b.n	8002fa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f8c:	f3af 8000 	nop.w
 8002f90:	4601      	mov	r1, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	60ba      	str	r2, [r7, #8]
 8002f98:	b2ca      	uxtb	r2, r1
 8002f9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	dbf0      	blt.n	8002f8c <_read+0x12>
  }

  return len;
 8002faa:	687b      	ldr	r3, [r7, #4]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fdc:	605a      	str	r2, [r3, #4]
  return 0;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <_isatty>:

int _isatty(int file)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff4:	2301      	movs	r3, #1
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003024:	4a14      	ldr	r2, [pc, #80]	@ (8003078 <_sbrk+0x5c>)
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <_sbrk+0x60>)
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <_sbrk+0x64>)
 800303a:	4a12      	ldr	r2, [pc, #72]	@ (8003084 <_sbrk+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800304c:	f006 fc0e 	bl	800986c <__errno>
 8003050:	4603      	mov	r3, r0
 8003052:	220c      	movs	r2, #12
 8003054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	e009      	b.n	8003070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003062:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <_sbrk+0x64>)
 800306c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20020000 	.word	0x20020000
 800307c:	00000400 	.word	0x00000400
 8003080:	2000033c 	.word	0x2000033c
 8003084:	20004de0 	.word	0x20004de0

08003088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <SystemInit+0x20>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003092:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <SystemInit+0x20>)
 8003094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030b0:	f7ff ffea 	bl	8003088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030b4:	480c      	ldr	r0, [pc, #48]	@ (80030e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030b6:	490d      	ldr	r1, [pc, #52]	@ (80030ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030b8:	4a0d      	ldr	r2, [pc, #52]	@ (80030f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030bc:	e002      	b.n	80030c4 <LoopCopyDataInit>

080030be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c2:	3304      	adds	r3, #4

080030c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c8:	d3f9      	bcc.n	80030be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ca:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030cc:	4c0a      	ldr	r4, [pc, #40]	@ (80030f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d0:	e001      	b.n	80030d6 <LoopFillZerobss>

080030d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d4:	3204      	adds	r2, #4

080030d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030da:	f006 fbcd 	bl	8009878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030de:	f7ff fabd 	bl	800265c <main>
  bx  lr    
 80030e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ec:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80030f0:	0800b810 	.word	0x0800b810
  ldr r2, =_sbss
 80030f4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030f8:	20004de0 	.word	0x20004de0

080030fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030fc:	e7fe      	b.n	80030fc <ADC_IRQHandler>
	...

08003100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003104:	4b0e      	ldr	r3, [pc, #56]	@ (8003140 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0d      	ldr	r2, [pc, #52]	@ (8003140 <HAL_Init+0x40>)
 800310a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800310e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_Init+0x40>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <HAL_Init+0x40>)
 8003116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800311a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800311c:	4b08      	ldr	r3, [pc, #32]	@ (8003140 <HAL_Init+0x40>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a07      	ldr	r2, [pc, #28]	@ (8003140 <HAL_Init+0x40>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003128:	2003      	movs	r0, #3
 800312a:	f000 f8fc 	bl	8003326 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312e:	200f      	movs	r0, #15
 8003130:	f7ff fe5e 	bl	8002df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003134:	f7ff fda0 	bl	8002c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023c00 	.word	0x40023c00

08003144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <HAL_IncTick+0x20>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_IncTick+0x24>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4413      	add	r3, r2
 8003154:	4a04      	ldr	r2, [pc, #16]	@ (8003168 <HAL_IncTick+0x24>)
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000008 	.word	0x20000008
 8003168:	20000340 	.word	0x20000340

0800316c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return uwTick;
 8003170:	4b03      	ldr	r3, [pc, #12]	@ (8003180 <HAL_GetTick+0x14>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000340 	.word	0x20000340

08003184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7ff ffee 	bl	800316c <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d005      	beq.n	80031aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800319e:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <HAL_Delay+0x44>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031aa:	bf00      	nop
 80031ac:	f7ff ffde 	bl	800316c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d8f7      	bhi.n	80031ac <HAL_Delay+0x28>
  {
  }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000008 	.word	0x20000008

080031cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <__NVIC_SetPriorityGrouping+0x44>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e8:	4013      	ands	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fe:	4a04      	ldr	r2, [pc, #16]	@ (8003210 <__NVIC_SetPriorityGrouping+0x44>)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	60d3      	str	r3, [r2, #12]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003218:	4b04      	ldr	r3, [pc, #16]	@ (800322c <__NVIC_GetPriorityGrouping+0x18>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f003 0307 	and.w	r3, r3, #7
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	2b00      	cmp	r3, #0
 8003240:	db0b      	blt.n	800325a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	4907      	ldr	r1, [pc, #28]	@ (8003268 <__NVIC_EnableIRQ+0x38>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2001      	movs	r0, #1
 8003252:	fa00 f202 	lsl.w	r2, r0, r2
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000e100 	.word	0xe000e100

0800326c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db0a      	blt.n	8003296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	490c      	ldr	r1, [pc, #48]	@ (80032b8 <__NVIC_SetPriority+0x4c>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003294:	e00a      	b.n	80032ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4908      	ldr	r1, [pc, #32]	@ (80032bc <__NVIC_SetPriority+0x50>)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3b04      	subs	r3, #4
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	440b      	add	r3, r1
 80032aa:	761a      	strb	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	@ 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f1c3 0307 	rsb	r3, r3, #7
 80032da:	2b04      	cmp	r3, #4
 80032dc:	bf28      	it	cs
 80032de:	2304      	movcs	r3, #4
 80032e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d902      	bls.n	80032f0 <NVIC_EncodePriority+0x30>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3b03      	subs	r3, #3
 80032ee:	e000      	b.n	80032f2 <NVIC_EncodePriority+0x32>
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43d9      	mvns	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	4313      	orrs	r3, r2
         );
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	@ 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ff4c 	bl	80031cc <__NVIC_SetPriorityGrouping>
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800334e:	f7ff ff61 	bl	8003214 <__NVIC_GetPriorityGrouping>
 8003352:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	6978      	ldr	r0, [r7, #20]
 800335a:	f7ff ffb1 	bl	80032c0 <NVIC_EncodePriority>
 800335e:	4602      	mov	r2, r0
 8003360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ff80 	bl	800326c <__NVIC_SetPriority>
}
 800336c:	bf00      	nop
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ff54 	bl	8003230 <__NVIC_EnableIRQ>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	@ 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e16b      	b.n	8003684 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f040 815a 	bne.w	800367e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d005      	beq.n	80033e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d130      	bne.n	8003444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 0201 	and.w	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d017      	beq.n	8003480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d123      	bne.n	80034d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80b4 	beq.w	800367e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b60      	ldr	r3, [pc, #384]	@ (800369c <HAL_GPIO_Init+0x30c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	4a5f      	ldr	r2, [pc, #380]	@ (800369c <HAL_GPIO_Init+0x30c>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003524:	6453      	str	r3, [r2, #68]	@ 0x44
 8003526:	4b5d      	ldr	r3, [pc, #372]	@ (800369c <HAL_GPIO_Init+0x30c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003532:	4a5b      	ldr	r2, [pc, #364]	@ (80036a0 <HAL_GPIO_Init+0x310>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a52      	ldr	r2, [pc, #328]	@ (80036a4 <HAL_GPIO_Init+0x314>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02b      	beq.n	80035b6 <HAL_GPIO_Init+0x226>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a51      	ldr	r2, [pc, #324]	@ (80036a8 <HAL_GPIO_Init+0x318>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d025      	beq.n	80035b2 <HAL_GPIO_Init+0x222>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a50      	ldr	r2, [pc, #320]	@ (80036ac <HAL_GPIO_Init+0x31c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <HAL_GPIO_Init+0x21e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4f      	ldr	r2, [pc, #316]	@ (80036b0 <HAL_GPIO_Init+0x320>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0x21a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4e      	ldr	r2, [pc, #312]	@ (80036b4 <HAL_GPIO_Init+0x324>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_Init+0x216>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4d      	ldr	r2, [pc, #308]	@ (80036b8 <HAL_GPIO_Init+0x328>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_Init+0x212>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4c      	ldr	r2, [pc, #304]	@ (80036bc <HAL_GPIO_Init+0x32c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_Init+0x20e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4b      	ldr	r2, [pc, #300]	@ (80036c0 <HAL_GPIO_Init+0x330>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_Init+0x20a>
 8003596:	2307      	movs	r3, #7
 8003598:	e00e      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 800359a:	2308      	movs	r3, #8
 800359c:	e00c      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 800359e:	2306      	movs	r3, #6
 80035a0:	e00a      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035a2:	2305      	movs	r3, #5
 80035a4:	e008      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e006      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e004      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e002      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_GPIO_Init+0x228>
 80035b6:	2300      	movs	r3, #0
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f002 0203 	and.w	r2, r2, #3
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	4093      	lsls	r3, r2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c8:	4935      	ldr	r1, [pc, #212]	@ (80036a0 <HAL_GPIO_Init+0x310>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d6:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fa:	4a32      	ldr	r2, [pc, #200]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003600:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003624:	4a27      	ldr	r2, [pc, #156]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362a:	4b26      	ldr	r3, [pc, #152]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364e:	4a1d      	ldr	r2, [pc, #116]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003678:	4a12      	ldr	r2, [pc, #72]	@ (80036c4 <HAL_GPIO_Init+0x334>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b0f      	cmp	r3, #15
 8003688:	f67f ae90 	bls.w	80033ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	40013800 	.word	0x40013800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021800 	.word	0x40021800
 80036c0:	40021c00 	.word	0x40021c00
 80036c4:	40013c00 	.word	0x40013c00

080036c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d8:	787b      	ldrb	r3, [r7, #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e4:	e003      	b.n	80036ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	041a      	lsls	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	619a      	str	r2, [r3, #24]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e12b      	b.n	8003966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fad4 	bl	8002cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	@ 0x24
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800374e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800375e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003760:	f001 fc36 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a81      	ldr	r2, [pc, #516]	@ (8003970 <HAL_I2C_Init+0x274>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d807      	bhi.n	8003780 <HAL_I2C_Init+0x84>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a80      	ldr	r2, [pc, #512]	@ (8003974 <HAL_I2C_Init+0x278>)
 8003774:	4293      	cmp	r3, r2
 8003776:	bf94      	ite	ls
 8003778:	2301      	movls	r3, #1
 800377a:	2300      	movhi	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e006      	b.n	800378e <HAL_I2C_Init+0x92>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a7d      	ldr	r2, [pc, #500]	@ (8003978 <HAL_I2C_Init+0x27c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0e7      	b.n	8003966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a78      	ldr	r2, [pc, #480]	@ (800397c <HAL_I2C_Init+0x280>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0c9b      	lsrs	r3, r3, #18
 80037a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003970 <HAL_I2C_Init+0x274>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d802      	bhi.n	80037d0 <HAL_I2C_Init+0xd4>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	e009      	b.n	80037e4 <HAL_I2C_Init+0xe8>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a69      	ldr	r2, [pc, #420]	@ (8003980 <HAL_I2C_Init+0x284>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	495c      	ldr	r1, [pc, #368]	@ (8003970 <HAL_I2C_Init+0x274>)
 8003800:	428b      	cmp	r3, r1
 8003802:	d819      	bhi.n	8003838 <HAL_I2C_Init+0x13c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e59      	subs	r1, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003818:	400b      	ands	r3, r1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_I2C_Init+0x138>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e59      	subs	r1, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	e051      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003834:	2304      	movs	r3, #4
 8003836:	e04f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <HAL_I2C_Init+0x168>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e012      	b.n	800388a <HAL_I2C_Init+0x18e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	0099      	lsls	r1, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x196>
 800388e:	2301      	movs	r3, #1
 8003890:	e022      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10e      	bne.n	80038b8 <HAL_I2C_Init+0x1bc>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e58      	subs	r0, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	440b      	add	r3, r1
 80038a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	0099      	lsls	r1, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	6809      	ldr	r1, [r1, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6911      	ldr	r1, [r2, #16]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	000186a0 	.word	0x000186a0
 8003974:	001e847f 	.word	0x001e847f
 8003978:	003d08ff 	.word	0x003d08ff
 800397c:	431bde83 	.word	0x431bde83
 8003980:	10624dd3 	.word	0x10624dd3

08003984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	461a      	mov	r2, r3
 8003990:	460b      	mov	r3, r1
 8003992:	817b      	strh	r3, [r7, #10]
 8003994:	4613      	mov	r3, r2
 8003996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003998:	f7ff fbe8 	bl	800316c <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	f040 80e0 	bne.w	8003b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2319      	movs	r3, #25
 80039b2:	2201      	movs	r2, #1
 80039b4:	4970      	ldr	r1, [pc, #448]	@ (8003b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fc64 	bl	8004284 <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0d3      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_I2C_Master_Transmit+0x50>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0cc      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d007      	beq.n	80039fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	@ 0x21
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2210      	movs	r2, #16
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	893a      	ldrh	r2, [r7, #8]
 8003a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a50      	ldr	r2, [pc, #320]	@ (8003b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a3c:	8979      	ldrh	r1, [r7, #10]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 face 	bl	8003fe4 <I2C_MasterRequestWrite>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e08d      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a68:	e066      	b.n	8003b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fd22 	bl	80044b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06b      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d11b      	bne.n	8003b0c <HAL_I2C_Master_Transmit+0x188>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d017      	beq.n	8003b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	6a39      	ldr	r1, [r7, #32]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fd19 	bl	8004548 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d107      	bne.n	8003b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01a      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d194      	bne.n	8003a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	00100002 	.word	0x00100002
 8003b7c:	ffff0000 	.word	0xffff0000

08003b80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	@ 0x30
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
 8003b90:	4613      	mov	r3, r2
 8003b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7ff faea 	bl	800316c <HAL_GetTick>
 8003b98:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	f040 8217 	bne.w	8003fd6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2319      	movs	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	497c      	ldr	r1, [pc, #496]	@ (8003da4 <HAL_I2C_Master_Receive+0x224>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fb66 	bl	8004284 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e20a      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2C_Master_Receive+0x50>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e203      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d007      	beq.n	8003bf6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2222      	movs	r2, #34	@ 0x22
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2210      	movs	r2, #16
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	893a      	ldrh	r2, [r7, #8]
 8003c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a5c      	ldr	r2, [pc, #368]	@ (8003da8 <HAL_I2C_Master_Receive+0x228>)
 8003c36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c38:	8979      	ldrh	r1, [r7, #10]
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fa52 	bl	80040e8 <I2C_MasterRequestRead>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1c4      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e198      	b.n	8003fb0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d11b      	bne.n	8003cbe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e178      	b.n	8003fb0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d11b      	bne.n	8003cfe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	e158      	b.n	8003fb0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d24:	e144      	b.n	8003fb0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	f200 80f1 	bhi.w	8003f12 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d123      	bne.n	8003d80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fc4b 	bl	80045d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e145      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d7e:	e117      	b.n	8003fb0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d14e      	bne.n	8003e26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4906      	ldr	r1, [pc, #24]	@ (8003dac <HAL_I2C_Master_Receive+0x22c>)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fa76 	bl	8004284 <I2C_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e11a      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
 8003da2:	bf00      	nop
 8003da4:	00100002 	.word	0x00100002
 8003da8:	ffff0000 	.word	0xffff0000
 8003dac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e24:	e0c4      	b.n	8003fb0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	496c      	ldr	r1, [pc, #432]	@ (8003fe0 <HAL_I2C_Master_Receive+0x460>)
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fa27 	bl	8004284 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cb      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4955      	ldr	r1, [pc, #340]	@ (8003fe0 <HAL_I2C_Master_Receive+0x460>)
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f9f9 	bl	8004284 <I2C_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e09d      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f10:	e04e      	b.n	8003fb0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fb5e 	bl	80045d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e058      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d124      	bne.n	8003fb0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d107      	bne.n	8003f7e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f7c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f aeb6 	bne.w	8003d26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3728      	adds	r7, #40	@ 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	00010004 	.word	0x00010004

08003fe4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d006      	beq.n	800400e <I2C_MasterRequestWrite+0x2a>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d003      	beq.n	800400e <I2C_MasterRequestWrite+0x2a>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800400c:	d108      	bne.n	8004020 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e00b      	b.n	8004038 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	2b12      	cmp	r3, #18
 8004026:	d107      	bne.n	8004038 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f91d 	bl	8004284 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800405e:	d103      	bne.n	8004068 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004066:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e035      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004074:	d108      	bne.n	8004088 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004076:	897b      	ldrh	r3, [r7, #10]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	e01b      	b.n	80040c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	11db      	asrs	r3, r3, #7
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0306 	and.w	r3, r3, #6
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f063 030f 	orn	r3, r3, #15
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	490e      	ldr	r1, [pc, #56]	@ (80040e0 <I2C_MasterRequestWrite+0xfc>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f966 	bl	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e010      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4907      	ldr	r1, [pc, #28]	@ (80040e4 <I2C_MasterRequestWrite+0x100>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f956 	bl	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	00010008 	.word	0x00010008
 80040e4:	00010002 	.word	0x00010002

080040e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	460b      	mov	r3, r1
 80040f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800410c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d006      	beq.n	8004122 <I2C_MasterRequestRead+0x3a>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d003      	beq.n	8004122 <I2C_MasterRequestRead+0x3a>
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004120:	d108      	bne.n	8004134 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e00b      	b.n	800414c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	2b11      	cmp	r3, #17
 800413a:	d107      	bne.n	800414c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800414a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f893 	bl	8004284 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004172:	d103      	bne.n	800417c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800417a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e079      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004188:	d108      	bne.n	800419c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800418a:	897b      	ldrh	r3, [r7, #10]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	e05f      	b.n	800425c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800419c:	897b      	ldrh	r3, [r7, #10]
 800419e:	11db      	asrs	r3, r3, #7
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0306 	and.w	r3, r3, #6
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f063 030f 	orn	r3, r3, #15
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4930      	ldr	r1, [pc, #192]	@ (800427c <I2C_MasterRequestRead+0x194>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f8dc 	bl	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e054      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4929      	ldr	r1, [pc, #164]	@ (8004280 <I2C_MasterRequestRead+0x198>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f8cc 	bl	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e044      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800420e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f831 	bl	8004284 <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004236:	d103      	bne.n	8004240 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e017      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004244:	897b      	ldrh	r3, [r7, #10]
 8004246:	11db      	asrs	r3, r3, #7
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f063 030e 	orn	r3, r3, #14
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4907      	ldr	r1, [pc, #28]	@ (8004280 <I2C_MasterRequestRead+0x198>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f888 	bl	8004378 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	00010008 	.word	0x00010008
 8004280:	00010002 	.word	0x00010002

08004284 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004294:	e048      	b.n	8004328 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d044      	beq.n	8004328 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fe ff65 	bl	800316c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d139      	bne.n	8004328 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	0c1b      	lsrs	r3, r3, #16
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10d      	bne.n	80042da <I2C_WaitOnFlagUntilTimeout+0x56>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	43da      	mvns	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	e00c      	b.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	43da      	mvns	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4013      	ands	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d116      	bne.n	8004328 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e023      	b.n	8004370 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10d      	bne.n	800434e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	43da      	mvns	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	e00c      	b.n	8004368 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	43da      	mvns	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4013      	ands	r3, r2
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	429a      	cmp	r2, r3
 800436c:	d093      	beq.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004386:	e071      	b.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004396:	d123      	bne.n	80043e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	f043 0204 	orr.w	r2, r3, #4
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e067      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d041      	beq.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e8:	f7fe fec0 	bl	800316c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d136      	bne.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10c      	bne.n	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	43da      	mvns	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4013      	ands	r3, r2
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf14      	ite	ne
 800441a:	2301      	movne	r3, #1
 800441c:	2300      	moveq	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	e00b      	b.n	800443a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	43da      	mvns	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e021      	b.n	80044b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d10c      	bne.n	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	43da      	mvns	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e00b      	b.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f47f af6d 	bne.w	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c4:	e034      	b.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f8e3 	bl	8004692 <I2C_IsAcknowledgeFailed>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e034      	b.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d028      	beq.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044de:	f7fe fe45 	bl	800316c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d302      	bcc.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fe:	2b80      	cmp	r3, #128	@ 0x80
 8004500:	d016      	beq.n	8004530 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e007      	b.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	2b80      	cmp	r3, #128	@ 0x80
 800453c:	d1c3      	bne.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004554:	e034      	b.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f89b 	bl	8004692 <I2C_IsAcknowledgeFailed>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e034      	b.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d028      	beq.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fe fdfd 	bl	800316c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d11d      	bne.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b04      	cmp	r3, #4
 8004590:	d016      	beq.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e007      	b.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d1c3      	bne.n	8004556 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045e4:	e049      	b.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d119      	bne.n	8004628 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0210 	mvn.w	r2, #16
 80045fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e030      	b.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004628:	f7fe fda0 	bl	800316c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d302      	bcc.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11d      	bne.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004648:	2b40      	cmp	r3, #64	@ 0x40
 800464a:	d016      	beq.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e007      	b.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d1ae      	bne.n	80045e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a8:	d11b      	bne.n	80046e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f043 0204 	orr.w	r2, r3, #4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e267      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d075      	beq.n	80047fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470e:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b04      	cmp	r3, #4
 8004718:	d00c      	beq.n	8004734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471a:	4b85      	ldr	r3, [pc, #532]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004722:	2b08      	cmp	r3, #8
 8004724:	d112      	bne.n	800474c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004726:	4b82      	ldr	r3, [pc, #520]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800472e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004732:	d10b      	bne.n	800474c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	4b7e      	ldr	r3, [pc, #504]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05b      	beq.n	80047f8 <HAL_RCC_OscConfig+0x108>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d157      	bne.n	80047f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e242      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004754:	d106      	bne.n	8004764 <HAL_RCC_OscConfig+0x74>
 8004756:	4b76      	ldr	r3, [pc, #472]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a75      	ldr	r2, [pc, #468]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e01d      	b.n	80047a0 <HAL_RCC_OscConfig+0xb0>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x98>
 800476e:	4b70      	ldr	r3, [pc, #448]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a6f      	ldr	r2, [pc, #444]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b6d      	ldr	r3, [pc, #436]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a6c      	ldr	r2, [pc, #432]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e00b      	b.n	80047a0 <HAL_RCC_OscConfig+0xb0>
 8004788:	4b69      	ldr	r3, [pc, #420]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a68      	ldr	r2, [pc, #416]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800478e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b66      	ldr	r3, [pc, #408]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a65      	ldr	r2, [pc, #404]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800479a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800479e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d013      	beq.n	80047d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fe fce0 	bl	800316c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fe fcdc 	bl	800316c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	@ 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e207      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0xc0>
 80047ce:	e014      	b.n	80047fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fe fccc 	bl	800316c <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fe fcc8 	bl	800316c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	@ 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1f3      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	4b51      	ldr	r3, [pc, #324]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0xe8>
 80047f6:	e000      	b.n	80047fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d063      	beq.n	80048ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004806:	4b4a      	ldr	r3, [pc, #296]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004812:	4b47      	ldr	r3, [pc, #284]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800481a:	2b08      	cmp	r3, #8
 800481c:	d11c      	bne.n	8004858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481e:	4b44      	ldr	r3, [pc, #272]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d116      	bne.n	8004858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <HAL_RCC_OscConfig+0x152>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e1c7      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004842:	4b3b      	ldr	r3, [pc, #236]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4937      	ldr	r1, [pc, #220]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	e03a      	b.n	80048ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004860:	4b34      	ldr	r3, [pc, #208]	@ (8004934 <HAL_RCC_OscConfig+0x244>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fe fc81 	bl	800316c <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486e:	f7fe fc7d 	bl	800316c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e1a8      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004880:	4b2b      	ldr	r3, [pc, #172]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488c:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4925      	ldr	r1, [pc, #148]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	e015      	b.n	80048ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a2:	4b24      	ldr	r3, [pc, #144]	@ (8004934 <HAL_RCC_OscConfig+0x244>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fe fc60 	bl	800316c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b0:	f7fe fc5c 	bl	800316c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e187      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d036      	beq.n	8004948 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e2:	4b15      	ldr	r3, [pc, #84]	@ (8004938 <HAL_RCC_OscConfig+0x248>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fe fc40 	bl	800316c <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fe fc3c 	bl	800316c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e167      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <HAL_RCC_OscConfig+0x240>)
 8004904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x200>
 800490e:	e01b      	b.n	8004948 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004910:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCC_OscConfig+0x248>)
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004916:	f7fe fc29 	bl	800316c <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	e00e      	b.n	800493c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491e:	f7fe fc25 	bl	800316c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d907      	bls.n	800493c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e150      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
 8004930:	40023800 	.word	0x40023800
 8004934:	42470000 	.word	0x42470000
 8004938:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493c:	4b88      	ldr	r3, [pc, #544]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 800493e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ea      	bne.n	800491e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8097 	beq.w	8004a84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004956:	2300      	movs	r3, #0
 8004958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495a:	4b81      	ldr	r3, [pc, #516]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10f      	bne.n	8004986 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004974:	6413      	str	r3, [r2, #64]	@ 0x40
 8004976:	4b7a      	ldr	r3, [pc, #488]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004982:	2301      	movs	r3, #1
 8004984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004986:	4b77      	ldr	r3, [pc, #476]	@ (8004b64 <HAL_RCC_OscConfig+0x474>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d118      	bne.n	80049c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004992:	4b74      	ldr	r3, [pc, #464]	@ (8004b64 <HAL_RCC_OscConfig+0x474>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a73      	ldr	r2, [pc, #460]	@ (8004b64 <HAL_RCC_OscConfig+0x474>)
 8004998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800499c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499e:	f7fe fbe5 	bl	800316c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a6:	f7fe fbe1 	bl	800316c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e10c      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004b64 <HAL_RCC_OscConfig+0x474>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d106      	bne.n	80049da <HAL_RCC_OscConfig+0x2ea>
 80049cc:	4b64      	ldr	r3, [pc, #400]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d0:	4a63      	ldr	r2, [pc, #396]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d8:	e01c      	b.n	8004a14 <HAL_RCC_OscConfig+0x324>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b05      	cmp	r3, #5
 80049e0:	d10c      	bne.n	80049fc <HAL_RCC_OscConfig+0x30c>
 80049e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fa:	e00b      	b.n	8004a14 <HAL_RCC_OscConfig+0x324>
 80049fc:	4b58      	ldr	r3, [pc, #352]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a00:	4a57      	ldr	r2, [pc, #348]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a08:	4b55      	ldr	r3, [pc, #340]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0c:	4a54      	ldr	r2, [pc, #336]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	f023 0304 	bic.w	r3, r3, #4
 8004a12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d015      	beq.n	8004a48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fe fba6 	bl	800316c <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a24:	f7fe fba2 	bl	800316c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e0cb      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3a:	4b49      	ldr	r3, [pc, #292]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0ee      	beq.n	8004a24 <HAL_RCC_OscConfig+0x334>
 8004a46:	e014      	b.n	8004a72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7fe fb90 	bl	800316c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7fe fb8c 	bl	800316c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0b5      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a66:	4b3e      	ldr	r3, [pc, #248]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1ee      	bne.n	8004a50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d105      	bne.n	8004a84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a78:	4b39      	ldr	r3, [pc, #228]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	4a38      	ldr	r2, [pc, #224]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 80a1 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a8e:	4b34      	ldr	r3, [pc, #208]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d05c      	beq.n	8004b54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d141      	bne.n	8004b26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b31      	ldr	r3, [pc, #196]	@ (8004b68 <HAL_RCC_OscConfig+0x478>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fb60 	bl	800316c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fe fb5c 	bl	800316c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e087      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	4b27      	ldr	r3, [pc, #156]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69da      	ldr	r2, [r3, #28]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	041b      	lsls	r3, r3, #16
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	061b      	lsls	r3, r3, #24
 8004af2:	491b      	ldr	r1, [pc, #108]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b68 <HAL_RCC_OscConfig+0x478>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afe:	f7fe fb35 	bl	800316c <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fe fb31 	bl	800316c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e05c      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b18:	4b11      	ldr	r3, [pc, #68]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x416>
 8004b24:	e054      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b26:	4b10      	ldr	r3, [pc, #64]	@ (8004b68 <HAL_RCC_OscConfig+0x478>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fe fb1e 	bl	800316c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fe fb1a 	bl	800316c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e045      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <HAL_RCC_OscConfig+0x470>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x444>
 8004b52:	e03d      	b.n	8004bd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e038      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40007000 	.word	0x40007000
 8004b68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bdc <HAL_RCC_OscConfig+0x4ec>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d028      	beq.n	8004bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d121      	bne.n	8004bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d11a      	bne.n	8004bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ba2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d111      	bne.n	8004bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800

08004be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0cc      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b68      	ldr	r3, [pc, #416]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d90c      	bls.n	8004c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b65      	ldr	r3, [pc, #404]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b63      	ldr	r3, [pc, #396]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0b8      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c34:	4b59      	ldr	r3, [pc, #356]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a58      	ldr	r2, [pc, #352]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c4c:	4b53      	ldr	r3, [pc, #332]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a52      	ldr	r2, [pc, #328]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b50      	ldr	r3, [pc, #320]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	494d      	ldr	r1, [pc, #308]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d044      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b47      	ldr	r3, [pc, #284]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d119      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e07f      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d003      	beq.n	8004c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d107      	bne.n	8004cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e06f      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cae:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e067      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cbe:	4b37      	ldr	r3, [pc, #220]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f023 0203 	bic.w	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4934      	ldr	r1, [pc, #208]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cd0:	f7fe fa4c 	bl	800316c <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd6:	e00a      	b.n	8004cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd8:	f7fe fa48 	bl	800316c <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e04f      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cee:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 020c 	and.w	r2, r3, #12
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d1eb      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d00:	4b25      	ldr	r3, [pc, #148]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d20c      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b22      	ldr	r3, [pc, #136]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e032      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d34:	4b19      	ldr	r3, [pc, #100]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4916      	ldr	r1, [pc, #88]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d52:	4b12      	ldr	r3, [pc, #72]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	490e      	ldr	r1, [pc, #56]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d66:	f000 f821 	bl	8004dac <HAL_RCC_GetSysClockFreq>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	490a      	ldr	r1, [pc, #40]	@ (8004da0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d78:	5ccb      	ldrb	r3, [r1, r3]
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	4a09      	ldr	r2, [pc, #36]	@ (8004da4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d82:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe f832 	bl	8002df0 <HAL_InitTick>

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023c00 	.word	0x40023c00
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	0800b474 	.word	0x0800b474
 8004da4:	20000000 	.word	0x20000000
 8004da8:	20000004 	.word	0x20000004

08004dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b094      	sub	sp, #80	@ 0x50
 8004db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db8:	2300      	movs	r3, #0
 8004dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc4:	4b79      	ldr	r3, [pc, #484]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 030c 	and.w	r3, r3, #12
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d00d      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0x40>
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	f200 80e1 	bhi.w	8004f98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d003      	beq.n	8004de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dde:	e0db      	b.n	8004f98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004de0:	4b73      	ldr	r3, [pc, #460]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004de2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004de4:	e0db      	b.n	8004f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004de6:	4b73      	ldr	r3, [pc, #460]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004de8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dea:	e0d8      	b.n	8004f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dec:	4b6f      	ldr	r3, [pc, #444]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x200>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004df4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004df6:	4b6d      	ldr	r3, [pc, #436]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x200>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d063      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e02:	4b6a      	ldr	r3, [pc, #424]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x200>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	2200      	movs	r2, #0
 8004e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e16:	2300      	movs	r3, #0
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e1e:	4622      	mov	r2, r4
 8004e20:	462b      	mov	r3, r5
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f04f 0100 	mov.w	r1, #0
 8004e2a:	0159      	lsls	r1, r3, #5
 8004e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e30:	0150      	lsls	r0, r2, #5
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4621      	mov	r1, r4
 8004e38:	1a51      	subs	r1, r2, r1
 8004e3a:	6139      	str	r1, [r7, #16]
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e50:	4659      	mov	r1, fp
 8004e52:	018b      	lsls	r3, r1, #6
 8004e54:	4651      	mov	r1, sl
 8004e56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	018a      	lsls	r2, r1, #6
 8004e5e:	4651      	mov	r1, sl
 8004e60:	ebb2 0801 	subs.w	r8, r2, r1
 8004e64:	4659      	mov	r1, fp
 8004e66:	eb63 0901 	sbc.w	r9, r3, r1
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e7e:	4690      	mov	r8, r2
 8004e80:	4699      	mov	r9, r3
 8004e82:	4623      	mov	r3, r4
 8004e84:	eb18 0303 	adds.w	r3, r8, r3
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	eb49 0303 	adc.w	r3, r9, r3
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	024b      	lsls	r3, r1, #9
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	024a      	lsls	r2, r1, #9
 8004eac:	4610      	mov	r0, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ebc:	f7fb fec4 	bl	8000c48 <__aeabi_uldivmod>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ec8:	e058      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eca:	4b38      	ldr	r3, [pc, #224]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x200>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	2300      	movs	r3, #0
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	f04f 0000 	mov.w	r0, #0
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	0159      	lsls	r1, r3, #5
 8004ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef6:	0150      	lsls	r0, r2, #5
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4641      	mov	r1, r8
 8004efe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f02:	4649      	mov	r1, r9
 8004f04:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f1c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f20:	eb63 050b 	sbc.w	r5, r3, fp
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	00eb      	lsls	r3, r5, #3
 8004f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f32:	00e2      	lsls	r2, r4, #3
 8004f34:	4614      	mov	r4, r2
 8004f36:	461d      	mov	r5, r3
 8004f38:	4643      	mov	r3, r8
 8004f3a:	18e3      	adds	r3, r4, r3
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	464b      	mov	r3, r9
 8004f40:	eb45 0303 	adc.w	r3, r5, r3
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f52:	4629      	mov	r1, r5
 8004f54:	028b      	lsls	r3, r1, #10
 8004f56:	4621      	mov	r1, r4
 8004f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	028a      	lsls	r2, r1, #10
 8004f60:	4610      	mov	r0, r2
 8004f62:	4619      	mov	r1, r3
 8004f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f66:	2200      	movs	r2, #0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	61fa      	str	r2, [r7, #28]
 8004f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f70:	f7fb fe6a 	bl	8000c48 <__aeabi_uldivmod>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4613      	mov	r3, r2
 8004f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	3301      	adds	r3, #1
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004f8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f96:	e002      	b.n	8004f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3750      	adds	r7, #80	@ 0x50
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	00f42400 	.word	0x00f42400
 8004fb4:	007a1200 	.word	0x007a1200

08004fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fbc:	4b03      	ldr	r3, [pc, #12]	@ (8004fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000000 	.word	0x20000000

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fd4:	f7ff fff0 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	4b05      	ldr	r3, [pc, #20]	@ (8004ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	0a9b      	lsrs	r3, r3, #10
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	4903      	ldr	r1, [pc, #12]	@ (8004ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe6:	5ccb      	ldrb	r3, [r1, r3]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	0800b484 	.word	0x0800b484

08004ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ffc:	f7ff ffdc 	bl	8004fb8 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0b5b      	lsrs	r3, r3, #13
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	@ (800501c <HAL_RCC_GetPCLK2Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	0800b484 	.word	0x0800b484

08005020 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	220f      	movs	r2, #15
 800502e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005030:	4b12      	ldr	r3, [pc, #72]	@ (800507c <HAL_RCC_GetClockConfig+0x5c>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0203 	and.w	r2, r3, #3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800503c:	4b0f      	ldr	r3, [pc, #60]	@ (800507c <HAL_RCC_GetClockConfig+0x5c>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005048:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <HAL_RCC_GetClockConfig+0x5c>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005054:	4b09      	ldr	r3, [pc, #36]	@ (800507c <HAL_RCC_GetClockConfig+0x5c>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	08db      	lsrs	r3, r3, #3
 800505a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005062:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <HAL_RCC_GetClockConfig+0x60>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0207 	and.w	r2, r3, #7
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	40023c00 	.word	0x40023c00

08005084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e041      	b.n	800511a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f839 	bl	8005122 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 f9c0 	bl	8005448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d001      	beq.n	8005150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e04e      	b.n	80051ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a23      	ldr	r2, [pc, #140]	@ (80051fc <HAL_TIM_Base_Start_IT+0xc4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d022      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517a:	d01d      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1f      	ldr	r2, [pc, #124]	@ (8005200 <HAL_TIM_Base_Start_IT+0xc8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d018      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1e      	ldr	r2, [pc, #120]	@ (8005204 <HAL_TIM_Base_Start_IT+0xcc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d013      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1c      	ldr	r2, [pc, #112]	@ (8005208 <HAL_TIM_Base_Start_IT+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00e      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1b      	ldr	r2, [pc, #108]	@ (800520c <HAL_TIM_Base_Start_IT+0xd4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a19      	ldr	r2, [pc, #100]	@ (8005210 <HAL_TIM_Base_Start_IT+0xd8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x80>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a18      	ldr	r2, [pc, #96]	@ (8005214 <HAL_TIM_Base_Start_IT+0xdc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d111      	bne.n	80051dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d010      	beq.n	80051ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	e007      	b.n	80051ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40001800 	.word	0x40001800

08005218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d020      	beq.n	800527c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0202 	mvn.w	r2, #2
 800524c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8d2 	bl	800540c <HAL_TIM_IC_CaptureCallback>
 8005268:	e005      	b.n	8005276 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f8c4 	bl	80053f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8d5 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d020      	beq.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0204 	mvn.w	r2, #4
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f8ac 	bl	800540c <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f89e 	bl	80053f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f8af 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d020      	beq.n	8005314 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01b      	beq.n	8005314 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0208 	mvn.w	r2, #8
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2204      	movs	r2, #4
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f886 	bl	800540c <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f878 	bl	80053f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f889 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b00      	cmp	r3, #0
 800531c:	d020      	beq.n	8005360 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01b      	beq.n	8005360 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0210 	mvn.w	r2, #16
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2208      	movs	r2, #8
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f860 	bl	800540c <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f852 	bl	80053f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f863 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00c      	beq.n	8005384 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0201 	mvn.w	r2, #1
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fd fc62 	bl	8002c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f906 	bl	80055b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00c      	beq.n	80053cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f834 	bl	8005434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00c      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0220 	mvn.w	r2, #32
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8d8 	bl	80055a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a46      	ldr	r2, [pc, #280]	@ (8005574 <TIM_Base_SetConfig+0x12c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005466:	d00f      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a43      	ldr	r2, [pc, #268]	@ (8005578 <TIM_Base_SetConfig+0x130>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00b      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a42      	ldr	r2, [pc, #264]	@ (800557c <TIM_Base_SetConfig+0x134>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a41      	ldr	r2, [pc, #260]	@ (8005580 <TIM_Base_SetConfig+0x138>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a40      	ldr	r2, [pc, #256]	@ (8005584 <TIM_Base_SetConfig+0x13c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a35      	ldr	r2, [pc, #212]	@ (8005574 <TIM_Base_SetConfig+0x12c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d02b      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a8:	d027      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a32      	ldr	r2, [pc, #200]	@ (8005578 <TIM_Base_SetConfig+0x130>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d023      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a31      	ldr	r2, [pc, #196]	@ (800557c <TIM_Base_SetConfig+0x134>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01f      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a30      	ldr	r2, [pc, #192]	@ (8005580 <TIM_Base_SetConfig+0x138>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01b      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005584 <TIM_Base_SetConfig+0x13c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d017      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005588 <TIM_Base_SetConfig+0x140>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2d      	ldr	r2, [pc, #180]	@ (800558c <TIM_Base_SetConfig+0x144>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00f      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005590 <TIM_Base_SetConfig+0x148>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00b      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005594 <TIM_Base_SetConfig+0x14c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d007      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005598 <TIM_Base_SetConfig+0x150>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a29      	ldr	r2, [pc, #164]	@ (800559c <TIM_Base_SetConfig+0x154>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d108      	bne.n	800550c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a10      	ldr	r2, [pc, #64]	@ (8005574 <TIM_Base_SetConfig+0x12c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0xf8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a12      	ldr	r2, [pc, #72]	@ (8005584 <TIM_Base_SetConfig+0x13c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d105      	bne.n	8005566 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]
  }
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40010400 	.word	0x40010400
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800
 8005594:	40001800 	.word	0x40001800
 8005598:	40001c00 	.word	0x40001c00
 800559c:	40002000 	.word	0x40002000

080055a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e042      	b.n	8005660 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fd fbb6 	bl	8002d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2224      	movs	r2, #36	@ 0x24
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800560a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f973 	bl	80058f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695a      	ldr	r2, [r3, #20]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	@ 0x28
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b20      	cmp	r3, #32
 8005686:	d175      	bne.n	8005774 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_UART_Transmit+0x2c>
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e06e      	b.n	8005776 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2221      	movs	r2, #33	@ 0x21
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056a6:	f7fd fd61 	bl	800316c <HAL_GetTick>
 80056aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	88fa      	ldrh	r2, [r7, #6]
 80056b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c0:	d108      	bne.n	80056d4 <HAL_UART_Transmit+0x6c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	e003      	b.n	80056dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056dc:	e02e      	b.n	800573c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2200      	movs	r2, #0
 80056e6:	2180      	movs	r1, #128	@ 0x80
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f848 	bl	800577e <UART_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e03a      	b.n	8005776 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	3302      	adds	r3, #2
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	e007      	b.n	800572e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	3301      	adds	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1cb      	bne.n	80056de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	2140      	movs	r1, #64	@ 0x40
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f814 	bl	800577e <UART_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e006      	b.n	8005776 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	4618      	mov	r0, r3
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	4613      	mov	r3, r2
 800578c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578e:	e03b      	b.n	8005808 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d037      	beq.n	8005808 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005798:	f7fd fce8 	bl	800316c <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	6a3a      	ldr	r2, [r7, #32]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d302      	bcc.n	80057ae <UART_WaitOnFlagUntilTimeout+0x30>
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e03a      	b.n	8005828 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d023      	beq.n	8005808 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b80      	cmp	r3, #128	@ 0x80
 80057c4:	d020      	beq.n	8005808 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b40      	cmp	r3, #64	@ 0x40
 80057ca:	d01d      	beq.n	8005808 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d116      	bne.n	8005808 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f81d 	bl	8005830 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2208      	movs	r2, #8
 80057fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e00f      	b.n	8005828 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4013      	ands	r3, r2
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	429a      	cmp	r2, r3
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	429a      	cmp	r2, r3
 8005824:	d0b4      	beq.n	8005790 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b095      	sub	sp, #84	@ 0x54
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005858:	643a      	str	r2, [r7, #64]	@ 0x40
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800585e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e5      	bne.n	8005838 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3314      	adds	r3, #20
 8005872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	61fb      	str	r3, [r7, #28]
   return(result);
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3314      	adds	r3, #20
 800588a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800588c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d119      	bne.n	80058dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058c8:	61ba      	str	r2, [r7, #24]
 80058ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6979      	ldr	r1, [r7, #20]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	613b      	str	r3, [r7, #16]
   return(result);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e5      	bne.n	80058a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058ea:	bf00      	nop
 80058ec:	3754      	adds	r7, #84	@ 0x54
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058fc:	b0c0      	sub	sp, #256	@ 0x100
 80058fe:	af00      	add	r7, sp, #0
 8005900:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	68d9      	ldr	r1, [r3, #12]
 8005916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	ea40 0301 	orr.w	r3, r0, r1
 8005920:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	431a      	orrs	r2, r3
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	431a      	orrs	r2, r3
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005950:	f021 010c 	bic.w	r1, r1, #12
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800595e:	430b      	orrs	r3, r1
 8005960:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005972:	6999      	ldr	r1, [r3, #24]
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	ea40 0301 	orr.w	r3, r0, r1
 800597e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b8f      	ldr	r3, [pc, #572]	@ (8005bc4 <UART_SetConfig+0x2cc>)
 8005988:	429a      	cmp	r2, r3
 800598a:	d005      	beq.n	8005998 <UART_SetConfig+0xa0>
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b8d      	ldr	r3, [pc, #564]	@ (8005bc8 <UART_SetConfig+0x2d0>)
 8005994:	429a      	cmp	r2, r3
 8005996:	d104      	bne.n	80059a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005998:	f7ff fb2e 	bl	8004ff8 <HAL_RCC_GetPCLK2Freq>
 800599c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059a0:	e003      	b.n	80059aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059a2:	f7ff fb15 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 80059a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059b4:	f040 810c 	bne.w	8005bd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059bc:	2200      	movs	r2, #0
 80059be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059ca:	4622      	mov	r2, r4
 80059cc:	462b      	mov	r3, r5
 80059ce:	1891      	adds	r1, r2, r2
 80059d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059d2:	415b      	adcs	r3, r3
 80059d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059da:	4621      	mov	r1, r4
 80059dc:	eb12 0801 	adds.w	r8, r2, r1
 80059e0:	4629      	mov	r1, r5
 80059e2:	eb43 0901 	adc.w	r9, r3, r1
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fa:	4690      	mov	r8, r2
 80059fc:	4699      	mov	r9, r3
 80059fe:	4623      	mov	r3, r4
 8005a00:	eb18 0303 	adds.w	r3, r8, r3
 8005a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a08:	462b      	mov	r3, r5
 8005a0a:	eb49 0303 	adc.w	r3, r9, r3
 8005a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a26:	460b      	mov	r3, r1
 8005a28:	18db      	adds	r3, r3, r3
 8005a2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	eb42 0303 	adc.w	r3, r2, r3
 8005a32:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a3c:	f7fb f904 	bl	8000c48 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4b61      	ldr	r3, [pc, #388]	@ (8005bcc <UART_SetConfig+0x2d4>)
 8005a46:	fba3 2302 	umull	r2, r3, r3, r2
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	011c      	lsls	r4, r3, #4
 8005a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a60:	4642      	mov	r2, r8
 8005a62:	464b      	mov	r3, r9
 8005a64:	1891      	adds	r1, r2, r2
 8005a66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a68:	415b      	adcs	r3, r3
 8005a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a70:	4641      	mov	r1, r8
 8005a72:	eb12 0a01 	adds.w	sl, r2, r1
 8005a76:	4649      	mov	r1, r9
 8005a78:	eb43 0b01 	adc.w	fp, r3, r1
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a90:	4692      	mov	sl, r2
 8005a92:	469b      	mov	fp, r3
 8005a94:	4643      	mov	r3, r8
 8005a96:	eb1a 0303 	adds.w	r3, sl, r3
 8005a9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	eb4b 0303 	adc.w	r3, fp, r3
 8005aa4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ab4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ab8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005abc:	460b      	mov	r3, r1
 8005abe:	18db      	adds	r3, r3, r3
 8005ac0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	eb42 0303 	adc.w	r3, r2, r3
 8005ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005aca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ace:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ad2:	f7fb f8b9 	bl	8000c48 <__aeabi_uldivmod>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4611      	mov	r1, r2
 8005adc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bcc <UART_SetConfig+0x2d4>)
 8005ade:	fba3 2301 	umull	r2, r3, r3, r1
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	2264      	movs	r2, #100	@ 0x64
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
 8005aea:	1acb      	subs	r3, r1, r3
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005af2:	4b36      	ldr	r3, [pc, #216]	@ (8005bcc <UART_SetConfig+0x2d4>)
 8005af4:	fba3 2302 	umull	r2, r3, r3, r2
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b00:	441c      	add	r4, r3
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b24:	4641      	mov	r1, r8
 8005b26:	1851      	adds	r1, r2, r1
 8005b28:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	414b      	adcs	r3, r1
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	00cb      	lsls	r3, r1, #3
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b46:	4651      	mov	r1, sl
 8005b48:	00ca      	lsls	r2, r1, #3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4642      	mov	r2, r8
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b58:	464b      	mov	r3, r9
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b78:	460b      	mov	r3, r1
 8005b7a:	18db      	adds	r3, r3, r3
 8005b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b7e:	4613      	mov	r3, r2
 8005b80:	eb42 0303 	adc.w	r3, r2, r3
 8005b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b8e:	f7fb f85b 	bl	8000c48 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4b0d      	ldr	r3, [pc, #52]	@ (8005bcc <UART_SetConfig+0x2d4>)
 8005b98:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	2164      	movs	r1, #100	@ 0x64
 8005ba0:	fb01 f303 	mul.w	r3, r1, r3
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	3332      	adds	r3, #50	@ 0x32
 8005baa:	4a08      	ldr	r2, [pc, #32]	@ (8005bcc <UART_SetConfig+0x2d4>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	f003 0207 	and.w	r2, r3, #7
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4422      	add	r2, r4
 8005bbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bc0:	e106      	b.n	8005dd0 <UART_SetConfig+0x4d8>
 8005bc2:	bf00      	nop
 8005bc4:	40011000 	.word	0x40011000
 8005bc8:	40011400 	.word	0x40011400
 8005bcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005be2:	4642      	mov	r2, r8
 8005be4:	464b      	mov	r3, r9
 8005be6:	1891      	adds	r1, r2, r2
 8005be8:	6239      	str	r1, [r7, #32]
 8005bea:	415b      	adcs	r3, r3
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bf2:	4641      	mov	r1, r8
 8005bf4:	1854      	adds	r4, r2, r1
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	eb43 0501 	adc.w	r5, r3, r1
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	00eb      	lsls	r3, r5, #3
 8005c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c0a:	00e2      	lsls	r2, r4, #3
 8005c0c:	4614      	mov	r4, r2
 8005c0e:	461d      	mov	r5, r3
 8005c10:	4643      	mov	r3, r8
 8005c12:	18e3      	adds	r3, r4, r3
 8005c14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c18:	464b      	mov	r3, r9
 8005c1a:	eb45 0303 	adc.w	r3, r5, r3
 8005c1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c3e:	4629      	mov	r1, r5
 8005c40:	008b      	lsls	r3, r1, #2
 8005c42:	4621      	mov	r1, r4
 8005c44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c48:	4621      	mov	r1, r4
 8005c4a:	008a      	lsls	r2, r1, #2
 8005c4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c50:	f7fa fffa 	bl	8000c48 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4b60      	ldr	r3, [pc, #384]	@ (8005ddc <UART_SetConfig+0x4e4>)
 8005c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	011c      	lsls	r4, r3, #4
 8005c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	1891      	adds	r1, r2, r2
 8005c7a:	61b9      	str	r1, [r7, #24]
 8005c7c:	415b      	adcs	r3, r3
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c84:	4641      	mov	r1, r8
 8005c86:	1851      	adds	r1, r2, r1
 8005c88:	6139      	str	r1, [r7, #16]
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	414b      	adcs	r3, r1
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	00cb      	lsls	r3, r1, #3
 8005ca0:	4651      	mov	r1, sl
 8005ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ca6:	4651      	mov	r1, sl
 8005ca8:	00ca      	lsls	r2, r1, #3
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	189b      	adds	r3, r3, r2
 8005cb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cb8:	464b      	mov	r3, r9
 8005cba:	460a      	mov	r2, r1
 8005cbc:	eb42 0303 	adc.w	r3, r2, r3
 8005cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cdc:	4649      	mov	r1, r9
 8005cde:	008b      	lsls	r3, r1, #2
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	008a      	lsls	r2, r1, #2
 8005cea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cee:	f7fa ffab 	bl	8000c48 <__aeabi_uldivmod>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4b38      	ldr	r3, [pc, #224]	@ (8005ddc <UART_SetConfig+0x4e4>)
 8005cfa:	fba3 2301 	umull	r2, r3, r3, r1
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	2264      	movs	r2, #100	@ 0x64
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	1acb      	subs	r3, r1, r3
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	3332      	adds	r3, #50	@ 0x32
 8005d0c:	4a33      	ldr	r2, [pc, #204]	@ (8005ddc <UART_SetConfig+0x4e4>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d18:	441c      	add	r4, r3
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d1e:	2200      	movs	r2, #0
 8005d20:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d22:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d28:	4642      	mov	r2, r8
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	1891      	adds	r1, r2, r2
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	415b      	adcs	r3, r3
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d38:	4641      	mov	r1, r8
 8005d3a:	1851      	adds	r1, r2, r1
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	4649      	mov	r1, r9
 8005d40:	414b      	adcs	r3, r1
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d50:	4659      	mov	r1, fp
 8005d52:	00cb      	lsls	r3, r1, #3
 8005d54:	4651      	mov	r1, sl
 8005d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d5a:	4651      	mov	r1, sl
 8005d5c:	00ca      	lsls	r2, r1, #3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4619      	mov	r1, r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	4642      	mov	r2, r8
 8005d66:	189b      	adds	r3, r3, r2
 8005d68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	eb42 0303 	adc.w	r3, r2, r3
 8005d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	008b      	lsls	r3, r1, #2
 8005d90:	4641      	mov	r1, r8
 8005d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d96:	4641      	mov	r1, r8
 8005d98:	008a      	lsls	r2, r1, #2
 8005d9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d9e:	f7fa ff53 	bl	8000c48 <__aeabi_uldivmod>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <UART_SetConfig+0x4e4>)
 8005da8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	2164      	movs	r1, #100	@ 0x64
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	3332      	adds	r3, #50	@ 0x32
 8005dba:	4a08      	ldr	r2, [pc, #32]	@ (8005ddc <UART_SetConfig+0x4e4>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	f003 020f 	and.w	r2, r3, #15
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4422      	add	r2, r4
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ddc:	51eb851f 	.word	0x51eb851f

08005de0 <__NVIC_SetPriority>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	db0a      	blt.n	8005e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	490c      	ldr	r1, [pc, #48]	@ (8005e2c <__NVIC_SetPriority+0x4c>)
 8005dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfe:	0112      	lsls	r2, r2, #4
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	440b      	add	r3, r1
 8005e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005e08:	e00a      	b.n	8005e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	4908      	ldr	r1, [pc, #32]	@ (8005e30 <__NVIC_SetPriority+0x50>)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	3b04      	subs	r3, #4
 8005e18:	0112      	lsls	r2, r2, #4
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	761a      	strb	r2, [r3, #24]
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000e100 	.word	0xe000e100
 8005e30:	e000ed00 	.word	0xe000ed00

08005e34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005e38:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <SysTick_Handler+0x1c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005e3c:	f001 fd18 	bl	8007870 <xTaskGetSchedulerState>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d001      	beq.n	8005e4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005e46:	f002 fb0f 	bl	8008468 <xPortSysTickHandler>
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	e000e010 	.word	0xe000e010

08005e54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f06f 0004 	mvn.w	r0, #4
 8005e5e:	f7ff ffbf 	bl	8005de0 <__NVIC_SetPriority>
#endif
}
 8005e62:	bf00      	nop
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e6e:	f3ef 8305 	mrs	r3, IPSR
 8005e72:	603b      	str	r3, [r7, #0]
  return(result);
 8005e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e7a:	f06f 0305 	mvn.w	r3, #5
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	e00c      	b.n	8005e9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e82:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <osKernelInitialize+0x44>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e8a:	4b08      	ldr	r3, [pc, #32]	@ (8005eac <osKernelInitialize+0x44>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	e002      	b.n	8005e9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e9c:	687b      	ldr	r3, [r7, #4]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000344 	.word	0x20000344

08005eb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb6:	f3ef 8305 	mrs	r3, IPSR
 8005eba:	603b      	str	r3, [r7, #0]
  return(result);
 8005ebc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ec2:	f06f 0305 	mvn.w	r3, #5
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e010      	b.n	8005eec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005eca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <osKernelStart+0x48>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d109      	bne.n	8005ee6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ed2:	f7ff ffbf 	bl	8005e54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ed6:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <osKernelStart+0x48>)
 8005ed8:	2202      	movs	r2, #2
 8005eda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005edc:	f001 f87a 	bl	8006fd4 <vTaskStartScheduler>
      stat = osOK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	607b      	str	r3, [r7, #4]
 8005ee4:	e002      	b.n	8005eec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005eec:	687b      	ldr	r3, [r7, #4]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000344 	.word	0x20000344

08005efc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	@ 0x38
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f0c:	f3ef 8305 	mrs	r3, IPSR
 8005f10:	617b      	str	r3, [r7, #20]
  return(result);
 8005f12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d17e      	bne.n	8006016 <osThreadNew+0x11a>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d07b      	beq.n	8006016 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f1e:	2380      	movs	r3, #128	@ 0x80
 8005f20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f22:	2318      	movs	r3, #24
 8005f24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d045      	beq.n	8005fc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <osThreadNew+0x48>
        name = attr->name;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d008      	beq.n	8005f6a <osThreadNew+0x6e>
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b38      	cmp	r3, #56	@ 0x38
 8005f5c:	d805      	bhi.n	8005f6a <osThreadNew+0x6e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <osThreadNew+0x72>
        return (NULL);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e054      	b.n	8006018 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	089b      	lsrs	r3, r3, #2
 8005f7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00e      	beq.n	8005fa4 <osThreadNew+0xa8>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	2b5b      	cmp	r3, #91	@ 0x5b
 8005f8c:	d90a      	bls.n	8005fa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d006      	beq.n	8005fa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <osThreadNew+0xa8>
        mem = 1;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	e010      	b.n	8005fc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10c      	bne.n	8005fc6 <osThreadNew+0xca>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d108      	bne.n	8005fc6 <osThreadNew+0xca>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <osThreadNew+0xca>
          mem = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	e001      	b.n	8005fc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d110      	bne.n	8005fee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fd4:	9202      	str	r2, [sp, #8]
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fe1a 	bl	8006c1c <xTaskCreateStatic>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	e013      	b.n	8006016 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d110      	bne.n	8006016 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f107 0310 	add.w	r3, r7, #16
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fe68 	bl	8006cdc <xTaskCreate>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d001      	beq.n	8006016 <osThreadNew+0x11a>
            hTask = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006016:	693b      	ldr	r3, [r7, #16]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3728      	adds	r7, #40	@ 0x28
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006028:	f3ef 8305 	mrs	r3, IPSR
 800602c:	60bb      	str	r3, [r7, #8]
  return(result);
 800602e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <osDelay+0x1c>
    stat = osErrorISR;
 8006034:	f06f 0305 	mvn.w	r3, #5
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e007      	b.n	800604c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 ff8e 	bl	8006f68 <vTaskDelay>
    }
  }

  return (stat);
 800604c:	68fb      	ldr	r3, [r7, #12]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4a07      	ldr	r2, [pc, #28]	@ (8006084 <vApplicationGetIdleTaskMemory+0x2c>)
 8006068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4a06      	ldr	r2, [pc, #24]	@ (8006088 <vApplicationGetIdleTaskMemory+0x30>)
 800606e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2280      	movs	r2, #128	@ 0x80
 8006074:	601a      	str	r2, [r3, #0]
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	20000348 	.word	0x20000348
 8006088:	200003a4 	.word	0x200003a4

0800608c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4a07      	ldr	r2, [pc, #28]	@ (80060b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800609c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4a06      	ldr	r2, [pc, #24]	@ (80060bc <vApplicationGetTimerTaskMemory+0x30>)
 80060a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060aa:	601a      	str	r2, [r3, #0]
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	200005a4 	.word	0x200005a4
 80060bc:	20000600 	.word	0x20000600

080060c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f103 0208 	add.w	r2, r3, #8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295
 80060d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f103 0208 	add.w	r2, r3, #8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f103 0208 	add.w	r2, r3, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800611a:	b480      	push	{r7}
 800611c:	b085      	sub	sp, #20
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d103      	bne.n	8006182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e00c      	b.n	800619c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3308      	adds	r3, #8
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	e002      	b.n	8006190 <vListInsert+0x2e>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	d2f6      	bcs.n	800618a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	601a      	str	r2, [r3, #0]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6892      	ldr	r2, [r2, #8]
 80061ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6852      	ldr	r2, [r2, #4]
 80061f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d103      	bne.n	8006208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	1e5a      	subs	r2, r3, #1
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10b      	bne.n	8006254 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	e7fd      	b.n	8006250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006254:	f002 f878 	bl	8008348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	441a      	add	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006284:	3b01      	subs	r3, #1
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	441a      	add	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	22ff      	movs	r2, #255	@ 0xff
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	22ff      	movs	r2, #255	@ 0xff
 80062a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d114      	bne.n	80062d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01a      	beq.n	80062e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3310      	adds	r3, #16
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f91a 	bl	80074f0 <xTaskRemoveFromEventList>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d012      	beq.n	80062e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062c2:	4b0d      	ldr	r3, [pc, #52]	@ (80062f8 <xQueueGenericReset+0xd0>)
 80062c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	e009      	b.n	80062e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3310      	adds	r3, #16
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fef1 	bl	80060c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3324      	adds	r3, #36	@ 0x24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff feec 	bl	80060c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062e8:	f002 f860 	bl	80083ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062ec:	2301      	movs	r3, #1
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08e      	sub	sp, #56	@ 0x38
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10b      	bne.n	8006328 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <xQueueGenericCreateStatic+0x56>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <xQueueGenericCreateStatic+0x5a>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <xQueueGenericCreateStatic+0x5c>
 8006356:	2300      	movs	r3, #0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10b      	bne.n	8006374 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	623b      	str	r3, [r7, #32]
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <xQueueGenericCreateStatic+0x84>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <xQueueGenericCreateStatic+0x88>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <xQueueGenericCreateStatic+0x8a>
 8006384:	2300      	movs	r3, #0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	61fb      	str	r3, [r7, #28]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063a2:	2350      	movs	r3, #80	@ 0x50
 80063a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b50      	cmp	r3, #80	@ 0x50
 80063aa:	d00b      	beq.n	80063c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	61bb      	str	r3, [r7, #24]
}
 80063be:	bf00      	nop
 80063c0:	bf00      	nop
 80063c2:	e7fd      	b.n	80063c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80063c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80063ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00d      	beq.n	80063ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	4613      	mov	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f805 	bl	80063f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3730      	adds	r7, #48	@ 0x30
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]
 8006402:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d103      	bne.n	8006412 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e002      	b.n	8006418 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006424:	2101      	movs	r1, #1
 8006426:	69b8      	ldr	r0, [r7, #24]
 8006428:	f7ff fefe 	bl	8006228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	78fa      	ldrb	r2, [r7, #3]
 8006430:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08e      	sub	sp, #56	@ 0x38
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800644a:	2300      	movs	r3, #0
 800644c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10b      	bne.n	8006470 <xQueueGenericSend+0x34>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	e7fd      	b.n	800646c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <xQueueGenericSend+0x42>
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <xQueueGenericSend+0x46>
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <xQueueGenericSend+0x48>
 8006482:	2300      	movs	r3, #0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <xQueueGenericSend+0x64>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d103      	bne.n	80064ae <xQueueGenericSend+0x72>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <xQueueGenericSend+0x76>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <xQueueGenericSend+0x78>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <xQueueGenericSend+0x94>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	623b      	str	r3, [r7, #32]
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	e7fd      	b.n	80064cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064d0:	f001 f9ce 	bl	8007870 <xTaskGetSchedulerState>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <xQueueGenericSend+0xa4>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <xQueueGenericSend+0xa8>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <xQueueGenericSend+0xaa>
 80064e4:	2300      	movs	r3, #0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <xQueueGenericSend+0xc6>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	61fb      	str	r3, [r7, #28]
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	e7fd      	b.n	80064fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006502:	f001 ff21 	bl	8008348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <xQueueGenericSend+0xdc>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d129      	bne.n	800656c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800651e:	f000 fa0f 	bl	8006940 <prvCopyDataToQueue>
 8006522:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d010      	beq.n	800654e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	3324      	adds	r3, #36	@ 0x24
 8006530:	4618      	mov	r0, r3
 8006532:	f000 ffdd 	bl	80074f0 <xTaskRemoveFromEventList>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d013      	beq.n	8006564 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800653c:	4b3f      	ldr	r3, [pc, #252]	@ (800663c <xQueueGenericSend+0x200>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	e00a      	b.n	8006564 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800654e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006550:	2b00      	cmp	r3, #0
 8006552:	d007      	beq.n	8006564 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006554:	4b39      	ldr	r3, [pc, #228]	@ (800663c <xQueueGenericSend+0x200>)
 8006556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006564:	f001 ff22 	bl	80083ac <vPortExitCritical>
				return pdPASS;
 8006568:	2301      	movs	r3, #1
 800656a:	e063      	b.n	8006634 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006572:	f001 ff1b 	bl	80083ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006576:	2300      	movs	r3, #0
 8006578:	e05c      	b.n	8006634 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800657a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006580:	f107 0314 	add.w	r3, r7, #20
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f817 	bl	80075b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800658a:	2301      	movs	r3, #1
 800658c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800658e:	f001 ff0d 	bl	80083ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006592:	f000 fd87 	bl	80070a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006596:	f001 fed7 	bl	8008348 <vPortEnterCritical>
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065a0:	b25b      	sxtb	r3, r3
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d103      	bne.n	80065b0 <xQueueGenericSend+0x174>
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065b6:	b25b      	sxtb	r3, r3
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d103      	bne.n	80065c6 <xQueueGenericSend+0x18a>
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065c6:	f001 fef1 	bl	80083ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ca:	1d3a      	adds	r2, r7, #4
 80065cc:	f107 0314 	add.w	r3, r7, #20
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 f806 	bl	80075e4 <xTaskCheckForTimeOut>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d124      	bne.n	8006628 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065e0:	f000 faa6 	bl	8006b30 <prvIsQueueFull>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d018      	beq.n	800661c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	3310      	adds	r3, #16
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	4611      	mov	r1, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 ff2a 	bl	800744c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065fa:	f000 fa31 	bl	8006a60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065fe:	f000 fd5f 	bl	80070c0 <xTaskResumeAll>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	f47f af7c 	bne.w	8006502 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800660a:	4b0c      	ldr	r3, [pc, #48]	@ (800663c <xQueueGenericSend+0x200>)
 800660c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	e772      	b.n	8006502 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800661c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800661e:	f000 fa1f 	bl	8006a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006622:	f000 fd4d 	bl	80070c0 <xTaskResumeAll>
 8006626:	e76c      	b.n	8006502 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800662a:	f000 fa19 	bl	8006a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800662e:	f000 fd47 	bl	80070c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006632:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006634:	4618      	mov	r0, r3
 8006636:	3738      	adds	r7, #56	@ 0x38
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b090      	sub	sp, #64	@ 0x40
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <xQueueGenericSendFromISR+0x3e>
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <xQueueGenericSendFromISR+0x42>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xQueueGenericSendFromISR+0x44>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10b      	bne.n	80066a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	e7fd      	b.n	800669c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d103      	bne.n	80066ae <xQueueGenericSendFromISR+0x6e>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <xQueueGenericSendFromISR+0x72>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <xQueueGenericSendFromISR+0x74>
 80066b2:	2300      	movs	r3, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	623b      	str	r3, [r7, #32]
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066d0:	f001 ff1a 	bl	8008508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066d4:	f3ef 8211 	mrs	r2, BASEPRI
 80066d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	61fa      	str	r2, [r7, #28]
 80066ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d302      	bcc.n	8006702 <xQueueGenericSendFromISR+0xc2>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d12f      	bne.n	8006762 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006718:	f000 f912 	bl	8006940 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800671c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d112      	bne.n	800674c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d016      	beq.n	800675c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	3324      	adds	r3, #36	@ 0x24
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fedc 	bl	80074f0 <xTaskRemoveFromEventList>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00e      	beq.n	800675c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e007      	b.n	800675c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800674c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006750:	3301      	adds	r3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	b25a      	sxtb	r2, r3
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800675c:	2301      	movs	r3, #1
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006760:	e001      	b.n	8006766 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006762:	2300      	movs	r3, #0
 8006764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006768:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006770:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006774:	4618      	mov	r0, r3
 8006776:	3740      	adds	r7, #64	@ 0x40
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08c      	sub	sp, #48	@ 0x30
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006788:	2300      	movs	r3, #0
 800678a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10b      	bne.n	80067ae <xQueueReceive+0x32>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	623b      	str	r3, [r7, #32]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <xQueueReceive+0x40>
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <xQueueReceive+0x44>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <xQueueReceive+0x46>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10b      	bne.n	80067de <xQueueReceive+0x62>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	61fb      	str	r3, [r7, #28]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067de:	f001 f847 	bl	8007870 <xTaskGetSchedulerState>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <xQueueReceive+0x72>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <xQueueReceive+0x76>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <xQueueReceive+0x78>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <xQueueReceive+0x94>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	61bb      	str	r3, [r7, #24]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006810:	f001 fd9a 	bl	8008348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01f      	beq.n	8006860 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006824:	f000 f8f6 	bl	8006a14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	1e5a      	subs	r2, r3, #1
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00f      	beq.n	8006858 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	3310      	adds	r3, #16
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fe57 	bl	80074f0 <xTaskRemoveFromEventList>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006848:	4b3c      	ldr	r3, [pc, #240]	@ (800693c <xQueueReceive+0x1c0>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006858:	f001 fda8 	bl	80083ac <vPortExitCritical>
				return pdPASS;
 800685c:	2301      	movs	r3, #1
 800685e:	e069      	b.n	8006934 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006866:	f001 fda1 	bl	80083ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800686a:	2300      	movs	r3, #0
 800686c:	e062      	b.n	8006934 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800686e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d106      	bne.n	8006882 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006874:	f107 0310 	add.w	r3, r7, #16
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fe9d 	bl	80075b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800687e:	2301      	movs	r3, #1
 8006880:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006882:	f001 fd93 	bl	80083ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006886:	f000 fc0d 	bl	80070a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800688a:	f001 fd5d 	bl	8008348 <vPortEnterCritical>
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006894:	b25b      	sxtb	r3, r3
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d103      	bne.n	80068a4 <xQueueReceive+0x128>
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068aa:	b25b      	sxtb	r3, r3
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b0:	d103      	bne.n	80068ba <xQueueReceive+0x13e>
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ba:	f001 fd77 	bl	80083ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068be:	1d3a      	adds	r2, r7, #4
 80068c0:	f107 0310 	add.w	r3, r7, #16
 80068c4:	4611      	mov	r1, r2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fe8c 	bl	80075e4 <xTaskCheckForTimeOut>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d123      	bne.n	800691a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068d4:	f000 f916 	bl	8006b04 <prvIsQueueEmpty>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d017      	beq.n	800690e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e0:	3324      	adds	r3, #36	@ 0x24
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4611      	mov	r1, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fdb0 	bl	800744c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068ee:	f000 f8b7 	bl	8006a60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068f2:	f000 fbe5 	bl	80070c0 <xTaskResumeAll>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d189      	bne.n	8006810 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80068fc:	4b0f      	ldr	r3, [pc, #60]	@ (800693c <xQueueReceive+0x1c0>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	e780      	b.n	8006810 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800690e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006910:	f000 f8a6 	bl	8006a60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006914:	f000 fbd4 	bl	80070c0 <xTaskResumeAll>
 8006918:	e77a      	b.n	8006810 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800691a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800691c:	f000 f8a0 	bl	8006a60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006920:	f000 fbce 	bl	80070c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006926:	f000 f8ed 	bl	8006b04 <prvIsQueueEmpty>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	f43f af6f 	beq.w	8006810 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006932:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006934:	4618      	mov	r0, r3
 8006936:	3730      	adds	r7, #48	@ 0x30
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	e000ed04 	.word	0xe000ed04

08006940 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006954:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10d      	bne.n	800697a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d14d      	bne.n	8006a02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	4618      	mov	r0, r3
 800696c:	f000 ff9e 	bl	80078ac <xTaskPriorityDisinherit>
 8006970:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	609a      	str	r2, [r3, #8]
 8006978:	e043      	b.n	8006a02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d119      	bne.n	80069b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6858      	ldr	r0, [r3, #4]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	461a      	mov	r2, r3
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	f002 ff9b 	bl	80098c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006998:	441a      	add	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d32b      	bcc.n	8006a02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	605a      	str	r2, [r3, #4]
 80069b2:	e026      	b.n	8006a02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68d8      	ldr	r0, [r3, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069bc:	461a      	mov	r2, r3
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	f002 ff81 	bl	80098c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	425b      	negs	r3, r3
 80069ce:	441a      	add	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d207      	bcs.n	80069f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e8:	425b      	negs	r3, r3
 80069ea:	441a      	add	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d105      	bne.n	8006a02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006a0a:	697b      	ldr	r3, [r7, #20]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d018      	beq.n	8006a58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2e:	441a      	add	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d303      	bcc.n	8006a48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68d9      	ldr	r1, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a50:	461a      	mov	r2, r3
 8006a52:	6838      	ldr	r0, [r7, #0]
 8006a54:	f002 ff37 	bl	80098c6 <memcpy>
	}
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a68:	f001 fc6e 	bl	8008348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a74:	e011      	b.n	8006a9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d012      	beq.n	8006aa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3324      	adds	r3, #36	@ 0x24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fd34 	bl	80074f0 <xTaskRemoveFromEventList>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a8e:	f000 fe0d 	bl	80076ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	dce9      	bgt.n	8006a76 <prvUnlockQueue+0x16>
 8006aa2:	e000      	b.n	8006aa6 <prvUnlockQueue+0x46>
					break;
 8006aa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	22ff      	movs	r2, #255	@ 0xff
 8006aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006aae:	f001 fc7d 	bl	80083ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ab2:	f001 fc49 	bl	8008348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006abc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006abe:	e011      	b.n	8006ae4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d012      	beq.n	8006aee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3310      	adds	r3, #16
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fd0f 	bl	80074f0 <xTaskRemoveFromEventList>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ad8:	f000 fde8 	bl	80076ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ae4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dce9      	bgt.n	8006ac0 <prvUnlockQueue+0x60>
 8006aec:	e000      	b.n	8006af0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006aee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	22ff      	movs	r2, #255	@ 0xff
 8006af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006af8:	f001 fc58 	bl	80083ac <vPortExitCritical>
}
 8006afc:	bf00      	nop
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b0c:	f001 fc1c 	bl	8008348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	e001      	b.n	8006b22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b22:	f001 fc43 	bl	80083ac <vPortExitCritical>

	return xReturn;
 8006b26:	68fb      	ldr	r3, [r7, #12]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b38:	f001 fc06 	bl	8008348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d102      	bne.n	8006b4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e001      	b.n	8006b52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b52:	f001 fc2b 	bl	80083ac <vPortExitCritical>

	return xReturn;
 8006b56:	68fb      	ldr	r3, [r7, #12]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e014      	b.n	8006b9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b70:	4a0f      	ldr	r2, [pc, #60]	@ (8006bb0 <vQueueAddToRegistry+0x50>)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b7c:	490c      	ldr	r1, [pc, #48]	@ (8006bb0 <vQueueAddToRegistry+0x50>)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b86:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb0 <vQueueAddToRegistry+0x50>)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b92:	e006      	b.n	8006ba2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b07      	cmp	r3, #7
 8006b9e:	d9e7      	bls.n	8006b70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	20000a00 	.word	0x20000a00

08006bb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bc4:	f001 fbc0 	bl	8008348 <vPortEnterCritical>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d103      	bne.n	8006bde <vQueueWaitForMessageRestricted+0x2a>
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bea:	d103      	bne.n	8006bf4 <vQueueWaitForMessageRestricted+0x40>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bf4:	f001 fbda 	bl	80083ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	3324      	adds	r3, #36	@ 0x24
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fc45 	bl	8007498 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c0e:	6978      	ldr	r0, [r7, #20]
 8006c10:	f7ff ff26 	bl	8006a60 <prvUnlockQueue>
	}
 8006c14:	bf00      	nop
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08e      	sub	sp, #56	@ 0x38
 8006c20:	af04      	add	r7, sp, #16
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	623b      	str	r3, [r7, #32]
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	e7fd      	b.n	8006c44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10b      	bne.n	8006c66 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	61fb      	str	r3, [r7, #28]
}
 8006c60:	bf00      	nop
 8006c62:	bf00      	nop
 8006c64:	e7fd      	b.n	8006c62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c66:	235c      	movs	r3, #92	@ 0x5c
 8006c68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c6e:	d00b      	beq.n	8006c88 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	61bb      	str	r3, [r7, #24]
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01e      	beq.n	8006cce <xTaskCreateStatic+0xb2>
 8006c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01b      	beq.n	8006cce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9303      	str	r3, [sp, #12]
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	9302      	str	r3, [sp, #8]
 8006cb0:	f107 0314 	add.w	r3, r7, #20
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f850 	bl	8006d66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cc8:	f000 f8de 	bl	8006e88 <prvAddNewTaskToReadyList>
 8006ccc:	e001      	b.n	8006cd2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006cd2:	697b      	ldr	r3, [r7, #20]
	}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3728      	adds	r7, #40	@ 0x28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08c      	sub	sp, #48	@ 0x30
 8006ce0:	af04      	add	r7, sp, #16
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f001 fc4b 	bl	800858c <pvPortMalloc>
 8006cf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00e      	beq.n	8006d1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cfe:	205c      	movs	r0, #92	@ 0x5c
 8006d00:	f001 fc44 	bl	800858c <pvPortMalloc>
 8006d04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d12:	e005      	b.n	8006d20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d14:	6978      	ldr	r0, [r7, #20]
 8006d16:	f001 fd07 	bl	8008728 <vPortFree>
 8006d1a:	e001      	b.n	8006d20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d017      	beq.n	8006d56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	2300      	movs	r3, #0
 8006d32:	9303      	str	r3, [sp, #12]
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	9302      	str	r3, [sp, #8]
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f80e 	bl	8006d66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d4a:	69f8      	ldr	r0, [r7, #28]
 8006d4c:	f000 f89c 	bl	8006e88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d50:	2301      	movs	r3, #1
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	e002      	b.n	8006d5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d56:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b088      	sub	sp, #32
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	21a5      	movs	r1, #165	@ 0xa5
 8006d80:	f002 fd12 	bl	80097a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f023 0307 	bic.w	r3, r3, #7
 8006d9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	617b      	str	r3, [r7, #20]
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	e7fd      	b.n	8006dbc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01f      	beq.n	8006e06 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	e012      	b.n	8006df2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	7819      	ldrb	r1, [r3, #0]
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	3334      	adds	r3, #52	@ 0x34
 8006ddc:	460a      	mov	r2, r1
 8006dde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d006      	beq.n	8006dfa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b0f      	cmp	r3, #15
 8006df6:	d9e9      	bls.n	8006dcc <prvInitialiseNewTask+0x66>
 8006df8:	e000      	b.n	8006dfc <prvInitialiseNewTask+0x96>
			{
				break;
 8006dfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e04:	e003      	b.n	8006e0e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e10:	2b37      	cmp	r3, #55	@ 0x37
 8006e12:	d901      	bls.n	8006e18 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e14:	2337      	movs	r3, #55	@ 0x37
 8006e16:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e22:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	2200      	movs	r2, #0
 8006e28:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff f966 	bl	8006100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e36:	3318      	adds	r3, #24
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff f961 	bl	8006100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e52:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	2200      	movs	r2, #0
 8006e58:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	69b8      	ldr	r0, [r7, #24]
 8006e68:	f001 f93e 	bl	80080e8 <pxPortInitialiseStack>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e7e:	bf00      	nop
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e90:	f001 fa5a 	bl	8008348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e94:	4b2d      	ldr	r3, [pc, #180]	@ (8006f4c <prvAddNewTaskToReadyList+0xc4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006f4c <prvAddNewTaskToReadyList+0xc4>)
 8006e9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006eac:	4b27      	ldr	r3, [pc, #156]	@ (8006f4c <prvAddNewTaskToReadyList+0xc4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d110      	bne.n	8006ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006eb4:	f000 fc1e 	bl	80076f4 <prvInitialiseTaskLists>
 8006eb8:	e00d      	b.n	8006ed6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006eba:	4b26      	ldr	r3, [pc, #152]	@ (8006f54 <prvAddNewTaskToReadyList+0xcc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ec2:	4b23      	ldr	r3, [pc, #140]	@ (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d802      	bhi.n	8006ed6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ed6:	4b20      	ldr	r3, [pc, #128]	@ (8006f58 <prvAddNewTaskToReadyList+0xd0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	4a1e      	ldr	r2, [pc, #120]	@ (8006f58 <prvAddNewTaskToReadyList+0xd0>)
 8006ede:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f58 <prvAddNewTaskToReadyList+0xd0>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eec:	4b1b      	ldr	r3, [pc, #108]	@ (8006f5c <prvAddNewTaskToReadyList+0xd4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d903      	bls.n	8006efc <prvAddNewTaskToReadyList+0x74>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	4a18      	ldr	r2, [pc, #96]	@ (8006f5c <prvAddNewTaskToReadyList+0xd4>)
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4a15      	ldr	r2, [pc, #84]	@ (8006f60 <prvAddNewTaskToReadyList+0xd8>)
 8006f0a:	441a      	add	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7ff f901 	bl	800611a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f18:	f001 fa48 	bl	80083ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <prvAddNewTaskToReadyList+0xcc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00e      	beq.n	8006f42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f24:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <prvAddNewTaskToReadyList+0xc8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d207      	bcs.n	8006f42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f32:	4b0c      	ldr	r3, [pc, #48]	@ (8006f64 <prvAddNewTaskToReadyList+0xdc>)
 8006f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f42:	bf00      	nop
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000f14 	.word	0x20000f14
 8006f50:	20000a40 	.word	0x20000a40
 8006f54:	20000f20 	.word	0x20000f20
 8006f58:	20000f30 	.word	0x20000f30
 8006f5c:	20000f1c 	.word	0x20000f1c
 8006f60:	20000a44 	.word	0x20000a44
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d018      	beq.n	8006fac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f7a:	4b14      	ldr	r3, [pc, #80]	@ (8006fcc <vTaskDelay+0x64>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <vTaskDelay+0x32>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60bb      	str	r3, [r7, #8]
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	e7fd      	b.n	8006f96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f9a:	f000 f883 	bl	80070a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fcf3 	bl	800798c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fa6:	f000 f88b 	bl	80070c0 <xTaskResumeAll>
 8006faa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d107      	bne.n	8006fc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006fb2:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <vTaskDelay+0x68>)
 8006fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000f3c 	.word	0x20000f3c
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	@ 0x28
 8006fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fe2:	463a      	mov	r2, r7
 8006fe4:	1d39      	adds	r1, r7, #4
 8006fe6:	f107 0308 	add.w	r3, r7, #8
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff f834 	bl	8006058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	9202      	str	r2, [sp, #8]
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	2300      	movs	r3, #0
 8007000:	460a      	mov	r2, r1
 8007002:	4922      	ldr	r1, [pc, #136]	@ (800708c <vTaskStartScheduler+0xb8>)
 8007004:	4822      	ldr	r0, [pc, #136]	@ (8007090 <vTaskStartScheduler+0xbc>)
 8007006:	f7ff fe09 	bl	8006c1c <xTaskCreateStatic>
 800700a:	4603      	mov	r3, r0
 800700c:	4a21      	ldr	r2, [pc, #132]	@ (8007094 <vTaskStartScheduler+0xc0>)
 800700e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007010:	4b20      	ldr	r3, [pc, #128]	@ (8007094 <vTaskStartScheduler+0xc0>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007018:	2301      	movs	r3, #1
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e001      	b.n	8007022 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d102      	bne.n	800702e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007028:	f000 fd04 	bl	8007a34 <xTimerCreateTimerTask>
 800702c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d116      	bne.n	8007062 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	613b      	str	r3, [r7, #16]
}
 8007046:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007048:	4b13      	ldr	r3, [pc, #76]	@ (8007098 <vTaskStartScheduler+0xc4>)
 800704a:	f04f 32ff 	mov.w	r2, #4294967295
 800704e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007050:	4b12      	ldr	r3, [pc, #72]	@ (800709c <vTaskStartScheduler+0xc8>)
 8007052:	2201      	movs	r2, #1
 8007054:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007056:	4b12      	ldr	r3, [pc, #72]	@ (80070a0 <vTaskStartScheduler+0xcc>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800705c:	f001 f8d0 	bl	8008200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007060:	e00f      	b.n	8007082 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d10b      	bne.n	8007082 <vTaskStartScheduler+0xae>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	60fb      	str	r3, [r7, #12]
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	e7fd      	b.n	800707e <vTaskStartScheduler+0xaa>
}
 8007082:	bf00      	nop
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	0800b414 	.word	0x0800b414
 8007090:	080076c5 	.word	0x080076c5
 8007094:	20000f38 	.word	0x20000f38
 8007098:	20000f34 	.word	0x20000f34
 800709c:	20000f20 	.word	0x20000f20
 80070a0:	20000f18 	.word	0x20000f18

080070a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80070a8:	4b04      	ldr	r3, [pc, #16]	@ (80070bc <vTaskSuspendAll+0x18>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	4a03      	ldr	r2, [pc, #12]	@ (80070bc <vTaskSuspendAll+0x18>)
 80070b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80070b2:	bf00      	nop
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000f3c 	.word	0x20000f3c

080070c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070ce:	4b42      	ldr	r3, [pc, #264]	@ (80071d8 <xTaskResumeAll+0x118>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <xTaskResumeAll+0x2e>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	603b      	str	r3, [r7, #0]
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	e7fd      	b.n	80070ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070ee:	f001 f92b 	bl	8008348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070f2:	4b39      	ldr	r3, [pc, #228]	@ (80071d8 <xTaskResumeAll+0x118>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	4a37      	ldr	r2, [pc, #220]	@ (80071d8 <xTaskResumeAll+0x118>)
 80070fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070fc:	4b36      	ldr	r3, [pc, #216]	@ (80071d8 <xTaskResumeAll+0x118>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d162      	bne.n	80071ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007104:	4b35      	ldr	r3, [pc, #212]	@ (80071dc <xTaskResumeAll+0x11c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d05e      	beq.n	80071ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800710c:	e02f      	b.n	800716e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710e:	4b34      	ldr	r3, [pc, #208]	@ (80071e0 <xTaskResumeAll+0x120>)
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3318      	adds	r3, #24
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff f85a 	bl	80061d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3304      	adds	r3, #4
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff f855 	bl	80061d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800712e:	4b2d      	ldr	r3, [pc, #180]	@ (80071e4 <xTaskResumeAll+0x124>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d903      	bls.n	800713e <xTaskResumeAll+0x7e>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713a:	4a2a      	ldr	r2, [pc, #168]	@ (80071e4 <xTaskResumeAll+0x124>)
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4a27      	ldr	r2, [pc, #156]	@ (80071e8 <xTaskResumeAll+0x128>)
 800714c:	441a      	add	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3304      	adds	r3, #4
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f7fe ffe0 	bl	800611a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715e:	4b23      	ldr	r3, [pc, #140]	@ (80071ec <xTaskResumeAll+0x12c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007164:	429a      	cmp	r2, r3
 8007166:	d302      	bcc.n	800716e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007168:	4b21      	ldr	r3, [pc, #132]	@ (80071f0 <xTaskResumeAll+0x130>)
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800716e:	4b1c      	ldr	r3, [pc, #112]	@ (80071e0 <xTaskResumeAll+0x120>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1cb      	bne.n	800710e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800717c:	f000 fb58 	bl	8007830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007180:	4b1c      	ldr	r3, [pc, #112]	@ (80071f4 <xTaskResumeAll+0x134>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d010      	beq.n	80071ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800718c:	f000 f846 	bl	800721c <xTaskIncrementTick>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007196:	4b16      	ldr	r3, [pc, #88]	@ (80071f0 <xTaskResumeAll+0x130>)
 8007198:	2201      	movs	r2, #1
 800719a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3b01      	subs	r3, #1
 80071a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f1      	bne.n	800718c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80071a8:	4b12      	ldr	r3, [pc, #72]	@ (80071f4 <xTaskResumeAll+0x134>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071ae:	4b10      	ldr	r3, [pc, #64]	@ (80071f0 <xTaskResumeAll+0x130>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071b6:	2301      	movs	r3, #1
 80071b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071ba:	4b0f      	ldr	r3, [pc, #60]	@ (80071f8 <xTaskResumeAll+0x138>)
 80071bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071ca:	f001 f8ef 	bl	80083ac <vPortExitCritical>

	return xAlreadyYielded;
 80071ce:	68bb      	ldr	r3, [r7, #8]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20000f3c 	.word	0x20000f3c
 80071dc:	20000f14 	.word	0x20000f14
 80071e0:	20000ed4 	.word	0x20000ed4
 80071e4:	20000f1c 	.word	0x20000f1c
 80071e8:	20000a44 	.word	0x20000a44
 80071ec:	20000a40 	.word	0x20000a40
 80071f0:	20000f28 	.word	0x20000f28
 80071f4:	20000f24 	.word	0x20000f24
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007202:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <xTaskGetTickCount+0x1c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007208:	687b      	ldr	r3, [r7, #4]
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000f18 	.word	0x20000f18

0800721c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007226:	4b4f      	ldr	r3, [pc, #316]	@ (8007364 <xTaskIncrementTick+0x148>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	f040 8090 	bne.w	8007350 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007230:	4b4d      	ldr	r3, [pc, #308]	@ (8007368 <xTaskIncrementTick+0x14c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007238:	4a4b      	ldr	r2, [pc, #300]	@ (8007368 <xTaskIncrementTick+0x14c>)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d121      	bne.n	8007288 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007244:	4b49      	ldr	r3, [pc, #292]	@ (800736c <xTaskIncrementTick+0x150>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <xTaskIncrementTick+0x4a>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	603b      	str	r3, [r7, #0]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <xTaskIncrementTick+0x46>
 8007266:	4b41      	ldr	r3, [pc, #260]	@ (800736c <xTaskIncrementTick+0x150>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	4b40      	ldr	r3, [pc, #256]	@ (8007370 <xTaskIncrementTick+0x154>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a3e      	ldr	r2, [pc, #248]	@ (800736c <xTaskIncrementTick+0x150>)
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	4a3e      	ldr	r2, [pc, #248]	@ (8007370 <xTaskIncrementTick+0x154>)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	4b3e      	ldr	r3, [pc, #248]	@ (8007374 <xTaskIncrementTick+0x158>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3301      	adds	r3, #1
 8007280:	4a3c      	ldr	r2, [pc, #240]	@ (8007374 <xTaskIncrementTick+0x158>)
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	f000 fad4 	bl	8007830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007288:	4b3b      	ldr	r3, [pc, #236]	@ (8007378 <xTaskIncrementTick+0x15c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	429a      	cmp	r2, r3
 8007290:	d349      	bcc.n	8007326 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007292:	4b36      	ldr	r3, [pc, #216]	@ (800736c <xTaskIncrementTick+0x150>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729c:	4b36      	ldr	r3, [pc, #216]	@ (8007378 <xTaskIncrementTick+0x15c>)
 800729e:	f04f 32ff 	mov.w	r2, #4294967295
 80072a2:	601a      	str	r2, [r3, #0]
					break;
 80072a4:	e03f      	b.n	8007326 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a6:	4b31      	ldr	r3, [pc, #196]	@ (800736c <xTaskIncrementTick+0x150>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d203      	bcs.n	80072c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072be:	4a2e      	ldr	r2, [pc, #184]	@ (8007378 <xTaskIncrementTick+0x15c>)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072c4:	e02f      	b.n	8007326 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe ff82 	bl	80061d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d004      	beq.n	80072e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	3318      	adds	r3, #24
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe ff79 	bl	80061d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e6:	4b25      	ldr	r3, [pc, #148]	@ (800737c <xTaskIncrementTick+0x160>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d903      	bls.n	80072f6 <xTaskIncrementTick+0xda>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f2:	4a22      	ldr	r2, [pc, #136]	@ (800737c <xTaskIncrementTick+0x160>)
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4a1f      	ldr	r2, [pc, #124]	@ (8007380 <xTaskIncrementTick+0x164>)
 8007304:	441a      	add	r2, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	3304      	adds	r3, #4
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f7fe ff04 	bl	800611a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007316:	4b1b      	ldr	r3, [pc, #108]	@ (8007384 <xTaskIncrementTick+0x168>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	429a      	cmp	r2, r3
 800731e:	d3b8      	bcc.n	8007292 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007320:	2301      	movs	r3, #1
 8007322:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007324:	e7b5      	b.n	8007292 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007326:	4b17      	ldr	r3, [pc, #92]	@ (8007384 <xTaskIncrementTick+0x168>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732c:	4914      	ldr	r1, [pc, #80]	@ (8007380 <xTaskIncrementTick+0x164>)
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d901      	bls.n	8007342 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800733e:	2301      	movs	r3, #1
 8007340:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007342:	4b11      	ldr	r3, [pc, #68]	@ (8007388 <xTaskIncrementTick+0x16c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800734a:	2301      	movs	r3, #1
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e004      	b.n	800735a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007350:	4b0e      	ldr	r3, [pc, #56]	@ (800738c <xTaskIncrementTick+0x170>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3301      	adds	r3, #1
 8007356:	4a0d      	ldr	r2, [pc, #52]	@ (800738c <xTaskIncrementTick+0x170>)
 8007358:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800735a:	697b      	ldr	r3, [r7, #20]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000f3c 	.word	0x20000f3c
 8007368:	20000f18 	.word	0x20000f18
 800736c:	20000ecc 	.word	0x20000ecc
 8007370:	20000ed0 	.word	0x20000ed0
 8007374:	20000f2c 	.word	0x20000f2c
 8007378:	20000f34 	.word	0x20000f34
 800737c:	20000f1c 	.word	0x20000f1c
 8007380:	20000a44 	.word	0x20000a44
 8007384:	20000a40 	.word	0x20000a40
 8007388:	20000f28 	.word	0x20000f28
 800738c:	20000f24 	.word	0x20000f24

08007390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007396:	4b28      	ldr	r3, [pc, #160]	@ (8007438 <vTaskSwitchContext+0xa8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800739e:	4b27      	ldr	r3, [pc, #156]	@ (800743c <vTaskSwitchContext+0xac>)
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073a4:	e042      	b.n	800742c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80073a6:	4b25      	ldr	r3, [pc, #148]	@ (800743c <vTaskSwitchContext+0xac>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ac:	4b24      	ldr	r3, [pc, #144]	@ (8007440 <vTaskSwitchContext+0xb0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	e011      	b.n	80073d8 <vTaskSwitchContext+0x48>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	607b      	str	r3, [r7, #4]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <vTaskSwitchContext+0x3e>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	491a      	ldr	r1, [pc, #104]	@ (8007444 <vTaskSwitchContext+0xb4>)
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0e3      	beq.n	80073b4 <vTaskSwitchContext+0x24>
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4a13      	ldr	r2, [pc, #76]	@ (8007444 <vTaskSwitchContext+0xb4>)
 80073f8:	4413      	add	r3, r2
 80073fa:	60bb      	str	r3, [r7, #8]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	3308      	adds	r3, #8
 800740e:	429a      	cmp	r2, r3
 8007410:	d104      	bne.n	800741c <vTaskSwitchContext+0x8c>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	605a      	str	r2, [r3, #4]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	4a09      	ldr	r2, [pc, #36]	@ (8007448 <vTaskSwitchContext+0xb8>)
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	4a06      	ldr	r2, [pc, #24]	@ (8007440 <vTaskSwitchContext+0xb0>)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6013      	str	r3, [r2, #0]
}
 800742c:	bf00      	nop
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20000f3c 	.word	0x20000f3c
 800743c:	20000f28 	.word	0x20000f28
 8007440:	20000f1c 	.word	0x20000f1c
 8007444:	20000a44 	.word	0x20000a44
 8007448:	20000a40 	.word	0x20000a40

0800744c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	e7fd      	b.n	8007470 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007474:	4b07      	ldr	r3, [pc, #28]	@ (8007494 <vTaskPlaceOnEventList+0x48>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3318      	adds	r3, #24
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fe fe70 	bl	8006162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007482:	2101      	movs	r1, #1
 8007484:	6838      	ldr	r0, [r7, #0]
 8007486:	f000 fa81 	bl	800798c <prvAddCurrentTaskToDelayedList>
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000a40 	.word	0x20000a40

08007498 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10b      	bne.n	80074c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	617b      	str	r3, [r7, #20]
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	e7fd      	b.n	80074be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074c2:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <vTaskPlaceOnEventListRestricted+0x54>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3318      	adds	r3, #24
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7fe fe25 	bl	800611a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80074d6:	f04f 33ff 	mov.w	r3, #4294967295
 80074da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	68b8      	ldr	r0, [r7, #8]
 80074e0:	f000 fa54 	bl	800798c <prvAddCurrentTaskToDelayedList>
	}
 80074e4:	bf00      	nop
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	20000a40 	.word	0x20000a40

080074f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60fb      	str	r3, [r7, #12]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3318      	adds	r3, #24
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fe56 	bl	80061d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007528:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <xTaskRemoveFromEventList+0xb0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d11d      	bne.n	800756c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	3304      	adds	r3, #4
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe fe4d 	bl	80061d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753e:	4b19      	ldr	r3, [pc, #100]	@ (80075a4 <xTaskRemoveFromEventList+0xb4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d903      	bls.n	800754e <xTaskRemoveFromEventList+0x5e>
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754a:	4a16      	ldr	r2, [pc, #88]	@ (80075a4 <xTaskRemoveFromEventList+0xb4>)
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4a13      	ldr	r2, [pc, #76]	@ (80075a8 <xTaskRemoveFromEventList+0xb8>)
 800755c:	441a      	add	r2, r3
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	3304      	adds	r3, #4
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7fe fdd8 	bl	800611a <vListInsertEnd>
 800756a:	e005      	b.n	8007578 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	3318      	adds	r3, #24
 8007570:	4619      	mov	r1, r3
 8007572:	480e      	ldr	r0, [pc, #56]	@ (80075ac <xTaskRemoveFromEventList+0xbc>)
 8007574:	f7fe fdd1 	bl	800611a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757c:	4b0c      	ldr	r3, [pc, #48]	@ (80075b0 <xTaskRemoveFromEventList+0xc0>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	429a      	cmp	r2, r3
 8007584:	d905      	bls.n	8007592 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007586:	2301      	movs	r3, #1
 8007588:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800758a:	4b0a      	ldr	r3, [pc, #40]	@ (80075b4 <xTaskRemoveFromEventList+0xc4>)
 800758c:	2201      	movs	r2, #1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	e001      	b.n	8007596 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007596:	697b      	ldr	r3, [r7, #20]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000f3c 	.word	0x20000f3c
 80075a4:	20000f1c 	.word	0x20000f1c
 80075a8:	20000a44 	.word	0x20000a44
 80075ac:	20000ed4 	.word	0x20000ed4
 80075b0:	20000a40 	.word	0x20000a40
 80075b4:	20000f28 	.word	0x20000f28

080075b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075c0:	4b06      	ldr	r3, [pc, #24]	@ (80075dc <vTaskInternalSetTimeOutState+0x24>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <vTaskInternalSetTimeOutState+0x28>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	605a      	str	r2, [r3, #4]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000f2c 	.word	0x20000f2c
 80075e0:	20000f18 	.word	0x20000f18

080075e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10b      	bne.n	800760c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	613b      	str	r3, [r7, #16]
}
 8007606:	bf00      	nop
 8007608:	bf00      	nop
 800760a:	e7fd      	b.n	8007608 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10b      	bne.n	800762a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	60fb      	str	r3, [r7, #12]
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop
 8007628:	e7fd      	b.n	8007626 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800762a:	f000 fe8d 	bl	8008348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800762e:	4b1d      	ldr	r3, [pc, #116]	@ (80076a4 <xTaskCheckForTimeOut+0xc0>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d102      	bne.n	800764e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007648:	2300      	movs	r3, #0
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	e023      	b.n	8007696 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b15      	ldr	r3, [pc, #84]	@ (80076a8 <xTaskCheckForTimeOut+0xc4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d007      	beq.n	800766a <xTaskCheckForTimeOut+0x86>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	429a      	cmp	r2, r3
 8007662:	d302      	bcc.n	800766a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e015      	b.n	8007696 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	429a      	cmp	r2, r3
 8007672:	d20b      	bcs.n	800768c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	1ad2      	subs	r2, r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ff99 	bl	80075b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007686:	2300      	movs	r3, #0
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	e004      	b.n	8007696 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007692:	2301      	movs	r3, #1
 8007694:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007696:	f000 fe89 	bl	80083ac <vPortExitCritical>

	return xReturn;
 800769a:	69fb      	ldr	r3, [r7, #28]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20000f18 	.word	0x20000f18
 80076a8:	20000f2c 	.word	0x20000f2c

080076ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076b0:	4b03      	ldr	r3, [pc, #12]	@ (80076c0 <vTaskMissedYield+0x14>)
 80076b2:	2201      	movs	r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
}
 80076b6:	bf00      	nop
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	20000f28 	.word	0x20000f28

080076c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076cc:	f000 f852 	bl	8007774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076d0:	4b06      	ldr	r3, [pc, #24]	@ (80076ec <prvIdleTask+0x28>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d9f9      	bls.n	80076cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80076d8:	4b05      	ldr	r3, [pc, #20]	@ (80076f0 <prvIdleTask+0x2c>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076e8:	e7f0      	b.n	80076cc <prvIdleTask+0x8>
 80076ea:	bf00      	nop
 80076ec:	20000a44 	.word	0x20000a44
 80076f0:	e000ed04 	.word	0xe000ed04

080076f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076fa:	2300      	movs	r3, #0
 80076fc:	607b      	str	r3, [r7, #4]
 80076fe:	e00c      	b.n	800771a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4a12      	ldr	r2, [pc, #72]	@ (8007754 <prvInitialiseTaskLists+0x60>)
 800770c:	4413      	add	r3, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fcd6 	bl	80060c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3301      	adds	r3, #1
 8007718:	607b      	str	r3, [r7, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b37      	cmp	r3, #55	@ 0x37
 800771e:	d9ef      	bls.n	8007700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007720:	480d      	ldr	r0, [pc, #52]	@ (8007758 <prvInitialiseTaskLists+0x64>)
 8007722:	f7fe fccd 	bl	80060c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007726:	480d      	ldr	r0, [pc, #52]	@ (800775c <prvInitialiseTaskLists+0x68>)
 8007728:	f7fe fcca 	bl	80060c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800772c:	480c      	ldr	r0, [pc, #48]	@ (8007760 <prvInitialiseTaskLists+0x6c>)
 800772e:	f7fe fcc7 	bl	80060c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007732:	480c      	ldr	r0, [pc, #48]	@ (8007764 <prvInitialiseTaskLists+0x70>)
 8007734:	f7fe fcc4 	bl	80060c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007738:	480b      	ldr	r0, [pc, #44]	@ (8007768 <prvInitialiseTaskLists+0x74>)
 800773a:	f7fe fcc1 	bl	80060c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800773e:	4b0b      	ldr	r3, [pc, #44]	@ (800776c <prvInitialiseTaskLists+0x78>)
 8007740:	4a05      	ldr	r2, [pc, #20]	@ (8007758 <prvInitialiseTaskLists+0x64>)
 8007742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007744:	4b0a      	ldr	r3, [pc, #40]	@ (8007770 <prvInitialiseTaskLists+0x7c>)
 8007746:	4a05      	ldr	r2, [pc, #20]	@ (800775c <prvInitialiseTaskLists+0x68>)
 8007748:	601a      	str	r2, [r3, #0]
}
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000a44 	.word	0x20000a44
 8007758:	20000ea4 	.word	0x20000ea4
 800775c:	20000eb8 	.word	0x20000eb8
 8007760:	20000ed4 	.word	0x20000ed4
 8007764:	20000ee8 	.word	0x20000ee8
 8007768:	20000f00 	.word	0x20000f00
 800776c:	20000ecc 	.word	0x20000ecc
 8007770:	20000ed0 	.word	0x20000ed0

08007774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800777a:	e019      	b.n	80077b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800777c:	f000 fde4 	bl	8008348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007780:	4b10      	ldr	r3, [pc, #64]	@ (80077c4 <prvCheckTasksWaitingTermination+0x50>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3304      	adds	r3, #4
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fd21 	bl	80061d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007792:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <prvCheckTasksWaitingTermination+0x54>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3b01      	subs	r3, #1
 8007798:	4a0b      	ldr	r2, [pc, #44]	@ (80077c8 <prvCheckTasksWaitingTermination+0x54>)
 800779a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800779c:	4b0b      	ldr	r3, [pc, #44]	@ (80077cc <prvCheckTasksWaitingTermination+0x58>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	4a0a      	ldr	r2, [pc, #40]	@ (80077cc <prvCheckTasksWaitingTermination+0x58>)
 80077a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077a6:	f000 fe01 	bl	80083ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f810 	bl	80077d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077b0:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <prvCheckTasksWaitingTermination+0x58>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e1      	bne.n	800777c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000ee8 	.word	0x20000ee8
 80077c8:	20000f14 	.word	0x20000f14
 80077cc:	20000efc 	.word	0x20000efc

080077d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d108      	bne.n	80077f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 ff9e 	bl	8008728 <vPortFree>
				vPortFree( pxTCB );
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 ff9b 	bl	8008728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077f2:	e019      	b.n	8007828 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d103      	bne.n	8007806 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 ff92 	bl	8008728 <vPortFree>
	}
 8007804:	e010      	b.n	8007828 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800780c:	2b02      	cmp	r3, #2
 800780e:	d00b      	beq.n	8007828 <prvDeleteTCB+0x58>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60fb      	str	r3, [r7, #12]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <prvDeleteTCB+0x54>
	}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007836:	4b0c      	ldr	r3, [pc, #48]	@ (8007868 <prvResetNextTaskUnblockTime+0x38>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d104      	bne.n	800784a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007840:	4b0a      	ldr	r3, [pc, #40]	@ (800786c <prvResetNextTaskUnblockTime+0x3c>)
 8007842:	f04f 32ff 	mov.w	r2, #4294967295
 8007846:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007848:	e008      	b.n	800785c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800784a:	4b07      	ldr	r3, [pc, #28]	@ (8007868 <prvResetNextTaskUnblockTime+0x38>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	4a04      	ldr	r2, [pc, #16]	@ (800786c <prvResetNextTaskUnblockTime+0x3c>)
 800785a:	6013      	str	r3, [r2, #0]
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	20000ecc 	.word	0x20000ecc
 800786c:	20000f34 	.word	0x20000f34

08007870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007876:	4b0b      	ldr	r3, [pc, #44]	@ (80078a4 <xTaskGetSchedulerState+0x34>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800787e:	2301      	movs	r3, #1
 8007880:	607b      	str	r3, [r7, #4]
 8007882:	e008      	b.n	8007896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007884:	4b08      	ldr	r3, [pc, #32]	@ (80078a8 <xTaskGetSchedulerState+0x38>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800788c:	2302      	movs	r3, #2
 800788e:	607b      	str	r3, [r7, #4]
 8007890:	e001      	b.n	8007896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007892:	2300      	movs	r3, #0
 8007894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007896:	687b      	ldr	r3, [r7, #4]
	}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	20000f20 	.word	0x20000f20
 80078a8:	20000f3c 	.word	0x20000f3c

080078ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d058      	beq.n	8007974 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078c2:	4b2f      	ldr	r3, [pc, #188]	@ (8007980 <xTaskPriorityDisinherit+0xd4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d00b      	beq.n	80078e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	60fb      	str	r3, [r7, #12]
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	e7fd      	b.n	80078e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10b      	bne.n	8007904 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	60bb      	str	r3, [r7, #8]
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007908:	1e5a      	subs	r2, r3, #1
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007916:	429a      	cmp	r2, r3
 8007918:	d02c      	beq.n	8007974 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800791e:	2b00      	cmp	r3, #0
 8007920:	d128      	bne.n	8007974 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3304      	adds	r3, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fc54 	bl	80061d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007944:	4b0f      	ldr	r3, [pc, #60]	@ (8007984 <xTaskPriorityDisinherit+0xd8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d903      	bls.n	8007954 <xTaskPriorityDisinherit+0xa8>
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007950:	4a0c      	ldr	r2, [pc, #48]	@ (8007984 <xTaskPriorityDisinherit+0xd8>)
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4a09      	ldr	r2, [pc, #36]	@ (8007988 <xTaskPriorityDisinherit+0xdc>)
 8007962:	441a      	add	r2, r3
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	3304      	adds	r3, #4
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fe fbd5 	bl	800611a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007970:	2301      	movs	r3, #1
 8007972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007974:	697b      	ldr	r3, [r7, #20]
	}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000a40 	.word	0x20000a40
 8007984:	20000f1c 	.word	0x20000f1c
 8007988:	20000a44 	.word	0x20000a44

0800798c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007996:	4b21      	ldr	r3, [pc, #132]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0x90>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800799c:	4b20      	ldr	r3, [pc, #128]	@ (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fc16 	bl	80061d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d10a      	bne.n	80079c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	4819      	ldr	r0, [pc, #100]	@ (8007a24 <prvAddCurrentTaskToDelayedList+0x98>)
 80079c0:	f7fe fbab 	bl	800611a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079c4:	e026      	b.n	8007a14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4413      	add	r3, r2
 80079cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079ce:	4b14      	ldr	r3, [pc, #80]	@ (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d209      	bcs.n	80079f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079de:	4b12      	ldr	r3, [pc, #72]	@ (8007a28 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f7fe fbb9 	bl	8006162 <vListInsert>
}
 80079f0:	e010      	b.n	8007a14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0xa0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f7fe fbaf 	bl	8006162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a04:	4b0a      	ldr	r3, [pc, #40]	@ (8007a30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d202      	bcs.n	8007a14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a0e:	4a08      	ldr	r2, [pc, #32]	@ (8007a30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6013      	str	r3, [r2, #0]
}
 8007a14:	bf00      	nop
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000f18 	.word	0x20000f18
 8007a20:	20000a40 	.word	0x20000a40
 8007a24:	20000f00 	.word	0x20000f00
 8007a28:	20000ed0 	.word	0x20000ed0
 8007a2c:	20000ecc 	.word	0x20000ecc
 8007a30:	20000f34 	.word	0x20000f34

08007a34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	@ 0x28
 8007a38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a3e:	f000 fb13 	bl	8008068 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a42:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab8 <xTimerCreateTimerTask+0x84>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d021      	beq.n	8007a8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a52:	1d3a      	adds	r2, r7, #4
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fb15 	bl	800608c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	9202      	str	r2, [sp, #8]
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	2300      	movs	r3, #0
 8007a72:	460a      	mov	r2, r1
 8007a74:	4911      	ldr	r1, [pc, #68]	@ (8007abc <xTimerCreateTimerTask+0x88>)
 8007a76:	4812      	ldr	r0, [pc, #72]	@ (8007ac0 <xTimerCreateTimerTask+0x8c>)
 8007a78:	f7ff f8d0 	bl	8006c1c <xTaskCreateStatic>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	4a11      	ldr	r2, [pc, #68]	@ (8007ac4 <xTimerCreateTimerTask+0x90>)
 8007a80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a82:	4b10      	ldr	r3, [pc, #64]	@ (8007ac4 <xTimerCreateTimerTask+0x90>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	613b      	str	r3, [r7, #16]
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007aac:	697b      	ldr	r3, [r7, #20]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000f70 	.word	0x20000f70
 8007abc:	0800b41c 	.word	0x0800b41c
 8007ac0:	08007c01 	.word	0x08007c01
 8007ac4:	20000f74 	.word	0x20000f74

08007ac8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	@ 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	623b      	str	r3, [r7, #32]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007af8:	4b19      	ldr	r3, [pc, #100]	@ (8007b60 <xTimerGenericCommand+0x98>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d02a      	beq.n	8007b56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2b05      	cmp	r3, #5
 8007b10:	dc18      	bgt.n	8007b44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b12:	f7ff fead 	bl	8007870 <xTaskGetSchedulerState>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d109      	bne.n	8007b30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b1c:	4b10      	ldr	r3, [pc, #64]	@ (8007b60 <xTimerGenericCommand+0x98>)
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	f107 0110 	add.w	r1, r7, #16
 8007b24:	2300      	movs	r3, #0
 8007b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b28:	f7fe fc88 	bl	800643c <xQueueGenericSend>
 8007b2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b2e:	e012      	b.n	8007b56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b30:	4b0b      	ldr	r3, [pc, #44]	@ (8007b60 <xTimerGenericCommand+0x98>)
 8007b32:	6818      	ldr	r0, [r3, #0]
 8007b34:	f107 0110 	add.w	r1, r7, #16
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f7fe fc7e 	bl	800643c <xQueueGenericSend>
 8007b40:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b42:	e008      	b.n	8007b56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b44:	4b06      	ldr	r3, [pc, #24]	@ (8007b60 <xTimerGenericCommand+0x98>)
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	f107 0110 	add.w	r1, r7, #16
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	f7fe fd76 	bl	8006640 <xQueueGenericSendFromISR>
 8007b54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3728      	adds	r7, #40	@ 0x28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20000f70 	.word	0x20000f70

08007b64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6e:	4b23      	ldr	r3, [pc, #140]	@ (8007bfc <prvProcessExpiredTimer+0x98>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe fb29 	bl	80061d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d023      	beq.n	8007bd8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	18d1      	adds	r1, r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	6978      	ldr	r0, [r7, #20]
 8007b9e:	f000 f8d5 	bl	8007d4c <prvInsertTimerInActiveList>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d020      	beq.n	8007bea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6978      	ldr	r0, [r7, #20]
 8007bb4:	f7ff ff88 	bl	8007ac8 <xTimerGenericCommand>
 8007bb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d114      	bne.n	8007bea <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	60fb      	str	r3, [r7, #12]
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	6978      	ldr	r0, [r7, #20]
 8007bf0:	4798      	blx	r3
}
 8007bf2:	bf00      	nop
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000f68 	.word	0x20000f68

08007c00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c08:	f107 0308 	add.w	r3, r7, #8
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 f859 	bl	8007cc4 <prvGetNextExpireTime>
 8007c12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4619      	mov	r1, r3
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f805 	bl	8007c28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c1e:	f000 f8d7 	bl	8007dd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c22:	bf00      	nop
 8007c24:	e7f0      	b.n	8007c08 <prvTimerTask+0x8>
	...

08007c28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c32:	f7ff fa37 	bl	80070a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c36:	f107 0308 	add.w	r3, r7, #8
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f866 	bl	8007d0c <prvSampleTimeNow>
 8007c40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d130      	bne.n	8007caa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <prvProcessTimerOrBlockTask+0x3c>
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d806      	bhi.n	8007c64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c56:	f7ff fa33 	bl	80070c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c5a:	68f9      	ldr	r1, [r7, #12]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ff81 	bl	8007b64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c62:	e024      	b.n	8007cae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c6a:	4b13      	ldr	r3, [pc, #76]	@ (8007cb8 <prvProcessTimerOrBlockTask+0x90>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <prvProcessTimerOrBlockTask+0x50>
 8007c74:	2301      	movs	r3, #1
 8007c76:	e000      	b.n	8007c7a <prvProcessTimerOrBlockTask+0x52>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cbc <prvProcessTimerOrBlockTask+0x94>)
 8007c7e:	6818      	ldr	r0, [r3, #0]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7fe ff93 	bl	8006bb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c8e:	f7ff fa17 	bl	80070c0 <xTaskResumeAll>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c98:	4b09      	ldr	r3, [pc, #36]	@ (8007cc0 <prvProcessTimerOrBlockTask+0x98>)
 8007c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	f3bf 8f6f 	isb	sy
}
 8007ca8:	e001      	b.n	8007cae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007caa:	f7ff fa09 	bl	80070c0 <xTaskResumeAll>
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000f6c 	.word	0x20000f6c
 8007cbc:	20000f70 	.word	0x20000f70
 8007cc0:	e000ed04 	.word	0xe000ed04

08007cc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8007d08 <prvGetNextExpireTime+0x44>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <prvGetNextExpireTime+0x16>
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	e000      	b.n	8007cdc <prvGetNextExpireTime+0x18>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d105      	bne.n	8007cf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ce8:	4b07      	ldr	r3, [pc, #28]	@ (8007d08 <prvGetNextExpireTime+0x44>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	e001      	b.n	8007cf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20000f68 	.word	0x20000f68

08007d0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d14:	f7ff fa72 	bl	80071fc <xTaskGetTickCount>
 8007d18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <prvSampleTimeNow+0x3c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d205      	bcs.n	8007d30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d24:	f000 f93a 	bl	8007f9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e002      	b.n	8007d36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d36:	4a04      	ldr	r2, [pc, #16]	@ (8007d48 <prvSampleTimeNow+0x3c>)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000f78 	.word	0x20000f78

08007d4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d812      	bhi.n	8007d98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	1ad2      	subs	r2, r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d302      	bcc.n	8007d86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d80:	2301      	movs	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	e01b      	b.n	8007dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d86:	4b10      	ldr	r3, [pc, #64]	@ (8007dc8 <prvInsertTimerInActiveList+0x7c>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4610      	mov	r0, r2
 8007d92:	f7fe f9e6 	bl	8006162 <vListInsert>
 8007d96:	e012      	b.n	8007dbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d206      	bcs.n	8007dae <prvInsertTimerInActiveList+0x62>
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d302      	bcc.n	8007dae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	e007      	b.n	8007dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dae:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <prvInsertTimerInActiveList+0x80>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f7fe f9d2 	bl	8006162 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007dbe:	697b      	ldr	r3, [r7, #20]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20000f6c 	.word	0x20000f6c
 8007dcc:	20000f68 	.word	0x20000f68

08007dd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08e      	sub	sp, #56	@ 0x38
 8007dd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dd6:	e0ce      	b.n	8007f76 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	da19      	bge.n	8007e12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dde:	1d3b      	adds	r3, r7, #4
 8007de0:	3304      	adds	r3, #4
 8007de2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10b      	bne.n	8007e02 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	61fb      	str	r3, [r7, #28]
}
 8007dfc:	bf00      	nop
 8007dfe:	bf00      	nop
 8007e00:	e7fd      	b.n	8007dfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e08:	6850      	ldr	r0, [r2, #4]
 8007e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e0c:	6892      	ldr	r2, [r2, #8]
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f2c0 80ae 	blt.w	8007f76 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe f9d2 	bl	80061d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e30:	463b      	mov	r3, r7
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff ff6a 	bl	8007d0c <prvSampleTimeNow>
 8007e38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b09      	cmp	r3, #9
 8007e3e:	f200 8097 	bhi.w	8007f70 <prvProcessReceivedCommands+0x1a0>
 8007e42:	a201      	add	r2, pc, #4	@ (adr r2, 8007e48 <prvProcessReceivedCommands+0x78>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e71 	.word	0x08007e71
 8007e4c:	08007e71 	.word	0x08007e71
 8007e50:	08007e71 	.word	0x08007e71
 8007e54:	08007ee7 	.word	0x08007ee7
 8007e58:	08007efb 	.word	0x08007efb
 8007e5c:	08007f47 	.word	0x08007f47
 8007e60:	08007e71 	.word	0x08007e71
 8007e64:	08007e71 	.word	0x08007e71
 8007e68:	08007ee7 	.word	0x08007ee7
 8007e6c:	08007efb 	.word	0x08007efb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	18d1      	adds	r1, r2, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e90:	f7ff ff5c 	bl	8007d4c <prvInsertTimerInActiveList>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d06c      	beq.n	8007f74 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d061      	beq.n	8007f74 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	441a      	add	r2, r3
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ec2:	f7ff fe01 	bl	8007ac8 <xTimerGenericCommand>
 8007ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d152      	bne.n	8007f74 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	61bb      	str	r3, [r7, #24]
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	e7fd      	b.n	8007ee2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eec:	f023 0301 	bic.w	r3, r3, #1
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007ef8:	e03d      	b.n	8007f76 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10b      	bne.n	8007f32 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	617b      	str	r3, [r7, #20]
}
 8007f2c:	bf00      	nop
 8007f2e:	bf00      	nop
 8007f30:	e7fd      	b.n	8007f2e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f34:	699a      	ldr	r2, [r3, #24]
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	18d1      	adds	r1, r2, r3
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f40:	f7ff ff04 	bl	8007d4c <prvInsertTimerInActiveList>
					break;
 8007f44:	e017      	b.n	8007f76 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d103      	bne.n	8007f5c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f56:	f000 fbe7 	bl	8008728 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f5a:	e00c      	b.n	8007f76 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f62:	f023 0301 	bic.w	r3, r3, #1
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f6e:	e002      	b.n	8007f76 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007f70:	bf00      	nop
 8007f72:	e000      	b.n	8007f76 <prvProcessReceivedCommands+0x1a6>
					break;
 8007f74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f76:	4b08      	ldr	r3, [pc, #32]	@ (8007f98 <prvProcessReceivedCommands+0x1c8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	1d39      	adds	r1, r7, #4
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fbfc 	bl	800677c <xQueueReceive>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f47f af26 	bne.w	8007dd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f8c:	bf00      	nop
 8007f8e:	bf00      	nop
 8007f90:	3730      	adds	r7, #48	@ 0x30
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000f70 	.word	0x20000f70

08007f9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fa2:	e049      	b.n	8008038 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8008060 <prvSwitchTimerLists+0xc4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fae:	4b2c      	ldr	r3, [pc, #176]	@ (8008060 <prvSwitchTimerLists+0xc4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe f909 	bl	80061d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d02f      	beq.n	8008038 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d90e      	bls.n	8008008 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8008060 <prvSwitchTimerLists+0xc4>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7fe f8ae 	bl	8006162 <vListInsert>
 8008006:	e017      	b.n	8008038 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008008:	2300      	movs	r3, #0
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	2100      	movs	r1, #0
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff fd58 	bl	8007ac8 <xTimerGenericCommand>
 8008018:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	603b      	str	r3, [r7, #0]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008038:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <prvSwitchTimerLists+0xc4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1b0      	bne.n	8007fa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008042:	4b07      	ldr	r3, [pc, #28]	@ (8008060 <prvSwitchTimerLists+0xc4>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008048:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <prvSwitchTimerLists+0xc8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a04      	ldr	r2, [pc, #16]	@ (8008060 <prvSwitchTimerLists+0xc4>)
 800804e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008050:	4a04      	ldr	r2, [pc, #16]	@ (8008064 <prvSwitchTimerLists+0xc8>)
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	6013      	str	r3, [r2, #0]
}
 8008056:	bf00      	nop
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000f68 	.word	0x20000f68
 8008064:	20000f6c 	.word	0x20000f6c

08008068 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800806e:	f000 f96b 	bl	8008348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008072:	4b15      	ldr	r3, [pc, #84]	@ (80080c8 <prvCheckForValidListAndQueue+0x60>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d120      	bne.n	80080bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800807a:	4814      	ldr	r0, [pc, #80]	@ (80080cc <prvCheckForValidListAndQueue+0x64>)
 800807c:	f7fe f820 	bl	80060c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008080:	4813      	ldr	r0, [pc, #76]	@ (80080d0 <prvCheckForValidListAndQueue+0x68>)
 8008082:	f7fe f81d 	bl	80060c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008086:	4b13      	ldr	r3, [pc, #76]	@ (80080d4 <prvCheckForValidListAndQueue+0x6c>)
 8008088:	4a10      	ldr	r2, [pc, #64]	@ (80080cc <prvCheckForValidListAndQueue+0x64>)
 800808a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800808c:	4b12      	ldr	r3, [pc, #72]	@ (80080d8 <prvCheckForValidListAndQueue+0x70>)
 800808e:	4a10      	ldr	r2, [pc, #64]	@ (80080d0 <prvCheckForValidListAndQueue+0x68>)
 8008090:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008092:	2300      	movs	r3, #0
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4b11      	ldr	r3, [pc, #68]	@ (80080dc <prvCheckForValidListAndQueue+0x74>)
 8008098:	4a11      	ldr	r2, [pc, #68]	@ (80080e0 <prvCheckForValidListAndQueue+0x78>)
 800809a:	2110      	movs	r1, #16
 800809c:	200a      	movs	r0, #10
 800809e:	f7fe f92d 	bl	80062fc <xQueueGenericCreateStatic>
 80080a2:	4603      	mov	r3, r0
 80080a4:	4a08      	ldr	r2, [pc, #32]	@ (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080a8:	4b07      	ldr	r3, [pc, #28]	@ (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080b0:	4b05      	ldr	r3, [pc, #20]	@ (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	490b      	ldr	r1, [pc, #44]	@ (80080e4 <prvCheckForValidListAndQueue+0x7c>)
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fd52 	bl	8006b60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080bc:	f000 f976 	bl	80083ac <vPortExitCritical>
}
 80080c0:	bf00      	nop
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000f70 	.word	0x20000f70
 80080cc:	20000f40 	.word	0x20000f40
 80080d0:	20000f54 	.word	0x20000f54
 80080d4:	20000f68 	.word	0x20000f68
 80080d8:	20000f6c 	.word	0x20000f6c
 80080dc:	2000101c 	.word	0x2000101c
 80080e0:	20000f7c 	.word	0x20000f7c
 80080e4:	0800b424 	.word	0x0800b424

080080e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3b04      	subs	r3, #4
 80080f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3b04      	subs	r3, #4
 8008106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3b04      	subs	r3, #4
 8008116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008118:	4a0c      	ldr	r2, [pc, #48]	@ (800814c <pxPortInitialiseStack+0x64>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3b14      	subs	r3, #20
 8008122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b04      	subs	r3, #4
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f06f 0202 	mvn.w	r2, #2
 8008136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3b20      	subs	r3, #32
 800813c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	08008151 	.word	0x08008151

08008150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800815a:	4b13      	ldr	r3, [pc, #76]	@ (80081a8 <prvTaskExitError+0x58>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d00b      	beq.n	800817c <prvTaskExitError+0x2c>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	60fb      	str	r3, [r7, #12]
}
 8008176:	bf00      	nop
 8008178:	bf00      	nop
 800817a:	e7fd      	b.n	8008178 <prvTaskExitError+0x28>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60bb      	str	r3, [r7, #8]
}
 800818e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008190:	bf00      	nop
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0fc      	beq.n	8008192 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008198:	bf00      	nop
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	2000000c 	.word	0x2000000c
 80081ac:	00000000 	.word	0x00000000

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	@ (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	4770      	bx	lr
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst2>:
 80081d0:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081d8:	4808      	ldr	r0, [pc, #32]	@ (80081fc <prvPortStartFirstTask+0x24>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8814 	msr	CONTROL, r0
 80081ea:	b662      	cpsie	i
 80081ec:	b661      	cpsie	f
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	df00      	svc	0
 80081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081fa:	bf00      	nop
 80081fc:	e000ed08 	.word	0xe000ed08

08008200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008206:	4b47      	ldr	r3, [pc, #284]	@ (8008324 <xPortStartScheduler+0x124>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a47      	ldr	r2, [pc, #284]	@ (8008328 <xPortStartScheduler+0x128>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10b      	bne.n	8008228 <xPortStartScheduler+0x28>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	613b      	str	r3, [r7, #16]
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008228:	4b3e      	ldr	r3, [pc, #248]	@ (8008324 <xPortStartScheduler+0x124>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a3f      	ldr	r2, [pc, #252]	@ (800832c <xPortStartScheduler+0x12c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d10b      	bne.n	800824a <xPortStartScheduler+0x4a>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	60fb      	str	r3, [r7, #12]
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	e7fd      	b.n	8008246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800824a:	4b39      	ldr	r3, [pc, #228]	@ (8008330 <xPortStartScheduler+0x130>)
 800824c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	22ff      	movs	r2, #255	@ 0xff
 800825a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800826c:	b2da      	uxtb	r2, r3
 800826e:	4b31      	ldr	r3, [pc, #196]	@ (8008334 <xPortStartScheduler+0x134>)
 8008270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008272:	4b31      	ldr	r3, [pc, #196]	@ (8008338 <xPortStartScheduler+0x138>)
 8008274:	2207      	movs	r2, #7
 8008276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008278:	e009      	b.n	800828e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800827a:	4b2f      	ldr	r3, [pc, #188]	@ (8008338 <xPortStartScheduler+0x138>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3b01      	subs	r3, #1
 8008280:	4a2d      	ldr	r2, [pc, #180]	@ (8008338 <xPortStartScheduler+0x138>)
 8008282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008296:	2b80      	cmp	r3, #128	@ 0x80
 8008298:	d0ef      	beq.n	800827a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800829a:	4b27      	ldr	r3, [pc, #156]	@ (8008338 <xPortStartScheduler+0x138>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f1c3 0307 	rsb	r3, r3, #7
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d00b      	beq.n	80082be <xPortStartScheduler+0xbe>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	60bb      	str	r3, [r7, #8]
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	e7fd      	b.n	80082ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082be:	4b1e      	ldr	r3, [pc, #120]	@ (8008338 <xPortStartScheduler+0x138>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008338 <xPortStartScheduler+0x138>)
 80082c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008338 <xPortStartScheduler+0x138>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082d0:	4a19      	ldr	r2, [pc, #100]	@ (8008338 <xPortStartScheduler+0x138>)
 80082d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082dc:	4b17      	ldr	r3, [pc, #92]	@ (800833c <xPortStartScheduler+0x13c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a16      	ldr	r2, [pc, #88]	@ (800833c <xPortStartScheduler+0x13c>)
 80082e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082e8:	4b14      	ldr	r3, [pc, #80]	@ (800833c <xPortStartScheduler+0x13c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a13      	ldr	r2, [pc, #76]	@ (800833c <xPortStartScheduler+0x13c>)
 80082ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082f4:	f000 f8da 	bl	80084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082f8:	4b11      	ldr	r3, [pc, #68]	@ (8008340 <xPortStartScheduler+0x140>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082fe:	f000 f8f9 	bl	80084f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008302:	4b10      	ldr	r3, [pc, #64]	@ (8008344 <xPortStartScheduler+0x144>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a0f      	ldr	r2, [pc, #60]	@ (8008344 <xPortStartScheduler+0x144>)
 8008308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800830c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800830e:	f7ff ff63 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008312:	f7ff f83d 	bl	8007390 <vTaskSwitchContext>
	prvTaskExitError();
 8008316:	f7ff ff1b 	bl	8008150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	e000ed00 	.word	0xe000ed00
 8008328:	410fc271 	.word	0x410fc271
 800832c:	410fc270 	.word	0x410fc270
 8008330:	e000e400 	.word	0xe000e400
 8008334:	2000106c 	.word	0x2000106c
 8008338:	20001070 	.word	0x20001070
 800833c:	e000ed20 	.word	0xe000ed20
 8008340:	2000000c 	.word	0x2000000c
 8008344:	e000ef34 	.word	0xe000ef34

08008348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008362:	4b10      	ldr	r3, [pc, #64]	@ (80083a4 <vPortEnterCritical+0x5c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3301      	adds	r3, #1
 8008368:	4a0e      	ldr	r2, [pc, #56]	@ (80083a4 <vPortEnterCritical+0x5c>)
 800836a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800836c:	4b0d      	ldr	r3, [pc, #52]	@ (80083a4 <vPortEnterCritical+0x5c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d110      	bne.n	8008396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008374:	4b0c      	ldr	r3, [pc, #48]	@ (80083a8 <vPortEnterCritical+0x60>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <vPortEnterCritical+0x4e>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	603b      	str	r3, [r7, #0]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <vPortEnterCritical+0x4a>
	}
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	2000000c 	.word	0x2000000c
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083b2:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <vPortExitCritical+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <vPortExitCritical+0x26>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	607b      	str	r3, [r7, #4]
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083d2:	4b0a      	ldr	r3, [pc, #40]	@ (80083fc <vPortExitCritical+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	4a08      	ldr	r2, [pc, #32]	@ (80083fc <vPortExitCritical+0x50>)
 80083da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083dc:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <vPortExitCritical+0x50>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d105      	bne.n	80083f0 <vPortExitCritical+0x44>
 80083e4:	2300      	movs	r3, #0
 80083e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f383 8811 	msr	BASEPRI, r3
}
 80083ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	2000000c 	.word	0x2000000c

08008400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008400:	f3ef 8009 	mrs	r0, PSP
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4b15      	ldr	r3, [pc, #84]	@ (8008460 <pxCurrentTCBConst>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f01e 0f10 	tst.w	lr, #16
 8008410:	bf08      	it	eq
 8008412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	6010      	str	r0, [r2, #0]
 800841c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008424:	f380 8811 	msr	BASEPRI, r0
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f7fe ffae 	bl	8007390 <vTaskSwitchContext>
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	f380 8811 	msr	BASEPRI, r0
 800843c:	bc09      	pop	{r0, r3}
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	6808      	ldr	r0, [r1, #0]
 8008442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	f01e 0f10 	tst.w	lr, #16
 800844a:	bf08      	it	eq
 800844c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008450:	f380 8809 	msr	PSP, r0
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst>:
 8008460:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008482:	f7fe fecb 	bl	800721c <xTaskIncrementTick>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848c:	4b06      	ldr	r3, [pc, #24]	@ (80084a8 <xPortSysTickHandler+0x40>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
}
 800849e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <vPortSetupTimerInterrupt+0x38>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	@ (80084e8 <vPortSetupTimerInterrupt+0x3c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	@ (80084ec <vPortSetupTimerInterrupt+0x40>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	4a09      	ldr	r2, [pc, #36]	@ (80084f0 <vPortSetupTimerInterrupt+0x44>)
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ce:	4b04      	ldr	r3, [pc, #16]	@ (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	e000e010 	.word	0xe000e010
 80084e4:	e000e018 	.word	0xe000e018
 80084e8:	20000000 	.word	0x20000000
 80084ec:	10624dd3 	.word	0x10624dd3
 80084f0:	e000e014 	.word	0xe000e014

080084f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008504 <vPortEnableVFP+0x10>
 80084f8:	6801      	ldr	r1, [r0, #0]
 80084fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084fe:	6001      	str	r1, [r0, #0]
 8008500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008502:	bf00      	nop
 8008504:	e000ed88 	.word	0xe000ed88

08008508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800850e:	f3ef 8305 	mrs	r3, IPSR
 8008512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d915      	bls.n	8008546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800851a:	4a18      	ldr	r2, [pc, #96]	@ (800857c <vPortValidateInterruptPriority+0x74>)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008524:	4b16      	ldr	r3, [pc, #88]	@ (8008580 <vPortValidateInterruptPriority+0x78>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	7afa      	ldrb	r2, [r7, #11]
 800852a:	429a      	cmp	r2, r3
 800852c:	d20b      	bcs.n	8008546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	e7fd      	b.n	8008542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008546:	4b0f      	ldr	r3, [pc, #60]	@ (8008584 <vPortValidateInterruptPriority+0x7c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800854e:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <vPortValidateInterruptPriority+0x80>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d90b      	bls.n	800856e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	603b      	str	r3, [r7, #0]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <vPortValidateInterruptPriority+0x62>
	}
 800856e:	bf00      	nop
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	e000e3f0 	.word	0xe000e3f0
 8008580:	2000106c 	.word	0x2000106c
 8008584:	e000ed0c 	.word	0xe000ed0c
 8008588:	20001070 	.word	0x20001070

0800858c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	@ 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008598:	f7fe fd84 	bl	80070a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800859c:	4b5c      	ldr	r3, [pc, #368]	@ (8008710 <pvPortMalloc+0x184>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085a4:	f000 f924 	bl	80087f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008714 <pvPortMalloc+0x188>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f040 8095 	bne.w	80086e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01e      	beq.n	80085fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80085bc:	2208      	movs	r2, #8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d015      	beq.n	80085fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f023 0307 	bic.w	r3, r3, #7
 80085d4:	3308      	adds	r3, #8
 80085d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f003 0307 	and.w	r3, r3, #7
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <pvPortMalloc+0x6e>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	617b      	str	r3, [r7, #20]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d06f      	beq.n	80086e0 <pvPortMalloc+0x154>
 8008600:	4b45      	ldr	r3, [pc, #276]	@ (8008718 <pvPortMalloc+0x18c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d86a      	bhi.n	80086e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800860a:	4b44      	ldr	r3, [pc, #272]	@ (800871c <pvPortMalloc+0x190>)
 800860c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800860e:	4b43      	ldr	r3, [pc, #268]	@ (800871c <pvPortMalloc+0x190>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008614:	e004      	b.n	8008620 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d903      	bls.n	8008632 <pvPortMalloc+0xa6>
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f1      	bne.n	8008616 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008632:	4b37      	ldr	r3, [pc, #220]	@ (8008710 <pvPortMalloc+0x184>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008638:	429a      	cmp	r2, r3
 800863a:	d051      	beq.n	80086e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2208      	movs	r2, #8
 8008642:	4413      	add	r3, r2
 8008644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	2308      	movs	r3, #8
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	429a      	cmp	r2, r3
 800865c:	d920      	bls.n	80086a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800865e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <pvPortMalloc+0xfc>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	613b      	str	r3, [r7, #16]
}
 8008682:	bf00      	nop
 8008684:	bf00      	nop
 8008686:	e7fd      	b.n	8008684 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800869a:	69b8      	ldr	r0, [r7, #24]
 800869c:	f000 f90a 	bl	80088b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008718 <pvPortMalloc+0x18c>)
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008718 <pvPortMalloc+0x18c>)
 80086ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008718 <pvPortMalloc+0x18c>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008720 <pvPortMalloc+0x194>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d203      	bcs.n	80086c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086ba:	4b17      	ldr	r3, [pc, #92]	@ (8008718 <pvPortMalloc+0x18c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a18      	ldr	r2, [pc, #96]	@ (8008720 <pvPortMalloc+0x194>)
 80086c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4b13      	ldr	r3, [pc, #76]	@ (8008714 <pvPortMalloc+0x188>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086d6:	4b13      	ldr	r3, [pc, #76]	@ (8008724 <pvPortMalloc+0x198>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	4a11      	ldr	r2, [pc, #68]	@ (8008724 <pvPortMalloc+0x198>)
 80086de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086e0:	f7fe fcee 	bl	80070c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <pvPortMalloc+0x17a>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	60fb      	str	r3, [r7, #12]
}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	e7fd      	b.n	8008702 <pvPortMalloc+0x176>
	return pvReturn;
 8008706:	69fb      	ldr	r3, [r7, #28]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3728      	adds	r7, #40	@ 0x28
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20004c7c 	.word	0x20004c7c
 8008714:	20004c90 	.word	0x20004c90
 8008718:	20004c80 	.word	0x20004c80
 800871c:	20004c74 	.word	0x20004c74
 8008720:	20004c84 	.word	0x20004c84
 8008724:	20004c88 	.word	0x20004c88

08008728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d04f      	beq.n	80087da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800873a:	2308      	movs	r3, #8
 800873c:	425b      	negs	r3, r3
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4413      	add	r3, r2
 8008742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	4b25      	ldr	r3, [pc, #148]	@ (80087e4 <vPortFree+0xbc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4013      	ands	r3, r2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10b      	bne.n	800876e <vPortFree+0x46>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60fb      	str	r3, [r7, #12]
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	e7fd      	b.n	800876a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <vPortFree+0x66>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	60bb      	str	r3, [r7, #8]
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	4b14      	ldr	r3, [pc, #80]	@ (80087e4 <vPortFree+0xbc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4013      	ands	r3, r2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01e      	beq.n	80087da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11a      	bne.n	80087da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	4b0e      	ldr	r3, [pc, #56]	@ (80087e4 <vPortFree+0xbc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	43db      	mvns	r3, r3
 80087ae:	401a      	ands	r2, r3
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b4:	f7fe fc76 	bl	80070a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <vPortFree+0xc0>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4413      	add	r3, r2
 80087c2:	4a09      	ldr	r2, [pc, #36]	@ (80087e8 <vPortFree+0xc0>)
 80087c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087c6:	6938      	ldr	r0, [r7, #16]
 80087c8:	f000 f874 	bl	80088b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087cc:	4b07      	ldr	r3, [pc, #28]	@ (80087ec <vPortFree+0xc4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	4a06      	ldr	r2, [pc, #24]	@ (80087ec <vPortFree+0xc4>)
 80087d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087d6:	f7fe fc73 	bl	80070c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087da:	bf00      	nop
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20004c90 	.word	0x20004c90
 80087e8:	20004c80 	.word	0x20004c80
 80087ec:	20004c8c 	.word	0x20004c8c

080087f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80087fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087fc:	4b27      	ldr	r3, [pc, #156]	@ (800889c <prvHeapInit+0xac>)
 80087fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00c      	beq.n	8008824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3307      	adds	r3, #7
 800880e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0307 	bic.w	r3, r3, #7
 8008816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	4a1f      	ldr	r2, [pc, #124]	@ (800889c <prvHeapInit+0xac>)
 8008820:	4413      	add	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008828:	4a1d      	ldr	r2, [pc, #116]	@ (80088a0 <prvHeapInit+0xb0>)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800882e:	4b1c      	ldr	r3, [pc, #112]	@ (80088a0 <prvHeapInit+0xb0>)
 8008830:	2200      	movs	r2, #0
 8008832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	4413      	add	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800883c:	2208      	movs	r2, #8
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a15      	ldr	r2, [pc, #84]	@ (80088a4 <prvHeapInit+0xb4>)
 8008850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008852:	4b14      	ldr	r3, [pc, #80]	@ (80088a4 <prvHeapInit+0xb4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2200      	movs	r2, #0
 8008858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800885a:	4b12      	ldr	r3, [pc, #72]	@ (80088a4 <prvHeapInit+0xb4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008870:	4b0c      	ldr	r3, [pc, #48]	@ (80088a4 <prvHeapInit+0xb4>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a0a      	ldr	r2, [pc, #40]	@ (80088a8 <prvHeapInit+0xb8>)
 800887e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4a09      	ldr	r2, [pc, #36]	@ (80088ac <prvHeapInit+0xbc>)
 8008886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008888:	4b09      	ldr	r3, [pc, #36]	@ (80088b0 <prvHeapInit+0xc0>)
 800888a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800888e:	601a      	str	r2, [r3, #0]
}
 8008890:	bf00      	nop
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20001074 	.word	0x20001074
 80088a0:	20004c74 	.word	0x20004c74
 80088a4:	20004c7c 	.word	0x20004c7c
 80088a8:	20004c84 	.word	0x20004c84
 80088ac:	20004c80 	.word	0x20004c80
 80088b0:	20004c90 	.word	0x20004c90

080088b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088bc:	4b28      	ldr	r3, [pc, #160]	@ (8008960 <prvInsertBlockIntoFreeList+0xac>)
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	e002      	b.n	80088c8 <prvInsertBlockIntoFreeList+0x14>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d8f7      	bhi.n	80088c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d108      	bne.n	80088f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	441a      	add	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d118      	bne.n	800893c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b15      	ldr	r3, [pc, #84]	@ (8008964 <prvInsertBlockIntoFreeList+0xb0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d00d      	beq.n	8008932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	441a      	add	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	e008      	b.n	8008944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008932:	4b0c      	ldr	r3, [pc, #48]	@ (8008964 <prvInsertBlockIntoFreeList+0xb0>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e003      	b.n	8008944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	429a      	cmp	r2, r3
 800894a:	d002      	beq.n	8008952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008952:	bf00      	nop
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20004c74 	.word	0x20004c74
 8008964:	20004c7c 	.word	0x20004c7c

08008968 <malloc>:
 8008968:	4b02      	ldr	r3, [pc, #8]	@ (8008974 <malloc+0xc>)
 800896a:	4601      	mov	r1, r0
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	f000 b82d 	b.w	80089cc <_malloc_r>
 8008972:	bf00      	nop
 8008974:	2000001c 	.word	0x2000001c

08008978 <free>:
 8008978:	4b02      	ldr	r3, [pc, #8]	@ (8008984 <free+0xc>)
 800897a:	4601      	mov	r1, r0
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	f001 bdff 	b.w	800a580 <_free_r>
 8008982:	bf00      	nop
 8008984:	2000001c 	.word	0x2000001c

08008988 <sbrk_aligned>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	4e0f      	ldr	r6, [pc, #60]	@ (80089c8 <sbrk_aligned+0x40>)
 800898c:	460c      	mov	r4, r1
 800898e:	6831      	ldr	r1, [r6, #0]
 8008990:	4605      	mov	r5, r0
 8008992:	b911      	cbnz	r1, 800899a <sbrk_aligned+0x12>
 8008994:	f000 ff48 	bl	8009828 <_sbrk_r>
 8008998:	6030      	str	r0, [r6, #0]
 800899a:	4621      	mov	r1, r4
 800899c:	4628      	mov	r0, r5
 800899e:	f000 ff43 	bl	8009828 <_sbrk_r>
 80089a2:	1c43      	adds	r3, r0, #1
 80089a4:	d103      	bne.n	80089ae <sbrk_aligned+0x26>
 80089a6:	f04f 34ff 	mov.w	r4, #4294967295
 80089aa:	4620      	mov	r0, r4
 80089ac:	bd70      	pop	{r4, r5, r6, pc}
 80089ae:	1cc4      	adds	r4, r0, #3
 80089b0:	f024 0403 	bic.w	r4, r4, #3
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d0f8      	beq.n	80089aa <sbrk_aligned+0x22>
 80089b8:	1a21      	subs	r1, r4, r0
 80089ba:	4628      	mov	r0, r5
 80089bc:	f000 ff34 	bl	8009828 <_sbrk_r>
 80089c0:	3001      	adds	r0, #1
 80089c2:	d1f2      	bne.n	80089aa <sbrk_aligned+0x22>
 80089c4:	e7ef      	b.n	80089a6 <sbrk_aligned+0x1e>
 80089c6:	bf00      	nop
 80089c8:	20004c94 	.word	0x20004c94

080089cc <_malloc_r>:
 80089cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089d0:	1ccd      	adds	r5, r1, #3
 80089d2:	f025 0503 	bic.w	r5, r5, #3
 80089d6:	3508      	adds	r5, #8
 80089d8:	2d0c      	cmp	r5, #12
 80089da:	bf38      	it	cc
 80089dc:	250c      	movcc	r5, #12
 80089de:	2d00      	cmp	r5, #0
 80089e0:	4606      	mov	r6, r0
 80089e2:	db01      	blt.n	80089e8 <_malloc_r+0x1c>
 80089e4:	42a9      	cmp	r1, r5
 80089e6:	d904      	bls.n	80089f2 <_malloc_r+0x26>
 80089e8:	230c      	movs	r3, #12
 80089ea:	6033      	str	r3, [r6, #0]
 80089ec:	2000      	movs	r0, #0
 80089ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ac8 <_malloc_r+0xfc>
 80089f6:	f000 f869 	bl	8008acc <__malloc_lock>
 80089fa:	f8d8 3000 	ldr.w	r3, [r8]
 80089fe:	461c      	mov	r4, r3
 8008a00:	bb44      	cbnz	r4, 8008a54 <_malloc_r+0x88>
 8008a02:	4629      	mov	r1, r5
 8008a04:	4630      	mov	r0, r6
 8008a06:	f7ff ffbf 	bl	8008988 <sbrk_aligned>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	d158      	bne.n	8008ac2 <_malloc_r+0xf6>
 8008a10:	f8d8 4000 	ldr.w	r4, [r8]
 8008a14:	4627      	mov	r7, r4
 8008a16:	2f00      	cmp	r7, #0
 8008a18:	d143      	bne.n	8008aa2 <_malloc_r+0xd6>
 8008a1a:	2c00      	cmp	r4, #0
 8008a1c:	d04b      	beq.n	8008ab6 <_malloc_r+0xea>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	4639      	mov	r1, r7
 8008a22:	4630      	mov	r0, r6
 8008a24:	eb04 0903 	add.w	r9, r4, r3
 8008a28:	f000 fefe 	bl	8009828 <_sbrk_r>
 8008a2c:	4581      	cmp	r9, r0
 8008a2e:	d142      	bne.n	8008ab6 <_malloc_r+0xea>
 8008a30:	6821      	ldr	r1, [r4, #0]
 8008a32:	1a6d      	subs	r5, r5, r1
 8008a34:	4629      	mov	r1, r5
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff ffa6 	bl	8008988 <sbrk_aligned>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d03a      	beq.n	8008ab6 <_malloc_r+0xea>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	442b      	add	r3, r5
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	f8d8 3000 	ldr.w	r3, [r8]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	bb62      	cbnz	r2, 8008aa8 <_malloc_r+0xdc>
 8008a4e:	f8c8 7000 	str.w	r7, [r8]
 8008a52:	e00f      	b.n	8008a74 <_malloc_r+0xa8>
 8008a54:	6822      	ldr	r2, [r4, #0]
 8008a56:	1b52      	subs	r2, r2, r5
 8008a58:	d420      	bmi.n	8008a9c <_malloc_r+0xd0>
 8008a5a:	2a0b      	cmp	r2, #11
 8008a5c:	d917      	bls.n	8008a8e <_malloc_r+0xc2>
 8008a5e:	1961      	adds	r1, r4, r5
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	6025      	str	r5, [r4, #0]
 8008a64:	bf18      	it	ne
 8008a66:	6059      	strne	r1, [r3, #4]
 8008a68:	6863      	ldr	r3, [r4, #4]
 8008a6a:	bf08      	it	eq
 8008a6c:	f8c8 1000 	streq.w	r1, [r8]
 8008a70:	5162      	str	r2, [r4, r5]
 8008a72:	604b      	str	r3, [r1, #4]
 8008a74:	4630      	mov	r0, r6
 8008a76:	f000 f82f 	bl	8008ad8 <__malloc_unlock>
 8008a7a:	f104 000b 	add.w	r0, r4, #11
 8008a7e:	1d23      	adds	r3, r4, #4
 8008a80:	f020 0007 	bic.w	r0, r0, #7
 8008a84:	1ac2      	subs	r2, r0, r3
 8008a86:	bf1c      	itt	ne
 8008a88:	1a1b      	subne	r3, r3, r0
 8008a8a:	50a3      	strne	r3, [r4, r2]
 8008a8c:	e7af      	b.n	80089ee <_malloc_r+0x22>
 8008a8e:	6862      	ldr	r2, [r4, #4]
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	bf0c      	ite	eq
 8008a94:	f8c8 2000 	streq.w	r2, [r8]
 8008a98:	605a      	strne	r2, [r3, #4]
 8008a9a:	e7eb      	b.n	8008a74 <_malloc_r+0xa8>
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	6864      	ldr	r4, [r4, #4]
 8008aa0:	e7ae      	b.n	8008a00 <_malloc_r+0x34>
 8008aa2:	463c      	mov	r4, r7
 8008aa4:	687f      	ldr	r7, [r7, #4]
 8008aa6:	e7b6      	b.n	8008a16 <_malloc_r+0x4a>
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	d1fb      	bne.n	8008aa8 <_malloc_r+0xdc>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	6053      	str	r3, [r2, #4]
 8008ab4:	e7de      	b.n	8008a74 <_malloc_r+0xa8>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	6033      	str	r3, [r6, #0]
 8008aba:	4630      	mov	r0, r6
 8008abc:	f000 f80c 	bl	8008ad8 <__malloc_unlock>
 8008ac0:	e794      	b.n	80089ec <_malloc_r+0x20>
 8008ac2:	6005      	str	r5, [r0, #0]
 8008ac4:	e7d6      	b.n	8008a74 <_malloc_r+0xa8>
 8008ac6:	bf00      	nop
 8008ac8:	20004c98 	.word	0x20004c98

08008acc <__malloc_lock>:
 8008acc:	4801      	ldr	r0, [pc, #4]	@ (8008ad4 <__malloc_lock+0x8>)
 8008ace:	f000 bef8 	b.w	80098c2 <__retarget_lock_acquire_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	20004ddc 	.word	0x20004ddc

08008ad8 <__malloc_unlock>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	@ (8008ae0 <__malloc_unlock+0x8>)
 8008ada:	f000 bef3 	b.w	80098c4 <__retarget_lock_release_recursive>
 8008ade:	bf00      	nop
 8008ae0:	20004ddc 	.word	0x20004ddc

08008ae4 <__cvt>:
 8008ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae8:	ec57 6b10 	vmov	r6, r7, d0
 8008aec:	2f00      	cmp	r7, #0
 8008aee:	460c      	mov	r4, r1
 8008af0:	4619      	mov	r1, r3
 8008af2:	463b      	mov	r3, r7
 8008af4:	bfbb      	ittet	lt
 8008af6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008afa:	461f      	movlt	r7, r3
 8008afc:	2300      	movge	r3, #0
 8008afe:	232d      	movlt	r3, #45	@ 0x2d
 8008b00:	700b      	strb	r3, [r1, #0]
 8008b02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008b08:	4691      	mov	r9, r2
 8008b0a:	f023 0820 	bic.w	r8, r3, #32
 8008b0e:	bfbc      	itt	lt
 8008b10:	4632      	movlt	r2, r6
 8008b12:	4616      	movlt	r6, r2
 8008b14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b18:	d005      	beq.n	8008b26 <__cvt+0x42>
 8008b1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b1e:	d100      	bne.n	8008b22 <__cvt+0x3e>
 8008b20:	3401      	adds	r4, #1
 8008b22:	2102      	movs	r1, #2
 8008b24:	e000      	b.n	8008b28 <__cvt+0x44>
 8008b26:	2103      	movs	r1, #3
 8008b28:	ab03      	add	r3, sp, #12
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	ab02      	add	r3, sp, #8
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	ec47 6b10 	vmov	d0, r6, r7
 8008b34:	4653      	mov	r3, sl
 8008b36:	4622      	mov	r2, r4
 8008b38:	f000 ff5e 	bl	80099f8 <_dtoa_r>
 8008b3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b40:	4605      	mov	r5, r0
 8008b42:	d119      	bne.n	8008b78 <__cvt+0x94>
 8008b44:	f019 0f01 	tst.w	r9, #1
 8008b48:	d00e      	beq.n	8008b68 <__cvt+0x84>
 8008b4a:	eb00 0904 	add.w	r9, r0, r4
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2300      	movs	r3, #0
 8008b52:	4630      	mov	r0, r6
 8008b54:	4639      	mov	r1, r7
 8008b56:	f7f7 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b5a:	b108      	cbz	r0, 8008b60 <__cvt+0x7c>
 8008b5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b60:	2230      	movs	r2, #48	@ 0x30
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	454b      	cmp	r3, r9
 8008b66:	d31e      	bcc.n	8008ba6 <__cvt+0xc2>
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b6c:	1b5b      	subs	r3, r3, r5
 8008b6e:	4628      	mov	r0, r5
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	b004      	add	sp, #16
 8008b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b7c:	eb00 0904 	add.w	r9, r0, r4
 8008b80:	d1e5      	bne.n	8008b4e <__cvt+0x6a>
 8008b82:	7803      	ldrb	r3, [r0, #0]
 8008b84:	2b30      	cmp	r3, #48	@ 0x30
 8008b86:	d10a      	bne.n	8008b9e <__cvt+0xba>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	4639      	mov	r1, r7
 8008b90:	f7f7 ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b94:	b918      	cbnz	r0, 8008b9e <__cvt+0xba>
 8008b96:	f1c4 0401 	rsb	r4, r4, #1
 8008b9a:	f8ca 4000 	str.w	r4, [sl]
 8008b9e:	f8da 3000 	ldr.w	r3, [sl]
 8008ba2:	4499      	add	r9, r3
 8008ba4:	e7d3      	b.n	8008b4e <__cvt+0x6a>
 8008ba6:	1c59      	adds	r1, r3, #1
 8008ba8:	9103      	str	r1, [sp, #12]
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	e7d9      	b.n	8008b62 <__cvt+0x7e>

08008bae <__exponent>:
 8008bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	bfba      	itte	lt
 8008bb4:	4249      	neglt	r1, r1
 8008bb6:	232d      	movlt	r3, #45	@ 0x2d
 8008bb8:	232b      	movge	r3, #43	@ 0x2b
 8008bba:	2909      	cmp	r1, #9
 8008bbc:	7002      	strb	r2, [r0, #0]
 8008bbe:	7043      	strb	r3, [r0, #1]
 8008bc0:	dd29      	ble.n	8008c16 <__exponent+0x68>
 8008bc2:	f10d 0307 	add.w	r3, sp, #7
 8008bc6:	461d      	mov	r5, r3
 8008bc8:	270a      	movs	r7, #10
 8008bca:	461a      	mov	r2, r3
 8008bcc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008bd0:	fb07 1416 	mls	r4, r7, r6, r1
 8008bd4:	3430      	adds	r4, #48	@ 0x30
 8008bd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bda:	460c      	mov	r4, r1
 8008bdc:	2c63      	cmp	r4, #99	@ 0x63
 8008bde:	f103 33ff 	add.w	r3, r3, #4294967295
 8008be2:	4631      	mov	r1, r6
 8008be4:	dcf1      	bgt.n	8008bca <__exponent+0x1c>
 8008be6:	3130      	adds	r1, #48	@ 0x30
 8008be8:	1e94      	subs	r4, r2, #2
 8008bea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bee:	1c41      	adds	r1, r0, #1
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	42ab      	cmp	r3, r5
 8008bf4:	d30a      	bcc.n	8008c0c <__exponent+0x5e>
 8008bf6:	f10d 0309 	add.w	r3, sp, #9
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	42ac      	cmp	r4, r5
 8008bfe:	bf88      	it	hi
 8008c00:	2300      	movhi	r3, #0
 8008c02:	3302      	adds	r3, #2
 8008c04:	4403      	add	r3, r0
 8008c06:	1a18      	subs	r0, r3, r0
 8008c08:	b003      	add	sp, #12
 8008c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c14:	e7ed      	b.n	8008bf2 <__exponent+0x44>
 8008c16:	2330      	movs	r3, #48	@ 0x30
 8008c18:	3130      	adds	r1, #48	@ 0x30
 8008c1a:	7083      	strb	r3, [r0, #2]
 8008c1c:	70c1      	strb	r1, [r0, #3]
 8008c1e:	1d03      	adds	r3, r0, #4
 8008c20:	e7f1      	b.n	8008c06 <__exponent+0x58>
	...

08008c24 <_printf_float>:
 8008c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	b08d      	sub	sp, #52	@ 0x34
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c30:	4616      	mov	r6, r2
 8008c32:	461f      	mov	r7, r3
 8008c34:	4605      	mov	r5, r0
 8008c36:	f000 fdbf 	bl	80097b8 <_localeconv_r>
 8008c3a:	6803      	ldr	r3, [r0, #0]
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f7 fb16 	bl	8000270 <strlen>
 8008c44:	2300      	movs	r3, #0
 8008c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c48:	f8d8 3000 	ldr.w	r3, [r8]
 8008c4c:	9005      	str	r0, [sp, #20]
 8008c4e:	3307      	adds	r3, #7
 8008c50:	f023 0307 	bic.w	r3, r3, #7
 8008c54:	f103 0208 	add.w	r2, r3, #8
 8008c58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c5c:	f8d4 b000 	ldr.w	fp, [r4]
 8008c60:	f8c8 2000 	str.w	r2, [r8]
 8008c64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c6c:	9307      	str	r3, [sp, #28]
 8008c6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c7a:	4b9c      	ldr	r3, [pc, #624]	@ (8008eec <_printf_float+0x2c8>)
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c80:	f7f7 ff54 	bl	8000b2c <__aeabi_dcmpun>
 8008c84:	bb70      	cbnz	r0, 8008ce4 <_printf_float+0xc0>
 8008c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c8a:	4b98      	ldr	r3, [pc, #608]	@ (8008eec <_printf_float+0x2c8>)
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	f7f7 ff2e 	bl	8000af0 <__aeabi_dcmple>
 8008c94:	bb30      	cbnz	r0, 8008ce4 <_printf_float+0xc0>
 8008c96:	2200      	movs	r2, #0
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	f7f7 ff1d 	bl	8000adc <__aeabi_dcmplt>
 8008ca2:	b110      	cbz	r0, 8008caa <_printf_float+0x86>
 8008ca4:	232d      	movs	r3, #45	@ 0x2d
 8008ca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008caa:	4a91      	ldr	r2, [pc, #580]	@ (8008ef0 <_printf_float+0x2cc>)
 8008cac:	4b91      	ldr	r3, [pc, #580]	@ (8008ef4 <_printf_float+0x2d0>)
 8008cae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cb2:	bf94      	ite	ls
 8008cb4:	4690      	movls	r8, r2
 8008cb6:	4698      	movhi	r8, r3
 8008cb8:	2303      	movs	r3, #3
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	f02b 0304 	bic.w	r3, fp, #4
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	f04f 0900 	mov.w	r9, #0
 8008cc6:	9700      	str	r7, [sp, #0]
 8008cc8:	4633      	mov	r3, r6
 8008cca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008ccc:	4621      	mov	r1, r4
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f000 f9d2 	bl	8009078 <_printf_common>
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	f040 808d 	bne.w	8008df4 <_printf_float+0x1d0>
 8008cda:	f04f 30ff 	mov.w	r0, #4294967295
 8008cde:	b00d      	add	sp, #52	@ 0x34
 8008ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce4:	4642      	mov	r2, r8
 8008ce6:	464b      	mov	r3, r9
 8008ce8:	4640      	mov	r0, r8
 8008cea:	4649      	mov	r1, r9
 8008cec:	f7f7 ff1e 	bl	8000b2c <__aeabi_dcmpun>
 8008cf0:	b140      	cbz	r0, 8008d04 <_printf_float+0xe0>
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bfbc      	itt	lt
 8008cf8:	232d      	movlt	r3, #45	@ 0x2d
 8008cfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8008ef8 <_printf_float+0x2d4>)
 8008d00:	4b7e      	ldr	r3, [pc, #504]	@ (8008efc <_printf_float+0x2d8>)
 8008d02:	e7d4      	b.n	8008cae <_printf_float+0x8a>
 8008d04:	6863      	ldr	r3, [r4, #4]
 8008d06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008d0a:	9206      	str	r2, [sp, #24]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	d13b      	bne.n	8008d88 <_printf_float+0x164>
 8008d10:	2306      	movs	r3, #6
 8008d12:	6063      	str	r3, [r4, #4]
 8008d14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d18:	2300      	movs	r3, #0
 8008d1a:	6022      	str	r2, [r4, #0]
 8008d1c:	9303      	str	r3, [sp, #12]
 8008d1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d24:	ab09      	add	r3, sp, #36	@ 0x24
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	6861      	ldr	r1, [r4, #4]
 8008d2a:	ec49 8b10 	vmov	d0, r8, r9
 8008d2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d32:	4628      	mov	r0, r5
 8008d34:	f7ff fed6 	bl	8008ae4 <__cvt>
 8008d38:	9b06      	ldr	r3, [sp, #24]
 8008d3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d3c:	2b47      	cmp	r3, #71	@ 0x47
 8008d3e:	4680      	mov	r8, r0
 8008d40:	d129      	bne.n	8008d96 <_printf_float+0x172>
 8008d42:	1cc8      	adds	r0, r1, #3
 8008d44:	db02      	blt.n	8008d4c <_printf_float+0x128>
 8008d46:	6863      	ldr	r3, [r4, #4]
 8008d48:	4299      	cmp	r1, r3
 8008d4a:	dd41      	ble.n	8008dd0 <_printf_float+0x1ac>
 8008d4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d50:	fa5f fa8a 	uxtb.w	sl, sl
 8008d54:	3901      	subs	r1, #1
 8008d56:	4652      	mov	r2, sl
 8008d58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d5e:	f7ff ff26 	bl	8008bae <__exponent>
 8008d62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d64:	1813      	adds	r3, r2, r0
 8008d66:	2a01      	cmp	r2, #1
 8008d68:	4681      	mov	r9, r0
 8008d6a:	6123      	str	r3, [r4, #16]
 8008d6c:	dc02      	bgt.n	8008d74 <_printf_float+0x150>
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	07d2      	lsls	r2, r2, #31
 8008d72:	d501      	bpl.n	8008d78 <_printf_float+0x154>
 8008d74:	3301      	adds	r3, #1
 8008d76:	6123      	str	r3, [r4, #16]
 8008d78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0a2      	beq.n	8008cc6 <_printf_float+0xa2>
 8008d80:	232d      	movs	r3, #45	@ 0x2d
 8008d82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d86:	e79e      	b.n	8008cc6 <_printf_float+0xa2>
 8008d88:	9a06      	ldr	r2, [sp, #24]
 8008d8a:	2a47      	cmp	r2, #71	@ 0x47
 8008d8c:	d1c2      	bne.n	8008d14 <_printf_float+0xf0>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1c0      	bne.n	8008d14 <_printf_float+0xf0>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e7bd      	b.n	8008d12 <_printf_float+0xee>
 8008d96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d9a:	d9db      	bls.n	8008d54 <_printf_float+0x130>
 8008d9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008da0:	d118      	bne.n	8008dd4 <_printf_float+0x1b0>
 8008da2:	2900      	cmp	r1, #0
 8008da4:	6863      	ldr	r3, [r4, #4]
 8008da6:	dd0b      	ble.n	8008dc0 <_printf_float+0x19c>
 8008da8:	6121      	str	r1, [r4, #16]
 8008daa:	b913      	cbnz	r3, 8008db2 <_printf_float+0x18e>
 8008dac:	6822      	ldr	r2, [r4, #0]
 8008dae:	07d0      	lsls	r0, r2, #31
 8008db0:	d502      	bpl.n	8008db8 <_printf_float+0x194>
 8008db2:	3301      	adds	r3, #1
 8008db4:	440b      	add	r3, r1
 8008db6:	6123      	str	r3, [r4, #16]
 8008db8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008dba:	f04f 0900 	mov.w	r9, #0
 8008dbe:	e7db      	b.n	8008d78 <_printf_float+0x154>
 8008dc0:	b913      	cbnz	r3, 8008dc8 <_printf_float+0x1a4>
 8008dc2:	6822      	ldr	r2, [r4, #0]
 8008dc4:	07d2      	lsls	r2, r2, #31
 8008dc6:	d501      	bpl.n	8008dcc <_printf_float+0x1a8>
 8008dc8:	3302      	adds	r3, #2
 8008dca:	e7f4      	b.n	8008db6 <_printf_float+0x192>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e7f2      	b.n	8008db6 <_printf_float+0x192>
 8008dd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd6:	4299      	cmp	r1, r3
 8008dd8:	db05      	blt.n	8008de6 <_printf_float+0x1c2>
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	6121      	str	r1, [r4, #16]
 8008dde:	07d8      	lsls	r0, r3, #31
 8008de0:	d5ea      	bpl.n	8008db8 <_printf_float+0x194>
 8008de2:	1c4b      	adds	r3, r1, #1
 8008de4:	e7e7      	b.n	8008db6 <_printf_float+0x192>
 8008de6:	2900      	cmp	r1, #0
 8008de8:	bfd4      	ite	le
 8008dea:	f1c1 0202 	rsble	r2, r1, #2
 8008dee:	2201      	movgt	r2, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	e7e0      	b.n	8008db6 <_printf_float+0x192>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	055a      	lsls	r2, r3, #21
 8008df8:	d407      	bmi.n	8008e0a <_printf_float+0x1e6>
 8008dfa:	6923      	ldr	r3, [r4, #16]
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	d12b      	bne.n	8008e60 <_printf_float+0x23c>
 8008e08:	e767      	b.n	8008cda <_printf_float+0xb6>
 8008e0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e0e:	f240 80dd 	bls.w	8008fcc <_printf_float+0x3a8>
 8008e12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e16:	2200      	movs	r2, #0
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f7f7 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d033      	beq.n	8008e8a <_printf_float+0x266>
 8008e22:	4a37      	ldr	r2, [pc, #220]	@ (8008f00 <_printf_float+0x2dc>)
 8008e24:	2301      	movs	r3, #1
 8008e26:	4631      	mov	r1, r6
 8008e28:	4628      	mov	r0, r5
 8008e2a:	47b8      	blx	r7
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	f43f af54 	beq.w	8008cda <_printf_float+0xb6>
 8008e32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e36:	4543      	cmp	r3, r8
 8008e38:	db02      	blt.n	8008e40 <_printf_float+0x21c>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	07d8      	lsls	r0, r3, #31
 8008e3e:	d50f      	bpl.n	8008e60 <_printf_float+0x23c>
 8008e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	f43f af45 	beq.w	8008cda <_printf_float+0xb6>
 8008e50:	f04f 0900 	mov.w	r9, #0
 8008e54:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e58:	f104 0a1a 	add.w	sl, r4, #26
 8008e5c:	45c8      	cmp	r8, r9
 8008e5e:	dc09      	bgt.n	8008e74 <_printf_float+0x250>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	079b      	lsls	r3, r3, #30
 8008e64:	f100 8103 	bmi.w	800906e <_printf_float+0x44a>
 8008e68:	68e0      	ldr	r0, [r4, #12]
 8008e6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e6c:	4298      	cmp	r0, r3
 8008e6e:	bfb8      	it	lt
 8008e70:	4618      	movlt	r0, r3
 8008e72:	e734      	b.n	8008cde <_printf_float+0xba>
 8008e74:	2301      	movs	r3, #1
 8008e76:	4652      	mov	r2, sl
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f af2b 	beq.w	8008cda <_printf_float+0xb6>
 8008e84:	f109 0901 	add.w	r9, r9, #1
 8008e88:	e7e8      	b.n	8008e5c <_printf_float+0x238>
 8008e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	dc39      	bgt.n	8008f04 <_printf_float+0x2e0>
 8008e90:	4a1b      	ldr	r2, [pc, #108]	@ (8008f00 <_printf_float+0x2dc>)
 8008e92:	2301      	movs	r3, #1
 8008e94:	4631      	mov	r1, r6
 8008e96:	4628      	mov	r0, r5
 8008e98:	47b8      	blx	r7
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	f43f af1d 	beq.w	8008cda <_printf_float+0xb6>
 8008ea0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ea4:	ea59 0303 	orrs.w	r3, r9, r3
 8008ea8:	d102      	bne.n	8008eb0 <_printf_float+0x28c>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	07d9      	lsls	r1, r3, #31
 8008eae:	d5d7      	bpl.n	8008e60 <_printf_float+0x23c>
 8008eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	47b8      	blx	r7
 8008eba:	3001      	adds	r0, #1
 8008ebc:	f43f af0d 	beq.w	8008cda <_printf_float+0xb6>
 8008ec0:	f04f 0a00 	mov.w	sl, #0
 8008ec4:	f104 0b1a 	add.w	fp, r4, #26
 8008ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eca:	425b      	negs	r3, r3
 8008ecc:	4553      	cmp	r3, sl
 8008ece:	dc01      	bgt.n	8008ed4 <_printf_float+0x2b0>
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	e793      	b.n	8008dfc <_printf_float+0x1d8>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	465a      	mov	r2, fp
 8008ed8:	4631      	mov	r1, r6
 8008eda:	4628      	mov	r0, r5
 8008edc:	47b8      	blx	r7
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f43f aefb 	beq.w	8008cda <_printf_float+0xb6>
 8008ee4:	f10a 0a01 	add.w	sl, sl, #1
 8008ee8:	e7ee      	b.n	8008ec8 <_printf_float+0x2a4>
 8008eea:	bf00      	nop
 8008eec:	7fefffff 	.word	0x7fefffff
 8008ef0:	0800b48c 	.word	0x0800b48c
 8008ef4:	0800b490 	.word	0x0800b490
 8008ef8:	0800b494 	.word	0x0800b494
 8008efc:	0800b498 	.word	0x0800b498
 8008f00:	0800b49c 	.word	0x0800b49c
 8008f04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f0a:	4553      	cmp	r3, sl
 8008f0c:	bfa8      	it	ge
 8008f0e:	4653      	movge	r3, sl
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	4699      	mov	r9, r3
 8008f14:	dc36      	bgt.n	8008f84 <_printf_float+0x360>
 8008f16:	f04f 0b00 	mov.w	fp, #0
 8008f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f1e:	f104 021a 	add.w	r2, r4, #26
 8008f22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f24:	9306      	str	r3, [sp, #24]
 8008f26:	eba3 0309 	sub.w	r3, r3, r9
 8008f2a:	455b      	cmp	r3, fp
 8008f2c:	dc31      	bgt.n	8008f92 <_printf_float+0x36e>
 8008f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f30:	459a      	cmp	sl, r3
 8008f32:	dc3a      	bgt.n	8008faa <_printf_float+0x386>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	07da      	lsls	r2, r3, #31
 8008f38:	d437      	bmi.n	8008faa <_printf_float+0x386>
 8008f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f3c:	ebaa 0903 	sub.w	r9, sl, r3
 8008f40:	9b06      	ldr	r3, [sp, #24]
 8008f42:	ebaa 0303 	sub.w	r3, sl, r3
 8008f46:	4599      	cmp	r9, r3
 8008f48:	bfa8      	it	ge
 8008f4a:	4699      	movge	r9, r3
 8008f4c:	f1b9 0f00 	cmp.w	r9, #0
 8008f50:	dc33      	bgt.n	8008fba <_printf_float+0x396>
 8008f52:	f04f 0800 	mov.w	r8, #0
 8008f56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f5a:	f104 0b1a 	add.w	fp, r4, #26
 8008f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f60:	ebaa 0303 	sub.w	r3, sl, r3
 8008f64:	eba3 0309 	sub.w	r3, r3, r9
 8008f68:	4543      	cmp	r3, r8
 8008f6a:	f77f af79 	ble.w	8008e60 <_printf_float+0x23c>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	465a      	mov	r2, fp
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	f43f aeae 	beq.w	8008cda <_printf_float+0xb6>
 8008f7e:	f108 0801 	add.w	r8, r8, #1
 8008f82:	e7ec      	b.n	8008f5e <_printf_float+0x33a>
 8008f84:	4642      	mov	r2, r8
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d1c2      	bne.n	8008f16 <_printf_float+0x2f2>
 8008f90:	e6a3      	b.n	8008cda <_printf_float+0xb6>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4631      	mov	r1, r6
 8008f96:	4628      	mov	r0, r5
 8008f98:	9206      	str	r2, [sp, #24]
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f43f ae9c 	beq.w	8008cda <_printf_float+0xb6>
 8008fa2:	9a06      	ldr	r2, [sp, #24]
 8008fa4:	f10b 0b01 	add.w	fp, fp, #1
 8008fa8:	e7bb      	b.n	8008f22 <_printf_float+0x2fe>
 8008faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b8      	blx	r7
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d1c0      	bne.n	8008f3a <_printf_float+0x316>
 8008fb8:	e68f      	b.n	8008cda <_printf_float+0xb6>
 8008fba:	9a06      	ldr	r2, [sp, #24]
 8008fbc:	464b      	mov	r3, r9
 8008fbe:	4442      	add	r2, r8
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	47b8      	blx	r7
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d1c3      	bne.n	8008f52 <_printf_float+0x32e>
 8008fca:	e686      	b.n	8008cda <_printf_float+0xb6>
 8008fcc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fd0:	f1ba 0f01 	cmp.w	sl, #1
 8008fd4:	dc01      	bgt.n	8008fda <_printf_float+0x3b6>
 8008fd6:	07db      	lsls	r3, r3, #31
 8008fd8:	d536      	bpl.n	8009048 <_printf_float+0x424>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4642      	mov	r2, r8
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b8      	blx	r7
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	f43f ae78 	beq.w	8008cda <_printf_float+0xb6>
 8008fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f ae70 	beq.w	8008cda <_printf_float+0xb6>
 8008ffa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ffe:	2200      	movs	r2, #0
 8009000:	2300      	movs	r3, #0
 8009002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009006:	f7f7 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800900a:	b9c0      	cbnz	r0, 800903e <_printf_float+0x41a>
 800900c:	4653      	mov	r3, sl
 800900e:	f108 0201 	add.w	r2, r8, #1
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	d10c      	bne.n	8009036 <_printf_float+0x412>
 800901c:	e65d      	b.n	8008cda <_printf_float+0xb6>
 800901e:	2301      	movs	r3, #1
 8009020:	465a      	mov	r2, fp
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f ae56 	beq.w	8008cda <_printf_float+0xb6>
 800902e:	f108 0801 	add.w	r8, r8, #1
 8009032:	45d0      	cmp	r8, sl
 8009034:	dbf3      	blt.n	800901e <_printf_float+0x3fa>
 8009036:	464b      	mov	r3, r9
 8009038:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800903c:	e6df      	b.n	8008dfe <_printf_float+0x1da>
 800903e:	f04f 0800 	mov.w	r8, #0
 8009042:	f104 0b1a 	add.w	fp, r4, #26
 8009046:	e7f4      	b.n	8009032 <_printf_float+0x40e>
 8009048:	2301      	movs	r3, #1
 800904a:	4642      	mov	r2, r8
 800904c:	e7e1      	b.n	8009012 <_printf_float+0x3ee>
 800904e:	2301      	movs	r3, #1
 8009050:	464a      	mov	r2, r9
 8009052:	4631      	mov	r1, r6
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	f43f ae3e 	beq.w	8008cda <_printf_float+0xb6>
 800905e:	f108 0801 	add.w	r8, r8, #1
 8009062:	68e3      	ldr	r3, [r4, #12]
 8009064:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009066:	1a5b      	subs	r3, r3, r1
 8009068:	4543      	cmp	r3, r8
 800906a:	dcf0      	bgt.n	800904e <_printf_float+0x42a>
 800906c:	e6fc      	b.n	8008e68 <_printf_float+0x244>
 800906e:	f04f 0800 	mov.w	r8, #0
 8009072:	f104 0919 	add.w	r9, r4, #25
 8009076:	e7f4      	b.n	8009062 <_printf_float+0x43e>

08009078 <_printf_common>:
 8009078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	4616      	mov	r6, r2
 800907e:	4698      	mov	r8, r3
 8009080:	688a      	ldr	r2, [r1, #8]
 8009082:	690b      	ldr	r3, [r1, #16]
 8009084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009088:	4293      	cmp	r3, r2
 800908a:	bfb8      	it	lt
 800908c:	4613      	movlt	r3, r2
 800908e:	6033      	str	r3, [r6, #0]
 8009090:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009094:	4607      	mov	r7, r0
 8009096:	460c      	mov	r4, r1
 8009098:	b10a      	cbz	r2, 800909e <_printf_common+0x26>
 800909a:	3301      	adds	r3, #1
 800909c:	6033      	str	r3, [r6, #0]
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	0699      	lsls	r1, r3, #26
 80090a2:	bf42      	ittt	mi
 80090a4:	6833      	ldrmi	r3, [r6, #0]
 80090a6:	3302      	addmi	r3, #2
 80090a8:	6033      	strmi	r3, [r6, #0]
 80090aa:	6825      	ldr	r5, [r4, #0]
 80090ac:	f015 0506 	ands.w	r5, r5, #6
 80090b0:	d106      	bne.n	80090c0 <_printf_common+0x48>
 80090b2:	f104 0a19 	add.w	sl, r4, #25
 80090b6:	68e3      	ldr	r3, [r4, #12]
 80090b8:	6832      	ldr	r2, [r6, #0]
 80090ba:	1a9b      	subs	r3, r3, r2
 80090bc:	42ab      	cmp	r3, r5
 80090be:	dc26      	bgt.n	800910e <_printf_common+0x96>
 80090c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090c4:	6822      	ldr	r2, [r4, #0]
 80090c6:	3b00      	subs	r3, #0
 80090c8:	bf18      	it	ne
 80090ca:	2301      	movne	r3, #1
 80090cc:	0692      	lsls	r2, r2, #26
 80090ce:	d42b      	bmi.n	8009128 <_printf_common+0xb0>
 80090d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090d4:	4641      	mov	r1, r8
 80090d6:	4638      	mov	r0, r7
 80090d8:	47c8      	blx	r9
 80090da:	3001      	adds	r0, #1
 80090dc:	d01e      	beq.n	800911c <_printf_common+0xa4>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	6922      	ldr	r2, [r4, #16]
 80090e2:	f003 0306 	and.w	r3, r3, #6
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	bf02      	ittt	eq
 80090ea:	68e5      	ldreq	r5, [r4, #12]
 80090ec:	6833      	ldreq	r3, [r6, #0]
 80090ee:	1aed      	subeq	r5, r5, r3
 80090f0:	68a3      	ldr	r3, [r4, #8]
 80090f2:	bf0c      	ite	eq
 80090f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f8:	2500      	movne	r5, #0
 80090fa:	4293      	cmp	r3, r2
 80090fc:	bfc4      	itt	gt
 80090fe:	1a9b      	subgt	r3, r3, r2
 8009100:	18ed      	addgt	r5, r5, r3
 8009102:	2600      	movs	r6, #0
 8009104:	341a      	adds	r4, #26
 8009106:	42b5      	cmp	r5, r6
 8009108:	d11a      	bne.n	8009140 <_printf_common+0xc8>
 800910a:	2000      	movs	r0, #0
 800910c:	e008      	b.n	8009120 <_printf_common+0xa8>
 800910e:	2301      	movs	r3, #1
 8009110:	4652      	mov	r2, sl
 8009112:	4641      	mov	r1, r8
 8009114:	4638      	mov	r0, r7
 8009116:	47c8      	blx	r9
 8009118:	3001      	adds	r0, #1
 800911a:	d103      	bne.n	8009124 <_printf_common+0xac>
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009124:	3501      	adds	r5, #1
 8009126:	e7c6      	b.n	80090b6 <_printf_common+0x3e>
 8009128:	18e1      	adds	r1, r4, r3
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	2030      	movs	r0, #48	@ 0x30
 800912e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009132:	4422      	add	r2, r4
 8009134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800913c:	3302      	adds	r3, #2
 800913e:	e7c7      	b.n	80090d0 <_printf_common+0x58>
 8009140:	2301      	movs	r3, #1
 8009142:	4622      	mov	r2, r4
 8009144:	4641      	mov	r1, r8
 8009146:	4638      	mov	r0, r7
 8009148:	47c8      	blx	r9
 800914a:	3001      	adds	r0, #1
 800914c:	d0e6      	beq.n	800911c <_printf_common+0xa4>
 800914e:	3601      	adds	r6, #1
 8009150:	e7d9      	b.n	8009106 <_printf_common+0x8e>
	...

08009154 <_printf_i>:
 8009154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	7e0f      	ldrb	r7, [r1, #24]
 800915a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800915c:	2f78      	cmp	r7, #120	@ 0x78
 800915e:	4691      	mov	r9, r2
 8009160:	4680      	mov	r8, r0
 8009162:	460c      	mov	r4, r1
 8009164:	469a      	mov	sl, r3
 8009166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800916a:	d807      	bhi.n	800917c <_printf_i+0x28>
 800916c:	2f62      	cmp	r7, #98	@ 0x62
 800916e:	d80a      	bhi.n	8009186 <_printf_i+0x32>
 8009170:	2f00      	cmp	r7, #0
 8009172:	f000 80d2 	beq.w	800931a <_printf_i+0x1c6>
 8009176:	2f58      	cmp	r7, #88	@ 0x58
 8009178:	f000 80b9 	beq.w	80092ee <_printf_i+0x19a>
 800917c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009184:	e03a      	b.n	80091fc <_printf_i+0xa8>
 8009186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800918a:	2b15      	cmp	r3, #21
 800918c:	d8f6      	bhi.n	800917c <_printf_i+0x28>
 800918e:	a101      	add	r1, pc, #4	@ (adr r1, 8009194 <_printf_i+0x40>)
 8009190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009194:	080091ed 	.word	0x080091ed
 8009198:	08009201 	.word	0x08009201
 800919c:	0800917d 	.word	0x0800917d
 80091a0:	0800917d 	.word	0x0800917d
 80091a4:	0800917d 	.word	0x0800917d
 80091a8:	0800917d 	.word	0x0800917d
 80091ac:	08009201 	.word	0x08009201
 80091b0:	0800917d 	.word	0x0800917d
 80091b4:	0800917d 	.word	0x0800917d
 80091b8:	0800917d 	.word	0x0800917d
 80091bc:	0800917d 	.word	0x0800917d
 80091c0:	08009301 	.word	0x08009301
 80091c4:	0800922b 	.word	0x0800922b
 80091c8:	080092bb 	.word	0x080092bb
 80091cc:	0800917d 	.word	0x0800917d
 80091d0:	0800917d 	.word	0x0800917d
 80091d4:	08009323 	.word	0x08009323
 80091d8:	0800917d 	.word	0x0800917d
 80091dc:	0800922b 	.word	0x0800922b
 80091e0:	0800917d 	.word	0x0800917d
 80091e4:	0800917d 	.word	0x0800917d
 80091e8:	080092c3 	.word	0x080092c3
 80091ec:	6833      	ldr	r3, [r6, #0]
 80091ee:	1d1a      	adds	r2, r3, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6032      	str	r2, [r6, #0]
 80091f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091fc:	2301      	movs	r3, #1
 80091fe:	e09d      	b.n	800933c <_printf_i+0x1e8>
 8009200:	6833      	ldr	r3, [r6, #0]
 8009202:	6820      	ldr	r0, [r4, #0]
 8009204:	1d19      	adds	r1, r3, #4
 8009206:	6031      	str	r1, [r6, #0]
 8009208:	0606      	lsls	r6, r0, #24
 800920a:	d501      	bpl.n	8009210 <_printf_i+0xbc>
 800920c:	681d      	ldr	r5, [r3, #0]
 800920e:	e003      	b.n	8009218 <_printf_i+0xc4>
 8009210:	0645      	lsls	r5, r0, #25
 8009212:	d5fb      	bpl.n	800920c <_printf_i+0xb8>
 8009214:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009218:	2d00      	cmp	r5, #0
 800921a:	da03      	bge.n	8009224 <_printf_i+0xd0>
 800921c:	232d      	movs	r3, #45	@ 0x2d
 800921e:	426d      	negs	r5, r5
 8009220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009224:	4859      	ldr	r0, [pc, #356]	@ (800938c <_printf_i+0x238>)
 8009226:	230a      	movs	r3, #10
 8009228:	e011      	b.n	800924e <_printf_i+0xfa>
 800922a:	6821      	ldr	r1, [r4, #0]
 800922c:	6833      	ldr	r3, [r6, #0]
 800922e:	0608      	lsls	r0, r1, #24
 8009230:	f853 5b04 	ldr.w	r5, [r3], #4
 8009234:	d402      	bmi.n	800923c <_printf_i+0xe8>
 8009236:	0649      	lsls	r1, r1, #25
 8009238:	bf48      	it	mi
 800923a:	b2ad      	uxthmi	r5, r5
 800923c:	2f6f      	cmp	r7, #111	@ 0x6f
 800923e:	4853      	ldr	r0, [pc, #332]	@ (800938c <_printf_i+0x238>)
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	bf14      	ite	ne
 8009244:	230a      	movne	r3, #10
 8009246:	2308      	moveq	r3, #8
 8009248:	2100      	movs	r1, #0
 800924a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800924e:	6866      	ldr	r6, [r4, #4]
 8009250:	60a6      	str	r6, [r4, #8]
 8009252:	2e00      	cmp	r6, #0
 8009254:	bfa2      	ittt	ge
 8009256:	6821      	ldrge	r1, [r4, #0]
 8009258:	f021 0104 	bicge.w	r1, r1, #4
 800925c:	6021      	strge	r1, [r4, #0]
 800925e:	b90d      	cbnz	r5, 8009264 <_printf_i+0x110>
 8009260:	2e00      	cmp	r6, #0
 8009262:	d04b      	beq.n	80092fc <_printf_i+0x1a8>
 8009264:	4616      	mov	r6, r2
 8009266:	fbb5 f1f3 	udiv	r1, r5, r3
 800926a:	fb03 5711 	mls	r7, r3, r1, r5
 800926e:	5dc7      	ldrb	r7, [r0, r7]
 8009270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009274:	462f      	mov	r7, r5
 8009276:	42bb      	cmp	r3, r7
 8009278:	460d      	mov	r5, r1
 800927a:	d9f4      	bls.n	8009266 <_printf_i+0x112>
 800927c:	2b08      	cmp	r3, #8
 800927e:	d10b      	bne.n	8009298 <_printf_i+0x144>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	07df      	lsls	r7, r3, #31
 8009284:	d508      	bpl.n	8009298 <_printf_i+0x144>
 8009286:	6923      	ldr	r3, [r4, #16]
 8009288:	6861      	ldr	r1, [r4, #4]
 800928a:	4299      	cmp	r1, r3
 800928c:	bfde      	ittt	le
 800928e:	2330      	movle	r3, #48	@ 0x30
 8009290:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009294:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009298:	1b92      	subs	r2, r2, r6
 800929a:	6122      	str	r2, [r4, #16]
 800929c:	f8cd a000 	str.w	sl, [sp]
 80092a0:	464b      	mov	r3, r9
 80092a2:	aa03      	add	r2, sp, #12
 80092a4:	4621      	mov	r1, r4
 80092a6:	4640      	mov	r0, r8
 80092a8:	f7ff fee6 	bl	8009078 <_printf_common>
 80092ac:	3001      	adds	r0, #1
 80092ae:	d14a      	bne.n	8009346 <_printf_i+0x1f2>
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	b004      	add	sp, #16
 80092b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	f043 0320 	orr.w	r3, r3, #32
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	4833      	ldr	r0, [pc, #204]	@ (8009390 <_printf_i+0x23c>)
 80092c4:	2778      	movs	r7, #120	@ 0x78
 80092c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	6831      	ldr	r1, [r6, #0]
 80092ce:	061f      	lsls	r7, r3, #24
 80092d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80092d4:	d402      	bmi.n	80092dc <_printf_i+0x188>
 80092d6:	065f      	lsls	r7, r3, #25
 80092d8:	bf48      	it	mi
 80092da:	b2ad      	uxthmi	r5, r5
 80092dc:	6031      	str	r1, [r6, #0]
 80092de:	07d9      	lsls	r1, r3, #31
 80092e0:	bf44      	itt	mi
 80092e2:	f043 0320 	orrmi.w	r3, r3, #32
 80092e6:	6023      	strmi	r3, [r4, #0]
 80092e8:	b11d      	cbz	r5, 80092f2 <_printf_i+0x19e>
 80092ea:	2310      	movs	r3, #16
 80092ec:	e7ac      	b.n	8009248 <_printf_i+0xf4>
 80092ee:	4827      	ldr	r0, [pc, #156]	@ (800938c <_printf_i+0x238>)
 80092f0:	e7e9      	b.n	80092c6 <_printf_i+0x172>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	f023 0320 	bic.w	r3, r3, #32
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	e7f6      	b.n	80092ea <_printf_i+0x196>
 80092fc:	4616      	mov	r6, r2
 80092fe:	e7bd      	b.n	800927c <_printf_i+0x128>
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	6825      	ldr	r5, [r4, #0]
 8009304:	6961      	ldr	r1, [r4, #20]
 8009306:	1d18      	adds	r0, r3, #4
 8009308:	6030      	str	r0, [r6, #0]
 800930a:	062e      	lsls	r6, r5, #24
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	d501      	bpl.n	8009314 <_printf_i+0x1c0>
 8009310:	6019      	str	r1, [r3, #0]
 8009312:	e002      	b.n	800931a <_printf_i+0x1c6>
 8009314:	0668      	lsls	r0, r5, #25
 8009316:	d5fb      	bpl.n	8009310 <_printf_i+0x1bc>
 8009318:	8019      	strh	r1, [r3, #0]
 800931a:	2300      	movs	r3, #0
 800931c:	6123      	str	r3, [r4, #16]
 800931e:	4616      	mov	r6, r2
 8009320:	e7bc      	b.n	800929c <_printf_i+0x148>
 8009322:	6833      	ldr	r3, [r6, #0]
 8009324:	1d1a      	adds	r2, r3, #4
 8009326:	6032      	str	r2, [r6, #0]
 8009328:	681e      	ldr	r6, [r3, #0]
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	2100      	movs	r1, #0
 800932e:	4630      	mov	r0, r6
 8009330:	f7f6 ff4e 	bl	80001d0 <memchr>
 8009334:	b108      	cbz	r0, 800933a <_printf_i+0x1e6>
 8009336:	1b80      	subs	r0, r0, r6
 8009338:	6060      	str	r0, [r4, #4]
 800933a:	6863      	ldr	r3, [r4, #4]
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	2300      	movs	r3, #0
 8009340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009344:	e7aa      	b.n	800929c <_printf_i+0x148>
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	4632      	mov	r2, r6
 800934a:	4649      	mov	r1, r9
 800934c:	4640      	mov	r0, r8
 800934e:	47d0      	blx	sl
 8009350:	3001      	adds	r0, #1
 8009352:	d0ad      	beq.n	80092b0 <_printf_i+0x15c>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	079b      	lsls	r3, r3, #30
 8009358:	d413      	bmi.n	8009382 <_printf_i+0x22e>
 800935a:	68e0      	ldr	r0, [r4, #12]
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	4298      	cmp	r0, r3
 8009360:	bfb8      	it	lt
 8009362:	4618      	movlt	r0, r3
 8009364:	e7a6      	b.n	80092b4 <_printf_i+0x160>
 8009366:	2301      	movs	r3, #1
 8009368:	4632      	mov	r2, r6
 800936a:	4649      	mov	r1, r9
 800936c:	4640      	mov	r0, r8
 800936e:	47d0      	blx	sl
 8009370:	3001      	adds	r0, #1
 8009372:	d09d      	beq.n	80092b0 <_printf_i+0x15c>
 8009374:	3501      	adds	r5, #1
 8009376:	68e3      	ldr	r3, [r4, #12]
 8009378:	9903      	ldr	r1, [sp, #12]
 800937a:	1a5b      	subs	r3, r3, r1
 800937c:	42ab      	cmp	r3, r5
 800937e:	dcf2      	bgt.n	8009366 <_printf_i+0x212>
 8009380:	e7eb      	b.n	800935a <_printf_i+0x206>
 8009382:	2500      	movs	r5, #0
 8009384:	f104 0619 	add.w	r6, r4, #25
 8009388:	e7f5      	b.n	8009376 <_printf_i+0x222>
 800938a:	bf00      	nop
 800938c:	0800b49e 	.word	0x0800b49e
 8009390:	0800b4af 	.word	0x0800b4af

08009394 <std>:
 8009394:	2300      	movs	r3, #0
 8009396:	b510      	push	{r4, lr}
 8009398:	4604      	mov	r4, r0
 800939a:	e9c0 3300 	strd	r3, r3, [r0]
 800939e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093a2:	6083      	str	r3, [r0, #8]
 80093a4:	8181      	strh	r1, [r0, #12]
 80093a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80093a8:	81c2      	strh	r2, [r0, #14]
 80093aa:	6183      	str	r3, [r0, #24]
 80093ac:	4619      	mov	r1, r3
 80093ae:	2208      	movs	r2, #8
 80093b0:	305c      	adds	r0, #92	@ 0x5c
 80093b2:	f000 f9f9 	bl	80097a8 <memset>
 80093b6:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <std+0x58>)
 80093b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80093ba:	4b0d      	ldr	r3, [pc, #52]	@ (80093f0 <std+0x5c>)
 80093bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093be:	4b0d      	ldr	r3, [pc, #52]	@ (80093f4 <std+0x60>)
 80093c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093c2:	4b0d      	ldr	r3, [pc, #52]	@ (80093f8 <std+0x64>)
 80093c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80093c6:	4b0d      	ldr	r3, [pc, #52]	@ (80093fc <std+0x68>)
 80093c8:	6224      	str	r4, [r4, #32]
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d006      	beq.n	80093dc <std+0x48>
 80093ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093d2:	4294      	cmp	r4, r2
 80093d4:	d002      	beq.n	80093dc <std+0x48>
 80093d6:	33d0      	adds	r3, #208	@ 0xd0
 80093d8:	429c      	cmp	r4, r3
 80093da:	d105      	bne.n	80093e8 <std+0x54>
 80093dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e4:	f000 ba6c 	b.w	80098c0 <__retarget_lock_init_recursive>
 80093e8:	bd10      	pop	{r4, pc}
 80093ea:	bf00      	nop
 80093ec:	080095f9 	.word	0x080095f9
 80093f0:	0800961b 	.word	0x0800961b
 80093f4:	08009653 	.word	0x08009653
 80093f8:	08009677 	.word	0x08009677
 80093fc:	20004c9c 	.word	0x20004c9c

08009400 <stdio_exit_handler>:
 8009400:	4a02      	ldr	r2, [pc, #8]	@ (800940c <stdio_exit_handler+0xc>)
 8009402:	4903      	ldr	r1, [pc, #12]	@ (8009410 <stdio_exit_handler+0x10>)
 8009404:	4803      	ldr	r0, [pc, #12]	@ (8009414 <stdio_exit_handler+0x14>)
 8009406:	f000 b869 	b.w	80094dc <_fwalk_sglue>
 800940a:	bf00      	nop
 800940c:	20000010 	.word	0x20000010
 8009410:	0800b0a5 	.word	0x0800b0a5
 8009414:	20000020 	.word	0x20000020

08009418 <cleanup_stdio>:
 8009418:	6841      	ldr	r1, [r0, #4]
 800941a:	4b0c      	ldr	r3, [pc, #48]	@ (800944c <cleanup_stdio+0x34>)
 800941c:	4299      	cmp	r1, r3
 800941e:	b510      	push	{r4, lr}
 8009420:	4604      	mov	r4, r0
 8009422:	d001      	beq.n	8009428 <cleanup_stdio+0x10>
 8009424:	f001 fe3e 	bl	800b0a4 <_fflush_r>
 8009428:	68a1      	ldr	r1, [r4, #8]
 800942a:	4b09      	ldr	r3, [pc, #36]	@ (8009450 <cleanup_stdio+0x38>)
 800942c:	4299      	cmp	r1, r3
 800942e:	d002      	beq.n	8009436 <cleanup_stdio+0x1e>
 8009430:	4620      	mov	r0, r4
 8009432:	f001 fe37 	bl	800b0a4 <_fflush_r>
 8009436:	68e1      	ldr	r1, [r4, #12]
 8009438:	4b06      	ldr	r3, [pc, #24]	@ (8009454 <cleanup_stdio+0x3c>)
 800943a:	4299      	cmp	r1, r3
 800943c:	d004      	beq.n	8009448 <cleanup_stdio+0x30>
 800943e:	4620      	mov	r0, r4
 8009440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009444:	f001 be2e 	b.w	800b0a4 <_fflush_r>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	bf00      	nop
 800944c:	20004c9c 	.word	0x20004c9c
 8009450:	20004d04 	.word	0x20004d04
 8009454:	20004d6c 	.word	0x20004d6c

08009458 <global_stdio_init.part.0>:
 8009458:	b510      	push	{r4, lr}
 800945a:	4b0b      	ldr	r3, [pc, #44]	@ (8009488 <global_stdio_init.part.0+0x30>)
 800945c:	4c0b      	ldr	r4, [pc, #44]	@ (800948c <global_stdio_init.part.0+0x34>)
 800945e:	4a0c      	ldr	r2, [pc, #48]	@ (8009490 <global_stdio_init.part.0+0x38>)
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	4620      	mov	r0, r4
 8009464:	2200      	movs	r2, #0
 8009466:	2104      	movs	r1, #4
 8009468:	f7ff ff94 	bl	8009394 <std>
 800946c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009470:	2201      	movs	r2, #1
 8009472:	2109      	movs	r1, #9
 8009474:	f7ff ff8e 	bl	8009394 <std>
 8009478:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800947c:	2202      	movs	r2, #2
 800947e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009482:	2112      	movs	r1, #18
 8009484:	f7ff bf86 	b.w	8009394 <std>
 8009488:	20004dd4 	.word	0x20004dd4
 800948c:	20004c9c 	.word	0x20004c9c
 8009490:	08009401 	.word	0x08009401

08009494 <__sfp_lock_acquire>:
 8009494:	4801      	ldr	r0, [pc, #4]	@ (800949c <__sfp_lock_acquire+0x8>)
 8009496:	f000 ba14 	b.w	80098c2 <__retarget_lock_acquire_recursive>
 800949a:	bf00      	nop
 800949c:	20004ddd 	.word	0x20004ddd

080094a0 <__sfp_lock_release>:
 80094a0:	4801      	ldr	r0, [pc, #4]	@ (80094a8 <__sfp_lock_release+0x8>)
 80094a2:	f000 ba0f 	b.w	80098c4 <__retarget_lock_release_recursive>
 80094a6:	bf00      	nop
 80094a8:	20004ddd 	.word	0x20004ddd

080094ac <__sinit>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	4604      	mov	r4, r0
 80094b0:	f7ff fff0 	bl	8009494 <__sfp_lock_acquire>
 80094b4:	6a23      	ldr	r3, [r4, #32]
 80094b6:	b11b      	cbz	r3, 80094c0 <__sinit+0x14>
 80094b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094bc:	f7ff bff0 	b.w	80094a0 <__sfp_lock_release>
 80094c0:	4b04      	ldr	r3, [pc, #16]	@ (80094d4 <__sinit+0x28>)
 80094c2:	6223      	str	r3, [r4, #32]
 80094c4:	4b04      	ldr	r3, [pc, #16]	@ (80094d8 <__sinit+0x2c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1f5      	bne.n	80094b8 <__sinit+0xc>
 80094cc:	f7ff ffc4 	bl	8009458 <global_stdio_init.part.0>
 80094d0:	e7f2      	b.n	80094b8 <__sinit+0xc>
 80094d2:	bf00      	nop
 80094d4:	08009419 	.word	0x08009419
 80094d8:	20004dd4 	.word	0x20004dd4

080094dc <_fwalk_sglue>:
 80094dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e0:	4607      	mov	r7, r0
 80094e2:	4688      	mov	r8, r1
 80094e4:	4614      	mov	r4, r2
 80094e6:	2600      	movs	r6, #0
 80094e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094ec:	f1b9 0901 	subs.w	r9, r9, #1
 80094f0:	d505      	bpl.n	80094fe <_fwalk_sglue+0x22>
 80094f2:	6824      	ldr	r4, [r4, #0]
 80094f4:	2c00      	cmp	r4, #0
 80094f6:	d1f7      	bne.n	80094e8 <_fwalk_sglue+0xc>
 80094f8:	4630      	mov	r0, r6
 80094fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fe:	89ab      	ldrh	r3, [r5, #12]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d907      	bls.n	8009514 <_fwalk_sglue+0x38>
 8009504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009508:	3301      	adds	r3, #1
 800950a:	d003      	beq.n	8009514 <_fwalk_sglue+0x38>
 800950c:	4629      	mov	r1, r5
 800950e:	4638      	mov	r0, r7
 8009510:	47c0      	blx	r8
 8009512:	4306      	orrs	r6, r0
 8009514:	3568      	adds	r5, #104	@ 0x68
 8009516:	e7e9      	b.n	80094ec <_fwalk_sglue+0x10>

08009518 <iprintf>:
 8009518:	b40f      	push	{r0, r1, r2, r3}
 800951a:	b507      	push	{r0, r1, r2, lr}
 800951c:	4906      	ldr	r1, [pc, #24]	@ (8009538 <iprintf+0x20>)
 800951e:	ab04      	add	r3, sp, #16
 8009520:	6808      	ldr	r0, [r1, #0]
 8009522:	f853 2b04 	ldr.w	r2, [r3], #4
 8009526:	6881      	ldr	r1, [r0, #8]
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	f001 fc1f 	bl	800ad6c <_vfiprintf_r>
 800952e:	b003      	add	sp, #12
 8009530:	f85d eb04 	ldr.w	lr, [sp], #4
 8009534:	b004      	add	sp, #16
 8009536:	4770      	bx	lr
 8009538:	2000001c 	.word	0x2000001c

0800953c <_puts_r>:
 800953c:	6a03      	ldr	r3, [r0, #32]
 800953e:	b570      	push	{r4, r5, r6, lr}
 8009540:	6884      	ldr	r4, [r0, #8]
 8009542:	4605      	mov	r5, r0
 8009544:	460e      	mov	r6, r1
 8009546:	b90b      	cbnz	r3, 800954c <_puts_r+0x10>
 8009548:	f7ff ffb0 	bl	80094ac <__sinit>
 800954c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800954e:	07db      	lsls	r3, r3, #31
 8009550:	d405      	bmi.n	800955e <_puts_r+0x22>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	0598      	lsls	r0, r3, #22
 8009556:	d402      	bmi.n	800955e <_puts_r+0x22>
 8009558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800955a:	f000 f9b2 	bl	80098c2 <__retarget_lock_acquire_recursive>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	0719      	lsls	r1, r3, #28
 8009562:	d502      	bpl.n	800956a <_puts_r+0x2e>
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d135      	bne.n	80095d6 <_puts_r+0x9a>
 800956a:	4621      	mov	r1, r4
 800956c:	4628      	mov	r0, r5
 800956e:	f000 f8c5 	bl	80096fc <__swsetup_r>
 8009572:	b380      	cbz	r0, 80095d6 <_puts_r+0x9a>
 8009574:	f04f 35ff 	mov.w	r5, #4294967295
 8009578:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800957a:	07da      	lsls	r2, r3, #31
 800957c:	d405      	bmi.n	800958a <_puts_r+0x4e>
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	059b      	lsls	r3, r3, #22
 8009582:	d402      	bmi.n	800958a <_puts_r+0x4e>
 8009584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009586:	f000 f99d 	bl	80098c4 <__retarget_lock_release_recursive>
 800958a:	4628      	mov	r0, r5
 800958c:	bd70      	pop	{r4, r5, r6, pc}
 800958e:	2b00      	cmp	r3, #0
 8009590:	da04      	bge.n	800959c <_puts_r+0x60>
 8009592:	69a2      	ldr	r2, [r4, #24]
 8009594:	429a      	cmp	r2, r3
 8009596:	dc17      	bgt.n	80095c8 <_puts_r+0x8c>
 8009598:	290a      	cmp	r1, #10
 800959a:	d015      	beq.n	80095c8 <_puts_r+0x8c>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	6022      	str	r2, [r4, #0]
 80095a2:	7019      	strb	r1, [r3, #0]
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095aa:	3b01      	subs	r3, #1
 80095ac:	60a3      	str	r3, [r4, #8]
 80095ae:	2900      	cmp	r1, #0
 80095b0:	d1ed      	bne.n	800958e <_puts_r+0x52>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	da11      	bge.n	80095da <_puts_r+0x9e>
 80095b6:	4622      	mov	r2, r4
 80095b8:	210a      	movs	r1, #10
 80095ba:	4628      	mov	r0, r5
 80095bc:	f000 f85f 	bl	800967e <__swbuf_r>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d0d7      	beq.n	8009574 <_puts_r+0x38>
 80095c4:	250a      	movs	r5, #10
 80095c6:	e7d7      	b.n	8009578 <_puts_r+0x3c>
 80095c8:	4622      	mov	r2, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f857 	bl	800967e <__swbuf_r>
 80095d0:	3001      	adds	r0, #1
 80095d2:	d1e7      	bne.n	80095a4 <_puts_r+0x68>
 80095d4:	e7ce      	b.n	8009574 <_puts_r+0x38>
 80095d6:	3e01      	subs	r6, #1
 80095d8:	e7e4      	b.n	80095a4 <_puts_r+0x68>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	220a      	movs	r2, #10
 80095e2:	701a      	strb	r2, [r3, #0]
 80095e4:	e7ee      	b.n	80095c4 <_puts_r+0x88>
	...

080095e8 <puts>:
 80095e8:	4b02      	ldr	r3, [pc, #8]	@ (80095f4 <puts+0xc>)
 80095ea:	4601      	mov	r1, r0
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	f7ff bfa5 	b.w	800953c <_puts_r>
 80095f2:	bf00      	nop
 80095f4:	2000001c 	.word	0x2000001c

080095f8 <__sread>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009600:	f000 f900 	bl	8009804 <_read_r>
 8009604:	2800      	cmp	r0, #0
 8009606:	bfab      	itete	ge
 8009608:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800960a:	89a3      	ldrhlt	r3, [r4, #12]
 800960c:	181b      	addge	r3, r3, r0
 800960e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009612:	bfac      	ite	ge
 8009614:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009616:	81a3      	strhlt	r3, [r4, #12]
 8009618:	bd10      	pop	{r4, pc}

0800961a <__swrite>:
 800961a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961e:	461f      	mov	r7, r3
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	05db      	lsls	r3, r3, #23
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	4616      	mov	r6, r2
 800962a:	d505      	bpl.n	8009638 <__swrite+0x1e>
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	2302      	movs	r3, #2
 8009632:	2200      	movs	r2, #0
 8009634:	f000 f8d4 	bl	80097e0 <_lseek_r>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800963e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	4632      	mov	r2, r6
 8009646:	463b      	mov	r3, r7
 8009648:	4628      	mov	r0, r5
 800964a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	f000 b8fb 	b.w	8009848 <_write_r>

08009652 <__sseek>:
 8009652:	b510      	push	{r4, lr}
 8009654:	460c      	mov	r4, r1
 8009656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965a:	f000 f8c1 	bl	80097e0 <_lseek_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	bf15      	itete	ne
 8009664:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009666:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800966a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800966e:	81a3      	strheq	r3, [r4, #12]
 8009670:	bf18      	it	ne
 8009672:	81a3      	strhne	r3, [r4, #12]
 8009674:	bd10      	pop	{r4, pc}

08009676 <__sclose>:
 8009676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967a:	f000 b8a1 	b.w	80097c0 <_close_r>

0800967e <__swbuf_r>:
 800967e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009680:	460e      	mov	r6, r1
 8009682:	4614      	mov	r4, r2
 8009684:	4605      	mov	r5, r0
 8009686:	b118      	cbz	r0, 8009690 <__swbuf_r+0x12>
 8009688:	6a03      	ldr	r3, [r0, #32]
 800968a:	b90b      	cbnz	r3, 8009690 <__swbuf_r+0x12>
 800968c:	f7ff ff0e 	bl	80094ac <__sinit>
 8009690:	69a3      	ldr	r3, [r4, #24]
 8009692:	60a3      	str	r3, [r4, #8]
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	071a      	lsls	r2, r3, #28
 8009698:	d501      	bpl.n	800969e <__swbuf_r+0x20>
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	b943      	cbnz	r3, 80096b0 <__swbuf_r+0x32>
 800969e:	4621      	mov	r1, r4
 80096a0:	4628      	mov	r0, r5
 80096a2:	f000 f82b 	bl	80096fc <__swsetup_r>
 80096a6:	b118      	cbz	r0, 80096b0 <__swbuf_r+0x32>
 80096a8:	f04f 37ff 	mov.w	r7, #4294967295
 80096ac:	4638      	mov	r0, r7
 80096ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	6922      	ldr	r2, [r4, #16]
 80096b4:	1a98      	subs	r0, r3, r2
 80096b6:	6963      	ldr	r3, [r4, #20]
 80096b8:	b2f6      	uxtb	r6, r6
 80096ba:	4283      	cmp	r3, r0
 80096bc:	4637      	mov	r7, r6
 80096be:	dc05      	bgt.n	80096cc <__swbuf_r+0x4e>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4628      	mov	r0, r5
 80096c4:	f001 fcee 	bl	800b0a4 <_fflush_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1ed      	bne.n	80096a8 <__swbuf_r+0x2a>
 80096cc:	68a3      	ldr	r3, [r4, #8]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	60a3      	str	r3, [r4, #8]
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	6022      	str	r2, [r4, #0]
 80096d8:	701e      	strb	r6, [r3, #0]
 80096da:	6962      	ldr	r2, [r4, #20]
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	429a      	cmp	r2, r3
 80096e0:	d004      	beq.n	80096ec <__swbuf_r+0x6e>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	07db      	lsls	r3, r3, #31
 80096e6:	d5e1      	bpl.n	80096ac <__swbuf_r+0x2e>
 80096e8:	2e0a      	cmp	r6, #10
 80096ea:	d1df      	bne.n	80096ac <__swbuf_r+0x2e>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f001 fcd8 	bl	800b0a4 <_fflush_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d0d9      	beq.n	80096ac <__swbuf_r+0x2e>
 80096f8:	e7d6      	b.n	80096a8 <__swbuf_r+0x2a>
	...

080096fc <__swsetup_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4b29      	ldr	r3, [pc, #164]	@ (80097a4 <__swsetup_r+0xa8>)
 8009700:	4605      	mov	r5, r0
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	460c      	mov	r4, r1
 8009706:	b118      	cbz	r0, 8009710 <__swsetup_r+0x14>
 8009708:	6a03      	ldr	r3, [r0, #32]
 800970a:	b90b      	cbnz	r3, 8009710 <__swsetup_r+0x14>
 800970c:	f7ff fece 	bl	80094ac <__sinit>
 8009710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009714:	0719      	lsls	r1, r3, #28
 8009716:	d422      	bmi.n	800975e <__swsetup_r+0x62>
 8009718:	06da      	lsls	r2, r3, #27
 800971a:	d407      	bmi.n	800972c <__swsetup_r+0x30>
 800971c:	2209      	movs	r2, #9
 800971e:	602a      	str	r2, [r5, #0]
 8009720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	f04f 30ff 	mov.w	r0, #4294967295
 800972a:	e033      	b.n	8009794 <__swsetup_r+0x98>
 800972c:	0758      	lsls	r0, r3, #29
 800972e:	d512      	bpl.n	8009756 <__swsetup_r+0x5a>
 8009730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009732:	b141      	cbz	r1, 8009746 <__swsetup_r+0x4a>
 8009734:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009738:	4299      	cmp	r1, r3
 800973a:	d002      	beq.n	8009742 <__swsetup_r+0x46>
 800973c:	4628      	mov	r0, r5
 800973e:	f000 ff1f 	bl	800a580 <_free_r>
 8009742:	2300      	movs	r3, #0
 8009744:	6363      	str	r3, [r4, #52]	@ 0x34
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	2300      	movs	r3, #0
 8009750:	6063      	str	r3, [r4, #4]
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f043 0308 	orr.w	r3, r3, #8
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	b94b      	cbnz	r3, 8009776 <__swsetup_r+0x7a>
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800976c:	d003      	beq.n	8009776 <__swsetup_r+0x7a>
 800976e:	4621      	mov	r1, r4
 8009770:	4628      	mov	r0, r5
 8009772:	f001 fce5 	bl	800b140 <__smakebuf_r>
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	f013 0201 	ands.w	r2, r3, #1
 800977e:	d00a      	beq.n	8009796 <__swsetup_r+0x9a>
 8009780:	2200      	movs	r2, #0
 8009782:	60a2      	str	r2, [r4, #8]
 8009784:	6962      	ldr	r2, [r4, #20]
 8009786:	4252      	negs	r2, r2
 8009788:	61a2      	str	r2, [r4, #24]
 800978a:	6922      	ldr	r2, [r4, #16]
 800978c:	b942      	cbnz	r2, 80097a0 <__swsetup_r+0xa4>
 800978e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009792:	d1c5      	bne.n	8009720 <__swsetup_r+0x24>
 8009794:	bd38      	pop	{r3, r4, r5, pc}
 8009796:	0799      	lsls	r1, r3, #30
 8009798:	bf58      	it	pl
 800979a:	6962      	ldrpl	r2, [r4, #20]
 800979c:	60a2      	str	r2, [r4, #8]
 800979e:	e7f4      	b.n	800978a <__swsetup_r+0x8e>
 80097a0:	2000      	movs	r0, #0
 80097a2:	e7f7      	b.n	8009794 <__swsetup_r+0x98>
 80097a4:	2000001c 	.word	0x2000001c

080097a8 <memset>:
 80097a8:	4402      	add	r2, r0
 80097aa:	4603      	mov	r3, r0
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d100      	bne.n	80097b2 <memset+0xa>
 80097b0:	4770      	bx	lr
 80097b2:	f803 1b01 	strb.w	r1, [r3], #1
 80097b6:	e7f9      	b.n	80097ac <memset+0x4>

080097b8 <_localeconv_r>:
 80097b8:	4800      	ldr	r0, [pc, #0]	@ (80097bc <_localeconv_r+0x4>)
 80097ba:	4770      	bx	lr
 80097bc:	2000015c 	.word	0x2000015c

080097c0 <_close_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d06      	ldr	r5, [pc, #24]	@ (80097dc <_close_r+0x1c>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f9 fbf2 	bl	8002fb4 <_close>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_close_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_close_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	20004dd8 	.word	0x20004dd8

080097e0 <_lseek_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d07      	ldr	r5, [pc, #28]	@ (8009800 <_lseek_r+0x20>)
 80097e4:	4604      	mov	r4, r0
 80097e6:	4608      	mov	r0, r1
 80097e8:	4611      	mov	r1, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	602a      	str	r2, [r5, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f7f9 fc07 	bl	8003002 <_lseek>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_lseek_r+0x1e>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_lseek_r+0x1e>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	20004dd8 	.word	0x20004dd8

08009804 <_read_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d07      	ldr	r5, [pc, #28]	@ (8009824 <_read_r+0x20>)
 8009808:	4604      	mov	r4, r0
 800980a:	4608      	mov	r0, r1
 800980c:	4611      	mov	r1, r2
 800980e:	2200      	movs	r2, #0
 8009810:	602a      	str	r2, [r5, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	f7f9 fbb1 	bl	8002f7a <_read>
 8009818:	1c43      	adds	r3, r0, #1
 800981a:	d102      	bne.n	8009822 <_read_r+0x1e>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	b103      	cbz	r3, 8009822 <_read_r+0x1e>
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	20004dd8 	.word	0x20004dd8

08009828 <_sbrk_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4d06      	ldr	r5, [pc, #24]	@ (8009844 <_sbrk_r+0x1c>)
 800982c:	2300      	movs	r3, #0
 800982e:	4604      	mov	r4, r0
 8009830:	4608      	mov	r0, r1
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	f7f9 fbf2 	bl	800301c <_sbrk>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_sbrk_r+0x1a>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	b103      	cbz	r3, 8009842 <_sbrk_r+0x1a>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	20004dd8 	.word	0x20004dd8

08009848 <_write_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d07      	ldr	r5, [pc, #28]	@ (8009868 <_write_r+0x20>)
 800984c:	4604      	mov	r4, r0
 800984e:	4608      	mov	r0, r1
 8009850:	4611      	mov	r1, r2
 8009852:	2200      	movs	r2, #0
 8009854:	602a      	str	r2, [r5, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	f7f8 fee4 	bl	8002624 <_write>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d102      	bne.n	8009866 <_write_r+0x1e>
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	b103      	cbz	r3, 8009866 <_write_r+0x1e>
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	20004dd8 	.word	0x20004dd8

0800986c <__errno>:
 800986c:	4b01      	ldr	r3, [pc, #4]	@ (8009874 <__errno+0x8>)
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	2000001c 	.word	0x2000001c

08009878 <__libc_init_array>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	4d0d      	ldr	r5, [pc, #52]	@ (80098b0 <__libc_init_array+0x38>)
 800987c:	4c0d      	ldr	r4, [pc, #52]	@ (80098b4 <__libc_init_array+0x3c>)
 800987e:	1b64      	subs	r4, r4, r5
 8009880:	10a4      	asrs	r4, r4, #2
 8009882:	2600      	movs	r6, #0
 8009884:	42a6      	cmp	r6, r4
 8009886:	d109      	bne.n	800989c <__libc_init_array+0x24>
 8009888:	4d0b      	ldr	r5, [pc, #44]	@ (80098b8 <__libc_init_array+0x40>)
 800988a:	4c0c      	ldr	r4, [pc, #48]	@ (80098bc <__libc_init_array+0x44>)
 800988c:	f001 fd66 	bl	800b35c <_init>
 8009890:	1b64      	subs	r4, r4, r5
 8009892:	10a4      	asrs	r4, r4, #2
 8009894:	2600      	movs	r6, #0
 8009896:	42a6      	cmp	r6, r4
 8009898:	d105      	bne.n	80098a6 <__libc_init_array+0x2e>
 800989a:	bd70      	pop	{r4, r5, r6, pc}
 800989c:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a0:	4798      	blx	r3
 80098a2:	3601      	adds	r6, #1
 80098a4:	e7ee      	b.n	8009884 <__libc_init_array+0xc>
 80098a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098aa:	4798      	blx	r3
 80098ac:	3601      	adds	r6, #1
 80098ae:	e7f2      	b.n	8009896 <__libc_init_array+0x1e>
 80098b0:	0800b808 	.word	0x0800b808
 80098b4:	0800b808 	.word	0x0800b808
 80098b8:	0800b808 	.word	0x0800b808
 80098bc:	0800b80c 	.word	0x0800b80c

080098c0 <__retarget_lock_init_recursive>:
 80098c0:	4770      	bx	lr

080098c2 <__retarget_lock_acquire_recursive>:
 80098c2:	4770      	bx	lr

080098c4 <__retarget_lock_release_recursive>:
 80098c4:	4770      	bx	lr

080098c6 <memcpy>:
 80098c6:	440a      	add	r2, r1
 80098c8:	4291      	cmp	r1, r2
 80098ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80098ce:	d100      	bne.n	80098d2 <memcpy+0xc>
 80098d0:	4770      	bx	lr
 80098d2:	b510      	push	{r4, lr}
 80098d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098dc:	4291      	cmp	r1, r2
 80098de:	d1f9      	bne.n	80098d4 <memcpy+0xe>
 80098e0:	bd10      	pop	{r4, pc}

080098e2 <quorem>:
 80098e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e6:	6903      	ldr	r3, [r0, #16]
 80098e8:	690c      	ldr	r4, [r1, #16]
 80098ea:	42a3      	cmp	r3, r4
 80098ec:	4607      	mov	r7, r0
 80098ee:	db7e      	blt.n	80099ee <quorem+0x10c>
 80098f0:	3c01      	subs	r4, #1
 80098f2:	f101 0814 	add.w	r8, r1, #20
 80098f6:	00a3      	lsls	r3, r4, #2
 80098f8:	f100 0514 	add.w	r5, r0, #20
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009908:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800990c:	3301      	adds	r3, #1
 800990e:	429a      	cmp	r2, r3
 8009910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009914:	fbb2 f6f3 	udiv	r6, r2, r3
 8009918:	d32e      	bcc.n	8009978 <quorem+0x96>
 800991a:	f04f 0a00 	mov.w	sl, #0
 800991e:	46c4      	mov	ip, r8
 8009920:	46ae      	mov	lr, r5
 8009922:	46d3      	mov	fp, sl
 8009924:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009928:	b298      	uxth	r0, r3
 800992a:	fb06 a000 	mla	r0, r6, r0, sl
 800992e:	0c02      	lsrs	r2, r0, #16
 8009930:	0c1b      	lsrs	r3, r3, #16
 8009932:	fb06 2303 	mla	r3, r6, r3, r2
 8009936:	f8de 2000 	ldr.w	r2, [lr]
 800993a:	b280      	uxth	r0, r0
 800993c:	b292      	uxth	r2, r2
 800993e:	1a12      	subs	r2, r2, r0
 8009940:	445a      	add	r2, fp
 8009942:	f8de 0000 	ldr.w	r0, [lr]
 8009946:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800994a:	b29b      	uxth	r3, r3
 800994c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009950:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009954:	b292      	uxth	r2, r2
 8009956:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800995a:	45e1      	cmp	r9, ip
 800995c:	f84e 2b04 	str.w	r2, [lr], #4
 8009960:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009964:	d2de      	bcs.n	8009924 <quorem+0x42>
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	58eb      	ldr	r3, [r5, r3]
 800996a:	b92b      	cbnz	r3, 8009978 <quorem+0x96>
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	3b04      	subs	r3, #4
 8009970:	429d      	cmp	r5, r3
 8009972:	461a      	mov	r2, r3
 8009974:	d32f      	bcc.n	80099d6 <quorem+0xf4>
 8009976:	613c      	str	r4, [r7, #16]
 8009978:	4638      	mov	r0, r7
 800997a:	f001 f8c5 	bl	800ab08 <__mcmp>
 800997e:	2800      	cmp	r0, #0
 8009980:	db25      	blt.n	80099ce <quorem+0xec>
 8009982:	4629      	mov	r1, r5
 8009984:	2000      	movs	r0, #0
 8009986:	f858 2b04 	ldr.w	r2, [r8], #4
 800998a:	f8d1 c000 	ldr.w	ip, [r1]
 800998e:	fa1f fe82 	uxth.w	lr, r2
 8009992:	fa1f f38c 	uxth.w	r3, ip
 8009996:	eba3 030e 	sub.w	r3, r3, lr
 800999a:	4403      	add	r3, r0
 800999c:	0c12      	lsrs	r2, r2, #16
 800999e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ac:	45c1      	cmp	r9, r8
 80099ae:	f841 3b04 	str.w	r3, [r1], #4
 80099b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099b6:	d2e6      	bcs.n	8009986 <quorem+0xa4>
 80099b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099c0:	b922      	cbnz	r2, 80099cc <quorem+0xea>
 80099c2:	3b04      	subs	r3, #4
 80099c4:	429d      	cmp	r5, r3
 80099c6:	461a      	mov	r2, r3
 80099c8:	d30b      	bcc.n	80099e2 <quorem+0x100>
 80099ca:	613c      	str	r4, [r7, #16]
 80099cc:	3601      	adds	r6, #1
 80099ce:	4630      	mov	r0, r6
 80099d0:	b003      	add	sp, #12
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	3b04      	subs	r3, #4
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d1cb      	bne.n	8009976 <quorem+0x94>
 80099de:	3c01      	subs	r4, #1
 80099e0:	e7c6      	b.n	8009970 <quorem+0x8e>
 80099e2:	6812      	ldr	r2, [r2, #0]
 80099e4:	3b04      	subs	r3, #4
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	d1ef      	bne.n	80099ca <quorem+0xe8>
 80099ea:	3c01      	subs	r4, #1
 80099ec:	e7ea      	b.n	80099c4 <quorem+0xe2>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e7ee      	b.n	80099d0 <quorem+0xee>
 80099f2:	0000      	movs	r0, r0
 80099f4:	0000      	movs	r0, r0
	...

080099f8 <_dtoa_r>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	69c7      	ldr	r7, [r0, #28]
 80099fe:	b099      	sub	sp, #100	@ 0x64
 8009a00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a04:	ec55 4b10 	vmov	r4, r5, d0
 8009a08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009a0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a0c:	4683      	mov	fp, r0
 8009a0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a12:	b97f      	cbnz	r7, 8009a34 <_dtoa_r+0x3c>
 8009a14:	2010      	movs	r0, #16
 8009a16:	f7fe ffa7 	bl	8008968 <malloc>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a20:	b920      	cbnz	r0, 8009a2c <_dtoa_r+0x34>
 8009a22:	4ba7      	ldr	r3, [pc, #668]	@ (8009cc0 <_dtoa_r+0x2c8>)
 8009a24:	21ef      	movs	r1, #239	@ 0xef
 8009a26:	48a7      	ldr	r0, [pc, #668]	@ (8009cc4 <_dtoa_r+0x2cc>)
 8009a28:	f001 fbe8 	bl	800b1fc <__assert_func>
 8009a2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a30:	6007      	str	r7, [r0, #0]
 8009a32:	60c7      	str	r7, [r0, #12]
 8009a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a38:	6819      	ldr	r1, [r3, #0]
 8009a3a:	b159      	cbz	r1, 8009a54 <_dtoa_r+0x5c>
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	604a      	str	r2, [r1, #4]
 8009a40:	2301      	movs	r3, #1
 8009a42:	4093      	lsls	r3, r2
 8009a44:	608b      	str	r3, [r1, #8]
 8009a46:	4658      	mov	r0, fp
 8009a48:	f000 fe24 	bl	800a694 <_Bfree>
 8009a4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	1e2b      	subs	r3, r5, #0
 8009a56:	bfb9      	ittee	lt
 8009a58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a5c:	9303      	strlt	r3, [sp, #12]
 8009a5e:	2300      	movge	r3, #0
 8009a60:	6033      	strge	r3, [r6, #0]
 8009a62:	9f03      	ldr	r7, [sp, #12]
 8009a64:	4b98      	ldr	r3, [pc, #608]	@ (8009cc8 <_dtoa_r+0x2d0>)
 8009a66:	bfbc      	itt	lt
 8009a68:	2201      	movlt	r2, #1
 8009a6a:	6032      	strlt	r2, [r6, #0]
 8009a6c:	43bb      	bics	r3, r7
 8009a6e:	d112      	bne.n	8009a96 <_dtoa_r+0x9e>
 8009a70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a7c:	4323      	orrs	r3, r4
 8009a7e:	f000 854d 	beq.w	800a51c <_dtoa_r+0xb24>
 8009a82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009cdc <_dtoa_r+0x2e4>
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 854f 	beq.w	800a52c <_dtoa_r+0xb34>
 8009a8e:	f10a 0303 	add.w	r3, sl, #3
 8009a92:	f000 bd49 	b.w	800a528 <_dtoa_r+0xb30>
 8009a96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	ec51 0b17 	vmov	r0, r1, d7
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009aa6:	f7f7 f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aaa:	4680      	mov	r8, r0
 8009aac:	b158      	cbz	r0, 8009ac6 <_dtoa_r+0xce>
 8009aae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ab6:	b113      	cbz	r3, 8009abe <_dtoa_r+0xc6>
 8009ab8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009aba:	4b84      	ldr	r3, [pc, #528]	@ (8009ccc <_dtoa_r+0x2d4>)
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009ce0 <_dtoa_r+0x2e8>
 8009ac2:	f000 bd33 	b.w	800a52c <_dtoa_r+0xb34>
 8009ac6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009aca:	aa16      	add	r2, sp, #88	@ 0x58
 8009acc:	a917      	add	r1, sp, #92	@ 0x5c
 8009ace:	4658      	mov	r0, fp
 8009ad0:	f001 f8ca 	bl	800ac68 <__d2b>
 8009ad4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ad8:	4681      	mov	r9, r0
 8009ada:	2e00      	cmp	r6, #0
 8009adc:	d077      	beq.n	8009bce <_dtoa_r+0x1d6>
 8009ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ae0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009af0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009af4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009af8:	4619      	mov	r1, r3
 8009afa:	2200      	movs	r2, #0
 8009afc:	4b74      	ldr	r3, [pc, #464]	@ (8009cd0 <_dtoa_r+0x2d8>)
 8009afe:	f7f6 fbc3 	bl	8000288 <__aeabi_dsub>
 8009b02:	a369      	add	r3, pc, #420	@ (adr r3, 8009ca8 <_dtoa_r+0x2b0>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f7f6 fd76 	bl	80005f8 <__aeabi_dmul>
 8009b0c:	a368      	add	r3, pc, #416	@ (adr r3, 8009cb0 <_dtoa_r+0x2b8>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fbbb 	bl	800028c <__adddf3>
 8009b16:	4604      	mov	r4, r0
 8009b18:	4630      	mov	r0, r6
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	f7f6 fd02 	bl	8000524 <__aeabi_i2d>
 8009b20:	a365      	add	r3, pc, #404	@ (adr r3, 8009cb8 <_dtoa_r+0x2c0>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	f7f6 fd67 	bl	80005f8 <__aeabi_dmul>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	4629      	mov	r1, r5
 8009b32:	f7f6 fbab 	bl	800028c <__adddf3>
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	f7f7 f80d 	bl	8000b58 <__aeabi_d2iz>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	4607      	mov	r7, r0
 8009b42:	2300      	movs	r3, #0
 8009b44:	4620      	mov	r0, r4
 8009b46:	4629      	mov	r1, r5
 8009b48:	f7f6 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8009b4c:	b140      	cbz	r0, 8009b60 <_dtoa_r+0x168>
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f7f6 fce8 	bl	8000524 <__aeabi_i2d>
 8009b54:	4622      	mov	r2, r4
 8009b56:	462b      	mov	r3, r5
 8009b58:	f7f6 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b5c:	b900      	cbnz	r0, 8009b60 <_dtoa_r+0x168>
 8009b5e:	3f01      	subs	r7, #1
 8009b60:	2f16      	cmp	r7, #22
 8009b62:	d851      	bhi.n	8009c08 <_dtoa_r+0x210>
 8009b64:	4b5b      	ldr	r3, [pc, #364]	@ (8009cd4 <_dtoa_r+0x2dc>)
 8009b66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b72:	f7f6 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d048      	beq.n	8009c0c <_dtoa_r+0x214>
 8009b7a:	3f01      	subs	r7, #1
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b82:	1b9b      	subs	r3, r3, r6
 8009b84:	1e5a      	subs	r2, r3, #1
 8009b86:	bf44      	itt	mi
 8009b88:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b8c:	2300      	movmi	r3, #0
 8009b8e:	9208      	str	r2, [sp, #32]
 8009b90:	bf54      	ite	pl
 8009b92:	f04f 0800 	movpl.w	r8, #0
 8009b96:	9308      	strmi	r3, [sp, #32]
 8009b98:	2f00      	cmp	r7, #0
 8009b9a:	db39      	blt.n	8009c10 <_dtoa_r+0x218>
 8009b9c:	9b08      	ldr	r3, [sp, #32]
 8009b9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ba0:	443b      	add	r3, r7
 8009ba2:	9308      	str	r3, [sp, #32]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009baa:	2b09      	cmp	r3, #9
 8009bac:	d864      	bhi.n	8009c78 <_dtoa_r+0x280>
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	bfc4      	itt	gt
 8009bb2:	3b04      	subgt	r3, #4
 8009bb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	f1a3 0302 	sub.w	r3, r3, #2
 8009bbc:	bfcc      	ite	gt
 8009bbe:	2400      	movgt	r4, #0
 8009bc0:	2401      	movle	r4, #1
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d863      	bhi.n	8009c8e <_dtoa_r+0x296>
 8009bc6:	e8df f003 	tbb	[pc, r3]
 8009bca:	372a      	.short	0x372a
 8009bcc:	5535      	.short	0x5535
 8009bce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009bd2:	441e      	add	r6, r3
 8009bd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009bd8:	2b20      	cmp	r3, #32
 8009bda:	bfc1      	itttt	gt
 8009bdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009be0:	409f      	lslgt	r7, r3
 8009be2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009be6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009bea:	bfd6      	itet	le
 8009bec:	f1c3 0320 	rsble	r3, r3, #32
 8009bf0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009bf4:	fa04 f003 	lslle.w	r0, r4, r3
 8009bf8:	f7f6 fc84 	bl	8000504 <__aeabi_ui2d>
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c02:	3e01      	subs	r6, #1
 8009c04:	9214      	str	r2, [sp, #80]	@ 0x50
 8009c06:	e777      	b.n	8009af8 <_dtoa_r+0x100>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7b8      	b.n	8009b7e <_dtoa_r+0x186>
 8009c0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009c0e:	e7b7      	b.n	8009b80 <_dtoa_r+0x188>
 8009c10:	427b      	negs	r3, r7
 8009c12:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c14:	2300      	movs	r3, #0
 8009c16:	eba8 0807 	sub.w	r8, r8, r7
 8009c1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c1c:	e7c4      	b.n	8009ba8 <_dtoa_r+0x1b0>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dc35      	bgt.n	8009c94 <_dtoa_r+0x29c>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	9307      	str	r3, [sp, #28]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c32:	e00b      	b.n	8009c4c <_dtoa_r+0x254>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e7f3      	b.n	8009c20 <_dtoa_r+0x228>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c3e:	18fb      	adds	r3, r7, r3
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	9307      	str	r3, [sp, #28]
 8009c48:	bfb8      	it	lt
 8009c4a:	2301      	movlt	r3, #1
 8009c4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c50:	2100      	movs	r1, #0
 8009c52:	2204      	movs	r2, #4
 8009c54:	f102 0514 	add.w	r5, r2, #20
 8009c58:	429d      	cmp	r5, r3
 8009c5a:	d91f      	bls.n	8009c9c <_dtoa_r+0x2a4>
 8009c5c:	6041      	str	r1, [r0, #4]
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f000 fcd8 	bl	800a614 <_Balloc>
 8009c64:	4682      	mov	sl, r0
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d13c      	bne.n	8009ce4 <_dtoa_r+0x2ec>
 8009c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd8 <_dtoa_r+0x2e0>)
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c72:	e6d8      	b.n	8009a26 <_dtoa_r+0x2e>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e7e0      	b.n	8009c3a <_dtoa_r+0x242>
 8009c78:	2401      	movs	r4, #1
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c80:	f04f 33ff 	mov.w	r3, #4294967295
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2312      	movs	r3, #18
 8009c8c:	e7d0      	b.n	8009c30 <_dtoa_r+0x238>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c92:	e7f5      	b.n	8009c80 <_dtoa_r+0x288>
 8009c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	9307      	str	r3, [sp, #28]
 8009c9a:	e7d7      	b.n	8009c4c <_dtoa_r+0x254>
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	0052      	lsls	r2, r2, #1
 8009ca0:	e7d8      	b.n	8009c54 <_dtoa_r+0x25c>
 8009ca2:	bf00      	nop
 8009ca4:	f3af 8000 	nop.w
 8009ca8:	636f4361 	.word	0x636f4361
 8009cac:	3fd287a7 	.word	0x3fd287a7
 8009cb0:	8b60c8b3 	.word	0x8b60c8b3
 8009cb4:	3fc68a28 	.word	0x3fc68a28
 8009cb8:	509f79fb 	.word	0x509f79fb
 8009cbc:	3fd34413 	.word	0x3fd34413
 8009cc0:	0800b4cd 	.word	0x0800b4cd
 8009cc4:	0800b4e4 	.word	0x0800b4e4
 8009cc8:	7ff00000 	.word	0x7ff00000
 8009ccc:	0800b49d 	.word	0x0800b49d
 8009cd0:	3ff80000 	.word	0x3ff80000
 8009cd4:	0800b5e0 	.word	0x0800b5e0
 8009cd8:	0800b53c 	.word	0x0800b53c
 8009cdc:	0800b4c9 	.word	0x0800b4c9
 8009ce0:	0800b49c 	.word	0x0800b49c
 8009ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ce8:	6018      	str	r0, [r3, #0]
 8009cea:	9b07      	ldr	r3, [sp, #28]
 8009cec:	2b0e      	cmp	r3, #14
 8009cee:	f200 80a4 	bhi.w	8009e3a <_dtoa_r+0x442>
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	f000 80a1 	beq.w	8009e3a <_dtoa_r+0x442>
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	dd33      	ble.n	8009d64 <_dtoa_r+0x36c>
 8009cfc:	4bad      	ldr	r3, [pc, #692]	@ (8009fb4 <_dtoa_r+0x5bc>)
 8009cfe:	f007 020f 	and.w	r2, r7, #15
 8009d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d06:	ed93 7b00 	vldr	d7, [r3]
 8009d0a:	05f8      	lsls	r0, r7, #23
 8009d0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d14:	d516      	bpl.n	8009d44 <_dtoa_r+0x34c>
 8009d16:	4ba8      	ldr	r3, [pc, #672]	@ (8009fb8 <_dtoa_r+0x5c0>)
 8009d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d20:	f7f6 fd94 	bl	800084c <__aeabi_ddiv>
 8009d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d28:	f004 040f 	and.w	r4, r4, #15
 8009d2c:	2603      	movs	r6, #3
 8009d2e:	4da2      	ldr	r5, [pc, #648]	@ (8009fb8 <_dtoa_r+0x5c0>)
 8009d30:	b954      	cbnz	r4, 8009d48 <_dtoa_r+0x350>
 8009d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d3a:	f7f6 fd87 	bl	800084c <__aeabi_ddiv>
 8009d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d42:	e028      	b.n	8009d96 <_dtoa_r+0x39e>
 8009d44:	2602      	movs	r6, #2
 8009d46:	e7f2      	b.n	8009d2e <_dtoa_r+0x336>
 8009d48:	07e1      	lsls	r1, r4, #31
 8009d4a:	d508      	bpl.n	8009d5e <_dtoa_r+0x366>
 8009d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d54:	f7f6 fc50 	bl	80005f8 <__aeabi_dmul>
 8009d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d5c:	3601      	adds	r6, #1
 8009d5e:	1064      	asrs	r4, r4, #1
 8009d60:	3508      	adds	r5, #8
 8009d62:	e7e5      	b.n	8009d30 <_dtoa_r+0x338>
 8009d64:	f000 80d2 	beq.w	8009f0c <_dtoa_r+0x514>
 8009d68:	427c      	negs	r4, r7
 8009d6a:	4b92      	ldr	r3, [pc, #584]	@ (8009fb4 <_dtoa_r+0x5bc>)
 8009d6c:	4d92      	ldr	r5, [pc, #584]	@ (8009fb8 <_dtoa_r+0x5c0>)
 8009d6e:	f004 020f 	and.w	r2, r4, #15
 8009d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d7e:	f7f6 fc3b 	bl	80005f8 <__aeabi_dmul>
 8009d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d86:	1124      	asrs	r4, r4, #4
 8009d88:	2300      	movs	r3, #0
 8009d8a:	2602      	movs	r6, #2
 8009d8c:	2c00      	cmp	r4, #0
 8009d8e:	f040 80b2 	bne.w	8009ef6 <_dtoa_r+0x4fe>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1d3      	bne.n	8009d3e <_dtoa_r+0x346>
 8009d96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 80b7 	beq.w	8009f10 <_dtoa_r+0x518>
 8009da2:	4b86      	ldr	r3, [pc, #536]	@ (8009fbc <_dtoa_r+0x5c4>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	f7f6 fe97 	bl	8000adc <__aeabi_dcmplt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f000 80ae 	beq.w	8009f10 <_dtoa_r+0x518>
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 80aa 	beq.w	8009f10 <_dtoa_r+0x518>
 8009dbc:	9b00      	ldr	r3, [sp, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dd37      	ble.n	8009e32 <_dtoa_r+0x43a>
 8009dc2:	1e7b      	subs	r3, r7, #1
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8009fc0 <_dtoa_r+0x5c8>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7f6 fc13 	bl	80005f8 <__aeabi_dmul>
 8009dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd6:	9c00      	ldr	r4, [sp, #0]
 8009dd8:	3601      	adds	r6, #1
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f7f6 fba2 	bl	8000524 <__aeabi_i2d>
 8009de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de4:	f7f6 fc08 	bl	80005f8 <__aeabi_dmul>
 8009de8:	4b76      	ldr	r3, [pc, #472]	@ (8009fc4 <_dtoa_r+0x5cc>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	f7f6 fa4e 	bl	800028c <__adddf3>
 8009df0:	4605      	mov	r5, r0
 8009df2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009df6:	2c00      	cmp	r4, #0
 8009df8:	f040 808d 	bne.w	8009f16 <_dtoa_r+0x51e>
 8009dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e00:	4b71      	ldr	r3, [pc, #452]	@ (8009fc8 <_dtoa_r+0x5d0>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	f7f6 fa40 	bl	8000288 <__aeabi_dsub>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e10:	462a      	mov	r2, r5
 8009e12:	4633      	mov	r3, r6
 8009e14:	f7f6 fe80 	bl	8000b18 <__aeabi_dcmpgt>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f040 828b 	bne.w	800a334 <_dtoa_r+0x93c>
 8009e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e22:	462a      	mov	r2, r5
 8009e24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e28:	f7f6 fe58 	bl	8000adc <__aeabi_dcmplt>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	f040 8128 	bne.w	800a082 <_dtoa_r+0x68a>
 8009e32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f2c0 815a 	blt.w	800a0f6 <_dtoa_r+0x6fe>
 8009e42:	2f0e      	cmp	r7, #14
 8009e44:	f300 8157 	bgt.w	800a0f6 <_dtoa_r+0x6fe>
 8009e48:	4b5a      	ldr	r3, [pc, #360]	@ (8009fb4 <_dtoa_r+0x5bc>)
 8009e4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e4e:	ed93 7b00 	vldr	d7, [r3]
 8009e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	ed8d 7b00 	vstr	d7, [sp]
 8009e5a:	da03      	bge.n	8009e64 <_dtoa_r+0x46c>
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f340 8101 	ble.w	800a066 <_dtoa_r+0x66e>
 8009e64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e68:	4656      	mov	r6, sl
 8009e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f6 fceb 	bl	800084c <__aeabi_ddiv>
 8009e76:	f7f6 fe6f 	bl	8000b58 <__aeabi_d2iz>
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	f7f6 fb52 	bl	8000524 <__aeabi_i2d>
 8009e80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e94:	f7f6 f9f8 	bl	8000288 <__aeabi_dsub>
 8009e98:	f806 4b01 	strb.w	r4, [r6], #1
 8009e9c:	9d07      	ldr	r5, [sp, #28]
 8009e9e:	eba6 040a 	sub.w	r4, r6, sl
 8009ea2:	42a5      	cmp	r5, r4
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	f040 8117 	bne.w	800a0da <_dtoa_r+0x6e2>
 8009eac:	f7f6 f9ee 	bl	800028c <__adddf3>
 8009eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	f7f6 fe2e 	bl	8000b18 <__aeabi_dcmpgt>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f040 80f9 	bne.w	800a0b4 <_dtoa_r+0x6bc>
 8009ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	f7f6 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ece:	b118      	cbz	r0, 8009ed8 <_dtoa_r+0x4e0>
 8009ed0:	f018 0f01 	tst.w	r8, #1
 8009ed4:	f040 80ee 	bne.w	800a0b4 <_dtoa_r+0x6bc>
 8009ed8:	4649      	mov	r1, r9
 8009eda:	4658      	mov	r0, fp
 8009edc:	f000 fbda 	bl	800a694 <_Bfree>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	7033      	strb	r3, [r6, #0]
 8009ee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ee6:	3701      	adds	r7, #1
 8009ee8:	601f      	str	r7, [r3, #0]
 8009eea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 831d 	beq.w	800a52c <_dtoa_r+0xb34>
 8009ef2:	601e      	str	r6, [r3, #0]
 8009ef4:	e31a      	b.n	800a52c <_dtoa_r+0xb34>
 8009ef6:	07e2      	lsls	r2, r4, #31
 8009ef8:	d505      	bpl.n	8009f06 <_dtoa_r+0x50e>
 8009efa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009efe:	f7f6 fb7b 	bl	80005f8 <__aeabi_dmul>
 8009f02:	3601      	adds	r6, #1
 8009f04:	2301      	movs	r3, #1
 8009f06:	1064      	asrs	r4, r4, #1
 8009f08:	3508      	adds	r5, #8
 8009f0a:	e73f      	b.n	8009d8c <_dtoa_r+0x394>
 8009f0c:	2602      	movs	r6, #2
 8009f0e:	e742      	b.n	8009d96 <_dtoa_r+0x39e>
 8009f10:	9c07      	ldr	r4, [sp, #28]
 8009f12:	9704      	str	r7, [sp, #16]
 8009f14:	e761      	b.n	8009dda <_dtoa_r+0x3e2>
 8009f16:	4b27      	ldr	r3, [pc, #156]	@ (8009fb4 <_dtoa_r+0x5bc>)
 8009f18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f22:	4454      	add	r4, sl
 8009f24:	2900      	cmp	r1, #0
 8009f26:	d053      	beq.n	8009fd0 <_dtoa_r+0x5d8>
 8009f28:	4928      	ldr	r1, [pc, #160]	@ (8009fcc <_dtoa_r+0x5d4>)
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	f7f6 fc8e 	bl	800084c <__aeabi_ddiv>
 8009f30:	4633      	mov	r3, r6
 8009f32:	462a      	mov	r2, r5
 8009f34:	f7f6 f9a8 	bl	8000288 <__aeabi_dsub>
 8009f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f3c:	4656      	mov	r6, sl
 8009f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f42:	f7f6 fe09 	bl	8000b58 <__aeabi_d2iz>
 8009f46:	4605      	mov	r5, r0
 8009f48:	f7f6 faec 	bl	8000524 <__aeabi_i2d>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f54:	f7f6 f998 	bl	8000288 <__aeabi_dsub>
 8009f58:	3530      	adds	r5, #48	@ 0x30
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f62:	f806 5b01 	strb.w	r5, [r6], #1
 8009f66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f6a:	f7f6 fdb7 	bl	8000adc <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d171      	bne.n	800a056 <_dtoa_r+0x65e>
 8009f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f76:	4911      	ldr	r1, [pc, #68]	@ (8009fbc <_dtoa_r+0x5c4>)
 8009f78:	2000      	movs	r0, #0
 8009f7a:	f7f6 f985 	bl	8000288 <__aeabi_dsub>
 8009f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f82:	f7f6 fdab 	bl	8000adc <__aeabi_dcmplt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f040 8095 	bne.w	800a0b6 <_dtoa_r+0x6be>
 8009f8c:	42a6      	cmp	r6, r4
 8009f8e:	f43f af50 	beq.w	8009e32 <_dtoa_r+0x43a>
 8009f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f96:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <_dtoa_r+0x5c8>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	4b08      	ldr	r3, [pc, #32]	@ (8009fc0 <_dtoa_r+0x5c8>)
 8009fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009faa:	f7f6 fb25 	bl	80005f8 <__aeabi_dmul>
 8009fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb2:	e7c4      	b.n	8009f3e <_dtoa_r+0x546>
 8009fb4:	0800b5e0 	.word	0x0800b5e0
 8009fb8:	0800b5b8 	.word	0x0800b5b8
 8009fbc:	3ff00000 	.word	0x3ff00000
 8009fc0:	40240000 	.word	0x40240000
 8009fc4:	401c0000 	.word	0x401c0000
 8009fc8:	40140000 	.word	0x40140000
 8009fcc:	3fe00000 	.word	0x3fe00000
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f7f6 fb10 	bl	80005f8 <__aeabi_dmul>
 8009fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fdc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009fde:	4656      	mov	r6, sl
 8009fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe4:	f7f6 fdb8 	bl	8000b58 <__aeabi_d2iz>
 8009fe8:	4605      	mov	r5, r0
 8009fea:	f7f6 fa9b 	bl	8000524 <__aeabi_i2d>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff6:	f7f6 f947 	bl	8000288 <__aeabi_dsub>
 8009ffa:	3530      	adds	r5, #48	@ 0x30
 8009ffc:	f806 5b01 	strb.w	r5, [r6], #1
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	42a6      	cmp	r6, r4
 800a006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a00a:	f04f 0200 	mov.w	r2, #0
 800a00e:	d124      	bne.n	800a05a <_dtoa_r+0x662>
 800a010:	4bac      	ldr	r3, [pc, #688]	@ (800a2c4 <_dtoa_r+0x8cc>)
 800a012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a016:	f7f6 f939 	bl	800028c <__adddf3>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a022:	f7f6 fd79 	bl	8000b18 <__aeabi_dcmpgt>
 800a026:	2800      	cmp	r0, #0
 800a028:	d145      	bne.n	800a0b6 <_dtoa_r+0x6be>
 800a02a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a02e:	49a5      	ldr	r1, [pc, #660]	@ (800a2c4 <_dtoa_r+0x8cc>)
 800a030:	2000      	movs	r0, #0
 800a032:	f7f6 f929 	bl	8000288 <__aeabi_dsub>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a03e:	f7f6 fd4d 	bl	8000adc <__aeabi_dcmplt>
 800a042:	2800      	cmp	r0, #0
 800a044:	f43f aef5 	beq.w	8009e32 <_dtoa_r+0x43a>
 800a048:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a04a:	1e73      	subs	r3, r6, #1
 800a04c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a04e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a052:	2b30      	cmp	r3, #48	@ 0x30
 800a054:	d0f8      	beq.n	800a048 <_dtoa_r+0x650>
 800a056:	9f04      	ldr	r7, [sp, #16]
 800a058:	e73e      	b.n	8009ed8 <_dtoa_r+0x4e0>
 800a05a:	4b9b      	ldr	r3, [pc, #620]	@ (800a2c8 <_dtoa_r+0x8d0>)
 800a05c:	f7f6 facc 	bl	80005f8 <__aeabi_dmul>
 800a060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a064:	e7bc      	b.n	8009fe0 <_dtoa_r+0x5e8>
 800a066:	d10c      	bne.n	800a082 <_dtoa_r+0x68a>
 800a068:	4b98      	ldr	r3, [pc, #608]	@ (800a2cc <_dtoa_r+0x8d4>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a070:	f7f6 fac2 	bl	80005f8 <__aeabi_dmul>
 800a074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a078:	f7f6 fd44 	bl	8000b04 <__aeabi_dcmpge>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	f000 8157 	beq.w	800a330 <_dtoa_r+0x938>
 800a082:	2400      	movs	r4, #0
 800a084:	4625      	mov	r5, r4
 800a086:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a088:	43db      	mvns	r3, r3
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	4656      	mov	r6, sl
 800a08e:	2700      	movs	r7, #0
 800a090:	4621      	mov	r1, r4
 800a092:	4658      	mov	r0, fp
 800a094:	f000 fafe 	bl	800a694 <_Bfree>
 800a098:	2d00      	cmp	r5, #0
 800a09a:	d0dc      	beq.n	800a056 <_dtoa_r+0x65e>
 800a09c:	b12f      	cbz	r7, 800a0aa <_dtoa_r+0x6b2>
 800a09e:	42af      	cmp	r7, r5
 800a0a0:	d003      	beq.n	800a0aa <_dtoa_r+0x6b2>
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	4658      	mov	r0, fp
 800a0a6:	f000 faf5 	bl	800a694 <_Bfree>
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4658      	mov	r0, fp
 800a0ae:	f000 faf1 	bl	800a694 <_Bfree>
 800a0b2:	e7d0      	b.n	800a056 <_dtoa_r+0x65e>
 800a0b4:	9704      	str	r7, [sp, #16]
 800a0b6:	4633      	mov	r3, r6
 800a0b8:	461e      	mov	r6, r3
 800a0ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0be:	2a39      	cmp	r2, #57	@ 0x39
 800a0c0:	d107      	bne.n	800a0d2 <_dtoa_r+0x6da>
 800a0c2:	459a      	cmp	sl, r3
 800a0c4:	d1f8      	bne.n	800a0b8 <_dtoa_r+0x6c0>
 800a0c6:	9a04      	ldr	r2, [sp, #16]
 800a0c8:	3201      	adds	r2, #1
 800a0ca:	9204      	str	r2, [sp, #16]
 800a0cc:	2230      	movs	r2, #48	@ 0x30
 800a0ce:	f88a 2000 	strb.w	r2, [sl]
 800a0d2:	781a      	ldrb	r2, [r3, #0]
 800a0d4:	3201      	adds	r2, #1
 800a0d6:	701a      	strb	r2, [r3, #0]
 800a0d8:	e7bd      	b.n	800a056 <_dtoa_r+0x65e>
 800a0da:	4b7b      	ldr	r3, [pc, #492]	@ (800a2c8 <_dtoa_r+0x8d0>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f7f6 fa8b 	bl	80005f8 <__aeabi_dmul>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	f7f6 fced 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f43f aebb 	beq.w	8009e6a <_dtoa_r+0x472>
 800a0f4:	e6f0      	b.n	8009ed8 <_dtoa_r+0x4e0>
 800a0f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	f000 80db 	beq.w	800a2b4 <_dtoa_r+0x8bc>
 800a0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a100:	2a01      	cmp	r2, #1
 800a102:	f300 80bf 	bgt.w	800a284 <_dtoa_r+0x88c>
 800a106:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a108:	2a00      	cmp	r2, #0
 800a10a:	f000 80b7 	beq.w	800a27c <_dtoa_r+0x884>
 800a10e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a112:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a114:	4646      	mov	r6, r8
 800a116:	9a08      	ldr	r2, [sp, #32]
 800a118:	2101      	movs	r1, #1
 800a11a:	441a      	add	r2, r3
 800a11c:	4658      	mov	r0, fp
 800a11e:	4498      	add	r8, r3
 800a120:	9208      	str	r2, [sp, #32]
 800a122:	f000 fb6b 	bl	800a7fc <__i2b>
 800a126:	4605      	mov	r5, r0
 800a128:	b15e      	cbz	r6, 800a142 <_dtoa_r+0x74a>
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dd08      	ble.n	800a142 <_dtoa_r+0x74a>
 800a130:	42b3      	cmp	r3, r6
 800a132:	9a08      	ldr	r2, [sp, #32]
 800a134:	bfa8      	it	ge
 800a136:	4633      	movge	r3, r6
 800a138:	eba8 0803 	sub.w	r8, r8, r3
 800a13c:	1af6      	subs	r6, r6, r3
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a144:	b1f3      	cbz	r3, 800a184 <_dtoa_r+0x78c>
 800a146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 80b7 	beq.w	800a2bc <_dtoa_r+0x8c4>
 800a14e:	b18c      	cbz	r4, 800a174 <_dtoa_r+0x77c>
 800a150:	4629      	mov	r1, r5
 800a152:	4622      	mov	r2, r4
 800a154:	4658      	mov	r0, fp
 800a156:	f000 fc11 	bl	800a97c <__pow5mult>
 800a15a:	464a      	mov	r2, r9
 800a15c:	4601      	mov	r1, r0
 800a15e:	4605      	mov	r5, r0
 800a160:	4658      	mov	r0, fp
 800a162:	f000 fb61 	bl	800a828 <__multiply>
 800a166:	4649      	mov	r1, r9
 800a168:	9004      	str	r0, [sp, #16]
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fa92 	bl	800a694 <_Bfree>
 800a170:	9b04      	ldr	r3, [sp, #16]
 800a172:	4699      	mov	r9, r3
 800a174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a176:	1b1a      	subs	r2, r3, r4
 800a178:	d004      	beq.n	800a184 <_dtoa_r+0x78c>
 800a17a:	4649      	mov	r1, r9
 800a17c:	4658      	mov	r0, fp
 800a17e:	f000 fbfd 	bl	800a97c <__pow5mult>
 800a182:	4681      	mov	r9, r0
 800a184:	2101      	movs	r1, #1
 800a186:	4658      	mov	r0, fp
 800a188:	f000 fb38 	bl	800a7fc <__i2b>
 800a18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a18e:	4604      	mov	r4, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 81cf 	beq.w	800a534 <_dtoa_r+0xb3c>
 800a196:	461a      	mov	r2, r3
 800a198:	4601      	mov	r1, r0
 800a19a:	4658      	mov	r0, fp
 800a19c:	f000 fbee 	bl	800a97c <__pow5mult>
 800a1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	f300 8095 	bgt.w	800a2d4 <_dtoa_r+0x8dc>
 800a1aa:	9b02      	ldr	r3, [sp, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f040 8087 	bne.w	800a2c0 <_dtoa_r+0x8c8>
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f040 8089 	bne.w	800a2d0 <_dtoa_r+0x8d8>
 800a1be:	9b03      	ldr	r3, [sp, #12]
 800a1c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1c4:	0d1b      	lsrs	r3, r3, #20
 800a1c6:	051b      	lsls	r3, r3, #20
 800a1c8:	b12b      	cbz	r3, 800a1d6 <_dtoa_r+0x7de>
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	9308      	str	r3, [sp, #32]
 800a1d0:	f108 0801 	add.w	r8, r8, #1
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 81b0 	beq.w	800a540 <_dtoa_r+0xb48>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1e6:	6918      	ldr	r0, [r3, #16]
 800a1e8:	f000 fabc 	bl	800a764 <__hi0bits>
 800a1ec:	f1c0 0020 	rsb	r0, r0, #32
 800a1f0:	9b08      	ldr	r3, [sp, #32]
 800a1f2:	4418      	add	r0, r3
 800a1f4:	f010 001f 	ands.w	r0, r0, #31
 800a1f8:	d077      	beq.n	800a2ea <_dtoa_r+0x8f2>
 800a1fa:	f1c0 0320 	rsb	r3, r0, #32
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	dd6b      	ble.n	800a2da <_dtoa_r+0x8e2>
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	f1c0 001c 	rsb	r0, r0, #28
 800a208:	4403      	add	r3, r0
 800a20a:	4480      	add	r8, r0
 800a20c:	4406      	add	r6, r0
 800a20e:	9308      	str	r3, [sp, #32]
 800a210:	f1b8 0f00 	cmp.w	r8, #0
 800a214:	dd05      	ble.n	800a222 <_dtoa_r+0x82a>
 800a216:	4649      	mov	r1, r9
 800a218:	4642      	mov	r2, r8
 800a21a:	4658      	mov	r0, fp
 800a21c:	f000 fc08 	bl	800aa30 <__lshift>
 800a220:	4681      	mov	r9, r0
 800a222:	9b08      	ldr	r3, [sp, #32]
 800a224:	2b00      	cmp	r3, #0
 800a226:	dd05      	ble.n	800a234 <_dtoa_r+0x83c>
 800a228:	4621      	mov	r1, r4
 800a22a:	461a      	mov	r2, r3
 800a22c:	4658      	mov	r0, fp
 800a22e:	f000 fbff 	bl	800aa30 <__lshift>
 800a232:	4604      	mov	r4, r0
 800a234:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a236:	2b00      	cmp	r3, #0
 800a238:	d059      	beq.n	800a2ee <_dtoa_r+0x8f6>
 800a23a:	4621      	mov	r1, r4
 800a23c:	4648      	mov	r0, r9
 800a23e:	f000 fc63 	bl	800ab08 <__mcmp>
 800a242:	2800      	cmp	r0, #0
 800a244:	da53      	bge.n	800a2ee <_dtoa_r+0x8f6>
 800a246:	1e7b      	subs	r3, r7, #1
 800a248:	9304      	str	r3, [sp, #16]
 800a24a:	4649      	mov	r1, r9
 800a24c:	2300      	movs	r3, #0
 800a24e:	220a      	movs	r2, #10
 800a250:	4658      	mov	r0, fp
 800a252:	f000 fa41 	bl	800a6d8 <__multadd>
 800a256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a258:	4681      	mov	r9, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 8172 	beq.w	800a544 <_dtoa_r+0xb4c>
 800a260:	2300      	movs	r3, #0
 800a262:	4629      	mov	r1, r5
 800a264:	220a      	movs	r2, #10
 800a266:	4658      	mov	r0, fp
 800a268:	f000 fa36 	bl	800a6d8 <__multadd>
 800a26c:	9b00      	ldr	r3, [sp, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	4605      	mov	r5, r0
 800a272:	dc67      	bgt.n	800a344 <_dtoa_r+0x94c>
 800a274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a276:	2b02      	cmp	r3, #2
 800a278:	dc41      	bgt.n	800a2fe <_dtoa_r+0x906>
 800a27a:	e063      	b.n	800a344 <_dtoa_r+0x94c>
 800a27c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a27e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a282:	e746      	b.n	800a112 <_dtoa_r+0x71a>
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	1e5c      	subs	r4, r3, #1
 800a288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a28a:	42a3      	cmp	r3, r4
 800a28c:	bfbf      	itttt	lt
 800a28e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a290:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a292:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a294:	1ae3      	sublt	r3, r4, r3
 800a296:	bfb4      	ite	lt
 800a298:	18d2      	addlt	r2, r2, r3
 800a29a:	1b1c      	subge	r4, r3, r4
 800a29c:	9b07      	ldr	r3, [sp, #28]
 800a29e:	bfbc      	itt	lt
 800a2a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a2a2:	2400      	movlt	r4, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfb5      	itete	lt
 800a2a8:	eba8 0603 	sublt.w	r6, r8, r3
 800a2ac:	9b07      	ldrge	r3, [sp, #28]
 800a2ae:	2300      	movlt	r3, #0
 800a2b0:	4646      	movge	r6, r8
 800a2b2:	e730      	b.n	800a116 <_dtoa_r+0x71e>
 800a2b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2b8:	4646      	mov	r6, r8
 800a2ba:	e735      	b.n	800a128 <_dtoa_r+0x730>
 800a2bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2be:	e75c      	b.n	800a17a <_dtoa_r+0x782>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e788      	b.n	800a1d6 <_dtoa_r+0x7de>
 800a2c4:	3fe00000 	.word	0x3fe00000
 800a2c8:	40240000 	.word	0x40240000
 800a2cc:	40140000 	.word	0x40140000
 800a2d0:	9b02      	ldr	r3, [sp, #8]
 800a2d2:	e780      	b.n	800a1d6 <_dtoa_r+0x7de>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2d8:	e782      	b.n	800a1e0 <_dtoa_r+0x7e8>
 800a2da:	d099      	beq.n	800a210 <_dtoa_r+0x818>
 800a2dc:	9a08      	ldr	r2, [sp, #32]
 800a2de:	331c      	adds	r3, #28
 800a2e0:	441a      	add	r2, r3
 800a2e2:	4498      	add	r8, r3
 800a2e4:	441e      	add	r6, r3
 800a2e6:	9208      	str	r2, [sp, #32]
 800a2e8:	e792      	b.n	800a210 <_dtoa_r+0x818>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	e7f6      	b.n	800a2dc <_dtoa_r+0x8e4>
 800a2ee:	9b07      	ldr	r3, [sp, #28]
 800a2f0:	9704      	str	r7, [sp, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	dc20      	bgt.n	800a338 <_dtoa_r+0x940>
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	dd1e      	ble.n	800a33c <_dtoa_r+0x944>
 800a2fe:	9b00      	ldr	r3, [sp, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	f47f aec0 	bne.w	800a086 <_dtoa_r+0x68e>
 800a306:	4621      	mov	r1, r4
 800a308:	2205      	movs	r2, #5
 800a30a:	4658      	mov	r0, fp
 800a30c:	f000 f9e4 	bl	800a6d8 <__multadd>
 800a310:	4601      	mov	r1, r0
 800a312:	4604      	mov	r4, r0
 800a314:	4648      	mov	r0, r9
 800a316:	f000 fbf7 	bl	800ab08 <__mcmp>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	f77f aeb3 	ble.w	800a086 <_dtoa_r+0x68e>
 800a320:	4656      	mov	r6, sl
 800a322:	2331      	movs	r3, #49	@ 0x31
 800a324:	f806 3b01 	strb.w	r3, [r6], #1
 800a328:	9b04      	ldr	r3, [sp, #16]
 800a32a:	3301      	adds	r3, #1
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	e6ae      	b.n	800a08e <_dtoa_r+0x696>
 800a330:	9c07      	ldr	r4, [sp, #28]
 800a332:	9704      	str	r7, [sp, #16]
 800a334:	4625      	mov	r5, r4
 800a336:	e7f3      	b.n	800a320 <_dtoa_r+0x928>
 800a338:	9b07      	ldr	r3, [sp, #28]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 8104 	beq.w	800a54c <_dtoa_r+0xb54>
 800a344:	2e00      	cmp	r6, #0
 800a346:	dd05      	ble.n	800a354 <_dtoa_r+0x95c>
 800a348:	4629      	mov	r1, r5
 800a34a:	4632      	mov	r2, r6
 800a34c:	4658      	mov	r0, fp
 800a34e:	f000 fb6f 	bl	800aa30 <__lshift>
 800a352:	4605      	mov	r5, r0
 800a354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a356:	2b00      	cmp	r3, #0
 800a358:	d05a      	beq.n	800a410 <_dtoa_r+0xa18>
 800a35a:	6869      	ldr	r1, [r5, #4]
 800a35c:	4658      	mov	r0, fp
 800a35e:	f000 f959 	bl	800a614 <_Balloc>
 800a362:	4606      	mov	r6, r0
 800a364:	b928      	cbnz	r0, 800a372 <_dtoa_r+0x97a>
 800a366:	4b84      	ldr	r3, [pc, #528]	@ (800a578 <_dtoa_r+0xb80>)
 800a368:	4602      	mov	r2, r0
 800a36a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a36e:	f7ff bb5a 	b.w	8009a26 <_dtoa_r+0x2e>
 800a372:	692a      	ldr	r2, [r5, #16]
 800a374:	3202      	adds	r2, #2
 800a376:	0092      	lsls	r2, r2, #2
 800a378:	f105 010c 	add.w	r1, r5, #12
 800a37c:	300c      	adds	r0, #12
 800a37e:	f7ff faa2 	bl	80098c6 <memcpy>
 800a382:	2201      	movs	r2, #1
 800a384:	4631      	mov	r1, r6
 800a386:	4658      	mov	r0, fp
 800a388:	f000 fb52 	bl	800aa30 <__lshift>
 800a38c:	f10a 0301 	add.w	r3, sl, #1
 800a390:	9307      	str	r3, [sp, #28]
 800a392:	9b00      	ldr	r3, [sp, #0]
 800a394:	4453      	add	r3, sl
 800a396:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a398:	9b02      	ldr	r3, [sp, #8]
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	462f      	mov	r7, r5
 800a3a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	9b07      	ldr	r3, [sp, #28]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	4648      	mov	r0, r9
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	f7ff fa98 	bl	80098e2 <quorem>
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	9002      	str	r0, [sp, #8]
 800a3b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3ba:	4648      	mov	r0, r9
 800a3bc:	f000 fba4 	bl	800ab08 <__mcmp>
 800a3c0:	462a      	mov	r2, r5
 800a3c2:	9008      	str	r0, [sp, #32]
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	f000 fbba 	bl	800ab40 <__mdiff>
 800a3cc:	68c2      	ldr	r2, [r0, #12]
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	bb02      	cbnz	r2, 800a414 <_dtoa_r+0xa1c>
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	4648      	mov	r0, r9
 800a3d6:	f000 fb97 	bl	800ab08 <__mcmp>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	4631      	mov	r1, r6
 800a3de:	4658      	mov	r0, fp
 800a3e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3e2:	f000 f957 	bl	800a694 <_Bfree>
 800a3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3ea:	9e07      	ldr	r6, [sp, #28]
 800a3ec:	ea43 0102 	orr.w	r1, r3, r2
 800a3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3f2:	4319      	orrs	r1, r3
 800a3f4:	d110      	bne.n	800a418 <_dtoa_r+0xa20>
 800a3f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3fa:	d029      	beq.n	800a450 <_dtoa_r+0xa58>
 800a3fc:	9b08      	ldr	r3, [sp, #32]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dd02      	ble.n	800a408 <_dtoa_r+0xa10>
 800a402:	9b02      	ldr	r3, [sp, #8]
 800a404:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a408:	9b00      	ldr	r3, [sp, #0]
 800a40a:	f883 8000 	strb.w	r8, [r3]
 800a40e:	e63f      	b.n	800a090 <_dtoa_r+0x698>
 800a410:	4628      	mov	r0, r5
 800a412:	e7bb      	b.n	800a38c <_dtoa_r+0x994>
 800a414:	2201      	movs	r2, #1
 800a416:	e7e1      	b.n	800a3dc <_dtoa_r+0x9e4>
 800a418:	9b08      	ldr	r3, [sp, #32]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	db04      	blt.n	800a428 <_dtoa_r+0xa30>
 800a41e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a420:	430b      	orrs	r3, r1
 800a422:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a424:	430b      	orrs	r3, r1
 800a426:	d120      	bne.n	800a46a <_dtoa_r+0xa72>
 800a428:	2a00      	cmp	r2, #0
 800a42a:	dded      	ble.n	800a408 <_dtoa_r+0xa10>
 800a42c:	4649      	mov	r1, r9
 800a42e:	2201      	movs	r2, #1
 800a430:	4658      	mov	r0, fp
 800a432:	f000 fafd 	bl	800aa30 <__lshift>
 800a436:	4621      	mov	r1, r4
 800a438:	4681      	mov	r9, r0
 800a43a:	f000 fb65 	bl	800ab08 <__mcmp>
 800a43e:	2800      	cmp	r0, #0
 800a440:	dc03      	bgt.n	800a44a <_dtoa_r+0xa52>
 800a442:	d1e1      	bne.n	800a408 <_dtoa_r+0xa10>
 800a444:	f018 0f01 	tst.w	r8, #1
 800a448:	d0de      	beq.n	800a408 <_dtoa_r+0xa10>
 800a44a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a44e:	d1d8      	bne.n	800a402 <_dtoa_r+0xa0a>
 800a450:	9a00      	ldr	r2, [sp, #0]
 800a452:	2339      	movs	r3, #57	@ 0x39
 800a454:	7013      	strb	r3, [r2, #0]
 800a456:	4633      	mov	r3, r6
 800a458:	461e      	mov	r6, r3
 800a45a:	3b01      	subs	r3, #1
 800a45c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a460:	2a39      	cmp	r2, #57	@ 0x39
 800a462:	d052      	beq.n	800a50a <_dtoa_r+0xb12>
 800a464:	3201      	adds	r2, #1
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	e612      	b.n	800a090 <_dtoa_r+0x698>
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	dd07      	ble.n	800a47e <_dtoa_r+0xa86>
 800a46e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a472:	d0ed      	beq.n	800a450 <_dtoa_r+0xa58>
 800a474:	9a00      	ldr	r2, [sp, #0]
 800a476:	f108 0301 	add.w	r3, r8, #1
 800a47a:	7013      	strb	r3, [r2, #0]
 800a47c:	e608      	b.n	800a090 <_dtoa_r+0x698>
 800a47e:	9b07      	ldr	r3, [sp, #28]
 800a480:	9a07      	ldr	r2, [sp, #28]
 800a482:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a488:	4293      	cmp	r3, r2
 800a48a:	d028      	beq.n	800a4de <_dtoa_r+0xae6>
 800a48c:	4649      	mov	r1, r9
 800a48e:	2300      	movs	r3, #0
 800a490:	220a      	movs	r2, #10
 800a492:	4658      	mov	r0, fp
 800a494:	f000 f920 	bl	800a6d8 <__multadd>
 800a498:	42af      	cmp	r7, r5
 800a49a:	4681      	mov	r9, r0
 800a49c:	f04f 0300 	mov.w	r3, #0
 800a4a0:	f04f 020a 	mov.w	r2, #10
 800a4a4:	4639      	mov	r1, r7
 800a4a6:	4658      	mov	r0, fp
 800a4a8:	d107      	bne.n	800a4ba <_dtoa_r+0xac2>
 800a4aa:	f000 f915 	bl	800a6d8 <__multadd>
 800a4ae:	4607      	mov	r7, r0
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	9b07      	ldr	r3, [sp, #28]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	e774      	b.n	800a3a4 <_dtoa_r+0x9ac>
 800a4ba:	f000 f90d 	bl	800a6d8 <__multadd>
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	220a      	movs	r2, #10
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	f000 f906 	bl	800a6d8 <__multadd>
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	e7f0      	b.n	800a4b2 <_dtoa_r+0xaba>
 800a4d0:	9b00      	ldr	r3, [sp, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bfcc      	ite	gt
 800a4d6:	461e      	movgt	r6, r3
 800a4d8:	2601      	movle	r6, #1
 800a4da:	4456      	add	r6, sl
 800a4dc:	2700      	movs	r7, #0
 800a4de:	4649      	mov	r1, r9
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	4658      	mov	r0, fp
 800a4e4:	f000 faa4 	bl	800aa30 <__lshift>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	4681      	mov	r9, r0
 800a4ec:	f000 fb0c 	bl	800ab08 <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	dcb0      	bgt.n	800a456 <_dtoa_r+0xa5e>
 800a4f4:	d102      	bne.n	800a4fc <_dtoa_r+0xb04>
 800a4f6:	f018 0f01 	tst.w	r8, #1
 800a4fa:	d1ac      	bne.n	800a456 <_dtoa_r+0xa5e>
 800a4fc:	4633      	mov	r3, r6
 800a4fe:	461e      	mov	r6, r3
 800a500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a504:	2a30      	cmp	r2, #48	@ 0x30
 800a506:	d0fa      	beq.n	800a4fe <_dtoa_r+0xb06>
 800a508:	e5c2      	b.n	800a090 <_dtoa_r+0x698>
 800a50a:	459a      	cmp	sl, r3
 800a50c:	d1a4      	bne.n	800a458 <_dtoa_r+0xa60>
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	3301      	adds	r3, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	2331      	movs	r3, #49	@ 0x31
 800a516:	f88a 3000 	strb.w	r3, [sl]
 800a51a:	e5b9      	b.n	800a090 <_dtoa_r+0x698>
 800a51c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a51e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a57c <_dtoa_r+0xb84>
 800a522:	b11b      	cbz	r3, 800a52c <_dtoa_r+0xb34>
 800a524:	f10a 0308 	add.w	r3, sl, #8
 800a528:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a52a:	6013      	str	r3, [r2, #0]
 800a52c:	4650      	mov	r0, sl
 800a52e:	b019      	add	sp, #100	@ 0x64
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a536:	2b01      	cmp	r3, #1
 800a538:	f77f ae37 	ble.w	800a1aa <_dtoa_r+0x7b2>
 800a53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a53e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a540:	2001      	movs	r0, #1
 800a542:	e655      	b.n	800a1f0 <_dtoa_r+0x7f8>
 800a544:	9b00      	ldr	r3, [sp, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f77f aed6 	ble.w	800a2f8 <_dtoa_r+0x900>
 800a54c:	4656      	mov	r6, sl
 800a54e:	4621      	mov	r1, r4
 800a550:	4648      	mov	r0, r9
 800a552:	f7ff f9c6 	bl	80098e2 <quorem>
 800a556:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a55a:	f806 8b01 	strb.w	r8, [r6], #1
 800a55e:	9b00      	ldr	r3, [sp, #0]
 800a560:	eba6 020a 	sub.w	r2, r6, sl
 800a564:	4293      	cmp	r3, r2
 800a566:	ddb3      	ble.n	800a4d0 <_dtoa_r+0xad8>
 800a568:	4649      	mov	r1, r9
 800a56a:	2300      	movs	r3, #0
 800a56c:	220a      	movs	r2, #10
 800a56e:	4658      	mov	r0, fp
 800a570:	f000 f8b2 	bl	800a6d8 <__multadd>
 800a574:	4681      	mov	r9, r0
 800a576:	e7ea      	b.n	800a54e <_dtoa_r+0xb56>
 800a578:	0800b53c 	.word	0x0800b53c
 800a57c:	0800b4c0 	.word	0x0800b4c0

0800a580 <_free_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4605      	mov	r5, r0
 800a584:	2900      	cmp	r1, #0
 800a586:	d041      	beq.n	800a60c <_free_r+0x8c>
 800a588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a58c:	1f0c      	subs	r4, r1, #4
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bfb8      	it	lt
 800a592:	18e4      	addlt	r4, r4, r3
 800a594:	f7fe fa9a 	bl	8008acc <__malloc_lock>
 800a598:	4a1d      	ldr	r2, [pc, #116]	@ (800a610 <_free_r+0x90>)
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	b933      	cbnz	r3, 800a5ac <_free_r+0x2c>
 800a59e:	6063      	str	r3, [r4, #4]
 800a5a0:	6014      	str	r4, [r2, #0]
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a8:	f7fe ba96 	b.w	8008ad8 <__malloc_unlock>
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	d908      	bls.n	800a5c2 <_free_r+0x42>
 800a5b0:	6820      	ldr	r0, [r4, #0]
 800a5b2:	1821      	adds	r1, r4, r0
 800a5b4:	428b      	cmp	r3, r1
 800a5b6:	bf01      	itttt	eq
 800a5b8:	6819      	ldreq	r1, [r3, #0]
 800a5ba:	685b      	ldreq	r3, [r3, #4]
 800a5bc:	1809      	addeq	r1, r1, r0
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	e7ed      	b.n	800a59e <_free_r+0x1e>
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	b10b      	cbz	r3, 800a5cc <_free_r+0x4c>
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	d9fa      	bls.n	800a5c2 <_free_r+0x42>
 800a5cc:	6811      	ldr	r1, [r2, #0]
 800a5ce:	1850      	adds	r0, r2, r1
 800a5d0:	42a0      	cmp	r0, r4
 800a5d2:	d10b      	bne.n	800a5ec <_free_r+0x6c>
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	4401      	add	r1, r0
 800a5d8:	1850      	adds	r0, r2, r1
 800a5da:	4283      	cmp	r3, r0
 800a5dc:	6011      	str	r1, [r2, #0]
 800a5de:	d1e0      	bne.n	800a5a2 <_free_r+0x22>
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	6053      	str	r3, [r2, #4]
 800a5e6:	4408      	add	r0, r1
 800a5e8:	6010      	str	r0, [r2, #0]
 800a5ea:	e7da      	b.n	800a5a2 <_free_r+0x22>
 800a5ec:	d902      	bls.n	800a5f4 <_free_r+0x74>
 800a5ee:	230c      	movs	r3, #12
 800a5f0:	602b      	str	r3, [r5, #0]
 800a5f2:	e7d6      	b.n	800a5a2 <_free_r+0x22>
 800a5f4:	6820      	ldr	r0, [r4, #0]
 800a5f6:	1821      	adds	r1, r4, r0
 800a5f8:	428b      	cmp	r3, r1
 800a5fa:	bf04      	itt	eq
 800a5fc:	6819      	ldreq	r1, [r3, #0]
 800a5fe:	685b      	ldreq	r3, [r3, #4]
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	bf04      	itt	eq
 800a604:	1809      	addeq	r1, r1, r0
 800a606:	6021      	streq	r1, [r4, #0]
 800a608:	6054      	str	r4, [r2, #4]
 800a60a:	e7ca      	b.n	800a5a2 <_free_r+0x22>
 800a60c:	bd38      	pop	{r3, r4, r5, pc}
 800a60e:	bf00      	nop
 800a610:	20004c98 	.word	0x20004c98

0800a614 <_Balloc>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	69c6      	ldr	r6, [r0, #28]
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	b976      	cbnz	r6, 800a63c <_Balloc+0x28>
 800a61e:	2010      	movs	r0, #16
 800a620:	f7fe f9a2 	bl	8008968 <malloc>
 800a624:	4602      	mov	r2, r0
 800a626:	61e0      	str	r0, [r4, #28]
 800a628:	b920      	cbnz	r0, 800a634 <_Balloc+0x20>
 800a62a:	4b18      	ldr	r3, [pc, #96]	@ (800a68c <_Balloc+0x78>)
 800a62c:	4818      	ldr	r0, [pc, #96]	@ (800a690 <_Balloc+0x7c>)
 800a62e:	216b      	movs	r1, #107	@ 0x6b
 800a630:	f000 fde4 	bl	800b1fc <__assert_func>
 800a634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a638:	6006      	str	r6, [r0, #0]
 800a63a:	60c6      	str	r6, [r0, #12]
 800a63c:	69e6      	ldr	r6, [r4, #28]
 800a63e:	68f3      	ldr	r3, [r6, #12]
 800a640:	b183      	cbz	r3, 800a664 <_Balloc+0x50>
 800a642:	69e3      	ldr	r3, [r4, #28]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a64a:	b9b8      	cbnz	r0, 800a67c <_Balloc+0x68>
 800a64c:	2101      	movs	r1, #1
 800a64e:	fa01 f605 	lsl.w	r6, r1, r5
 800a652:	1d72      	adds	r2, r6, #5
 800a654:	0092      	lsls	r2, r2, #2
 800a656:	4620      	mov	r0, r4
 800a658:	f000 fdee 	bl	800b238 <_calloc_r>
 800a65c:	b160      	cbz	r0, 800a678 <_Balloc+0x64>
 800a65e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a662:	e00e      	b.n	800a682 <_Balloc+0x6e>
 800a664:	2221      	movs	r2, #33	@ 0x21
 800a666:	2104      	movs	r1, #4
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fde5 	bl	800b238 <_calloc_r>
 800a66e:	69e3      	ldr	r3, [r4, #28]
 800a670:	60f0      	str	r0, [r6, #12]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1e4      	bne.n	800a642 <_Balloc+0x2e>
 800a678:	2000      	movs	r0, #0
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	6802      	ldr	r2, [r0, #0]
 800a67e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a682:	2300      	movs	r3, #0
 800a684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a688:	e7f7      	b.n	800a67a <_Balloc+0x66>
 800a68a:	bf00      	nop
 800a68c:	0800b4cd 	.word	0x0800b4cd
 800a690:	0800b54d 	.word	0x0800b54d

0800a694 <_Bfree>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	69c6      	ldr	r6, [r0, #28]
 800a698:	4605      	mov	r5, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	b976      	cbnz	r6, 800a6bc <_Bfree+0x28>
 800a69e:	2010      	movs	r0, #16
 800a6a0:	f7fe f962 	bl	8008968 <malloc>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	61e8      	str	r0, [r5, #28]
 800a6a8:	b920      	cbnz	r0, 800a6b4 <_Bfree+0x20>
 800a6aa:	4b09      	ldr	r3, [pc, #36]	@ (800a6d0 <_Bfree+0x3c>)
 800a6ac:	4809      	ldr	r0, [pc, #36]	@ (800a6d4 <_Bfree+0x40>)
 800a6ae:	218f      	movs	r1, #143	@ 0x8f
 800a6b0:	f000 fda4 	bl	800b1fc <__assert_func>
 800a6b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6b8:	6006      	str	r6, [r0, #0]
 800a6ba:	60c6      	str	r6, [r0, #12]
 800a6bc:	b13c      	cbz	r4, 800a6ce <_Bfree+0x3a>
 800a6be:	69eb      	ldr	r3, [r5, #28]
 800a6c0:	6862      	ldr	r2, [r4, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6c8:	6021      	str	r1, [r4, #0]
 800a6ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}
 800a6d0:	0800b4cd 	.word	0x0800b4cd
 800a6d4:	0800b54d 	.word	0x0800b54d

0800a6d8 <__multadd>:
 800a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6dc:	690d      	ldr	r5, [r1, #16]
 800a6de:	4607      	mov	r7, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	461e      	mov	r6, r3
 800a6e4:	f101 0c14 	add.w	ip, r1, #20
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a6ee:	b299      	uxth	r1, r3
 800a6f0:	fb02 6101 	mla	r1, r2, r1, r6
 800a6f4:	0c1e      	lsrs	r6, r3, #16
 800a6f6:	0c0b      	lsrs	r3, r1, #16
 800a6f8:	fb02 3306 	mla	r3, r2, r6, r3
 800a6fc:	b289      	uxth	r1, r1
 800a6fe:	3001      	adds	r0, #1
 800a700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a704:	4285      	cmp	r5, r0
 800a706:	f84c 1b04 	str.w	r1, [ip], #4
 800a70a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a70e:	dcec      	bgt.n	800a6ea <__multadd+0x12>
 800a710:	b30e      	cbz	r6, 800a756 <__multadd+0x7e>
 800a712:	68a3      	ldr	r3, [r4, #8]
 800a714:	42ab      	cmp	r3, r5
 800a716:	dc19      	bgt.n	800a74c <__multadd+0x74>
 800a718:	6861      	ldr	r1, [r4, #4]
 800a71a:	4638      	mov	r0, r7
 800a71c:	3101      	adds	r1, #1
 800a71e:	f7ff ff79 	bl	800a614 <_Balloc>
 800a722:	4680      	mov	r8, r0
 800a724:	b928      	cbnz	r0, 800a732 <__multadd+0x5a>
 800a726:	4602      	mov	r2, r0
 800a728:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <__multadd+0x84>)
 800a72a:	480d      	ldr	r0, [pc, #52]	@ (800a760 <__multadd+0x88>)
 800a72c:	21ba      	movs	r1, #186	@ 0xba
 800a72e:	f000 fd65 	bl	800b1fc <__assert_func>
 800a732:	6922      	ldr	r2, [r4, #16]
 800a734:	3202      	adds	r2, #2
 800a736:	f104 010c 	add.w	r1, r4, #12
 800a73a:	0092      	lsls	r2, r2, #2
 800a73c:	300c      	adds	r0, #12
 800a73e:	f7ff f8c2 	bl	80098c6 <memcpy>
 800a742:	4621      	mov	r1, r4
 800a744:	4638      	mov	r0, r7
 800a746:	f7ff ffa5 	bl	800a694 <_Bfree>
 800a74a:	4644      	mov	r4, r8
 800a74c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a750:	3501      	adds	r5, #1
 800a752:	615e      	str	r6, [r3, #20]
 800a754:	6125      	str	r5, [r4, #16]
 800a756:	4620      	mov	r0, r4
 800a758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a75c:	0800b53c 	.word	0x0800b53c
 800a760:	0800b54d 	.word	0x0800b54d

0800a764 <__hi0bits>:
 800a764:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a768:	4603      	mov	r3, r0
 800a76a:	bf36      	itet	cc
 800a76c:	0403      	lslcc	r3, r0, #16
 800a76e:	2000      	movcs	r0, #0
 800a770:	2010      	movcc	r0, #16
 800a772:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a776:	bf3c      	itt	cc
 800a778:	021b      	lslcc	r3, r3, #8
 800a77a:	3008      	addcc	r0, #8
 800a77c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a780:	bf3c      	itt	cc
 800a782:	011b      	lslcc	r3, r3, #4
 800a784:	3004      	addcc	r0, #4
 800a786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a78a:	bf3c      	itt	cc
 800a78c:	009b      	lslcc	r3, r3, #2
 800a78e:	3002      	addcc	r0, #2
 800a790:	2b00      	cmp	r3, #0
 800a792:	db05      	blt.n	800a7a0 <__hi0bits+0x3c>
 800a794:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a798:	f100 0001 	add.w	r0, r0, #1
 800a79c:	bf08      	it	eq
 800a79e:	2020      	moveq	r0, #32
 800a7a0:	4770      	bx	lr

0800a7a2 <__lo0bits>:
 800a7a2:	6803      	ldr	r3, [r0, #0]
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	f013 0007 	ands.w	r0, r3, #7
 800a7aa:	d00b      	beq.n	800a7c4 <__lo0bits+0x22>
 800a7ac:	07d9      	lsls	r1, r3, #31
 800a7ae:	d421      	bmi.n	800a7f4 <__lo0bits+0x52>
 800a7b0:	0798      	lsls	r0, r3, #30
 800a7b2:	bf49      	itett	mi
 800a7b4:	085b      	lsrmi	r3, r3, #1
 800a7b6:	089b      	lsrpl	r3, r3, #2
 800a7b8:	2001      	movmi	r0, #1
 800a7ba:	6013      	strmi	r3, [r2, #0]
 800a7bc:	bf5c      	itt	pl
 800a7be:	6013      	strpl	r3, [r2, #0]
 800a7c0:	2002      	movpl	r0, #2
 800a7c2:	4770      	bx	lr
 800a7c4:	b299      	uxth	r1, r3
 800a7c6:	b909      	cbnz	r1, 800a7cc <__lo0bits+0x2a>
 800a7c8:	0c1b      	lsrs	r3, r3, #16
 800a7ca:	2010      	movs	r0, #16
 800a7cc:	b2d9      	uxtb	r1, r3
 800a7ce:	b909      	cbnz	r1, 800a7d4 <__lo0bits+0x32>
 800a7d0:	3008      	adds	r0, #8
 800a7d2:	0a1b      	lsrs	r3, r3, #8
 800a7d4:	0719      	lsls	r1, r3, #28
 800a7d6:	bf04      	itt	eq
 800a7d8:	091b      	lsreq	r3, r3, #4
 800a7da:	3004      	addeq	r0, #4
 800a7dc:	0799      	lsls	r1, r3, #30
 800a7de:	bf04      	itt	eq
 800a7e0:	089b      	lsreq	r3, r3, #2
 800a7e2:	3002      	addeq	r0, #2
 800a7e4:	07d9      	lsls	r1, r3, #31
 800a7e6:	d403      	bmi.n	800a7f0 <__lo0bits+0x4e>
 800a7e8:	085b      	lsrs	r3, r3, #1
 800a7ea:	f100 0001 	add.w	r0, r0, #1
 800a7ee:	d003      	beq.n	800a7f8 <__lo0bits+0x56>
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	4770      	bx	lr
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	4770      	bx	lr
 800a7f8:	2020      	movs	r0, #32
 800a7fa:	4770      	bx	lr

0800a7fc <__i2b>:
 800a7fc:	b510      	push	{r4, lr}
 800a7fe:	460c      	mov	r4, r1
 800a800:	2101      	movs	r1, #1
 800a802:	f7ff ff07 	bl	800a614 <_Balloc>
 800a806:	4602      	mov	r2, r0
 800a808:	b928      	cbnz	r0, 800a816 <__i2b+0x1a>
 800a80a:	4b05      	ldr	r3, [pc, #20]	@ (800a820 <__i2b+0x24>)
 800a80c:	4805      	ldr	r0, [pc, #20]	@ (800a824 <__i2b+0x28>)
 800a80e:	f240 1145 	movw	r1, #325	@ 0x145
 800a812:	f000 fcf3 	bl	800b1fc <__assert_func>
 800a816:	2301      	movs	r3, #1
 800a818:	6144      	str	r4, [r0, #20]
 800a81a:	6103      	str	r3, [r0, #16]
 800a81c:	bd10      	pop	{r4, pc}
 800a81e:	bf00      	nop
 800a820:	0800b53c 	.word	0x0800b53c
 800a824:	0800b54d 	.word	0x0800b54d

0800a828 <__multiply>:
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	4614      	mov	r4, r2
 800a82e:	690a      	ldr	r2, [r1, #16]
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	429a      	cmp	r2, r3
 800a834:	bfa8      	it	ge
 800a836:	4623      	movge	r3, r4
 800a838:	460f      	mov	r7, r1
 800a83a:	bfa4      	itt	ge
 800a83c:	460c      	movge	r4, r1
 800a83e:	461f      	movge	r7, r3
 800a840:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a844:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a848:	68a3      	ldr	r3, [r4, #8]
 800a84a:	6861      	ldr	r1, [r4, #4]
 800a84c:	eb0a 0609 	add.w	r6, sl, r9
 800a850:	42b3      	cmp	r3, r6
 800a852:	b085      	sub	sp, #20
 800a854:	bfb8      	it	lt
 800a856:	3101      	addlt	r1, #1
 800a858:	f7ff fedc 	bl	800a614 <_Balloc>
 800a85c:	b930      	cbnz	r0, 800a86c <__multiply+0x44>
 800a85e:	4602      	mov	r2, r0
 800a860:	4b44      	ldr	r3, [pc, #272]	@ (800a974 <__multiply+0x14c>)
 800a862:	4845      	ldr	r0, [pc, #276]	@ (800a978 <__multiply+0x150>)
 800a864:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a868:	f000 fcc8 	bl	800b1fc <__assert_func>
 800a86c:	f100 0514 	add.w	r5, r0, #20
 800a870:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a874:	462b      	mov	r3, r5
 800a876:	2200      	movs	r2, #0
 800a878:	4543      	cmp	r3, r8
 800a87a:	d321      	bcc.n	800a8c0 <__multiply+0x98>
 800a87c:	f107 0114 	add.w	r1, r7, #20
 800a880:	f104 0214 	add.w	r2, r4, #20
 800a884:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a888:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a88c:	9302      	str	r3, [sp, #8]
 800a88e:	1b13      	subs	r3, r2, r4
 800a890:	3b15      	subs	r3, #21
 800a892:	f023 0303 	bic.w	r3, r3, #3
 800a896:	3304      	adds	r3, #4
 800a898:	f104 0715 	add.w	r7, r4, #21
 800a89c:	42ba      	cmp	r2, r7
 800a89e:	bf38      	it	cc
 800a8a0:	2304      	movcc	r3, #4
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	9b02      	ldr	r3, [sp, #8]
 800a8a6:	9103      	str	r1, [sp, #12]
 800a8a8:	428b      	cmp	r3, r1
 800a8aa:	d80c      	bhi.n	800a8c6 <__multiply+0x9e>
 800a8ac:	2e00      	cmp	r6, #0
 800a8ae:	dd03      	ble.n	800a8b8 <__multiply+0x90>
 800a8b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d05b      	beq.n	800a970 <__multiply+0x148>
 800a8b8:	6106      	str	r6, [r0, #16]
 800a8ba:	b005      	add	sp, #20
 800a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c0:	f843 2b04 	str.w	r2, [r3], #4
 800a8c4:	e7d8      	b.n	800a878 <__multiply+0x50>
 800a8c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a8ca:	f1ba 0f00 	cmp.w	sl, #0
 800a8ce:	d024      	beq.n	800a91a <__multiply+0xf2>
 800a8d0:	f104 0e14 	add.w	lr, r4, #20
 800a8d4:	46a9      	mov	r9, r5
 800a8d6:	f04f 0c00 	mov.w	ip, #0
 800a8da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8de:	f8d9 3000 	ldr.w	r3, [r9]
 800a8e2:	fa1f fb87 	uxth.w	fp, r7
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a8ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a8f0:	f8d9 7000 	ldr.w	r7, [r9]
 800a8f4:	4463      	add	r3, ip
 800a8f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a8fa:	fb0a c70b 	mla	r7, sl, fp, ip
 800a8fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a902:	b29b      	uxth	r3, r3
 800a904:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a908:	4572      	cmp	r2, lr
 800a90a:	f849 3b04 	str.w	r3, [r9], #4
 800a90e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a912:	d8e2      	bhi.n	800a8da <__multiply+0xb2>
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	f845 c003 	str.w	ip, [r5, r3]
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a920:	3104      	adds	r1, #4
 800a922:	f1b9 0f00 	cmp.w	r9, #0
 800a926:	d021      	beq.n	800a96c <__multiply+0x144>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	f104 0c14 	add.w	ip, r4, #20
 800a92e:	46ae      	mov	lr, r5
 800a930:	f04f 0a00 	mov.w	sl, #0
 800a934:	f8bc b000 	ldrh.w	fp, [ip]
 800a938:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a93c:	fb09 770b 	mla	r7, r9, fp, r7
 800a940:	4457      	add	r7, sl
 800a942:	b29b      	uxth	r3, r3
 800a944:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a948:	f84e 3b04 	str.w	r3, [lr], #4
 800a94c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a950:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a954:	f8be 3000 	ldrh.w	r3, [lr]
 800a958:	fb09 330a 	mla	r3, r9, sl, r3
 800a95c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a960:	4562      	cmp	r2, ip
 800a962:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a966:	d8e5      	bhi.n	800a934 <__multiply+0x10c>
 800a968:	9f01      	ldr	r7, [sp, #4]
 800a96a:	51eb      	str	r3, [r5, r7]
 800a96c:	3504      	adds	r5, #4
 800a96e:	e799      	b.n	800a8a4 <__multiply+0x7c>
 800a970:	3e01      	subs	r6, #1
 800a972:	e79b      	b.n	800a8ac <__multiply+0x84>
 800a974:	0800b53c 	.word	0x0800b53c
 800a978:	0800b54d 	.word	0x0800b54d

0800a97c <__pow5mult>:
 800a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a980:	4615      	mov	r5, r2
 800a982:	f012 0203 	ands.w	r2, r2, #3
 800a986:	4607      	mov	r7, r0
 800a988:	460e      	mov	r6, r1
 800a98a:	d007      	beq.n	800a99c <__pow5mult+0x20>
 800a98c:	4c25      	ldr	r4, [pc, #148]	@ (800aa24 <__pow5mult+0xa8>)
 800a98e:	3a01      	subs	r2, #1
 800a990:	2300      	movs	r3, #0
 800a992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a996:	f7ff fe9f 	bl	800a6d8 <__multadd>
 800a99a:	4606      	mov	r6, r0
 800a99c:	10ad      	asrs	r5, r5, #2
 800a99e:	d03d      	beq.n	800aa1c <__pow5mult+0xa0>
 800a9a0:	69fc      	ldr	r4, [r7, #28]
 800a9a2:	b97c      	cbnz	r4, 800a9c4 <__pow5mult+0x48>
 800a9a4:	2010      	movs	r0, #16
 800a9a6:	f7fd ffdf 	bl	8008968 <malloc>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	61f8      	str	r0, [r7, #28]
 800a9ae:	b928      	cbnz	r0, 800a9bc <__pow5mult+0x40>
 800a9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa28 <__pow5mult+0xac>)
 800a9b2:	481e      	ldr	r0, [pc, #120]	@ (800aa2c <__pow5mult+0xb0>)
 800a9b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a9b8:	f000 fc20 	bl	800b1fc <__assert_func>
 800a9bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9c0:	6004      	str	r4, [r0, #0]
 800a9c2:	60c4      	str	r4, [r0, #12]
 800a9c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9cc:	b94c      	cbnz	r4, 800a9e2 <__pow5mult+0x66>
 800a9ce:	f240 2171 	movw	r1, #625	@ 0x271
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	f7ff ff12 	bl	800a7fc <__i2b>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9de:	4604      	mov	r4, r0
 800a9e0:	6003      	str	r3, [r0, #0]
 800a9e2:	f04f 0900 	mov.w	r9, #0
 800a9e6:	07eb      	lsls	r3, r5, #31
 800a9e8:	d50a      	bpl.n	800aa00 <__pow5mult+0x84>
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	f7ff ff1a 	bl	800a828 <__multiply>
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	f7ff fe4b 	bl	800a694 <_Bfree>
 800a9fe:	4646      	mov	r6, r8
 800aa00:	106d      	asrs	r5, r5, #1
 800aa02:	d00b      	beq.n	800aa1c <__pow5mult+0xa0>
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	b938      	cbnz	r0, 800aa18 <__pow5mult+0x9c>
 800aa08:	4622      	mov	r2, r4
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	f7ff ff0b 	bl	800a828 <__multiply>
 800aa12:	6020      	str	r0, [r4, #0]
 800aa14:	f8c0 9000 	str.w	r9, [r0]
 800aa18:	4604      	mov	r4, r0
 800aa1a:	e7e4      	b.n	800a9e6 <__pow5mult+0x6a>
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa22:	bf00      	nop
 800aa24:	0800b5a8 	.word	0x0800b5a8
 800aa28:	0800b4cd 	.word	0x0800b4cd
 800aa2c:	0800b54d 	.word	0x0800b54d

0800aa30 <__lshift>:
 800aa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa34:	460c      	mov	r4, r1
 800aa36:	6849      	ldr	r1, [r1, #4]
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa3e:	68a3      	ldr	r3, [r4, #8]
 800aa40:	4607      	mov	r7, r0
 800aa42:	4691      	mov	r9, r2
 800aa44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa48:	f108 0601 	add.w	r6, r8, #1
 800aa4c:	42b3      	cmp	r3, r6
 800aa4e:	db0b      	blt.n	800aa68 <__lshift+0x38>
 800aa50:	4638      	mov	r0, r7
 800aa52:	f7ff fddf 	bl	800a614 <_Balloc>
 800aa56:	4605      	mov	r5, r0
 800aa58:	b948      	cbnz	r0, 800aa6e <__lshift+0x3e>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	4b28      	ldr	r3, [pc, #160]	@ (800ab00 <__lshift+0xd0>)
 800aa5e:	4829      	ldr	r0, [pc, #164]	@ (800ab04 <__lshift+0xd4>)
 800aa60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa64:	f000 fbca 	bl	800b1fc <__assert_func>
 800aa68:	3101      	adds	r1, #1
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	e7ee      	b.n	800aa4c <__lshift+0x1c>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f100 0114 	add.w	r1, r0, #20
 800aa74:	f100 0210 	add.w	r2, r0, #16
 800aa78:	4618      	mov	r0, r3
 800aa7a:	4553      	cmp	r3, sl
 800aa7c:	db33      	blt.n	800aae6 <__lshift+0xb6>
 800aa7e:	6920      	ldr	r0, [r4, #16]
 800aa80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa84:	f104 0314 	add.w	r3, r4, #20
 800aa88:	f019 091f 	ands.w	r9, r9, #31
 800aa8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa94:	d02b      	beq.n	800aaee <__lshift+0xbe>
 800aa96:	f1c9 0e20 	rsb	lr, r9, #32
 800aa9a:	468a      	mov	sl, r1
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	6818      	ldr	r0, [r3, #0]
 800aaa0:	fa00 f009 	lsl.w	r0, r0, r9
 800aaa4:	4310      	orrs	r0, r2
 800aaa6:	f84a 0b04 	str.w	r0, [sl], #4
 800aaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaae:	459c      	cmp	ip, r3
 800aab0:	fa22 f20e 	lsr.w	r2, r2, lr
 800aab4:	d8f3      	bhi.n	800aa9e <__lshift+0x6e>
 800aab6:	ebac 0304 	sub.w	r3, ip, r4
 800aaba:	3b15      	subs	r3, #21
 800aabc:	f023 0303 	bic.w	r3, r3, #3
 800aac0:	3304      	adds	r3, #4
 800aac2:	f104 0015 	add.w	r0, r4, #21
 800aac6:	4584      	cmp	ip, r0
 800aac8:	bf38      	it	cc
 800aaca:	2304      	movcc	r3, #4
 800aacc:	50ca      	str	r2, [r1, r3]
 800aace:	b10a      	cbz	r2, 800aad4 <__lshift+0xa4>
 800aad0:	f108 0602 	add.w	r6, r8, #2
 800aad4:	3e01      	subs	r6, #1
 800aad6:	4638      	mov	r0, r7
 800aad8:	612e      	str	r6, [r5, #16]
 800aada:	4621      	mov	r1, r4
 800aadc:	f7ff fdda 	bl	800a694 <_Bfree>
 800aae0:	4628      	mov	r0, r5
 800aae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae6:	f842 0f04 	str.w	r0, [r2, #4]!
 800aaea:	3301      	adds	r3, #1
 800aaec:	e7c5      	b.n	800aa7a <__lshift+0x4a>
 800aaee:	3904      	subs	r1, #4
 800aaf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaf8:	459c      	cmp	ip, r3
 800aafa:	d8f9      	bhi.n	800aaf0 <__lshift+0xc0>
 800aafc:	e7ea      	b.n	800aad4 <__lshift+0xa4>
 800aafe:	bf00      	nop
 800ab00:	0800b53c 	.word	0x0800b53c
 800ab04:	0800b54d 	.word	0x0800b54d

0800ab08 <__mcmp>:
 800ab08:	690a      	ldr	r2, [r1, #16]
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6900      	ldr	r0, [r0, #16]
 800ab0e:	1a80      	subs	r0, r0, r2
 800ab10:	b530      	push	{r4, r5, lr}
 800ab12:	d10e      	bne.n	800ab32 <__mcmp+0x2a>
 800ab14:	3314      	adds	r3, #20
 800ab16:	3114      	adds	r1, #20
 800ab18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab28:	4295      	cmp	r5, r2
 800ab2a:	d003      	beq.n	800ab34 <__mcmp+0x2c>
 800ab2c:	d205      	bcs.n	800ab3a <__mcmp+0x32>
 800ab2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab32:	bd30      	pop	{r4, r5, pc}
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	d3f3      	bcc.n	800ab20 <__mcmp+0x18>
 800ab38:	e7fb      	b.n	800ab32 <__mcmp+0x2a>
 800ab3a:	2001      	movs	r0, #1
 800ab3c:	e7f9      	b.n	800ab32 <__mcmp+0x2a>
	...

0800ab40 <__mdiff>:
 800ab40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	4689      	mov	r9, r1
 800ab46:	4606      	mov	r6, r0
 800ab48:	4611      	mov	r1, r2
 800ab4a:	4648      	mov	r0, r9
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	f7ff ffdb 	bl	800ab08 <__mcmp>
 800ab52:	1e05      	subs	r5, r0, #0
 800ab54:	d112      	bne.n	800ab7c <__mdiff+0x3c>
 800ab56:	4629      	mov	r1, r5
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff fd5b 	bl	800a614 <_Balloc>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	b928      	cbnz	r0, 800ab6e <__mdiff+0x2e>
 800ab62:	4b3f      	ldr	r3, [pc, #252]	@ (800ac60 <__mdiff+0x120>)
 800ab64:	f240 2137 	movw	r1, #567	@ 0x237
 800ab68:	483e      	ldr	r0, [pc, #248]	@ (800ac64 <__mdiff+0x124>)
 800ab6a:	f000 fb47 	bl	800b1fc <__assert_func>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab74:	4610      	mov	r0, r2
 800ab76:	b003      	add	sp, #12
 800ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7c:	bfbc      	itt	lt
 800ab7e:	464b      	movlt	r3, r9
 800ab80:	46a1      	movlt	r9, r4
 800ab82:	4630      	mov	r0, r6
 800ab84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab88:	bfba      	itte	lt
 800ab8a:	461c      	movlt	r4, r3
 800ab8c:	2501      	movlt	r5, #1
 800ab8e:	2500      	movge	r5, #0
 800ab90:	f7ff fd40 	bl	800a614 <_Balloc>
 800ab94:	4602      	mov	r2, r0
 800ab96:	b918      	cbnz	r0, 800aba0 <__mdiff+0x60>
 800ab98:	4b31      	ldr	r3, [pc, #196]	@ (800ac60 <__mdiff+0x120>)
 800ab9a:	f240 2145 	movw	r1, #581	@ 0x245
 800ab9e:	e7e3      	b.n	800ab68 <__mdiff+0x28>
 800aba0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aba4:	6926      	ldr	r6, [r4, #16]
 800aba6:	60c5      	str	r5, [r0, #12]
 800aba8:	f109 0310 	add.w	r3, r9, #16
 800abac:	f109 0514 	add.w	r5, r9, #20
 800abb0:	f104 0e14 	add.w	lr, r4, #20
 800abb4:	f100 0b14 	add.w	fp, r0, #20
 800abb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abc0:	9301      	str	r3, [sp, #4]
 800abc2:	46d9      	mov	r9, fp
 800abc4:	f04f 0c00 	mov.w	ip, #0
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800abce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	fa1f f38a 	uxth.w	r3, sl
 800abd8:	4619      	mov	r1, r3
 800abda:	b283      	uxth	r3, r0
 800abdc:	1acb      	subs	r3, r1, r3
 800abde:	0c00      	lsrs	r0, r0, #16
 800abe0:	4463      	add	r3, ip
 800abe2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800abe6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800abea:	b29b      	uxth	r3, r3
 800abec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800abf0:	4576      	cmp	r6, lr
 800abf2:	f849 3b04 	str.w	r3, [r9], #4
 800abf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abfa:	d8e5      	bhi.n	800abc8 <__mdiff+0x88>
 800abfc:	1b33      	subs	r3, r6, r4
 800abfe:	3b15      	subs	r3, #21
 800ac00:	f023 0303 	bic.w	r3, r3, #3
 800ac04:	3415      	adds	r4, #21
 800ac06:	3304      	adds	r3, #4
 800ac08:	42a6      	cmp	r6, r4
 800ac0a:	bf38      	it	cc
 800ac0c:	2304      	movcc	r3, #4
 800ac0e:	441d      	add	r5, r3
 800ac10:	445b      	add	r3, fp
 800ac12:	461e      	mov	r6, r3
 800ac14:	462c      	mov	r4, r5
 800ac16:	4544      	cmp	r4, r8
 800ac18:	d30e      	bcc.n	800ac38 <__mdiff+0xf8>
 800ac1a:	f108 0103 	add.w	r1, r8, #3
 800ac1e:	1b49      	subs	r1, r1, r5
 800ac20:	f021 0103 	bic.w	r1, r1, #3
 800ac24:	3d03      	subs	r5, #3
 800ac26:	45a8      	cmp	r8, r5
 800ac28:	bf38      	it	cc
 800ac2a:	2100      	movcc	r1, #0
 800ac2c:	440b      	add	r3, r1
 800ac2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac32:	b191      	cbz	r1, 800ac5a <__mdiff+0x11a>
 800ac34:	6117      	str	r7, [r2, #16]
 800ac36:	e79d      	b.n	800ab74 <__mdiff+0x34>
 800ac38:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac3c:	46e6      	mov	lr, ip
 800ac3e:	0c08      	lsrs	r0, r1, #16
 800ac40:	fa1c fc81 	uxtah	ip, ip, r1
 800ac44:	4471      	add	r1, lr
 800ac46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac4a:	b289      	uxth	r1, r1
 800ac4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac50:	f846 1b04 	str.w	r1, [r6], #4
 800ac54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac58:	e7dd      	b.n	800ac16 <__mdiff+0xd6>
 800ac5a:	3f01      	subs	r7, #1
 800ac5c:	e7e7      	b.n	800ac2e <__mdiff+0xee>
 800ac5e:	bf00      	nop
 800ac60:	0800b53c 	.word	0x0800b53c
 800ac64:	0800b54d 	.word	0x0800b54d

0800ac68 <__d2b>:
 800ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	2101      	movs	r1, #1
 800ac70:	ec59 8b10 	vmov	r8, r9, d0
 800ac74:	4616      	mov	r6, r2
 800ac76:	f7ff fccd 	bl	800a614 <_Balloc>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	b930      	cbnz	r0, 800ac8c <__d2b+0x24>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	4b23      	ldr	r3, [pc, #140]	@ (800ad10 <__d2b+0xa8>)
 800ac82:	4824      	ldr	r0, [pc, #144]	@ (800ad14 <__d2b+0xac>)
 800ac84:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac88:	f000 fab8 	bl	800b1fc <__assert_func>
 800ac8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac94:	b10d      	cbz	r5, 800ac9a <__d2b+0x32>
 800ac96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	f1b8 0300 	subs.w	r3, r8, #0
 800aca0:	d023      	beq.n	800acea <__d2b+0x82>
 800aca2:	4668      	mov	r0, sp
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	f7ff fd7c 	bl	800a7a2 <__lo0bits>
 800acaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acae:	b1d0      	cbz	r0, 800ace6 <__d2b+0x7e>
 800acb0:	f1c0 0320 	rsb	r3, r0, #32
 800acb4:	fa02 f303 	lsl.w	r3, r2, r3
 800acb8:	430b      	orrs	r3, r1
 800acba:	40c2      	lsrs	r2, r0
 800acbc:	6163      	str	r3, [r4, #20]
 800acbe:	9201      	str	r2, [sp, #4]
 800acc0:	9b01      	ldr	r3, [sp, #4]
 800acc2:	61a3      	str	r3, [r4, #24]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	bf0c      	ite	eq
 800acc8:	2201      	moveq	r2, #1
 800acca:	2202      	movne	r2, #2
 800accc:	6122      	str	r2, [r4, #16]
 800acce:	b1a5      	cbz	r5, 800acfa <__d2b+0x92>
 800acd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acd4:	4405      	add	r5, r0
 800acd6:	603d      	str	r5, [r7, #0]
 800acd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acdc:	6030      	str	r0, [r6, #0]
 800acde:	4620      	mov	r0, r4
 800ace0:	b003      	add	sp, #12
 800ace2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace6:	6161      	str	r1, [r4, #20]
 800ace8:	e7ea      	b.n	800acc0 <__d2b+0x58>
 800acea:	a801      	add	r0, sp, #4
 800acec:	f7ff fd59 	bl	800a7a2 <__lo0bits>
 800acf0:	9b01      	ldr	r3, [sp, #4]
 800acf2:	6163      	str	r3, [r4, #20]
 800acf4:	3020      	adds	r0, #32
 800acf6:	2201      	movs	r2, #1
 800acf8:	e7e8      	b.n	800accc <__d2b+0x64>
 800acfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad02:	6038      	str	r0, [r7, #0]
 800ad04:	6918      	ldr	r0, [r3, #16]
 800ad06:	f7ff fd2d 	bl	800a764 <__hi0bits>
 800ad0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad0e:	e7e5      	b.n	800acdc <__d2b+0x74>
 800ad10:	0800b53c 	.word	0x0800b53c
 800ad14:	0800b54d 	.word	0x0800b54d

0800ad18 <__sfputc_r>:
 800ad18:	6893      	ldr	r3, [r2, #8]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	b410      	push	{r4}
 800ad20:	6093      	str	r3, [r2, #8]
 800ad22:	da08      	bge.n	800ad36 <__sfputc_r+0x1e>
 800ad24:	6994      	ldr	r4, [r2, #24]
 800ad26:	42a3      	cmp	r3, r4
 800ad28:	db01      	blt.n	800ad2e <__sfputc_r+0x16>
 800ad2a:	290a      	cmp	r1, #10
 800ad2c:	d103      	bne.n	800ad36 <__sfputc_r+0x1e>
 800ad2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad32:	f7fe bca4 	b.w	800967e <__swbuf_r>
 800ad36:	6813      	ldr	r3, [r2, #0]
 800ad38:	1c58      	adds	r0, r3, #1
 800ad3a:	6010      	str	r0, [r2, #0]
 800ad3c:	7019      	strb	r1, [r3, #0]
 800ad3e:	4608      	mov	r0, r1
 800ad40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <__sfputs_r>:
 800ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad48:	4606      	mov	r6, r0
 800ad4a:	460f      	mov	r7, r1
 800ad4c:	4614      	mov	r4, r2
 800ad4e:	18d5      	adds	r5, r2, r3
 800ad50:	42ac      	cmp	r4, r5
 800ad52:	d101      	bne.n	800ad58 <__sfputs_r+0x12>
 800ad54:	2000      	movs	r0, #0
 800ad56:	e007      	b.n	800ad68 <__sfputs_r+0x22>
 800ad58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5c:	463a      	mov	r2, r7
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7ff ffda 	bl	800ad18 <__sfputc_r>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d1f3      	bne.n	800ad50 <__sfputs_r+0xa>
 800ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad6c <_vfiprintf_r>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	460d      	mov	r5, r1
 800ad72:	b09d      	sub	sp, #116	@ 0x74
 800ad74:	4614      	mov	r4, r2
 800ad76:	4698      	mov	r8, r3
 800ad78:	4606      	mov	r6, r0
 800ad7a:	b118      	cbz	r0, 800ad84 <_vfiprintf_r+0x18>
 800ad7c:	6a03      	ldr	r3, [r0, #32]
 800ad7e:	b90b      	cbnz	r3, 800ad84 <_vfiprintf_r+0x18>
 800ad80:	f7fe fb94 	bl	80094ac <__sinit>
 800ad84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad86:	07d9      	lsls	r1, r3, #31
 800ad88:	d405      	bmi.n	800ad96 <_vfiprintf_r+0x2a>
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	059a      	lsls	r2, r3, #22
 800ad8e:	d402      	bmi.n	800ad96 <_vfiprintf_r+0x2a>
 800ad90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad92:	f7fe fd96 	bl	80098c2 <__retarget_lock_acquire_recursive>
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	071b      	lsls	r3, r3, #28
 800ad9a:	d501      	bpl.n	800ada0 <_vfiprintf_r+0x34>
 800ad9c:	692b      	ldr	r3, [r5, #16]
 800ad9e:	b99b      	cbnz	r3, 800adc8 <_vfiprintf_r+0x5c>
 800ada0:	4629      	mov	r1, r5
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7fe fcaa 	bl	80096fc <__swsetup_r>
 800ada8:	b170      	cbz	r0, 800adc8 <_vfiprintf_r+0x5c>
 800adaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adac:	07dc      	lsls	r4, r3, #31
 800adae:	d504      	bpl.n	800adba <_vfiprintf_r+0x4e>
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	b01d      	add	sp, #116	@ 0x74
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	89ab      	ldrh	r3, [r5, #12]
 800adbc:	0598      	lsls	r0, r3, #22
 800adbe:	d4f7      	bmi.n	800adb0 <_vfiprintf_r+0x44>
 800adc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adc2:	f7fe fd7f 	bl	80098c4 <__retarget_lock_release_recursive>
 800adc6:	e7f3      	b.n	800adb0 <_vfiprintf_r+0x44>
 800adc8:	2300      	movs	r3, #0
 800adca:	9309      	str	r3, [sp, #36]	@ 0x24
 800adcc:	2320      	movs	r3, #32
 800adce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800add2:	f8cd 800c 	str.w	r8, [sp, #12]
 800add6:	2330      	movs	r3, #48	@ 0x30
 800add8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af88 <_vfiprintf_r+0x21c>
 800addc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ade0:	f04f 0901 	mov.w	r9, #1
 800ade4:	4623      	mov	r3, r4
 800ade6:	469a      	mov	sl, r3
 800ade8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adec:	b10a      	cbz	r2, 800adf2 <_vfiprintf_r+0x86>
 800adee:	2a25      	cmp	r2, #37	@ 0x25
 800adf0:	d1f9      	bne.n	800ade6 <_vfiprintf_r+0x7a>
 800adf2:	ebba 0b04 	subs.w	fp, sl, r4
 800adf6:	d00b      	beq.n	800ae10 <_vfiprintf_r+0xa4>
 800adf8:	465b      	mov	r3, fp
 800adfa:	4622      	mov	r2, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7ff ffa1 	bl	800ad46 <__sfputs_r>
 800ae04:	3001      	adds	r0, #1
 800ae06:	f000 80a7 	beq.w	800af58 <_vfiprintf_r+0x1ec>
 800ae0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae0c:	445a      	add	r2, fp
 800ae0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae10:	f89a 3000 	ldrb.w	r3, [sl]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 809f 	beq.w	800af58 <_vfiprintf_r+0x1ec>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae24:	f10a 0a01 	add.w	sl, sl, #1
 800ae28:	9304      	str	r3, [sp, #16]
 800ae2a:	9307      	str	r3, [sp, #28]
 800ae2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae30:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae32:	4654      	mov	r4, sl
 800ae34:	2205      	movs	r2, #5
 800ae36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae3a:	4853      	ldr	r0, [pc, #332]	@ (800af88 <_vfiprintf_r+0x21c>)
 800ae3c:	f7f5 f9c8 	bl	80001d0 <memchr>
 800ae40:	9a04      	ldr	r2, [sp, #16]
 800ae42:	b9d8      	cbnz	r0, 800ae7c <_vfiprintf_r+0x110>
 800ae44:	06d1      	lsls	r1, r2, #27
 800ae46:	bf44      	itt	mi
 800ae48:	2320      	movmi	r3, #32
 800ae4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae4e:	0713      	lsls	r3, r2, #28
 800ae50:	bf44      	itt	mi
 800ae52:	232b      	movmi	r3, #43	@ 0x2b
 800ae54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae58:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae5e:	d015      	beq.n	800ae8c <_vfiprintf_r+0x120>
 800ae60:	9a07      	ldr	r2, [sp, #28]
 800ae62:	4654      	mov	r4, sl
 800ae64:	2000      	movs	r0, #0
 800ae66:	f04f 0c0a 	mov.w	ip, #10
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae70:	3b30      	subs	r3, #48	@ 0x30
 800ae72:	2b09      	cmp	r3, #9
 800ae74:	d94b      	bls.n	800af0e <_vfiprintf_r+0x1a2>
 800ae76:	b1b0      	cbz	r0, 800aea6 <_vfiprintf_r+0x13a>
 800ae78:	9207      	str	r2, [sp, #28]
 800ae7a:	e014      	b.n	800aea6 <_vfiprintf_r+0x13a>
 800ae7c:	eba0 0308 	sub.w	r3, r0, r8
 800ae80:	fa09 f303 	lsl.w	r3, r9, r3
 800ae84:	4313      	orrs	r3, r2
 800ae86:	9304      	str	r3, [sp, #16]
 800ae88:	46a2      	mov	sl, r4
 800ae8a:	e7d2      	b.n	800ae32 <_vfiprintf_r+0xc6>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	1d19      	adds	r1, r3, #4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	9103      	str	r1, [sp, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfbb      	ittet	lt
 800ae98:	425b      	neglt	r3, r3
 800ae9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9e:	9307      	strge	r3, [sp, #28]
 800aea0:	9307      	strlt	r3, [sp, #28]
 800aea2:	bfb8      	it	lt
 800aea4:	9204      	strlt	r2, [sp, #16]
 800aea6:	7823      	ldrb	r3, [r4, #0]
 800aea8:	2b2e      	cmp	r3, #46	@ 0x2e
 800aeaa:	d10a      	bne.n	800aec2 <_vfiprintf_r+0x156>
 800aeac:	7863      	ldrb	r3, [r4, #1]
 800aeae:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeb0:	d132      	bne.n	800af18 <_vfiprintf_r+0x1ac>
 800aeb2:	9b03      	ldr	r3, [sp, #12]
 800aeb4:	1d1a      	adds	r2, r3, #4
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	9203      	str	r2, [sp, #12]
 800aeba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aebe:	3402      	adds	r4, #2
 800aec0:	9305      	str	r3, [sp, #20]
 800aec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af98 <_vfiprintf_r+0x22c>
 800aec6:	7821      	ldrb	r1, [r4, #0]
 800aec8:	2203      	movs	r2, #3
 800aeca:	4650      	mov	r0, sl
 800aecc:	f7f5 f980 	bl	80001d0 <memchr>
 800aed0:	b138      	cbz	r0, 800aee2 <_vfiprintf_r+0x176>
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	eba0 000a 	sub.w	r0, r0, sl
 800aed8:	2240      	movs	r2, #64	@ 0x40
 800aeda:	4082      	lsls	r2, r0
 800aedc:	4313      	orrs	r3, r2
 800aede:	3401      	adds	r4, #1
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee6:	4829      	ldr	r0, [pc, #164]	@ (800af8c <_vfiprintf_r+0x220>)
 800aee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeec:	2206      	movs	r2, #6
 800aeee:	f7f5 f96f 	bl	80001d0 <memchr>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d03f      	beq.n	800af76 <_vfiprintf_r+0x20a>
 800aef6:	4b26      	ldr	r3, [pc, #152]	@ (800af90 <_vfiprintf_r+0x224>)
 800aef8:	bb1b      	cbnz	r3, 800af42 <_vfiprintf_r+0x1d6>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	3307      	adds	r3, #7
 800aefe:	f023 0307 	bic.w	r3, r3, #7
 800af02:	3308      	adds	r3, #8
 800af04:	9303      	str	r3, [sp, #12]
 800af06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af08:	443b      	add	r3, r7
 800af0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0c:	e76a      	b.n	800ade4 <_vfiprintf_r+0x78>
 800af0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af12:	460c      	mov	r4, r1
 800af14:	2001      	movs	r0, #1
 800af16:	e7a8      	b.n	800ae6a <_vfiprintf_r+0xfe>
 800af18:	2300      	movs	r3, #0
 800af1a:	3401      	adds	r4, #1
 800af1c:	9305      	str	r3, [sp, #20]
 800af1e:	4619      	mov	r1, r3
 800af20:	f04f 0c0a 	mov.w	ip, #10
 800af24:	4620      	mov	r0, r4
 800af26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af2a:	3a30      	subs	r2, #48	@ 0x30
 800af2c:	2a09      	cmp	r2, #9
 800af2e:	d903      	bls.n	800af38 <_vfiprintf_r+0x1cc>
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0c6      	beq.n	800aec2 <_vfiprintf_r+0x156>
 800af34:	9105      	str	r1, [sp, #20]
 800af36:	e7c4      	b.n	800aec2 <_vfiprintf_r+0x156>
 800af38:	fb0c 2101 	mla	r1, ip, r1, r2
 800af3c:	4604      	mov	r4, r0
 800af3e:	2301      	movs	r3, #1
 800af40:	e7f0      	b.n	800af24 <_vfiprintf_r+0x1b8>
 800af42:	ab03      	add	r3, sp, #12
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	462a      	mov	r2, r5
 800af48:	4b12      	ldr	r3, [pc, #72]	@ (800af94 <_vfiprintf_r+0x228>)
 800af4a:	a904      	add	r1, sp, #16
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7fd fe69 	bl	8008c24 <_printf_float>
 800af52:	4607      	mov	r7, r0
 800af54:	1c78      	adds	r0, r7, #1
 800af56:	d1d6      	bne.n	800af06 <_vfiprintf_r+0x19a>
 800af58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af5a:	07d9      	lsls	r1, r3, #31
 800af5c:	d405      	bmi.n	800af6a <_vfiprintf_r+0x1fe>
 800af5e:	89ab      	ldrh	r3, [r5, #12]
 800af60:	059a      	lsls	r2, r3, #22
 800af62:	d402      	bmi.n	800af6a <_vfiprintf_r+0x1fe>
 800af64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af66:	f7fe fcad 	bl	80098c4 <__retarget_lock_release_recursive>
 800af6a:	89ab      	ldrh	r3, [r5, #12]
 800af6c:	065b      	lsls	r3, r3, #25
 800af6e:	f53f af1f 	bmi.w	800adb0 <_vfiprintf_r+0x44>
 800af72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af74:	e71e      	b.n	800adb4 <_vfiprintf_r+0x48>
 800af76:	ab03      	add	r3, sp, #12
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	462a      	mov	r2, r5
 800af7c:	4b05      	ldr	r3, [pc, #20]	@ (800af94 <_vfiprintf_r+0x228>)
 800af7e:	a904      	add	r1, sp, #16
 800af80:	4630      	mov	r0, r6
 800af82:	f7fe f8e7 	bl	8009154 <_printf_i>
 800af86:	e7e4      	b.n	800af52 <_vfiprintf_r+0x1e6>
 800af88:	0800b6a8 	.word	0x0800b6a8
 800af8c:	0800b6b2 	.word	0x0800b6b2
 800af90:	08008c25 	.word	0x08008c25
 800af94:	0800ad47 	.word	0x0800ad47
 800af98:	0800b6ae 	.word	0x0800b6ae

0800af9c <__sflush_r>:
 800af9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa4:	0716      	lsls	r6, r2, #28
 800afa6:	4605      	mov	r5, r0
 800afa8:	460c      	mov	r4, r1
 800afaa:	d454      	bmi.n	800b056 <__sflush_r+0xba>
 800afac:	684b      	ldr	r3, [r1, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dc02      	bgt.n	800afb8 <__sflush_r+0x1c>
 800afb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dd48      	ble.n	800b04a <__sflush_r+0xae>
 800afb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afba:	2e00      	cmp	r6, #0
 800afbc:	d045      	beq.n	800b04a <__sflush_r+0xae>
 800afbe:	2300      	movs	r3, #0
 800afc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afc4:	682f      	ldr	r7, [r5, #0]
 800afc6:	6a21      	ldr	r1, [r4, #32]
 800afc8:	602b      	str	r3, [r5, #0]
 800afca:	d030      	beq.n	800b02e <__sflush_r+0x92>
 800afcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	0759      	lsls	r1, r3, #29
 800afd2:	d505      	bpl.n	800afe0 <__sflush_r+0x44>
 800afd4:	6863      	ldr	r3, [r4, #4]
 800afd6:	1ad2      	subs	r2, r2, r3
 800afd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afda:	b10b      	cbz	r3, 800afe0 <__sflush_r+0x44>
 800afdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afde:	1ad2      	subs	r2, r2, r3
 800afe0:	2300      	movs	r3, #0
 800afe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afe4:	6a21      	ldr	r1, [r4, #32]
 800afe6:	4628      	mov	r0, r5
 800afe8:	47b0      	blx	r6
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	d106      	bne.n	800affe <__sflush_r+0x62>
 800aff0:	6829      	ldr	r1, [r5, #0]
 800aff2:	291d      	cmp	r1, #29
 800aff4:	d82b      	bhi.n	800b04e <__sflush_r+0xb2>
 800aff6:	4a2a      	ldr	r2, [pc, #168]	@ (800b0a0 <__sflush_r+0x104>)
 800aff8:	410a      	asrs	r2, r1
 800affa:	07d6      	lsls	r6, r2, #31
 800affc:	d427      	bmi.n	800b04e <__sflush_r+0xb2>
 800affe:	2200      	movs	r2, #0
 800b000:	6062      	str	r2, [r4, #4]
 800b002:	04d9      	lsls	r1, r3, #19
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	6022      	str	r2, [r4, #0]
 800b008:	d504      	bpl.n	800b014 <__sflush_r+0x78>
 800b00a:	1c42      	adds	r2, r0, #1
 800b00c:	d101      	bne.n	800b012 <__sflush_r+0x76>
 800b00e:	682b      	ldr	r3, [r5, #0]
 800b010:	b903      	cbnz	r3, 800b014 <__sflush_r+0x78>
 800b012:	6560      	str	r0, [r4, #84]	@ 0x54
 800b014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b016:	602f      	str	r7, [r5, #0]
 800b018:	b1b9      	cbz	r1, 800b04a <__sflush_r+0xae>
 800b01a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b01e:	4299      	cmp	r1, r3
 800b020:	d002      	beq.n	800b028 <__sflush_r+0x8c>
 800b022:	4628      	mov	r0, r5
 800b024:	f7ff faac 	bl	800a580 <_free_r>
 800b028:	2300      	movs	r3, #0
 800b02a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b02c:	e00d      	b.n	800b04a <__sflush_r+0xae>
 800b02e:	2301      	movs	r3, #1
 800b030:	4628      	mov	r0, r5
 800b032:	47b0      	blx	r6
 800b034:	4602      	mov	r2, r0
 800b036:	1c50      	adds	r0, r2, #1
 800b038:	d1c9      	bne.n	800afce <__sflush_r+0x32>
 800b03a:	682b      	ldr	r3, [r5, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0c6      	beq.n	800afce <__sflush_r+0x32>
 800b040:	2b1d      	cmp	r3, #29
 800b042:	d001      	beq.n	800b048 <__sflush_r+0xac>
 800b044:	2b16      	cmp	r3, #22
 800b046:	d11e      	bne.n	800b086 <__sflush_r+0xea>
 800b048:	602f      	str	r7, [r5, #0]
 800b04a:	2000      	movs	r0, #0
 800b04c:	e022      	b.n	800b094 <__sflush_r+0xf8>
 800b04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b052:	b21b      	sxth	r3, r3
 800b054:	e01b      	b.n	800b08e <__sflush_r+0xf2>
 800b056:	690f      	ldr	r7, [r1, #16]
 800b058:	2f00      	cmp	r7, #0
 800b05a:	d0f6      	beq.n	800b04a <__sflush_r+0xae>
 800b05c:	0793      	lsls	r3, r2, #30
 800b05e:	680e      	ldr	r6, [r1, #0]
 800b060:	bf08      	it	eq
 800b062:	694b      	ldreq	r3, [r1, #20]
 800b064:	600f      	str	r7, [r1, #0]
 800b066:	bf18      	it	ne
 800b068:	2300      	movne	r3, #0
 800b06a:	eba6 0807 	sub.w	r8, r6, r7
 800b06e:	608b      	str	r3, [r1, #8]
 800b070:	f1b8 0f00 	cmp.w	r8, #0
 800b074:	dde9      	ble.n	800b04a <__sflush_r+0xae>
 800b076:	6a21      	ldr	r1, [r4, #32]
 800b078:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b07a:	4643      	mov	r3, r8
 800b07c:	463a      	mov	r2, r7
 800b07e:	4628      	mov	r0, r5
 800b080:	47b0      	blx	r6
 800b082:	2800      	cmp	r0, #0
 800b084:	dc08      	bgt.n	800b098 <__sflush_r+0xfc>
 800b086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	f04f 30ff 	mov.w	r0, #4294967295
 800b094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b098:	4407      	add	r7, r0
 800b09a:	eba8 0800 	sub.w	r8, r8, r0
 800b09e:	e7e7      	b.n	800b070 <__sflush_r+0xd4>
 800b0a0:	dfbffffe 	.word	0xdfbffffe

0800b0a4 <_fflush_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	690b      	ldr	r3, [r1, #16]
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b913      	cbnz	r3, 800b0b4 <_fflush_r+0x10>
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	b118      	cbz	r0, 800b0be <_fflush_r+0x1a>
 800b0b6:	6a03      	ldr	r3, [r0, #32]
 800b0b8:	b90b      	cbnz	r3, 800b0be <_fflush_r+0x1a>
 800b0ba:	f7fe f9f7 	bl	80094ac <__sinit>
 800b0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0f3      	beq.n	800b0ae <_fflush_r+0xa>
 800b0c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0c8:	07d0      	lsls	r0, r2, #31
 800b0ca:	d404      	bmi.n	800b0d6 <_fflush_r+0x32>
 800b0cc:	0599      	lsls	r1, r3, #22
 800b0ce:	d402      	bmi.n	800b0d6 <_fflush_r+0x32>
 800b0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0d2:	f7fe fbf6 	bl	80098c2 <__retarget_lock_acquire_recursive>
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	4621      	mov	r1, r4
 800b0da:	f7ff ff5f 	bl	800af9c <__sflush_r>
 800b0de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0e0:	07da      	lsls	r2, r3, #31
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	d4e4      	bmi.n	800b0b0 <_fflush_r+0xc>
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	059b      	lsls	r3, r3, #22
 800b0ea:	d4e1      	bmi.n	800b0b0 <_fflush_r+0xc>
 800b0ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ee:	f7fe fbe9 	bl	80098c4 <__retarget_lock_release_recursive>
 800b0f2:	e7dd      	b.n	800b0b0 <_fflush_r+0xc>

0800b0f4 <__swhatbuf_r>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	b096      	sub	sp, #88	@ 0x58
 800b100:	4615      	mov	r5, r2
 800b102:	461e      	mov	r6, r3
 800b104:	da0d      	bge.n	800b122 <__swhatbuf_r+0x2e>
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b10c:	f04f 0100 	mov.w	r1, #0
 800b110:	bf14      	ite	ne
 800b112:	2340      	movne	r3, #64	@ 0x40
 800b114:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b118:	2000      	movs	r0, #0
 800b11a:	6031      	str	r1, [r6, #0]
 800b11c:	602b      	str	r3, [r5, #0]
 800b11e:	b016      	add	sp, #88	@ 0x58
 800b120:	bd70      	pop	{r4, r5, r6, pc}
 800b122:	466a      	mov	r2, sp
 800b124:	f000 f848 	bl	800b1b8 <_fstat_r>
 800b128:	2800      	cmp	r0, #0
 800b12a:	dbec      	blt.n	800b106 <__swhatbuf_r+0x12>
 800b12c:	9901      	ldr	r1, [sp, #4]
 800b12e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b132:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b136:	4259      	negs	r1, r3
 800b138:	4159      	adcs	r1, r3
 800b13a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b13e:	e7eb      	b.n	800b118 <__swhatbuf_r+0x24>

0800b140 <__smakebuf_r>:
 800b140:	898b      	ldrh	r3, [r1, #12]
 800b142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b144:	079d      	lsls	r5, r3, #30
 800b146:	4606      	mov	r6, r0
 800b148:	460c      	mov	r4, r1
 800b14a:	d507      	bpl.n	800b15c <__smakebuf_r+0x1c>
 800b14c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	6123      	str	r3, [r4, #16]
 800b154:	2301      	movs	r3, #1
 800b156:	6163      	str	r3, [r4, #20]
 800b158:	b003      	add	sp, #12
 800b15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b15c:	ab01      	add	r3, sp, #4
 800b15e:	466a      	mov	r2, sp
 800b160:	f7ff ffc8 	bl	800b0f4 <__swhatbuf_r>
 800b164:	9f00      	ldr	r7, [sp, #0]
 800b166:	4605      	mov	r5, r0
 800b168:	4639      	mov	r1, r7
 800b16a:	4630      	mov	r0, r6
 800b16c:	f7fd fc2e 	bl	80089cc <_malloc_r>
 800b170:	b948      	cbnz	r0, 800b186 <__smakebuf_r+0x46>
 800b172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b176:	059a      	lsls	r2, r3, #22
 800b178:	d4ee      	bmi.n	800b158 <__smakebuf_r+0x18>
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	f043 0302 	orr.w	r3, r3, #2
 800b182:	81a3      	strh	r3, [r4, #12]
 800b184:	e7e2      	b.n	800b14c <__smakebuf_r+0xc>
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	6020      	str	r0, [r4, #0]
 800b18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	9b01      	ldr	r3, [sp, #4]
 800b192:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b196:	b15b      	cbz	r3, 800b1b0 <__smakebuf_r+0x70>
 800b198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b19c:	4630      	mov	r0, r6
 800b19e:	f000 f81d 	bl	800b1dc <_isatty_r>
 800b1a2:	b128      	cbz	r0, 800b1b0 <__smakebuf_r+0x70>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	f023 0303 	bic.w	r3, r3, #3
 800b1aa:	f043 0301 	orr.w	r3, r3, #1
 800b1ae:	81a3      	strh	r3, [r4, #12]
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	431d      	orrs	r5, r3
 800b1b4:	81a5      	strh	r5, [r4, #12]
 800b1b6:	e7cf      	b.n	800b158 <__smakebuf_r+0x18>

0800b1b8 <_fstat_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d07      	ldr	r5, [pc, #28]	@ (800b1d8 <_fstat_r+0x20>)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	602b      	str	r3, [r5, #0]
 800b1c6:	f7f7 ff01 	bl	8002fcc <_fstat>
 800b1ca:	1c43      	adds	r3, r0, #1
 800b1cc:	d102      	bne.n	800b1d4 <_fstat_r+0x1c>
 800b1ce:	682b      	ldr	r3, [r5, #0]
 800b1d0:	b103      	cbz	r3, 800b1d4 <_fstat_r+0x1c>
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	bd38      	pop	{r3, r4, r5, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20004dd8 	.word	0x20004dd8

0800b1dc <_isatty_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4d06      	ldr	r5, [pc, #24]	@ (800b1f8 <_isatty_r+0x1c>)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	602b      	str	r3, [r5, #0]
 800b1e8:	f7f7 ff00 	bl	8002fec <_isatty>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_isatty_r+0x1a>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_isatty_r+0x1a>
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	20004dd8 	.word	0x20004dd8

0800b1fc <__assert_func>:
 800b1fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1fe:	4614      	mov	r4, r2
 800b200:	461a      	mov	r2, r3
 800b202:	4b09      	ldr	r3, [pc, #36]	@ (800b228 <__assert_func+0x2c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4605      	mov	r5, r0
 800b208:	68d8      	ldr	r0, [r3, #12]
 800b20a:	b954      	cbnz	r4, 800b222 <__assert_func+0x26>
 800b20c:	4b07      	ldr	r3, [pc, #28]	@ (800b22c <__assert_func+0x30>)
 800b20e:	461c      	mov	r4, r3
 800b210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b214:	9100      	str	r1, [sp, #0]
 800b216:	462b      	mov	r3, r5
 800b218:	4905      	ldr	r1, [pc, #20]	@ (800b230 <__assert_func+0x34>)
 800b21a:	f000 f841 	bl	800b2a0 <fiprintf>
 800b21e:	f000 f851 	bl	800b2c4 <abort>
 800b222:	4b04      	ldr	r3, [pc, #16]	@ (800b234 <__assert_func+0x38>)
 800b224:	e7f4      	b.n	800b210 <__assert_func+0x14>
 800b226:	bf00      	nop
 800b228:	2000001c 	.word	0x2000001c
 800b22c:	0800b6fe 	.word	0x0800b6fe
 800b230:	0800b6d0 	.word	0x0800b6d0
 800b234:	0800b6c3 	.word	0x0800b6c3

0800b238 <_calloc_r>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	fba1 5402 	umull	r5, r4, r1, r2
 800b23e:	b93c      	cbnz	r4, 800b250 <_calloc_r+0x18>
 800b240:	4629      	mov	r1, r5
 800b242:	f7fd fbc3 	bl	80089cc <_malloc_r>
 800b246:	4606      	mov	r6, r0
 800b248:	b928      	cbnz	r0, 800b256 <_calloc_r+0x1e>
 800b24a:	2600      	movs	r6, #0
 800b24c:	4630      	mov	r0, r6
 800b24e:	bd70      	pop	{r4, r5, r6, pc}
 800b250:	220c      	movs	r2, #12
 800b252:	6002      	str	r2, [r0, #0]
 800b254:	e7f9      	b.n	800b24a <_calloc_r+0x12>
 800b256:	462a      	mov	r2, r5
 800b258:	4621      	mov	r1, r4
 800b25a:	f7fe faa5 	bl	80097a8 <memset>
 800b25e:	e7f5      	b.n	800b24c <_calloc_r+0x14>

0800b260 <__ascii_mbtowc>:
 800b260:	b082      	sub	sp, #8
 800b262:	b901      	cbnz	r1, 800b266 <__ascii_mbtowc+0x6>
 800b264:	a901      	add	r1, sp, #4
 800b266:	b142      	cbz	r2, 800b27a <__ascii_mbtowc+0x1a>
 800b268:	b14b      	cbz	r3, 800b27e <__ascii_mbtowc+0x1e>
 800b26a:	7813      	ldrb	r3, [r2, #0]
 800b26c:	600b      	str	r3, [r1, #0]
 800b26e:	7812      	ldrb	r2, [r2, #0]
 800b270:	1e10      	subs	r0, r2, #0
 800b272:	bf18      	it	ne
 800b274:	2001      	movne	r0, #1
 800b276:	b002      	add	sp, #8
 800b278:	4770      	bx	lr
 800b27a:	4610      	mov	r0, r2
 800b27c:	e7fb      	b.n	800b276 <__ascii_mbtowc+0x16>
 800b27e:	f06f 0001 	mvn.w	r0, #1
 800b282:	e7f8      	b.n	800b276 <__ascii_mbtowc+0x16>

0800b284 <__ascii_wctomb>:
 800b284:	4603      	mov	r3, r0
 800b286:	4608      	mov	r0, r1
 800b288:	b141      	cbz	r1, 800b29c <__ascii_wctomb+0x18>
 800b28a:	2aff      	cmp	r2, #255	@ 0xff
 800b28c:	d904      	bls.n	800b298 <__ascii_wctomb+0x14>
 800b28e:	228a      	movs	r2, #138	@ 0x8a
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	f04f 30ff 	mov.w	r0, #4294967295
 800b296:	4770      	bx	lr
 800b298:	700a      	strb	r2, [r1, #0]
 800b29a:	2001      	movs	r0, #1
 800b29c:	4770      	bx	lr
	...

0800b2a0 <fiprintf>:
 800b2a0:	b40e      	push	{r1, r2, r3}
 800b2a2:	b503      	push	{r0, r1, lr}
 800b2a4:	4601      	mov	r1, r0
 800b2a6:	ab03      	add	r3, sp, #12
 800b2a8:	4805      	ldr	r0, [pc, #20]	@ (800b2c0 <fiprintf+0x20>)
 800b2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ae:	6800      	ldr	r0, [r0, #0]
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	f7ff fd5b 	bl	800ad6c <_vfiprintf_r>
 800b2b6:	b002      	add	sp, #8
 800b2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2bc:	b003      	add	sp, #12
 800b2be:	4770      	bx	lr
 800b2c0:	2000001c 	.word	0x2000001c

0800b2c4 <abort>:
 800b2c4:	b508      	push	{r3, lr}
 800b2c6:	2006      	movs	r0, #6
 800b2c8:	f000 f82c 	bl	800b324 <raise>
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f7f7 fe49 	bl	8002f64 <_exit>

0800b2d2 <_raise_r>:
 800b2d2:	291f      	cmp	r1, #31
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	460c      	mov	r4, r1
 800b2da:	d904      	bls.n	800b2e6 <_raise_r+0x14>
 800b2dc:	2316      	movs	r3, #22
 800b2de:	6003      	str	r3, [r0, #0]
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	bd38      	pop	{r3, r4, r5, pc}
 800b2e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b2e8:	b112      	cbz	r2, 800b2f0 <_raise_r+0x1e>
 800b2ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2ee:	b94b      	cbnz	r3, 800b304 <_raise_r+0x32>
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 f831 	bl	800b358 <_getpid_r>
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b300:	f000 b818 	b.w	800b334 <_kill_r>
 800b304:	2b01      	cmp	r3, #1
 800b306:	d00a      	beq.n	800b31e <_raise_r+0x4c>
 800b308:	1c59      	adds	r1, r3, #1
 800b30a:	d103      	bne.n	800b314 <_raise_r+0x42>
 800b30c:	2316      	movs	r3, #22
 800b30e:	6003      	str	r3, [r0, #0]
 800b310:	2001      	movs	r0, #1
 800b312:	e7e7      	b.n	800b2e4 <_raise_r+0x12>
 800b314:	2100      	movs	r1, #0
 800b316:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b31a:	4620      	mov	r0, r4
 800b31c:	4798      	blx	r3
 800b31e:	2000      	movs	r0, #0
 800b320:	e7e0      	b.n	800b2e4 <_raise_r+0x12>
	...

0800b324 <raise>:
 800b324:	4b02      	ldr	r3, [pc, #8]	@ (800b330 <raise+0xc>)
 800b326:	4601      	mov	r1, r0
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	f7ff bfd2 	b.w	800b2d2 <_raise_r>
 800b32e:	bf00      	nop
 800b330:	2000001c 	.word	0x2000001c

0800b334 <_kill_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	4d07      	ldr	r5, [pc, #28]	@ (800b354 <_kill_r+0x20>)
 800b338:	2300      	movs	r3, #0
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	4611      	mov	r1, r2
 800b340:	602b      	str	r3, [r5, #0]
 800b342:	f7f7 fdff 	bl	8002f44 <_kill>
 800b346:	1c43      	adds	r3, r0, #1
 800b348:	d102      	bne.n	800b350 <_kill_r+0x1c>
 800b34a:	682b      	ldr	r3, [r5, #0]
 800b34c:	b103      	cbz	r3, 800b350 <_kill_r+0x1c>
 800b34e:	6023      	str	r3, [r4, #0]
 800b350:	bd38      	pop	{r3, r4, r5, pc}
 800b352:	bf00      	nop
 800b354:	20004dd8 	.word	0x20004dd8

0800b358 <_getpid_r>:
 800b358:	f7f7 bdec 	b.w	8002f34 <_getpid>

0800b35c <_init>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	bf00      	nop
 800b360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b362:	bc08      	pop	{r3}
 800b364:	469e      	mov	lr, r3
 800b366:	4770      	bx	lr

0800b368 <_fini>:
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	bf00      	nop
 800b36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b36e:	bc08      	pop	{r3}
 800b370:	469e      	mov	lr, r3
 800b372:	4770      	bx	lr
